var___95__prelude = do_import("standardGrace", gracecode_standardGrace);
if (typeof gctCache !== "undefined")
  gctCache["parser"] = "classes:\nconfidential:\n auto_count\n auto_count:=(auto_count': Unknown) \u2192 Done\n blocksOK\n comment\n comment:=(comment': Unknown) \u2192 Done\n comments\n comments:=(comments': Unknown) \u2192 Done\n lastToken\n lastToken:=(lastToken': Unknown) \u2192 Done\n moduleObject\n moduleObject:=(moduleObject': Unknown) \u2192 Done\n nextToken\n noBlocks\n statementToken\n statementToken:=(statementToken': Unknown) \u2192 Done\n sym\n sym:=(sym': Unknown) \u2192 Done\n tokens\n tokens:=(tokens': Unknown) \u2192 Done\n typeRelations\n values\n values:=(values': Unknown) \u2192 Done\ndialect:\n standardGrace\nfresh-methods:\nmodules:\n ast\n collectionsPrelude\n errormessages\n fastDict\n identifierKinds\n io\n standardGrace\n sys\n unixFilePath\n util\npath:\n /Users/black/Development/mg/gracelang/minigrace/parser.grace\npublic:\n accept(1)\n acceptArgument\n acceptKeyword(1)\n acceptKeyword(1)or(1)\n acceptKeyword(1)or(1)or(1)\n block\n blockBody(1)beginningWith(1)\n blockParameter(1)\n blockParameters\n callrest(1)\n checkAnnotation(1)\n checkBadOperators\n checkBadTypeLiteral\n checkForSeparatorInInterface\n checkUnexpectedTokenAfterStatement\n checkWhereCondition\n classOrTrait(1)\n defdec\n doannotation\n dodialect\n doif\n doimport\n doobject\n doreturn\n dotrest(1)\n dotypeterm\n errorDefMissingRhs(1)\n errorDefNoExpression\n errorDefNoName\n errorDefUsesAssign(1)\n errorMissingAnnotation\n expression(1)\n expressionrest(1)recursingWith(1)blocks(1)\n findClosingBrace(2)\n findNextToken(1)\n findNextTokenIndentedAt(1)\n findNextValidToken(1)\n generic\n identifier\n inheritModifier(1)\n inheritOrUse\n interfaceLiteral\n isOnAContinationLine\n matchcase\n methodClassOrTrait\n methodDecRest(1)\n methodDeclaration(1)\n methodHeader\n methodInInterface\n methodSignature\n newIf(3)\n next\n oprec(1)\n optionalTypeAnnotation\n parenthesizedArgs(1)startingWith(1)\n parse(1)\n parseAlias(1)\n parseArgumentsFor(1)into(1)acceptBlocks(1)\n parseExclude(1)\n parseObjectConstructorBody(1)startingWith(1)after(1)\n prefixop\n pushComments\n pushIdentifier\n pushNum\n pushString\n reconcileComments\n reportBadRhs\n reportMissingArrow\n reportSyntaxError(1)before(1)\n restoreParsePosition(1)\n saveParsePosition\n separator\n sequenceConstructor\n skipSeparators\n statement\n successfulParse(1)\n term\n toprec(1)\n trycatch\n typeArg\n typeArgs\n typedec\n typeexpression\n typeexpressionrest\n typeparameters\n unsuccessfulParse(1)\n valueexpressionrest\n vardec\npublicMethodTypes:\n accept(t)\n acceptArgument\n acceptKeyword(kw)\n acceptKeyword(kw1)or(kw2)\n acceptKeyword(kw1)or(kw2)or(kw3)\n block\n blockBody(params)beginningWith(btok)\n blockParameter(params) \u2192 Boolean\n blockParameters\n callrest(acceptBlocks)\n checkAnnotation(ann)\n checkBadOperators\n checkBadTypeLiteral\n checkForSeparatorInInterface\n checkUnexpectedTokenAfterStatement\n checkWhereCondition\n classOrTrait(btok)\n defdec\n doannotation\n dodialect\n doif\n doimport\n doobject\n doreturn\n dotrest(acceptBlocks)\n dotypeterm\n errorDefMissingRhs(defTok)\n errorDefNoExpression\n errorDefNoName\n errorDefUsesAssign(defTok)\n errorMissingAnnotation\n expression(acceptBlocks)\n expressionrest(name)recursingWith(recurse)blocks(acceptBlocks)\n findClosingBrace(token, inserted)\n findNextToken(tokenMatcher)\n findNextTokenIndentedAt(tok)\n findNextValidToken(validFollowTokens)\n generic\n identifier\n inheritModifier(node)\n inheritOrUse\n interfaceLiteral\n isOnAContinationLine\n matchcase\n methodClassOrTrait\n methodDecRest(tm)\n methodDeclaration(btok)\n methodHeader\n methodInInterface\n methodSignature\n newIf(cond, thenList, elseList)\n next\n oprec(o)\n optionalTypeAnnotation\n parenthesizedArgs(part)startingWith(tok)\n parse(toks)\n parseAlias(node)\n parseArgumentsFor(meth)into(part)acceptBlocks(acceptBlocks)\n parseExclude(node)\n parseObjectConstructorBody(constructName)startingWith(btok)after(prev)\n prefixop\n pushComments\n pushIdentifier\n pushNum\n pushString\n reconcileComments\n reportBadRhs\n reportMissingArrow\n reportSyntaxError(message)before(expectedTokens)\n restoreParsePosition(saved)\n saveParsePosition\n separator\n sequenceConstructor\n skipSeparators\n statement\n successfulParse(aParsingBlock)\n term\n toprec(ops)\n trycatch\n typeArg\n typeArgs\n typedec\n typeexpression\n typeexpressionrest\n typeparameters\n unsuccessfulParse(aParsingBlock)\n valueexpressionrest\n vardec\ntypes:\n";
if (typeof originalSourceLines !== "undefined") {
  originalSourceLines["parser"] = [
    "import \"io\" as io",
    "import \"ast\" as ast",
    "import \"util\" as util",
    "import \"errormessages\" as errormessages",
    "",
    "var tokens := false",
    "var moduleObject",
    "var comments := list.empty   // so we can request `removeAt`",
    "",
    "var auto_count := 0",
    "def noBlocks = false",
    "def blocksOK = true",
    "",
    "",
    "var values := list [ ]",
    "",
    "//  The alternative definition below allows pushes and pops of `values`",
    "//  to be traced.  It can be useful for debugging the parser.",
    "//  def values = object {",
    "//      def realValues = list [ ]",
    "//      var tracing is public := false",
    "//      method push(v) {",
    "//          if (tracing) then {",
    "//              print \"pushed {v.toGrace 0} (line {v.line})\"",
    "//          }",
    "//          realValues.push(v)",
    "//      }",
    "//      method pop {",
    "//          def res = realValues.pop",
    "//          if (tracing) then {",
    "//              print \"popped {res.toGrace 0} (line {res.line})\"",
    "//          }",
    "//          res",
    "//      }",
    "//      method size { realValues.size }",
    "//      method filter(b) { realValues.filter(b) }",
    "//      method isEmpty { realValues.isEmpty }",
    "//      method last { realValues.last }",
    "//      method do(b) { realValues.do(b) }",
    "//  }",
    "",
    "// sym is a module-level field referring to the current token",
    "var sym := object {",
    "    def kind is public = \"start\"",
    "    def line is public = 0",
    "    def linePos is public = 0",
    "    def indent is public = 0",
    "    def value is public = \"\"",
    "    def size is public = 0",
    "    method ==(other) {",
    "        if (other == false) then {",
    "            false",
    "        } else {",
    "            (other.line == line) && (other.linePos == linePos)",
    "        }",
    "    }",
    "}",
    "",
    "var lastToken := sym",
    "var statementToken := lastToken     // the token starting the current statement",
    "var comment := false",
    "",
    "method next {",
    "    // Advance to the next token in the stream, assigning it to sym.",
    "    // Put the position in the input into util module variables.",
    "",
    "    if (tokens.size > 0) then {",
    "        nextToken",
    "        pushComments",
    "    } else {",
    "        errormessages.syntaxError(\"unexpectedly found the end of the input. \" ",
    "            ++ \"This is often caused by a missing '\\}'\")",
    "            atPosition(sym.line, sym.linePos)",
    "    }",
    "}",
    "",
    "method nextToken is confidential {",
    "    lastToken := sym",
    "    sym := tokens.poll",
    "    if (util.verbosity > 110) then { io.error.write \"{sym}\\n\" }",
    "    util.setPosition(sym.line, sym.linePos)",
    "}",
    "",
    "method isOnAContinationLine {",
    "    // is current token on a line that is a continuation of the previous line?",
    "    def currentLine = sym.line",
    "    var s := sym",
    "    while {s.line == currentLine} do {",
    "        if (s.hasPrev.not) then { return false }",
    "        s := s.prev",
    "        if (s.isSeparator) then { return false }",
    "    }",
    "    return true",
    "}",
    "",
    "method saveParsePosition {",
    "    def lexerState = tokens.savePosition",
    "    return [lexerState, values.size]",
    "}",
    "",
    "method restoreParsePosition(saved) {",
    "    tokens.restorePosition(saved.first)",
    "    sym := tokens.first.prev",
    "    lastToken := sym.prev",
    "    def oldValueStackSize = saved.second",
    "    if (oldValueStackSize > values.size) then {",
    "        ProgrammingError.raise \"can't restore parse position; the values stack has been popped\"",
    "    }",
    "    while {oldValueStackSize â‰  values.size} do { values.pop }",
    "}",
    "",
    "method findNextToken(tokenMatcher) {",
    "    // Search for the next token for which the given block returns true.",
    "    // Used for generating suggestions.",
    "",
    "    if (tokenMatcher.apply(sym)) then {",
    "        return sym",
    "    }",
    "    var nextTok := false",
    "    var n := sym",
    "    while {(false != n) && { false == nextTok } && { n.indent >= lastToken.indent }} do {",
    "        if (tokenMatcher.apply(n)) then {",
    "            nextTok := n",
    "        }",
    "        n := n.next",
    "    }",
    "    nextTok",
    "}",
    "",
    "method findNextTokenIndentedAt(tok) {",
    "    if (((sym.line > tok.line) && (sym.indent <= tok.indent)) || (sym.isEof)) then {",
    "        return sym",
    "    }",
    "    var nextTok := false",
    "    var n := sym",
    "    while {(false != n) && { false == nextTok }} do {",
    "        if (((n.line > tok.line) && (n.indent <= tok.indent)) || (sym.isEof)) then {",
    "            nextTok := n",
    "        }",
    "        n := n.next",
    "    }",
    "    nextTok",
    "}",
    "",
    "method findNextValidToken(validFollowTokens) {",
    "    // returns the next token in validFollowTokens, or the next token",
    "    // that could start an expression, or eof",
    "",
    "    def invalidTokens = set.withAll [\"dot\", \"comma\", \"colon\", \"rparen\", \"rbrace\",",
    "            \"rsquare\", \"arrow\", \"bind\"];  // Tokens that cannot start an expression",
    "",
    "    var candidate := sym",
    "    while {candidate.isEof.not} do {",
    "        if (validFollowTokens.contains(candidate.kind)) then {",
    "            return candidate    // candidate is a valid follow token, so return it",
    "        }",
    "        if (!invalidTokens.contains(candidate.kind)) then {",
    "            return candidate   // candidate could start an expression, so return it",
    "        }",
    "        candidate := candidate.next  // candidate is invalid, so go to the next one",
    "    }",
    "    return candidate        // candidate is eof",
    "}",
    "",
    "method findClosingBrace(token, inserted) {",
    "    // Finds the closing brace for token (that is the beginning of a control",
    "    // structure) -- an opening brace. Returns an object with two fields: found",
    "    // and tok. If a closing brace is found, found is set to true, and tok is set to",
    "    // the closing brace. Otherwise found is set to false, and tok is set to the",
    "    // token that the closing brace should appear after.",
    "",
    "    var n := sym",
    "    var numOpening := if (inserted) then {1} else {0}",
    "    var numClosing := 0",
    "    def result = object {",
    "        var found is public",
    "        var tok is public",
    "    }",
    "    // Skip all tokens on the same line first.",
    "    while {(n.isEof.not) && (n.line == token.line)} do {",
    "        if (n.isLBrace) then {",
    "            numOpening := numOpening + 1",
    "        } elseif { n.isRBrace } then {",
    "            numClosing := numClosing + 1",
    "        }",
    "        n := n.next",
    "    }",
    "    // Skip all tokens that have greater indent than the target closing brace.",
    "    while {(n.isEof.not) && (n.indent > token.indent)} do {",
    "        if (n.isLBrace) then {",
    "            numOpening := numOpening + 1",
    "        } elseif { n.isRBrace } then {",
    "            numClosing := numClosing + 1 ",
    "        }",
    "        n := n.next",
    "    }",
    "    if (n.isRBrace) then {",
    "        result.found := true",
    "        result.tok := n",
    "    } elseif {(n.prev.isRBrace) && (numOpening == numClosing)} then {",
    "        // Check that the number of opening and closing braces matches.",
    "        result.found := true",
    "        result.tok := n.prev",
    "    } else {",
    "        result.found := false",
    "        result.tok := n.prev",
    "    }",
    "    result",
    "}",
    "",
    "",
    "method accept(t) {",
    "    // True if the current token has kind t, where",
    "    // t is \"num\", \"string\", \"keyword\", etc.",
    "    sym.kind == t",
    "}",
    "",
    "method acceptKeyword (kw) {",
    "    if (sym.isKeyword.not) then { return false }",
    "    def v = sym.value",
    "    if (v == kw) then { return true }",
    "    return false",
    "}",
    "",
    "method acceptKeyword (kw1) or (kw2) {",
    "    if (sym.isKeyword.not) then { return false }",
    "    def v = sym.value",
    "    if (v == kw1) then { return true }",
    "    if (v == kw2) then { return true }",
    "    return false",
    "}",
    "",
    "method acceptKeyword (kw1) or (kw2) or (kw3) {",
    "    if (sym.isKeyword.not) then { return false }",
    "    def v = sym.value",
    "    if (v == kw1) then { return true }",
    "    if (v == kw2) then { return true }",
    "    if (v == kw3) then { return true }",
    "    return false",
    "}",
    "",
    "method skipSeparators {",
    "    while { sym.isSeparator } do { next }",
    "}",
    "",
    "method acceptArgument {",
    "    // True if the current token can start an argument to a request",
    "    if (sym.isString) then { return true }",
    "    if (sym.isNum) then { return true }",
    "    if (sym.isLBrace) then { return true }",
    "    if (sym.isLSquare) then { return true }",
    "    if (sym.isIdentifier) then {",
    "        def symValue = sym.value",
    "        return (symValue == \"true\") || (symValue == \"false\")",
    "    }",
    "    return false",
    "}",
    "",
    "method successfulParse (aParsingBlock) {",
    "    // returns true if executing aParsingBlock parses at least one value.",
    "    def sz = values.size",
    "    aParsingBlock.apply",
    "    values.size != sz",
    "}",
    "method unsuccessfulParse (aParsingBlock) {",
    "    // returns true if executing aParsingBlock fails to parse any values.",
    "    def sz = values.size",
    "    aParsingBlock.apply",
    "    values.size == sz",
    "}",
    "method pushNum {",
    "    // Push the current token onto the output stack as a number",
    "    var o := ast.numNode.new(sym.value)",
    "    values.push(o)",
    "    next",
    "    return o",
    "}",
    "",
    "method pushString {",
    "    // Push the current token onto the output stack as a string",
    "    var o := ast.stringNode.new(sym.value)",
    "    o.end := ast.line (sym.line) column (sym.endPos)",
    "    values.push(o)",
    "    next",
    "    return o",
    "}",
    "",
    "method pushIdentifier {",
    "    // Push the current token onto the output stack as an identifier.",
    "    // false means that this identifier has not yet been annotated with a dtype.",
    "    util.setPosition(sym.line, sym.linePos)",
    "    def o = if (sym.value == \"_\") then {",
    "        ast.identifierNode.wildcard(false)",
    "    } else {",
    "        ast.identifierNode.new(sym.value, false)",
    "    }",
    "    values.push(o)",
    "    next",
    "    return o",
    "}",
    "",
    "method checkAnnotation(ann) {",
    "    if (ann.isCall) then {",
    "        for (ann.parts) do {p->",
    "            for (p.args) do {a->",
    "                if ((a.isIdentifier) && {false != a.dtype}) then {",
    "                    var tok := sym",
    "                    // Look back from the current token to try and find the tokens that cause this error.",
    "                    while {tok.value != \":\"} do { tok := tok.prev }",
    "                    def suggestion = errormessages.suggestion.new",
    "                    suggestion.deleteTokenRange(tok, tok.next)leading(true)trailing(false)",
    "                    errormessages.syntaxError(\"an argument to an annotation cannot have a type.\")",
    "                          atRange(tok.line, tok.linePos, tok.next.endPos)",
    "                          withSuggestion(suggestion)",
    "                }",
    "            }",
    "        }",
    "    }",
    "    ann",
    "}",
    "method doannotation {",
    "    if (acceptKeyword \"is\" .not) then {",
    "        return false",
    "    }",
    "    next",
    "    def anns = list [ ]",
    "    if (unsuccessfulParse {expression(noBlocks)}) then {",
    "        errorMissingAnnotation",
    "    }",
    "    while {sym.isComma} do {",
    "        anns.push(checkAnnotation(values.pop))",
    "        next",
    "        if (unsuccessfulParse {expression(noBlocks)}) then {",
    "            errorMissingAnnotation",
    "        }",
    "    }",
    "    anns.push(checkAnnotation(values.pop))",
    "    anns",
    "}",
    "",
    "method errorMissingAnnotation {",
    "    def suggestions = list [ ]",
    "    var suggestion := errormessages.suggestion.new",
    "    def nextTok = findNextValidToken [\"bind\"]",
    "    if (nextTok == sym) then {",
    "        suggestion.insert(\" Â«annotationÂ»\")afterToken(lastToken)",
    "    } else {",
    "        suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«annotationÂ»\")",
    "    }",
    "    suggestions.push(suggestion)",
    "    suggestion := errormessages.suggestion.new",
    "    suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "    suggestions.push(suggestion)",
    "    errormessages.syntaxError(\"one or more annotations separated by commas must follow 'is'.\")",
    "        atRange(lastToken.line, lastToken.linePos, lastToken.endPos)",
    "        withSuggestions(suggestions)",
    "}",
    "",
    "method dotypeterm {",
    "    if (sym.isIdentifier) then {",
    "        pushIdentifier",
    "        generic",
    "        dotrest(noBlocks)",
    "    } else {",
    "        if (acceptKeyword \"interface\") then {",
    "            interfaceLiteral",
    "        }",
    "    }",
    "}",
    "",
    "method typeexpression {",
    "    var sz := values.size",
    "    if (sym.isLParen) then {",
    "        def prevStatementToken = statementToken",
    "        statementToken := sym",
    "        next",
    "        if (unsuccessfulParse {typeexpression}) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            def nextTok = findNextValidToken [\"rparen\"]",
    "            if (nextTok == sym) then {",
    "                suggestion.insert(\"Â«type expressionÂ»\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.replaceTokenRange(sym, nextTok.prev) leading (true)",
    "                    trailing(false) with \"Â«type expressionÂ»\"",
    "            }",
    "            errormessages.syntaxError \"parentheses must contain a valid type expression.\"",
    "                atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "        if (sym.kind != \"rparen\") then {",
    "            checkBadOperators",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(lastToken)",
    "            errormessages.syntaxError \"a type expression beginning with a '(' must end with a ')'.\"",
    "                atRange(lastToken.line, lastToken.linePos, lastToken.endPos)",
    "                withSuggestion(suggestion)",
    "        }",
    "        statementToken := prevStatementToken",
    "        next",
    "    } else {",
    "        dotypeterm",
    "    }",
    "    if (values.size > sz) then {",
    "        dotrest(noBlocks)",
    "        typeexpressionrest",
    "    }",
    "    // TODO: check that the expression doesn't contain requests or var references.",
    "    // This has to happen in the identifier resolution phase.",
    "}",
    "",
    "method newIf(cond, thenList, elseList) {",
    "    def thenBlock = ast.blockNode.new(sequence.empty, thenList)",
    "    def elseBlock = ast.blockNode.new(sequence.empty, elseList)",
    "    ast.ifNode.new(cond, thenBlock, elseBlock)",
    "}",
    "",
    "method reportSyntaxError(message) before (expectedTokens) {",
    "    def suggestions = list [ ]",
    "    var suggestion := errormessages.suggestion.new",
    "    def nextTok = findNextValidToken (expectedTokens)",
    "    if (nextTok == sym) then {",
    "        suggestion.insert(\" Â«expressionÂ»\")afterToken(lastToken)",
    "    } else {",
    "        suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«expressionÂ»\")",
    "    }",
    "    suggestions.push(suggestion)",
    "    suggestion := errormessages.suggestion.new",
    "    suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "    suggestions.push(suggestion)",
    "    errormessages.syntaxError(message)",
    "        atPosition(sym.line, sym.linePos)",
    "        withSuggestions(suggestions)",
    "}",
    "",
    "method reportMissingArrow {",
    "    def suggestion = errormessages.suggestion.new",
    "    if ((sym.isBind) || (sym.value == \"=\")) then {",
    "        suggestion.replaceToken(sym)with(\"->\")",
    "    } else {",
    "        suggestion.insert(\" ->\")afterToken(lastToken)",
    "    }",
    "    errormessages.syntaxError(\"in a block with parameters, the parameters must be followed by '->'\")",
    "        atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "}",
    "",
    "method reportBadRhs {",
    "    // a bind symbol := was not followed by a valid expression.",
    "",
    "    def suggestions = list [ ]",
    "    var suggestion := errormessages.suggestion.new",
    "    def nextTok = findNextValidToken [\"rbrace\"]",
    "    if (nextTok == sym) then {",
    "        suggestion.insert(\" Â«expressionÂ»\")afterToken(lastToken)",
    "    } else {",
    "        suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«expressionÂ»\")",
    "    }",
    "    suggestions.push(suggestion)",
    "    suggestion := errormessages.suggestion.new",
    "    suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "    suggestions.push(suggestion)",
    "    errormessages.syntaxError(\"a valid expression must follow ':='.\")",
    "        atPosition(sym.line, sym.linePos) withSuggestions(suggestions)",
    "}",
    "",
    "method block {",
    "    // Parses a block.  Since a block is (a) treated as a statement, and",
    "    // (b) may have statements inside, we save and restore the setting of the",
    "    // global variables relevant to the statement context.",
    "",
    "    if (sym.isLBrace) then {",
    "        def btok = sym",
    "        next",
    "        skipSeparators",
    "        def oldStatementToken = statementToken",
    "        statementToken := sym",
    "        var isMatchingBlock := false",
    "",
    "        // a block may start with or without parameters.  We assume that",
    "        // parameters are present, parse the first expression, and then check.",
    "        // If it wasn't a parameter, we back-up the parse position.",
    "        def savedPosition = saveParsePosition",
    "        def params = blockParameters",
    "        if (params.isEmpty) then {",
    "            restoreParsePosition(savedPosition)",
    "        }",
    "",
    "        def blockNode = blockBody (params) beginningWith (btok)",
    "        values.push(blockNode)",
    "        statementToken := oldStatementToken",
    "    }",
    "}",
    "",
    "method blockParameters {",
    "    // parse all the parameters of this block, and return them as a",
    "    // collection of identifier nodes.",
    "    def params = list [ ]",
    "    while {blockParameter(params)} do {",
    "        if (sym.isArrow) then {",
    "            next",
    "            skipSeparators",
    "            return params",
    "        }",
    "        if (sym.isComma) then {",
    "            next",
    "        } else {",
    "            reportMissingArrow",
    "        }",
    "    }",
    "    skipSeparators",
    "    return params",
    "}",
    "",
    "method blockParameter(params) -> Boolean {",
    "    // parse one parameter, if possible, push it onto params, and",
    "    // return true. If the next expression is not a parameter, return false.",
    "",
    "    var paramIsPattern := sym.isLParen",
    "    // Parsing the expression â€¹(a)â€º will return an identifierNodeâ€¹aâ€º .",
    "    // Checking for a paren lets us distinguish parameter from pattern.",
    "    if (successfulParse {expression(blocksOK)}) then {",
    "        if (sym.isComma || sym.isArrow || sym.isColon) then {",
    "            // we have found a parameter",
    "            var thisParam := values.pop",
    "            if (paramIsPattern || thisParam.isIdentifier.not) then {",
    "                paramIsPattern := true",
    "                thisParam := ast.identifierNode.wildcard(thisParam)",
    "                    // put the pattern in the type field",
    "            }",
    "            thisParam.isBindingOccurrence := true",
    "            if (paramIsPattern && sym.isColon) then {",
    "                reportSyntaxError(\"a block parameter that's an expression is assumed to mean \" ++",
    "                      \"_:â€¹expressionâ€º, and so cannot be followed by a colon\")",
    "                      before [\"arrow\", \"comma\"]",
    "            }",
    "            if (sym.isColon) then {",
    "                // We allow an expression for v: <PatternExpression>",
    "                next",
    "                if (successfulParse {expression(blocksOK)} .not) then {",
    "                    reportSyntaxError \"a block parameter must have a pattern or type expression after the ':'.\" before [\"arrow\", \"rbrace\"]",
    "                }",
    "                thisParam.dtype := values.pop",
    "            }",
    "            params.push(thisParam)",
    "            return true",
    "        } else {",
    "            // we just parsed the first expression in the block",
    "            return false",
    "        }",
    "    } else {",
    "        return false    // we didn't parse anything",
    "    }",
    "}",
    "",
    "method blockBody(params) beginningWith (btok) {",
    "    // returns a block AST node.  params is the list of parameters,",
    "    // which may be empty, and btok the lbrace that started the block.",
    "    // The module variable sym is the first token in the body, and lastToken",
    "    // is the preceeding lbrace that started the block, or the arrow that",
    "    // terminated the parameter list (if there was one),",
    "    // or the comment that appears after the lbrace, if there was one.",
    "",
    "    def originalValues = values",
    "    values := list []",
    "    while {sym.isRBrace.not} do {",
    "        // Take the body of the block",
    "        if (unsuccessfulParse {statement}) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert \"}\" afterToken (lastToken)",
    "            errormessages.syntaxError \"a block must end with a '}'.\"",
    "                atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "        separator",
    "    }",
    "    def etok = sym  // the closing rbrace",
    "    next",
    "    def body = values",
    "    values := originalValues",
    "    return ast.blockNode.new(params, body).setPositionFrom(btok)",
    "}",
    "",
    "",
    "// Accept an \"if\" statement. This is a special syntactic case, rather",
    "// than just a call with a multi-part method name - it might be possible",
    "// to change that and compensate later on.",
    "method doif {",
    "    if (sym.isIdentifier && (sym.value == \"if\")) then {",
    "        def btok = sym",
    "        next",
    "        def opener = if (sym.isLParen || {sym.isLBrace})",
    "                        then { sym.value } else { \"-missing-\" }",
    "        def closer = if (opener == \"(\") then { \")\" }",
    "                        elseif { opener == \"\\{\" } then { \"\\}\" }",
    "                        else { \"-nothing-\" }",
    "        if (opener == \"-missing-\") then {",
    "            def suggestion = errormessages.suggestion.new",
    "            // Look ahead for a rparen or then.",
    "            def nextTok = findNextToken { t ->",
    "                (t.line == btok.line) && ((t.isRParen) ||",
    "                    (t.isRBrace) || (t.isLBrace) ||",
    "                    ((t.isIdentifier) && (t.value == \"then\")))",
    "            }",
    "            if (false == nextTok) then {",
    "                suggestion.insert(\" (Â«conditionÂ») then \\{\")afterToken(btok)",
    "            } elseif { nextTok.isRParen } then {",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"(Â«conditionÂ»\")beforeToken(sym)",
    "                } else {",
    "                    suggestion.insert(\"(\")beforeToken(sym)",
    "                }",
    "            } elseif { nextTok.isLBrace } then {",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\" (Â«conditionÂ») then\")afterToken(btok)",
    "                } else {",
    "                    suggestion.insert(\"(\")beforeToken(sym)",
    "                    suggestion.insert(\") then\")afterToken(nextTok.prev)andTrailingSpace(true)",
    "                }",
    "            } elseif { nextTok.isIdentifier } then {",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"(Â«conditionÂ») \")beforeToken(sym)",
    "                } else {",
    "                    suggestion.insert(\"(\")beforeToken(sym)",
    "                    suggestion.insert(\")\")afterToken(nextTok.prev)andTrailingSpace(true)",
    "                }",
    "            }",
    "            errormessages.syntaxError(\"an if statement must have a condition \" ++",
    "                \"in parentheses or braces after the 'if'.\")",
    "                atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "        next",
    "        if (unsuccessfulParse {expression(blocksOK)}) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            // Look ahead for a rparen.",
    "            var nextTok := findNextToken { t -> (t.line == lastToken.line) && (t.isRParen) }",
    "            if (false == nextTok) then {",
    "                nextTok := findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ») then \\{\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)",
    "                          leading(true)trailing(false)with(\"Â«expressionÂ») then \\{\")",
    "                }",
    "                errormessages.syntaxError(\"an if statement must have a \" ++",
    "                      \"condition in parentheses or braces after the 'if'.\")",
    "                      atPosition(sym.line, sym.linePos)",
    "                      withSuggestion(suggestion)",
    "            } else {",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                    errormessages.syntaxError(\"an if statement must have a \" ++",
    "                        \"condition in parentheses or braces after the 'if'.\")",
    "                        atPosition(sym.line, sym.linePos)",
    "                        withSuggestion(suggestion)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)",
    "                        leading(false)trailing(true)with(\"Â«expressionÂ»\")",
    "                    errormessages.syntaxError(\"an if statement must have a \" ++",
    "                        \"condition in parentheses or braces after the 'if'.\")",
    "                        atRange(sym.line, sym.linePos, nextTok.linePos - 1)",
    "                        withSuggestion(suggestion)",
    "                }",
    "            }",
    "        }",
    "        if (sym.value != closer) then {",
    "            checkBadOperators",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(lastToken)",
    "            errormessages.syntaxError(\"an expression beginning with a \"++",
    "                  \"'{opener}' must end with a '{closer}'.\")",
    "                  atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                  withSuggestion(suggestion)",
    "        }",
    "        next",
    "        var cond := values.pop",
    "        var body := list []",
    "",
    "        var elseblock := list []",
    "        var curelse := elseblock",
    "            // These two variables are for else/elseif handling. An 'elseif' is",
    "            // turned into nested 'if' statements for the AST; `curelse` points",
    "            // to the most deeply-nested of those (where any eventual \"else\"",
    "            // blocks will go). `elseblock` contains the statements of the",
    "            // top-level 'else' block --- if there are any 'elseif's, that top-",
    "            // level 'else' will comprise just one statement: another if.",
    "        var v",
    "        if (sym.isIdentifier && (sym.value == \"then\")) then {",
    "            next",
    "            if (sym.kind != \"lbrace\") then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def closingBrace = findClosingBrace(btok, true)",
    "                if (closingBrace.found.not) then {",
    "                    if (closingBrace.tok == lastToken) then {",
    "                        suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"then \\{}\")",
    "                    } else {",
    "                        suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                        suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"then \\{\")",
    "                    }",
    "                } else {",
    "                    suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"then \\{\")",
    "                }",
    "                errormessages.syntaxError(\"an if statement must have a '\\{' after the 'then'.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "            }",
    "            next",
    "            while {successfulParse {statement}} do {",
    "                skipSeparators",
    "                if (values.isEmpty) then {",
    "                    ProgrammingError.raise \"values is empty.\\n  commentStack = {comments}\\nsym = {sym}\"",
    "                }",
    "                body.push(values.pop)",
    "            }",
    "            if (sym.isRBrace.not) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def closingBrace = findClosingBrace(btok, false)",
    "                if (closingBrace.found.not) then {",
    "                    if (closingBrace.tok == lastToken) then {",
    "                        suggestion.insert(\"}\")afterToken(lastToken)",
    "                    } else {",
    "                        suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                    }",
    "                }",
    "                suggestion.deleteToken(sym)",
    "                errormessages.syntaxError(\"an if statement must end with a '}'.\")atPosition(",
    "                    sym.line, sym.linePos)withSuggestion(suggestion)",
    "            }",
    "            next",
    "            var econd",
    "            var eif",
    "            var newelse",
    "            var ebody",
    "            while {sym.isIdentifier && (sym.value == \"elseif\")} do {",
    "                // Currently, the parser just accepts arbitrarily many",
    "                // \"elseifs\", turning them into ifs inside the else.",
    "                // TODO: allow blocks after elseif to contain a sequence of expressions.",
    "                statementToken := sym",
    "                next",
    "                if (sym.isLBrace.not) then {",
    "                    def suggestion = errormessages.suggestion.new",
    "                    // Look ahead for a rbrace or then.",
    "                    def nextTok = findNextToken { t ->",
    "                        (t.line == statementToken.line)",
    "                              && ((t.isRBrace || t.isLBrace)",
    "                              || (t.isIdentifier && (t.value == \"then\"))) }",
    "                    if (false == nextTok) then {",
    "                        suggestion.insert(\" \\{ Â«expressionÂ» \\} then \\{\")afterToken(statementToken)",
    "                    } elseif { nextTok.isRBrace } then {",
    "                        if (nextTok == sym) then {",
    "                            suggestion.insert(\"\\{ Â«expressionÂ» \\}\")beforeToken(sym)",
    "                        } else {",
    "                            suggestion.insert(\"\\{ \")beforeToken(sym)",
    "                        }",
    "                    } elseif { nextTok.isLBrace } then {",
    "                        if (nextTok == sym) then {",
    "                            suggestion.insert(\" \\{ Â«expressionÂ» \\} then\")afterToken(statementToken)",
    "                        } else {",
    "                            suggestion.insert(\"\\{ \")beforeToken(sym)",
    "                            suggestion.insert(\" \\} then\")afterToken(nextTok.prev)andTrailingSpace(true)",
    "                        }",
    "                    } elseif { nextTok.isIdentifier } then {",
    "                        if (nextTok == sym) then {",
    "                            suggestion.insert(\"\\{ Â«expressionÂ» \\} \")beforeToken(sym)",
    "                        } else {",
    "                            suggestion.insert(\"\\{ \")beforeToken(sym)",
    "                            suggestion.insert(\" \\}\")afterToken(nextTok.prev)andTrailingSpace(true)",
    "                        }",
    "                    }",
    "                    errormessages.syntaxError(\"an elseif statement must have a \" ++",
    "                          \"condition in braces after the 'elseif'.\")",
    "                          atPosition(sym.line, sym.linePos)",
    "                          withSuggestion(suggestion)",
    "                }",
    "                next",
    "                if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                    def suggestion = errormessages.suggestion.new",
    "                    // Look ahead for a rbrace or then.",
    "                    var nextTok := findNextToken { t ->",
    "                        (t.line == lastToken.line) && (t.isRBrace)}",
    "                    if (false == nextTok) then {",
    "                        nextTok := findNextValidToken [\"rbrace\"]",
    "                        if (nextTok == sym) then {",
    "                            suggestion.insert(\"Â«expressionÂ» \\} then \\{\")afterToken(lastToken)",
    "                        } else {",
    "                            suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ» \\} then \\{\")",
    "                        }",
    "                        errormessages.syntaxError(\"an elseif clause must have an expression in braces after the 'elseif'.\")atPosition(",
    "                            sym.line, sym.linePos)withSuggestion(suggestion)",
    "                    } else {",
    "                        if (nextTok == sym) then {",
    "                            suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                            errormessages.syntaxError(\"an elseif clause must have an expression in braces after the 'elseif'.\")atPosition(",
    "                                sym.line, sym.linePos)withSuggestion(suggestion)",
    "                        } else {",
    "                            //checkInvalidExpression",
    "                            suggestion.replaceTokenRange(sym, nextTok.prev)leading(false)trailing(true)with(\"Â«expressionÂ»\")",
    "                            errormessages.syntaxError(\"(4) an elseif statement must have an expression in braces after the 'elseif'.\")atRange(",
    "                                sym.line, sym.linePos, nextTok.linePos - 1)withSuggestion(suggestion)",
    "                        }",
    "                    }",
    "                }",
    "                if (sym.value != \"\\}\") then {",
    "                    checkBadOperators",
    "                    def suggestion = errormessages.suggestion.new",
    "                    suggestion.insert \"}\" afterToken (lastToken)",
    "                    errormessages.syntaxError(\"a condition beginning with a \" ++",
    "                        \"'\\{' must end with a '\\}'.\")",
    "                        atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                        withSuggestion(suggestion)",
    "                }",
    "                next",
    "                econd := values.pop",
    "                if (sym.isIdentifier && (sym.value == \"then\")) then {",
    "                    next",
    "                    ebody := list []",
    "                } else {",
    "                    def suggestion = errormessages.suggestion.new",
    "                    if (sym.isLBrace) then {",
    "                        def closingBrace = findClosingBrace(statementToken, false)",
    "                        if (closingBrace.found.not) then {",
    "                            if (closingBrace.tok == sym) then {",
    "                                suggestion.replaceToken(sym)leading(true)trailing(false)with(\" then \\{}\")",
    "                            } else {",
    "                                suggestion.replaceToken(sym)leading(true)trailing(false)with(\" then \\{\")",
    "                                suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                            }",
    "                        } else {",
    "                            suggestion.replaceToken(sym)leading(true)trailing(false)with(\" then \\{\")",
    "                        }",
    "                    } else {",
    "                        def closingBrace = findClosingBrace(statementToken, true)",
    "                        if (closingBrace.found.not) then {",
    "                            if (closingBrace.tok == lastToken) then {",
    "                                suggestion.insert(\" then \\{}\")afterToken(lastToken)",
    "                            } else {",
    "                                suggestion.insert(\" then \\{\")afterToken(lastToken)",
    "                                suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                            }",
    "                        } else {",
    "                            suggestion.insert(\" then \\{\")afterToken(lastToken)",
    "                        }",
    "                    }",
    "                    errormessages.syntaxError(\"an elseif clause must have 'then' after the expression in braces.\")",
    "                          atPosition(sym.line, sym.linePos)withSuggestion(suggestion)",
    "                }",
    "                if (sym.kind != \"lbrace\") then {",
    "                    def suggestion = errormessages.suggestion.new",
    "                    def closingBrace = findClosingBrace(btok, true)",
    "                    if (closingBrace.found.not) then {",
    "                        if (closingBrace.tok == lastToken) then {",
    "                            suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"then \\{}\")",
    "                        } else {",
    "                            suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                            suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"then \\{\")",
    "                        }",
    "                    } else {",
    "                        suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"then \\{\")",
    "                    }",
    "                    errormessages.syntaxError(\"an elseif clause must have a '\\{' after the 'then'.\")atPosition(",
    "                        lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "                }",
    "                next",
    "                while { sym.isRBrace.not } do {",
    "                    if (unsuccessfulParse {statement}) then {",
    "                        def suggestion = errormessages.suggestion.new",
    "                        def closingBrace = findClosingBrace(btok, false)",
    "                        if (closingBrace.found.not) then {",
    "                            if (closingBrace.tok == lastToken) then {",
    "                                suggestion.insert(\"}\")afterToken(lastToken)",
    "                            } else {",
    "                                suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                            }",
    "                        }",
    "                        suggestion.deleteToken(sym)",
    "                        errormessages.syntaxError(\"an 'elseif' clause must end with a '}'.\")atPosition(",
    "                            sym.line, sym.linePos)withSuggestion(suggestion)",
    "                    }",
    "                    separator",
    "                    v := values.pop",
    "                    ebody.push(v)",
    "                }",
    "                next",
    "                newelse := list []",
    "                eif := newIf(econd, ebody, newelse)",
    "                // Construct the inner \"if\" AST node, and then push it",
    "                // inside the current \"else\" block.",
    "                curelse.push(eif)",
    "                // Update curelse to point to the new, empty, nested",
    "                // else block.",
    "                curelse := newelse",
    "            }",
    "            if (sym.isIdentifier && (sym.value == \"else\")) then {",
    "                next",
    "                if (sym.isLBrace.not) then {",
    "                    def suggestion = errormessages.suggestion.new",
    "                    def closingBrace = findClosingBrace(btok, true)",
    "                    if (closingBrace.found.not) then {",
    "                        if (closingBrace.tok == lastToken) then {",
    "                            suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"else \\{}\")",
    "                        } else {",
    "                            suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                            suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"else \\{\")",
    "                        }",
    "                    } else {",
    "                        suggestion.replaceToken(lastToken)leading(false)trailing(true)with(\"else \\{\")",
    "                    }",
    "                    errormessages.syntaxError(\"an else clause must start with a '\\{' after the 'else'.\")",
    "                          atPosition(lastToken.line, lastToken.linePos + lastToken.size - 1)",
    "                          withSuggestion(suggestion)",
    "                }",
    "                next",
    "                // Just take all the statements and put them into",
    "                // curelse.",
    "                while {sym.isRBrace.not} do {",
    "                    if (unsuccessfulParse {statement}) then {",
    "                        def suggestion = errormessages.suggestion.new",
    "                        def closingBrace = findClosingBrace(btok, false)",
    "                        if (closingBrace.found.not) then {",
    "                            if (sym.isEof) then {",
    "                                errormessages.syntaxError(\"end of program \" ++",
    "                                    \"found while searching for the '}' to close \" ++",
    "                                      \"an 'else' statement.\")",
    "                                        atPosition(sym.line, sym.linePos)",
    "                            }",
    "                            if (closingBrace.tok == lastToken) then {",
    "                                suggestion.insert(\"}\")afterToken(lastToken)",
    "                            } else {",
    "                                suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                            }",
    "                        }",
    "                        suggestion.deleteToken(sym)",
    "                        errormessages.syntaxError(\"an else statement must end with a '}'.\")atPosition(",
    "                            sym.line, sym.linePos)withSuggestion(suggestion)",
    "                    }",
    "                    v := values.pop",
    "                    curelse.push(v)",
    "                    separator",
    "                }",
    "                next",
    "            }",
    "            util.setPosition(btok.line, btok.linePos)",
    "            var o := newIf(cond, body, elseblock)",
    "            values.push(o)",
    "        } else {",
    "            // Raise an error here, or it will spin nastily forever.",
    "            def suggestion = errormessages.suggestion.new",
    "            if (sym.isLBrace) then {",
    "                def closingBrace = findClosingBrace(btok, false)",
    "                if (closingBrace.found.not) then {",
    "                    if (closingBrace.tok == sym) then {",
    "                        suggestion.replaceToken(sym)leading(true)trailing(false)with(\" then \\{}\")",
    "                    } else {",
    "                        suggestion.replaceToken(sym)leading(true)trailing(false)with(\" then \\{\")",
    "                        suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                    }",
    "                } else {",
    "                    suggestion.replaceToken(sym)leading(true)trailing(false)with(\" then \\{\")",
    "                }",
    "            } else {",
    "                def closingBrace = findClosingBrace(btok, true)",
    "                if (closingBrace.found.not) then {",
    "                    if (closingBrace.tok == lastToken) then {",
    "                        suggestion.insert(\" then \\{}\")afterToken(lastToken)",
    "                    } else {",
    "                        suggestion.insert(\" then \\{\")afterToken(lastToken)",
    "                        suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                    }",
    "                } else {",
    "                    suggestion.insert(\" then \\{\")afterToken(lastToken)",
    "                }",
    "            }",
    "            errormessages.syntaxError(\"an if statement must have 'then' after \" ++",
    "                  \"the condition in parentheses.\")",
    "                  atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "    }",
    "}",
    "",
    "// Accept an identifier. Handle \"if\" specially by",
    "// passing it to the method above.",
    "method identifier {",
    "    if (sym.isIdentifier) then {",
    "        if (sym.value == \"if\") then {",
    "            doif",
    "        } else {",
    "            pushIdentifier",
    "        }",
    "    }",
    "}",
    "",
    "method prefixop {",
    "    if (sym.isOp) then {",
    "        var op := sym.value",
    "        next",
    "        if (sym.isLParen) then {",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "                }",
    "                errormessages.syntaxError(\"parentheses must contain a valid expression.\")atPosition(",
    "                    sym.line, sym.linePos)withSuggestion(suggestion)",
    "            }",
    "            if (sym.kind != \"rparen\") then {",
    "                checkBadOperators",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert(\")\")afterToken(lastToken)",
    "                errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "            }",
    "            next",
    "        } else {",
    "            if (unsuccessfulParse {term}) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert \"Â«expressionÂ»\" afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev) leading(true)",
    "                          trailing(false) with \"Â«expressionÂ»\"",
    "                }",
    "                suggestions.push(suggestion)",
    "                if (lastToken.prev.isBind) then {",
    "                    suggestion := errormessages.suggestion.new",
    "                    suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "                    suggestion.deleteToken(lastToken.prev)leading(true)trailing(false)",
    "                    suggestions.push(suggestion)",
    "                }",
    "                errormessages.syntaxError(\"a prefix operator must be followed by an expression.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestions(suggestions)",
    "            }",
    "        }",
    "        dotrest(blocksOK)",
    "        callrest(blocksOK)",
    "        def rcvr = values.pop",
    "        def call = ast.callNode.new(rcvr,",
    "            [ ast.requestPart.request \"prefix{op}\" withArgs [] ] )",
    "        call.end := ast.line (lastToken.line) column (lastToken.endPos)",
    "        values.push(call)",
    "    }",
    "}",
    "",
    "method generic {",
    "    if (sym.isLGeneric) then {",
    "        def id = values.pop",
    "        def gens = list [ ]",
    "        def startToken = sym",
    "        next",
    "        while {sym.isIdentifier} do {",
    "            identifier",
    "            while {sym.isDot} do {",
    "                next",
    "                def receiver = values.pop",
    "                if (sym.kind != \"identifier\") then {",
    "                    def suggestions = list [ ]",
    "                    var suggestion := errormessages.suggestion.new",
    "                    suggestion.insert(\"Â«type nameÂ»\")afterToken(lastToken)",
    "                    suggestions.push(suggestion)",
    "                    suggestion := errormessages.suggestion.new",
    "                    suggestion.deleteToken(lastToken)",
    "                    suggestions.push(suggestion)",
    "                    errormessages.syntaxError(\"a type name must follow the '.'.\")atPosition(",
    "                        lastToken.line, lastToken.linePos + 1)withSuggestions(suggestions)",
    "                }",
    "                identifier",
    "                def attributeName = values.pop",
    "                def memberNd = ast.memberNode.new(attributeName.value, receiver).",
    "                      setPositionFrom(receiver)",
    "                values.push(memberNd)",
    "            }",
    "            generic",
    "            gens.push(values.pop)",
    "            if (sym.isComma) then {",
    "                next",
    "            } else {",
    "                if (sym.kind != \"rgeneric\") then {",
    "                    def suggestion = errormessages.suggestion.new",
    "                    suggestion.insert \"âŸ§\" afterToken(lastToken)",
    "                    def suggestion2 = errormessages.suggestion.new",
    "                    suggestion2.insert \" \" beforeToken(startToken)",
    "                    def suggestions = [suggestion, suggestion2]",
    "                    errormessages.syntaxError(\"a type containing a 'âŸ¦' must end with a 'âŸ§'.\")",
    "                          atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                          withSuggestions(suggestions)",
    "                }",
    "            }",
    "        }",
    "        if (sym.kind != \"rgeneric\") then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert \"âŸ§\" afterToken(lastToken)",
    "            def suggestion2 = errormessages.suggestion.new",
    "            suggestion2.insert \" \" beforeToken(startToken)",
    "            def suggestions = [suggestion, suggestion2]",
    "            errormessages.syntaxError(\"a type containing a 'âŸ¦' must end with a 'âŸ§'.\")",
    "                  atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                  withSuggestions(suggestions)",
    "        }",
    "        next",
    "        values.push(ast.genericNode.new(id, gens))",
    "    }",
    "}",
    "method trycatch {",
    "    if (!(sym.isIdentifier && {sym.value == \"try\"})) then {",
    "        return",
    "    }",
    "    def tryTok = sym",
    "    next",
    "    if (sym.isLBrace) then {",
    "        block",
    "    } else {",
    "        if (sym.kind != \"lparen\") then {",
    "            def suggestion = errormessages.suggestion.new",
    "            // Look ahead for a rbrace, rparen, or catch.",
    "            def nextTok = findNextToken { t ->",
    "                  (t.isRBrace)",
    "                      || ((t.isRParen) && (t.line == tryTok.line))",
    "                      || ((t.isIdentifier) && (t.value == \"catch\"))",
    "            }",
    "            if (false == nextTok) then {",
    "                suggestion.insert(\" \\{}\")afterToken(tryTok)",
    "            } elseif { nextTok.isRBrace } then {",
    "                suggestion.insert(\" \\{\")afterToken(tryTok)",
    "            } elseif { nextTok.isRParen } then {",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"(Â«expressionÂ»\")afterToken(lastToken)andTrailingSpace(true)",
    "                } else {",
    "                    suggestion.insert(\"(\")afterToken(lastToken)andTrailingSpace(true)",
    "                }",
    "            } elseif { nextTok.isIdentifier } then {",
    "                suggestion.insert(\" \\{\")afterToken(tryTok)",
    "                suggestion.insert(\"\\} \")beforeToken(nextTok)",
    "            }",
    "            errormessages.syntaxError(\"a try(_)catch(_) statement must have \" ++",
    "                \"a block or an expression in parentheses after the 'try'.\")",
    "                atPosition(tryTok.line, tryTok.endPos + 1)",
    "                withSuggestion(suggestion)",
    "        }",
    "        next",
    "        if (unsuccessfulParse {expression(blocksOK)}) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            def nextTok = findNextValidToken [\"rparen\"]",
    "            if (nextTok == sym) then {",
    "                suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "            }",
    "            errormessages.syntaxError(\"a 'try(_)catch(_)â€¦' statement must have \" ++",
    "                \"a block or an expression in parentheses after the 'try'.\")",
    "                atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "        if (sym.kind != \"rparen\") then {",
    "            checkBadOperators",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(lastToken)",
    "            errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")",
    "                atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                withSuggestion(suggestion)",
    "        }",
    "        next",
    "    }",
    "    def mainblock = values.pop",
    "    def cases = list []",
    "    var finally := false",
    "    while {sym.isIdentifier && (sym.value == \"catch\")} do {",
    "        next",
    "        if (sym.isLBrace) then {",
    "            block",
    "        } elseif { sym.isLParen } then {",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "                }",
    "                errormessages.syntaxError(\"a try-catch statement must have either a matching block or an expression in parentheses after the 'catch'.\")atPosition(",
    "                    sym.line, sym.linePos)withSuggestion(suggestion)",
    "            }",
    "            if (sym.kind != \"rparen\") then {",
    "                checkBadOperators",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert(\")\")afterToken(lastToken)",
    "                errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "            }",
    "            next",
    "        } else {",
    "            def suggestions = list [ ]",
    "            def nextTok = findNextTokenIndentedAt(lastToken)",
    "            var suggestion := errormessages.suggestion.new",
    "            if (false == nextTok) then {",
    "                suggestion.insert(\" }\")afterToken(tokens.last)",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            } elseif { nextTok == sym } then {",
    "                suggestion.insert(\" (Â«expressionÂ»)\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.insert(\" \\{ Â«match expressionÂ» }\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            } else {",
    "                suggestion.insert(\" }\")afterToken(nextTok.prev)",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            }",
    "            errormessages.syntaxError(\"a 'try(_)catch(_)â€¦' statement must have \" ++",
    "                  \"either a matching block or an expression in parentheses after the 'catch'.\")",
    "                    atPosition(sym.line, sym.linePos) withSuggestions (suggestions)",
    "        }",
    "        cases.push(values.pop)",
    "    }",
    "    if (sym.isIdentifier && (sym.value == \"case\")) then {",
    "        def suggestion = errormessages.suggestion.new",
    "        suggestion.replaceToken(sym)with(\"catch\")",
    "        errormessages.syntaxError(\"a 'try(_)catch(_)â€¦' statement starts with a \"",
    "                ++ \"'try', followed by zero or more 'catch' blocks; there \"",
    "                ++ \"are no 'case' blocks.\")",
    "                atRange(sym.line, sym.linePos, sym.linePos + 3)",
    "                withSuggestion(suggestion)",
    "    }",
    "    if (sym.isIdentifier && (sym.value == \"finally\")) then {",
    "        next",
    "        if (sym.isLBrace) then {",
    "            block",
    "        } elseif { sym.isLParen } then {",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "                }",
    "                errormessages.syntaxError(\"a 'try(_)catch(_)â€¦finally(_)' statement \" ++",
    "                    \"must have either a block, or an expression in parentheses, \" ++",
    "                    \"after the 'finally'.\")",
    "                    atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "            }",
    "            if (sym.kind != \"rparen\") then {",
    "                checkBadOperators",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert(\")\")afterToken(lastToken)",
    "                errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "            }",
    "            next",
    "        } else {",
    "            def suggestions = list [ ]",
    "            def nextTok = findNextTokenIndentedAt(lastToken)",
    "            var suggestion := errormessages.suggestion.new",
    "            if (false == nextTok) then {",
    "                suggestion.insert(\" }\")afterToken(tokens.first)",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            } elseif { nextTok == sym } then {",
    "                suggestion.insert(\" (Â«expressionÂ»)\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.insert(\" \\{ Â«expressionÂ» }\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            } else {",
    "                suggestion.insert(\" }\")afterToken(nextTok.prev)",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            }",
    "            errormessages.syntaxError(\"a try(_)catch(_)â€¦finally(_) statement must have either a block or an expression in parentheses after the 'finally'.\")atPosition(",
    "                sym.line, sym.linePos)withSuggestions(suggestions)",
    "        }",
    "        finally := values.pop",
    "    }",
    "    util.setPosition(tryTok.line, tryTok.linePos)",
    "    values.push(ast.tryCatchNode.new(mainblock, cases, finally))",
    "}",
    "method matchcase {",
    "    if (!(sym.isIdentifier && (sym.value == \"match\"))) then {",
    "        return 0",
    "    }",
    "    def matchTok = sym",
    "    next",
    "    if (sym.kind != \"lparen\") then {",
    "        def suggestion = errormessages.suggestion.new",
    "        // Look ahead for a rparen or case.",
    "        def nextTok = findNextToken { t ->",
    "            ((t.isRParen) && (t.line == matchTok.line))",
    "                  || ((t.isIdentifier) && (t.value == \"case\")) }",
    "        if (false == nextTok) then {",
    "            suggestion.insert(\"(Â«expressionÂ»)\")afterToken(matchTok)",
    "        } elseif { nextTok.isRParen } then {",
    "            if (nextTok == sym) then {",
    "                suggestion.insert(\"(Â«expressionÂ»\")beforeToken(sym)",
    "            } else {",
    "                suggestion.insert(\"(\")beforeToken(sym)",
    "            }",
    "        } elseif { nextTok.isIdentifier } then {",
    "            suggestion.insert(\"(\")beforeToken(sym)",
    "            suggestion.insert(\")\")afterToken(nextTok.prev)andTrailingSpace(true)",
    "        }",
    "        errormessages.syntaxError(\"a match statement must have an expression in parentheses after the 'match'.\")atPosition(",
    "            matchTok.line, matchTok.linePos + matchTok.size)withSuggestion(suggestion)",
    "    }",
    "    next",
    "    if (unsuccessfulParse {expression(blocksOK)}) then {",
    "        def suggestion = errormessages.suggestion.new",
    "        def nextTok = findNextValidToken [\"rparen\"]",
    "        if (nextTok == sym) then {",
    "            suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "        } else {",
    "            suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "        }",
    "        errormessages.syntaxError(\"a match statement must have an expression in parentheses after the 'match'.\")atPosition(",
    "            sym.line, sym.linePos)withSuggestion(suggestion)",
    "    }",
    "    def matchee = values.pop",
    "    if (sym.kind != \"rparen\") then {",
    "        checkBadOperators",
    "        def suggestion = errormessages.suggestion.new",
    "        suggestion.insert(\")\")afterToken(lastToken)",
    "        errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")atPosition(",
    "            lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "    }",
    "    next",
    "    def cases = list []",
    "    var elsecase := false",
    "    while {sym.isIdentifier && (sym.value == \"case\")} do {",
    "        next",
    "        if (sym.isLBrace) then {",
    "            block",
    "        } elseif { sym.isLParen } then {",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "                }",
    "                errormessages.syntaxError(\"a match statement must have either a matching block or an expression in parentheses after the 'case'.\")atPosition(",
    "                    sym.line, sym.linePos)withSuggestion(suggestion)",
    "            }",
    "            if (sym.kind != \"rparen\") then {",
    "                checkBadOperators",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert(\")\")afterToken(lastToken)",
    "                errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "            }",
    "            next",
    "        } else {",
    "            def suggestions = list [ ]",
    "            def nextTok = findNextTokenIndentedAt(lastToken)",
    "            var suggestion := errormessages.suggestion.new",
    "            if (false == nextTok) then {",
    "                suggestion.insert(\" }\")afterToken(tokens.last)",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            } elseif { nextTok == sym } then {",
    "                suggestion.insert(\" (Â«expressionÂ»)\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.insert(\" \\{ Â«match expressionÂ» }\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            } else {",
    "                suggestion.insert(\" }\")afterToken(nextTok.prev)",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            }",
    "            errormessages.syntaxError(\"a match statement must have either a matching block or an expression in parentheses after the 'case'.\")atPosition(",
    "                sym.line, sym.linePos)withSuggestions(suggestions)",
    "        }",
    "        def case = values.pop",
    "        if (case.isBlock) then {",
    "            def guard = case.params.first.decType",
    "            if (ast.unknownType == guard) then {",
    "                util.log 20 verbose \"case guard on line {case.params.first.line} is type Unknown; this is not useful, because it will always be true.  Perhaps you want an 'else' branch, which is true only when all other cases are false?\"",
    "            }",
    "        }",
    "        cases.push(case)",
    "    }",
    "    if (sym.isIdentifier && (sym.value == \"else\")) then {",
    "        next",
    "        if (sym.isLBrace) then {",
    "            block",
    "        } elseif {sym.isLParen} then {",
    "            next",
    "            if(successfulParse{ expression(blocksOK) }.not) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if(nextTok == sym) then {",
    "                    suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "                }",
    "                errormessages.syntaxError \"A match(_)case(_) statement must have a block after the 'else'\"",
    "                      atPosition (sym.line, sym.linePos) withSuggestion (suggestion)",
    "            }",
    "            if (sym.isRParen.not) then {",
    "                checkBadOperators",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert \")\" afterToken (lastToken)",
    "                errormessages.syntaxError \"An expression beginning with a '(' must end with a ')'.\"",
    "                      atPosition (lastToken.line, lastToken.linePos + lastToken.size)",
    "                      withSuggestion (suggestion)",
    "            }",
    "            next",
    "        } else {",
    "            def suggestions = list.empty",
    "            def nextTok = findNextTokenIndentedAt(lastToken)",
    "            var suggestion := errormessages.suggestion.new",
    "            if (nextTok == false) then {",
    "                suggestion.insert \" }\" afterToken (tokens.first)",
    "                suggestion.insert \" \\{\" afterToken (lastToken)",
    "                suggestions.push(suggestion)",
    "            } elseif {nextTok == sym} then {",
    "                suggestion.insert \" (Â«block expressionÂ»)\" afterToken (lastToken)",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.insert \" \\{ Â«expressionÂ» }\" afterToken (lastToken)",
    "                suggestions.push(suggestion)",
    "            } else {",
    "                suggestion.insert \" }\" afterToken(nextTok.prev)",
    "                suggestion.insert \" \\{\" afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "            }",
    "            errormessages.syntaxError \"A match(_)case(_) must have a block after the 'else'\"",
    "                  atPosition (sym.line, sym.linePos) withSuggestions (suggestions)",
    "        }",
    "        elsecase := values.pop",
    "    }",
    "    util.setPosition(matchTok.line, matchTok.linePos)",
    "    values.push(ast.matchCaseNode.new(matchee, cases, elsecase))",
    "}",
    "// Accept a term. Terms consist only of single syntactic units and",
    "// do not contain any operators or parentheses, unlike expression.",
    "method term {",
    "    util.setPosition(sym.line, sym.linePos)",
    "    if (sym.isNum) then {",
    "        pushNum",
    "    } elseif { sym.isString } then {",
    "        pushString",
    "    } elseif { sym.isIdentifier && (sym.value == \"match\") } then {",
    "        matchcase",
    "    } elseif { sym.isIdentifier && (sym.value == \"try\") } then {",
    "        trycatch",
    "    } elseif { sym.isIdentifier } then {",
    "        identifier",
    "    } elseif { acceptKeyword \"object\" } then {",
    "        doobject",
    "    } elseif { acceptKeyword \"interface\" } then {",
    "        interfaceLiteral",
    "    } elseif { sym.isLBrace } then {",
    "        block",
    "    } elseif { sym.isLSquare } then {",
    "        sequenceConstructor",
    "    } elseif { sym.isOp } then {",
    "        // Prefix operator",
    "        prefixop",
    "    }",
    "}",
    "",
    "method expression(acceptBlocks) {",
    "    // Accept an expression. Expressions may consist of parenthesised",
    "    // subexpressions or terms, which may be followed by method invocations",
    "    // (dotrest), the rest of a method request, or an operator expression.",
    "",
    "    var sz := values.size",
    "    util.setPosition(sym.line, sym.linePos)",
    "    if (sym.isLParen) then {",
    "        def tmpStatementToken = statementToken",
    "        statementToken := sym",
    "        util.setPosition(sym.line, sym.linePos)",
    "        next",
    "        if (successfulParse{expression(acceptBlocks)}.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            def nextTok = findNextValidToken [\"rparen\"]",
    "            if (nextTok == sym) then {",
    "                suggestion.insert(\"Â«expressionÂ»\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.replaceTokenRange(sym, nextTok.prev)",
    "                      leading(true)trailing(false)with(\"Â«expressionÂ»\")",
    "            }",
    "            errormessages.syntaxError(\"parentheses must contain a valid expression.\")atPosition(",
    "                sym.line, sym.linePos)withSuggestion(suggestion)",
    "        }",
    "        if (sym.kind != \"rparen\") then {",
    "            checkBadOperators",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(lastToken)",
    "            errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")",
    "                  atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                  withSuggestion(suggestion)",
    "        }",
    "        statementToken := tmpStatementToken",
    "        next",
    "    } else {",
    "        term",
    "    }",
    "    if (values.size > sz) then {",
    "        dotrest(acceptBlocks)",
    "        callrest(acceptBlocks)",
    "        valueexpressionrest",
    "    }",
    "}",
    "",
    "// Calculate the precedence of an operator. In this case, only",
    "// multiplication and division have nontrivial precedence. Used in",
    "// expressionrest.",
    "method oprec(o) {",
    "    if (o == \"*\") then {",
    "        return 10",
    "    } elseif { o == \"/\" } then {",
    "        return 10",
    "    }",
    "    return 5",
    "}",
    "",
    "// Return the precedence of the operator at the top of the \"ops\" stack.",
    "method toprec(ops) {",
    "    if (ops.size > 0) then {",
    "        var o := ops.last",
    "        return oprec(o)",
    "    }",
    "    0",
    "}",
    "",
    "",
    "method typeexpressionrest {",
    "    if (sym.isOp) then {",
    "        expressionrest \"type expression\" recursingWith {typeexpression} blocks (noBlocks)",
    "    }",
    "}",
    "",
    "method valueexpressionrest {",
    "    if (sym.isOp) then {",
    "        expressionrest \"expression\" recursingWith {expression(blocksOK)} blocks (blocksOK)",
    "    }",
    "}",
    "",
    "method expressionrest(name) recursingWith (recurse) blocks (acceptBlocks) {",
    "    // Process the rest of an operator expression using the shunting-yard",
    "    // algorithm. This method uses the oprec and toprec methods above to",
    "    // ensure the correct precedence, and treats all operators as",
    "    // left-associative.  It is parameterised so that it",
    "    // can be used for both type- and value- expressions.",
    "    ",
    "    var terms := list [] // List of operands yet to be used",
    "    var ops := list []   // Operator stack",
    "    var o",
    "    var o2",
    "    var tmp2",
    "    var tmp := values.pop",
    "    terms.push(tmp)",
    "    var prec",
    "    var allarith := true // Consists only of arithmetic operators",
    "    var opcount := 0",
    "    var opdtype := \"\" // The single operator being used in this expression",
    "    while {",
    "        (sym.isOp) && {sym.value â‰  \"=\"}",
    "    } do {",
    "        opcount := opcount + 1",
    "        o := sym.value",
    "        next",
    "        def oTypeArgs = typeArgs        // parsed, but ignored at present",
    "        prec := oprec(o)",
    "        if ((o != \"*\") && (o != \"/\") && (o != \"+\") && (o != \"-\")) then {",
    "            allarith := false",
    "        }",
    "        if ((opdtype != \"\") && (opdtype != o) && (allarith.not)) then {",
    "            // If: this is not the first operator, it is not the same",
    "            // as the last operator, and the expression has not been",
    "            // entirely arithmetic, raise a syntax error.",
    "            def suggestions = list [ ]",
    "            var suggestion := errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(sym)",
    "            suggestion.insert(\"(\")beforeToken(lastToken.prev)",
    "            suggestions.push(suggestion)",
    "            suggestion := errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(lastToken.prev)",
    "            suggestion.insert(\"(\")beforeToken(lastToken.prev.prev.prev)",
    "            suggestions.push(suggestion)",
    "            errormessages.syntaxError(\"an expression containing both arithmetic \" ++",
    "                  \"and non-arithmetic operators requires parentheses\") atRange (",
    "                  lastToken.prev.prev.prev.line, lastToken.prev.prev.prev.linePos,",
    "                  lastToken.linePos) withSuggestions (suggestions)",
    "        }",
    "        opdtype := o",
    "        while {(ops.size > 0) && (prec <= toprec(ops))} do {",
    "            // Do the shunting: for as long as the current operator",
    "            // has lesser or equal precedence than the one on the",
    "            // top of the stack, take the operator off the stack and",
    "            // replace its two operands with the combined operator node.",
    "            // This corresponds to left-associative operators only.",
    "            o2 := ops.pop",
    "            tmp2 := terms.pop",
    "            tmp := terms.pop",
    "            util.setPosition(tmp.line, tmp.linePos)",
    "            tmp := ast.opNode.new(o2, tmp, tmp2)",
    "            terms.push(tmp)",
    "        }",
    "        ops.push(o)",
    "        if (sym.isLParen) then {",
    "            // When a parenthesis is found, take an expression from",
    "            // *within* the parentheses and add it to the stack. Do",
    "            // not delegate entirely to expression, because it will",
    "            // then consume all the following operators and break",
    "            // precedence. Possibly parenthesised expressions could",
    "            // be allowed in term above?",
    "            next",
    "            if (successfulParse(recurse).not) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\"Â«{name}Â»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\"Â«{name}Â»\")",
    "                }",
    "                errormessages.syntaxError(\"parentheses must contain a valid {name}.\")atPosition(",
    "                    sym.line, sym.linePos)withSuggestion(suggestion)",
    "            }",
    "            if (sym.kind != \"rparen\") then {",
    "                checkBadOperators",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert(\")\")afterToken(lastToken)",
    "                errormessages.syntaxError(\"an expression beginning with a '(' must end with a ')'.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "            }",
    "            next",
    "        } else {",
    "            if (sym.isSeparator) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                suggestion.deleteToken(lastToken)leading(true)trailing(false)",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.insert(\" Â«{name}Â»\")afterToken(lastToken)",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.insert(\" \" ++ util.lines.at(sym.line))afterToken(lastToken)",
    "                suggestion.deleteLine(sym.line)",
    "                suggestions.push(suggestion)",
    "                errormessages.syntaxError(\"a valid expression must follow '{lastToken.value}'. This is often caused by a new line in the middle of an expression.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestions(suggestions)",
    "            }",
    "            if (unsuccessfulParse {term}) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"comma\", \"rparen\", \"rsquare\", \"rbrace\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\" Â«{name}Â»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«{name}Â»\")",
    "                }",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "                suggestions.push(suggestion)",
    "                errormessages.syntaxError(\"a valid {name} must follow '{lastToken.value}'. This is often caused by a new line in the middle of an expression.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestions(suggestions)",
    "            }",
    "        }",
    "",
    "        // Regardless of where the last value came from, it may have",
    "        // method invocations, indexes, or method call happening to it,",
    "        // which should be applied and the result put into the operands",
    "        // list.",
    "        dotrest(acceptBlocks)",
    "        callrest(acceptBlocks)",
    "        tmp := values.pop",
    "        terms.push(tmp)",
    "    }",
    "    while {ops.size > 0} do {",
    "        // Shunt off any remaining operators at the end",
    "        o := ops.pop",
    "        tmp2 := terms.pop",
    "        tmp := terms.pop",
    "        util.setPosition(tmp.line, tmp.linePos)",
    "        tmp := ast.opNode.new(o, tmp, tmp2)",
    "        terms.push(tmp)",
    "    }",
    "    tmp := terms.pop",
    "    values.push(tmp)",
    "    if (terms.size > 0) then {",
    "        errormessages.syntaxError(\"values left on term stack.\")atPosition(sym.line, sym.linePos)",
    "    }",
    "}",
    "",
    "method dotrest(acceptBlocks) {",
    "    // Accept a method request starting with \".\". The receiver of the request",
    "    // is assumed to be on the values stack, and will be replaced by a",
    "    // memberNode representing this request, consuming the dot and all the",
    "    // parts of a following method name and its arguments.   Any following",
    "    // dotted requests will also be parsed, by recursive invocations.",
    "",
    "    if (sym.isDot) then {",
    "        util.setPosition(sym.line, sym.linePos)",
    "        var receiver := values.pop",
    "        next",
    "        if (sym.isIdentifier) then {",
    "            def dro = ast.memberNode.new(sym.value, receiver)",
    "                  .setPositionFrom(receiver)",
    "            values.push(dro)",
    "            next",
    "            if (sym.isDot) then {",
    "                dotrest(acceptBlocks)",
    "            } elseif { sym.isLGeneric } then {",
    "                dro.generics := typeArgs",
    "            }",
    "            if (sym.isLParen || (acceptBlocks && sym.isLBrace) ||",
    "                  sym.isNum || sym.isString || sym.isLSquare) then {",
    "                callrest(acceptBlocks)",
    "            }",
    "        } else {",
    "            def suggestions = list [ ]",
    "            var suggestion := errormessages.suggestion.new",
    "            suggestion.deleteToken(lastToken)",
    "            suggestions.push(suggestion)",
    "            suggestion := errormessages.suggestion.new",
    "            suggestion.insert(\"Â«method nameÂ»\")afterToken(lastToken)",
    "            suggestions.push(suggestion)",
    "            errormessages.syntaxError(\"a field or method name must follow a '.'.\")atPosition(",
    "                sym.line, sym.linePos)withSuggestions(suggestions)",
    "        }",
    "    }",
    "}",
    "",
    "method callrest(acceptBlocks) {",
    "    // Accept a method request with arguments, if they are present.",
    "    // Method requests without arguments are left as \"member\" AST nodes",
    "",
    "    // The top of the values stack may be an identifierNode, which will become",
    "    // the method name of an implicit request, or a memberNode, whose receiver",
    "    // will become the receiver of the parsed call, and whose and nameString",
    "    // will become the first part-name of the method name.  It may also",
    "    // be some other expression (such as a literal), in which case there",
    "    // can be no arguments, and there is nothing to do.",
    "    // Leaves the stack depth unchanged.",
    "",
    "    if (values.size == 0) then {",
    "        return",
    "    }",
    "    var meth := values.pop",
    "    if (meth.kind != \"identifier\") then {",
    "        if (meth.kind != \"member\") then {",
    "            values.push(meth)",
    "            return",
    "        }",
    "    }",
    "    def lnum = meth.line",
    "    def lpos = meth.linePos",
    "    var methn := meth.nameString",
    "    def argumentParts = list []",
    "    def part = ast.requestPart.request(methn) withArgs(list []).setPositionFrom(meth)",
    "    argumentParts.push(part)",
    "    var foundArgs := false",
    "    var tok := lastToken",
    "    var genericIdents := false",
    "    def g = meth.generics",
    "        // when used to parse a value expression, generic arguments have already",
    "        // been parse and are in `meth`.  When used to parse a type expression,",
    "        // they are in the unparsed input.  This is probably a bug!",
    "    if (false == g) then {",
    "        if (sym.isLGeneric) then {",
    "            genericIdents := typeArgs",
    "        }",
    "    } else {",
    "        genericIdents := g",
    "    }",
    "    foundArgs := parseArgumentsFor(meth) into (part) acceptBlocks (acceptBlocks)",
    "    ",
    "    if (foundArgs) then {",
    "        def realRcvr = if (meth.isIdentifier) then {",
    "            ast.implicit.setPositionFrom(meth)",
    "        } else {",
    "            meth.receiver",
    "        }",
    "        meth := ast.callNode.new(realRcvr, argumentParts).setPositionFrom(realRcvr)",
    "",
    "        while {sym.isIdentifier} do {",
    "            // parse more parts of a multi-part request",
    "            def argList = list [ ]      // will be modified by parseArgumentsFor(_)into(_)",
    "            def namePart = ast.requestPart.request(sym.value) withArgs(argList).setPositionFrom(sym)",
    "            next",
    "            def argsFound = parseArgumentsFor(meth) into (namePart) acceptBlocks (acceptBlocks)",
    "            if (argsFound.not) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert \"(â€¹expressionâ€º)\" afterToken (lastToken)",
    "                def more = if (isOnAContinationLine) then {",
    "                    \"  The indentation tells me that this is a continuation of\" ++",
    "                        \" the previous line; is that what you intended?\"",
    "                } else { \"\" }",
    "                def reqStart = ast.line (lnum) column (lpos)",
    "                def reqEnd = ast.line (lastToken.line) column (lastToken.endPos)",
    "                def reqRange = ast.start (reqStart) end (reqEnd)",
    "                errormessages.syntaxError(\"a multi-part method request must end with an argument list,\" ++",
    "                    \" either parenthesized or self-delimiting.\" ++ more)",
    "                        atRange(reqRange) withSuggestion (suggestion)",
    "            }",
    "            argumentParts.addLast(namePart)",
    "        }",
    "        meth.end := ast.line (lastToken.line) column (lastToken.endPos)",
    "        // we do this indside the if, because outside meth might be an",
    "        // identifierNode or a memberNode",
    "    }",
    "    meth.generics := genericIdents",
    "    values.push(meth)",
    "    dotrest(acceptBlocks)",
    "}",
    "",
    "method parseArgumentsFor(meth) into (part) acceptBlocks (acceptBlocks) {",
    "    // `meth` is a memberNode or an identifier.",
    "    // Parses the arguments for `part`, a requestPart of a method request.",
    "    // If arguments are present, adds them to `part.args` and answers true.",
    "    // Answers false if no arguments are present.",
    "",
    "",
    "    var tok := lastToken",
    "    if (sym.isLParen) then {",
    "        tok := sym",
    "        parenthesizedArgs(part) startingWith (tok)",
    "        true",
    "    } elseif { acceptBlocks.not && { sym.isLBrace } } then {",
    "        false",
    "    } elseif { acceptArgument } then {",
    "        tok := sym",
    "        term",
    "        part.args.push(values.pop)",
    "        true",
    "    } else {",
    "        false",
    "    }",
    "}",
    "",
    "method parenthesizedArgs(part) startingWith (tok) {",
    "    next",
    "    if (successfulParse {expression(blocksOK)}) then {",
    "        while {sym.isComma} do {",
    "            part.args.push(values.pop)",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rparen\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert \" Â«expressionÂ»\" afterToken (lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)",
    "                        leading (true) trailing (false) with \" Â«expressionÂ»\"",
    "                }",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "                suggestions.push(suggestion)",
    "                errormessages.syntaxError(\"an argument list must have an expression after a ','.\")",
    "                      atPosition(sym.line, sym.linePos)",
    "                      withSuggestions(suggestions)",
    "            }",
    "        }",
    "        part.args.push(values.pop)",
    "    }",
    "    if (sym.kind != \"rparen\") then {",
    "        checkBadOperators",
    "        def suggestion = errormessages.suggestion.new",
    "        suggestion.insert(\")\")afterToken(lastToken)",
    "        def rng = ast.start (ast.line (tok.line) column (tok.linePos))",
    "                        end (ast.line (lastToken.line) column (lastToken.linePos + lastToken.size))",
    "        errormessages.syntaxError \"an argument list beginning with a '(' must end with a ')'.\"",
    "              atRange (rng) withSuggestion (suggestion)",
    "    }",
    "    if (sym.line == part.line) then {",
    "        part.lineLength := sym.linePos - part.linePos",
    "    }",
    "    next",
    "}",
    "",
    "method typeArgs {",
    "    // Parses one or more type arguments, if present, and returns them as a list.",
    "",
    "    if (sym.isLGeneric.not) then { return [] }",
    "    def args = list [ ]",
    "    def startToken = sym",
    "    next",
    "    while {successfulParse{typeArg}} do {",
    "        args.add(values.pop)",
    "        if (sym.isComma) then { next }",
    "    }",
    "    if (sym.isRGeneric.not) then {",
    "        def suggestion = errormessages.suggestion.new",
    "        suggestion.insert \"âŸ§\" afterToken(lastToken)",
    "        def suggestion2 = errormessages.suggestion.new",
    "        suggestion2.insert \" \" beforeToken(startToken)",
    "        def suggestions = [suggestion, suggestion2]",
    "        errormessages.syntaxError \"a method request containing a 'âŸ¦' must have a matching 'âŸ§'. \"",
    "              atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "              withSuggestions(suggestions)",
    "    }",
    "    next",
    "    return args",
    "}",
    "",
    "method typeArg {",
    "    // Parses a single type argument, and leaves it on the values stack.",
    "    // TODO: 'identifier' could be a dotted identifier, ",
    "    //        or perhaps a type expression?",
    "",
    "    if (sym.isIdentifier) then {",
    "        identifier",
    "        if (sym.isLGeneric) then {",
    "            values.push(ast.genericNode.new(values.pop, typeArgs))",
    "        }",
    "    } else {",
    "        interfaceLiteral",
    "    }",
    "}",
    "",
    "method errorDefNoName {",
    "    def suggestion = errormessages.suggestion.new",
    "    def nextTok = findNextToken { t ->",
    "        (t.isOp) && (t.value == \"=\") && (t.line == sym.line)",
    "    }",
    "    if (false == nextTok) then {",
    "        suggestion.insert(\" Â«nameÂ» =\")afterToken(lastToken)",
    "    } elseif { nextTok == sym } then {",
    "        suggestion.insert(\" Â«nameÂ»\")afterToken(lastToken)",
    "    } else {",
    "        suggestion.replaceTokenRange(sym, nextTok.prev)",
    "              leading(false)trailing(true)with(\"Â«nameÂ» \")",
    "    }",
    "    errormessages.syntaxError(\"a definition must have a name, '=', \" ++",
    "          \"and a value after the 'def'.\") atPosition(sym.line, sym.linePos)",
    "          withSuggestion(suggestion)",
    "}",
    "",
    "method errorDefNoExpression {",
    "    def suggestion = errormessages.suggestion.new",
    "    def nextTok = findNextValidToken [ ]",
    "    if (nextTok == sym) then {",
    "        suggestion.insert(\" Â«expressionÂ»\")afterToken(lastToken)",
    "    } else {",
    "        suggestion.replaceTokenRange(sym, nextTok.prev)",
    "              leading(true)trailing(false)with(\" Â«expressionÂ»\")",
    "    }",
    "    errormessages.syntaxError(\"a definition must have a value after the '='.\")",
    "          atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "          withSuggestion(suggestion)",
    "}",
    "",
    "method errorDefUsesAssign(defTok) {",
    "    def suggestions = list [ ]",
    "    var suggestion := errormessages.suggestion.new",
    "    suggestion.replaceToken(sym)with(\"=\")",
    "    suggestions.push(suggestion)",
    "    suggestion := errormessages.suggestion.new",
    "    suggestion.replaceToken(defTok)with(\"var\")",
    "    suggestions.push(suggestion)",
    "    errormessages.syntaxError(\"a definition must use '=' instead of ':='. \" ++",
    "        \"A variable declaration uses 'var' and ':='.\")atRange(",
    "        sym.line, sym.linePos, sym.linePos + 1) withSuggestions(suggestions)",
    "}",
    "",
    "method errorDefMissingRhs(defTok) {",
    "    def suggestions = list [ ]",
    "    var suggestion := errormessages.suggestion.new",
    "    suggestion.insert(\" = Â«expressionÂ»\")afterToken(lastToken)",
    "    suggestions.push(suggestion)",
    "    suggestion := errormessages.suggestion.new",
    "    suggestion.replaceToken(defTok)with(\"var\")",
    "    suggestions.push(suggestion)",
    "    errormessages.syntaxError(\"a definition must have '=' and a value after the name. \"",
    "        ++ \"A variable declaration does not require a value but uses 'var', not 'def'.\")",
    "        atPosition(sym.line, sym.linePos) withSuggestions(suggestions)",
    "}",
    "",
    "method defdec {",
    "    // Accept definition of a constant",
    "",
    "    if (acceptKeyword \"def\") then {",
    "        def line = sym.line",
    "        def pos = sym.linePos",
    "        def defTok = sym",
    "        next",
    "        if (sym.isIdentifier.not) then {",
    "            errorDefNoName",
    "        }",
    "        pushIdentifier",
    "        def name = values.pop",
    "        name.isBindingOccurrence := true",
    "        def dtype = optionalTypeAnnotation",
    "        def anns = doannotation",
    "        def o = ast.defDecNode.new(name, ast.nullNode, dtype).setPositionFrom(defTok)",
    "        if (false != anns) then { o.annotations.addAll(anns) }",
    "        o.startToken := defTok",
    "        if (sym.isOp && (sym.value == \"=\")) then {",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                errorDefNoExpression",
    "            }",
    "            o.value := values.pop       // overwrite nullNode with initializer",
    "        } elseif { sym.isBind } then {",
    "            errorDefUsesAssign(defTok)",
    "        } elseif { o.isAnnotationDecl.not } then {",
    "            errorDefMissingRhs(defTok)",
    "        }",
    "        values.push(o)",
    "        reconcileComments",
    "    }",
    "}",
    "",
    "method vardec {",
    "    // Accept a var declaration",
    "",
    "    if (acceptKeyword \"var\") then {",
    "        def line = sym.line",
    "        def pos = sym.linePos",
    "        def varTok = sym",
    "        next",
    "        if (sym.isIdentifier.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            def nextTok = findNextToken { t ->",
    "                  (t.isBind) && (t.line == sym.line)",
    "            }",
    "            if ((false == nextTok) || {nextTok == sym}) then {",
    "                suggestion.insert(\" Â«nameÂ»\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.replaceTokenRange(sym, nextTok.prev)",
    "                      leading(false)trailing(true)with(\"Â«nameÂ» \")",
    "            }",
    "            errormessages.syntaxError \"a variable declaration must have a name after the 'var'.\"",
    "                  atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "        pushIdentifier",
    "        var val := false",
    "        var name := values.pop",
    "        name.isBindingOccurrence := true",
    "        def dtype = optionalTypeAnnotation",
    "        def anns = doannotation",
    "        if (sym.isBind) then {",
    "            next",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [ ]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\" Â«expressionÂ»\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)",
    "                          leading(true)trailing(false)with(\" Â«expressionÂ»\")",
    "                }",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "                suggestions.push(suggestion)",
    "                errormessages.syntaxError(\"a variable declaration must have a value after the ':='. \"",
    "                    ++ \"A variable without a value can be declared with 'var' followed only by the variable name.\")atPosition(",
    "                    lastToken.line, lastToken.linePos + lastToken.size)withSuggestions(suggestions)",
    "            }",
    "            val := values.pop",
    "        } else {",
    "            if ((sym.isOp) && (sym.value == \"=\")) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                suggestion.replaceToken(sym)with(\":=\")",
    "                suggestions.push(suggestion)",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.replaceToken(varTok)with(\"def\")",
    "                suggestions.push(suggestion)",
    "                errormessages.syntaxError(\"a variable declaration must use ':=' instead of '='. A definition uses 'def' and '='.\")",
    "                    atRange(sym.line, sym.linePos, sym.linePos)",
    "                    withSuggestions(suggestions)",
    "            }",
    "        }",
    "        util.setPosition(line, pos)",
    "        def o = ast.varDecNode.new(name, val, dtype)",
    "        if (false != anns) then { o.annotations.addAll(anns) }",
    "        values.push(o)",
    "        reconcileComments",
    "    }",
    "}",
    "",
    "method sequenceConstructor {",
    "    // Accept a square-bracketed sequence literal like [1,2,3].",
    "",
    "    if (sym.isLSquare) then {",
    "        def lSq = sym",
    "        next",
    "        var tmp",
    "        var params := list []",
    "        if (successfulParse {expression(blocksOK)}) then {",
    "            while {sym.isComma} do {",
    "                tmp := values.pop",
    "                params.push(tmp)",
    "                next",
    "                if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                    def suggestions = list [ ]",
    "                    var suggestion := errormessages.suggestion.new",
    "                    def nextTok = findNextValidToken [\"rsquare\"]",
    "                    if (nextTok == sym) then {",
    "                        suggestion.insert(\" Â«expressionÂ»\")afterToken(lastToken)",
    "                    } else {",
    "                        suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«expressionÂ»\")",
    "                    }",
    "                    suggestions.push(suggestion)",
    "                    suggestion := errormessages.suggestion.new",
    "                    suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "                    suggestions.push(suggestion)",
    "                    errormessages.syntaxError(\"a collection must contain zero or more expressions separated by commas.\")",
    "                        atPosition(sym.line, sym.linePos) withSuggestions(suggestions)",
    "                }",
    "            }",
    "            tmp := values.pop",
    "            params.push(tmp)",
    "        }",
    "        if (sym.isRSquare.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\"]\")afterToken(lastToken)",
    "            errormessages.syntaxError(\"a collection beginning with a '[' must end with a ']'.\")atPosition(",
    "                lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "        }",
    "        def o = ast.arrayNode.new(params).setPositionFrom(lSq)",
    "        values.push(o)",
    "        next",
    "    }",
    "}",
    "",
    "method dodialect {",
    "    // Parses \"dialect Â«quoted-stringÂ»\"",
    "",
    "    if (acceptKeyword \"dialect\") then {",
    "        def dialectToken = sym",
    "        next",
    "        if (sym.isString.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            var errorPos",
    "            if ((sym.isIdentifier) && (sym.line == lastToken.line)) then {",
    "                suggestion.replaceToken(sym)with(\"\\\"{sym.value}\\\"\")",
    "                errorPos := sym.linePos",
    "            } else {",
    "                suggestion.insert(\" \\\"Â«dialect nameÂ»\\\"\")afterToken(lastToken)",
    "                errorPos := lastToken.linePos + lastToken.size + 1",
    "            }",
    "            errormessages.syntaxError(\"a dialect statement must have the name \" ++",
    "                \"of the dialect in quotes after the word 'dialect'.\")",
    "                atPosition(lastToken.line, errorPos)withSuggestion(suggestion)",
    "        }",
    "        def dn = ast.dialectNode.fromToken(sym).setPositionFrom(dialectToken)",
    "        next",
    "        if (values.isEmpty) then {",
    "            if (moduleObject.theDialect.line == 0) then {",
    "                moduleObject.theDialect := dn",
    "            } else {",
    "                errormessages.syntaxError(\"at most one dialect statement may appear in a module.\")",
    "                  atRange(dn)",
    "            }",
    "        } else {",
    "            errormessages.syntaxError(\"a dialect statement must be at the start of the module.\")",
    "                  atRange(dn)",
    "        }",
    "    }",
    "}",
    "",
    "method inheritOrUse {",
    "    // Parses \"inherit Â«object expressionÂ»\"",
    "    if (sym.isKeyword.not) then { return }",
    "    if ((sym.value == \"inherit\") || (sym.value == \"use\")) then {",
    "        statementToken := sym",
    "        def btok = sym",
    "        next",
    "        if (unsuccessfulParse {expression(blocksOK)}) then {",
    "            def suggestions = list [ ]",
    "            var suggestion := errormessages.suggestion.new",
    "            def nextTok = findNextValidToken [\"rsquare\"]",
    "            if (nextTok == sym) then {",
    "                suggestion.insert(\" Â«parentÂ»\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«parentÂ»\")",
    "            }",
    "            suggestions.push(suggestion)",
    "            suggestion := errormessages.suggestion.new",
    "            suggestion.deleteTokenRange(lastToken, nextTok.prev)leading(true)trailing(false)",
    "            suggestions.push(suggestion)",
    "            var msg := \"The {btok.value} keyword must be followed by an expression that creates \"",
    "            if (btok.value == \"use\") then {",
    "                msg := msg ++ \"the trait being used.\"",
    "            } else {",
    "                msg := msg ++ \"the object being inherited.\"",
    "            }",
    "            errormessages.syntaxError(msg)",
    "                atPosition(lastToken.line, lastToken.linePos + lastToken.size + 1)",
    "                withSuggestions(suggestions)",
    "        }",
    "        util.setPosition(btok.line, btok.linePos)",
    "        def inhNode = ast.inheritNode.new(values.pop)",
    "        if (btok.value == \"use\") then {",
    "            inhNode.isUse := true",
    "        }",
    "        while { inheritModifier(inhNode) } do { }",
    "        values.push(inhNode)",
    "    }",
    "}",
    "",
    "method inheritModifier(node) {",
    "    // parse an alias or exclude modifier on an `inherit` clause",
    "    // node is the inheritNode",
    "",
    "    if (sym.isKeyword.not) then { return false }",
    "    def symValue = sym.value",
    "    if (symValue == \"alias\") then {",
    "        parseAlias(node) ",
    "    } elseif {symValue == \"exclude\"} then {",
    "        parseExclude(node)",
    "    } else {",
    "        false",
    "    }",
    "}",
    "",
    "method parseAlias(node) {",
    "    // parse an alias modifier on an `inherit` clause; node is the inheritNode",
    "    next    // skip the alias keyword",
    "    def newMeth = methodSignature",
    "    if (sym.isOp && (sym.value == \"=\")) then {",
    "        next",
    "        def oldMeth = methodSignature.appliedOccurrence",
    "        if (newMeth.numParams â‰  oldMeth.numParams) then {",
    "            errormessages.syntaxError \"a method and its alias must have the same number of parameters\"",
    "                atRange (newMeth.line, newMeth.linePos, oldMeth.endPos)",
    "        }",
    "        node.addAlias (newMeth) for (oldMeth)",
    "    } else {",
    "        errormessages.syntaxError (\"an alias modifier must take the form \" ++",
    "            \"'â€¹newMethodHeaderâ€º = â€¹oldMethodHeaderâ€º'\")",
    "            atPosition (lastToken.line, lastToken.linePos + lastToken.size)",
    "    }",
    "    return true",
    "}",
    "method parseExclude(node) {",
    "    // parse an exclude modifier on an `inherit` clause; node is the inheritNode",
    "    next    // skip the exclude keyword",
    "    def excludedMeth = methodHeader.appliedOccurrence",
    "    node.addExclusion (excludedMeth)",
    "    return true",
    "}",
    "",
    "method doobject {",
    "    // Parse an object constructor.",
    "    // this method is called doobject because \"object\" is a keyword",
    "",
    "    if (acceptKeyword \"object\") then {",
    "        next",
    "        parseObjectConstructorBody \"an object constructor\" ",
    "            startingWith (lastToken) after \"'object'\"",
    "    }",
    "}",
    "",
    "method parseObjectConstructorBody (constructName) startingWith (btok) after (prev) {",
    "    // Parse the body of an object constructor, leaving the node on the",
    "    // values stack.  This method is used for parsing object, class, and trait",
    "    // bodies; constructName says which, so that error messages are correct.",
    "    // btok is the keyword token that started the construct: class, object, or trait.",
    "",
    "    def anns = doannotation",
    "    if (sym.isLBrace.not) then {",
    "        def suggestion = errormessages.suggestion.new",
    "        def nextTok = findNextToken { t -> t.isRBrace }",
    "        if (false == nextTok) then {",
    "            suggestion.insert(\" \\{}\")afterToken(lastToken)",
    "        } else {",
    "            suggestion.insert(\" \\{\")afterToken(lastToken)",
    "        }",
    "        errormessages.syntaxError \"{constructName} must have a '\\{' after {prev}.\"",
    "            atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "            withSuggestion(suggestion)",
    "    }",
    "    next",
    "    skipSeparators",
    "    def originalValues = values",
    "    values := list []",
    "    var superObject := false",
    "    def usedTraits = list []",
    "    var inPreamble := true  // => processing inherit and use statements",
    "    while {sym.isRBrace.not && sym.isEof.not} do {",
    "        pushComments",
    "        if (successfulParse {inheritOrUse}) then {",
    "            def parentNode = values.pop",
    "            if (inPreamble) then {",
    "                if (parentNode.isUse) then {",
    "                    usedTraits.add(parentNode)",
    "                } elseif { usedTraits.isEmpty } then {",
    "                    superObject := parentNode",
    "                } else {",
    "                    errormessages.syntaxError(\"'inherit' must come \" ++",
    "                        \"before 'use' in {constructName}\")",
    "                        atRange(parentNode.line, parentNode.linePos,",
    "                        parentNode.linePos + 7)",
    "                }",
    "            } else {",
    "                errormessages.syntaxError(\"'{parentNode.statementName}' must \" ++",
    "                    \"come at the start of {constructName}\")",
    "                    atRange(parentNode.line, parentNode.linePos,",
    "                            parentNode.linePos + parentNode.statementName.size)",
    "            }",
    "        } elseif { successfulParse {methodClassOrTrait} } then {",
    "            inPreamble := false",
    "        } elseif { successfulParse {statement} } then {",
    "            inPreamble := false",
    "        } else {",
    "            errormessages.syntaxError(\"unexpected symbol '{sym.value}' in body \" ++",
    "                \"of {constructName}\")",
    "                atRange(sym.line, sym.linePos, sym.endPos)",
    "        }",
    "        separator",
    "    }",
    "    def body = values",
    "    values := originalValues",
    "    next",
    "    def objNode = ast.objectNode.new(body, superObject).setPositionFrom(btok)",
    "    if (false != anns) then { objNode.annotations.addAll(anns) }",
    "    objNode.usedTraits := usedTraits",
    "    values.push(objNode)",
    "}",
    "",
    "method classOrTrait(btok) {",
    "    // Accepts a class or trait declaration, which started with btok",
    "    //",
    "    // Class declarations were formerly of the form:",
    "    //",
    "    //   class objName.methodName (param1, param2) {",
    "    //     inherit <expr>",
    "    //     var x",
    "    //     method y(z) { â€¦ }",
    "    // }",
    "    // Such declarations are no longer supported, and produce an",
    "    // error message starting with \"dotted classes are no longer supported\"",
    "    //",
    "    // Classes are now of the form:",
    "    //",
    "    // class methodName (param1, param2) {",
    "    //     inherit <expr>",
    "    //     var x",
    "    //     method y(z) { â€¦ }",
    "    // }",
    "    //",
    "    // A class is compiled into a methodNode that contains",
    "    // an objectNode, i.e., it is treated as syntactic sugar for",
    "    //",
    "    // method methodName (param1, param2) {",
    "    //     object {",
    "    //         inherit <expr>",
    "    //         var x",
    "    //         method y(z) { â€¦ }",
    "    //     }",
    "    // }",
    "    //",
    "    // Arguably, this is wrong.  Perhaps the parser should create classNodes,",
    "    // which would later be removed by the AST re-writing step?",
    "    // So that syntactic-classes can be found if necessary, methodNodes",
    "    // have a description field which is \"class\" or \"trait\"",
    "",
    "    statementToken := sym       // the `class` or `trait` keyword",
    "    def myKind = statementToken.value",
    "    next",
    "    if (sym.isIdentifier.not) then {",
    "        def suggestions = list [ ]",
    "        if (sym.isLBrace) then {",
    "            var suggestion := errormessages.suggestion.new",
    "            suggestion.insert(\" Â«{myKind} nameÂ»\")afterToken(lastToken)",
    "            suggestions.push(suggestion)",
    "            suggestion := errormessages.suggestion.new",
    "            suggestion.replaceToken(lastToken)with(\"object\")",
    "            suggestions.push(suggestion)",
    "        } else {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\" Â«{myKind} nameÂ» \\{}\")afterToken(lastToken)",
    "            suggestions.push(suggestion)",
    "        }",
    "        errormessages.syntaxError \"a {myKind} must have a name after the keyword '{myKind}'.\"",
    "            atPosition(lastToken.line, lastToken.linePos + lastToken.size + 1)",
    "            withSuggestions(suggestions)",
    "    }",
    "    if (tokens.first.isDot) then {",
    "        errormessages.syntaxError(\"dotted classes are no longer supported. \" ++",
    "                \"Consider using a class, or a class inside an object constructor.\")",
    "                atPosition(tokens.first.line, tokens.first.linePos)",
    "    }",
    "    def methNode = methodHeader.setPositionFrom(btok)",
    "    parseObjectConstructorBody \"a {myKind}\" startingWith (btok) after \"the {myKind} header\"",
    "    def objNode = values.pop",
    "    methNode.body := [objNode]",
    "    methNode.description := myKind",
    "    methNode.annotations.addAll(objNode.annotations)  // TODO: sort this out!",
    "        // In a class declaration, there is just one place for annotations.",
    "        // These might include annotations on the method (such as",
    "        // confidential), and annotations on the object (such as immutable)",
    "    objNode.name := methNode.canonicalName",
    "    if (myKind == \"class\") then {",
    "        objNode.inClass := true",
    "    } elseif { myKind == \"trait\" } then {",
    "        objNode.inTrait := true",
    "    }",
    "    values.push(methNode)",
    "    reconcileComments",
    "}",
    "",
    "method methodClassOrTrait {",
    "    // Parse a method declaration, including a class or trait declaration",
    "    var isOnceMethod := false",
    "    var btok := sym",
    "    if (acceptKeyword \"once\") then {",
    "        isOnceMethod := true",
    "        next",
    "        if (acceptKeyword \"method\" or \"class\" or \"trait\" .not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert \" method\" afterToken(btok)",
    "            errormessages.syntaxError \"`once` must be followed by `method`, `class` or `trait`\"",
    "                  atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "        }",
    "    }",
    "    if (acceptKeyword \"method\") then {",
    "        methodDeclaration(btok)",
    "    } elseif {acceptKeyword \"class\" or \"trait\"} then {",
    "        classOrTrait(btok)",
    "    } else {",
    "        return      // no method, class or trait was found",
    "    }",
    "    values.last.isOnceMethod := isOnceMethod",
    "}",
    "",
    "method methodDeclaration(btok) {",
    "    next    // skip the \"method\" keyword",
    "    def methNode = methodHeader.setPositionFrom(btok)",
    "    def anns = doannotation",
    "    def originalValues = values",
    "    values := list []",
    "    var lBraceSym",
    "    if (sym.isLBrace) then {",
    "        lBraceSym := sym",
    "        next",
    "        skipSeparators",
    "        // sym is now the first token in the method body",
    "        while { successfulParse { statement } } do { separator }",
    "            // The body is a sequence of statements; the method ends",
    "            // when no further statement is found.",
    "        if (sym.isRBrace.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            def closingBrace = findClosingBrace(btok, false)",
    "            if (closingBrace.found.not) then {",
    "                if (sym.isEof) then {",
    "                    errormessages.syntaxError(\"end of program \" ++",
    "                        \"found while searching for the '}' to close \" ++",
    "                          \"a method declaration.\")",
    "                            atPosition(sym.line, sym.linePos)",
    "                }",
    "                if (closingBrace.tok == sym) then {",
    "                    suggestion.insert(\"}\")afterToken(lastToken)",
    "                } else {",
    "                    suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                }",
    "            }",
    "            suggestion.deleteToken(sym)",
    "            errormessages.syntaxError(\"a method must end with a '}'.\")atPosition(",
    "                sym.line, sym.linePos)withSuggestion(suggestion)",
    "        }",
    "        next",
    "    } elseif {false == anns} then {",
    "        def suggestion = errormessages.suggestion.new",
    "        def closingBrace = findClosingBrace(btok, true)",
    "        if (closingBrace.found.not) then {",
    "            if (closingBrace.tok == lastToken) then {",
    "                suggestion.insert(\" \\{}\")afterToken(lastToken)andTrailingSpace(true)",
    "            } else {",
    "                suggestion.addLine(closingBrace.tok.line + 0.1, \"}\")",
    "                suggestion.insert(\" \\{\")afterToken(lastToken)andTrailingSpace(true)",
    "            }",
    "        } else {",
    "            suggestion.insert(\" \\{\")afterToken(lastToken)andTrailingSpace(true)",
    "        }",
    "        errormessages.syntaxError(\"a method must have a '\\{' after the name.\")atPosition(",
    "            lastToken.line, lastToken.linePos + lastToken.size)withSuggestion(suggestion)",
    "    } else {",
    "        methNode.hasBody := false",
    "    }",
    "    methNode.body := values",
    "    if (false != anns) then { methNode.annotations.addAll(anns) }",
    "    if (methNode.hasBody) then {",
    "        def abst = methNode.isAbstract",
    "        if ( abst || methNode.isRequired ) then {",
    "            def which = if (abst) then { \"an abstract\" } else { \"a required\" }",
    "            errormessages.syntaxError \"{which} method must not have a method body\"",
    "                  atRange(lBraceSym.line, lBraceSym.linePos, lastToken.line, lastToken.linePos)",
    "        }",
    "    }",
    "    values := originalValues",
    "    util.setline(btok.line)",
    "    values.push(methNode)",
    "    reconcileComments",
    "}",
    "",
    "method separator {",
    "    pushComments",
    "    if (sym.isSeparator) then {",
    "        skipSeparators",
    "    } elseif { sym.isEof || sym.isRBrace } then {",
    "        // do nothing",
    "    } else {",
    "        errormessages.syntaxError \"statements must be separated by newlines (or semicolons)\"",
    "                    atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "    }",
    "}",
    "",
    "method methodDecRest(tm) {",
    "    // Process the remainder of a method header. These follow",
    "    // mostly the same rules as requests",
    "    //",
    "    // tm is a methodNode.  This method modifies tm.params in place.",
    "",
    "    var signature := tm.signature",
    "    while {sym.isIdentifier} do {",
    "        pushIdentifier",
    "        def part = ast.signaturePart.partName(values.pop.nameString)",
    "        if (sym.isLParen.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert \"(\" afterToken(lastToken)",
    "            errormessages.syntaxError(\"the declaration of a method with multiple \" ++",
    "                  \"parameter lists must have parentheses around each parameter list.\")",
    "                  atPosition(sym.line, sym.linePos)withSuggestion(suggestion)",
    "        }",
    "        next",
    "        var comma := false",
    "        while {",
    "            sym.isIdentifier || { sym.isOp && (sym.value == \"*\") }",
    "        } do {",
    "            if (sym.isOp) then {",
    "                next",
    "                errormessages.syntaxError(\"variable length parameter lists (parameters prefixed by '*') are no longer part of Grace.  Consider making {sym.value} a Collection.\")",
    "                    atPosition(lastToken.line, lastToken.linePos)",
    "            }",
    "            pushIdentifier",
    "            def nxt = values.pop",
    "            nxt.isBindingOccurrence := true",
    "            nxt.dtype := optionalTypeAnnotation",
    "            part.params.push(nxt)",
    "            if (sym.isComma) then {",
    "                comma := sym",
    "                next",
    "            }",
    "        }",
    "        if (sym.isRParen.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\")\")afterToken(lastToken)",
    "            errormessages.syntaxError \"a parameter list beginning with a '(' must end with a ')'\"",
    "                  atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                  withSuggestion(suggestion)",
    "        }",
    "        next",
    "        signature.push(part)",
    "    }",
    "}",
    "",
    "method optionalTypeAnnotation {",
    "    // Accept a type annotation if present.",
    "    // Returns the type, or false if there is no annotation",
    "    if (sym.isColon) then {",
    "        next",
    "        if (successfulParse { typeexpression }) then {",
    "            values.pop",
    "        } else {",
    "            checkBadTypeLiteral",
    "            def suggestions = list [ ]",
    "            var suggestion := errormessages.suggestion.new",
    "            suggestion.insert(\" Â«type nameÂ»\")afterToken(lastToken)",
    "            suggestions.push(suggestion)",
    "            suggestion := errormessages.suggestion.new",
    "            suggestion.deleteToken(lastToken)leading(true)trailing(false)",
    "            suggestions.push(suggestion)",
    "            errormessages.syntaxError(\"a type name or type expression must follow ':'.\")atPosition(",
    "                sym.line, sym.linePos)withSuggestions(suggestions)",
    "        }",
    "    } else {",
    "        false",
    "    }",
    "}",
    "",
    "method methodHeader {",
    "    // Accept a method header, including the -> and result type, and",
    "    // return an ast.methodNode with an empty list for the method body",
    "    if ((! acceptKeyword \"prefix\") && (sym.isIdentifier.not) && (sym.isOp.not)) then {",
    "        def suggestion = errormessages.suggestion.new",
    "        suggestion.insert(\" Â«method nameÂ»\")afterToken(lastToken)",
    "        errormessages.syntaxError(\"a method name must start with an identifier, or be an operator.\")",
    "            atPosition(lastToken.line, lastToken.linePos + lastToken.size + 1)",
    "                withSuggestion(suggestion)",
    "    }",
    "    def startToken = sym",
    "    def part = ast.signaturePart.partName(startToken.value)",
    "    next",
    "    def result = ast.methodNode.new( list [ part ], list [], false)",
    "    if ((startToken.value == \"[\") && {sym.isRSquare}) then {",
    "        errormessages.syntaxError(\"methods named '[]' and '[]:=' are no longer part of Grace.\")",
    "            atRange(lastToken.line, lastToken.linePos, sym.linePos)",
    "    }",
    "    if (sym.isLGeneric) then { part.typeParams := typeparameters }",
    "    if (sym.isBind) then {",
    "        part.name := part.name ++ \":=\"",
    "        next",
    "    } elseif { sym.isOp  && (startToken.value == \"prefix\") } then {",
    "        part.name := part.name ++ sym.value",
    "        next",
    "    }",
    "    if (sym.isLParen) then {",
    "        def lparen = sym",
    "        next",
    "        var id",
    "        var comma := false",
    "        while {",
    "            sym.isIdentifier || (sym.isOp && (sym.value == \"*\"))",
    "        } do {",
    "            // Parse the parameter list, including optional dtype",
    "            // annotations.",
    "            if (sym.isOp) then {",
    "                next",
    "                errormessages.syntaxError(\"variable length parameters (parameters prefixed by '*') are no longer part of Grace.  Consider making {sym.value} a sequence.\")",
    "                    atPosition(lastToken.line, lastToken.linePos)",
    "            }",
    "            pushIdentifier",
    "            id := values.pop",
    "            id.isBindingOccurrence := true",
    "            id.dtype := optionalTypeAnnotation",
    "            part.params.push(id)",
    "            if (sym.isComma) then {",
    "                comma := sym",
    "                next",
    "            } elseif { sym.isRParen.not } then {",
    "                def suggestion = errormessages.suggestion.new",
    "                suggestion.insert \")\" afterToken(lastToken)",
    "                errormessages.syntaxError(\"a parameter list beginning with a '(' must \" ++",
    "                      \"end with a ')'.\")",
    "                        atPosition(lastToken.line, lastToken.linePos + lastToken.size)",
    "                        withSuggestion(suggestion)",
    "            }",
    "        }",
    "        if (sym.isRParen.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            def rparen = findNextToken { t -> (t.isRParen) && (t.line == lastToken.line) }",
    "            if (false == rparen) then {",
    "                suggestion.replaceToken(lastToken)with(\")\")",
    "            } else {",
    "                suggestion.deleteToken(sym)",
    "            }",
    "            errormessages.syntaxError(\"a parameter list beginning with a '(' must end with a ')'.\")atRange(",
    "                lastToken.line, lastToken.linePos, lastToken.linePos)withSuggestion(suggestion)",
    "        }",
    "        if (sym.line == part.line) then {",
    "            part.lineLength := sym.linePos - part.linePos",
    "        }",
    "        next",
    "        if (sym.isIdentifier) then {",
    "            // The presence of an identifier here means",
    "            // a multi-part method name.",
    "            methodDecRest(result)",
    "        }",
    "    }",
    "    if (sym.isArrow) then {",
    "        // parse the return type",
    "        next",
    "        if (unsuccessfulParse {typeexpression} ) then {",
    "            errormessages.syntaxError(\"after an arrow, write the method's return \" ++",
    "                  \"type. If you don't want to state the return type, omit the arrow.\")",
    "                  atRange(sym.line, sym.linePos, sym.endPos)",
    "        }",
    "        result.dtype := values.pop",
    "    }",
    "    result",
    "}",
    "",
    "method typeparameters {",
    "    // precondition: sym.isLGeneric",
    "    def openBracket = sym",
    "    next",
    "    def typeIds = list.empty",
    "    def whereConditions = list.empty",
    "    if {sym.isIdentifier.not} then {",
    "        errormessages.syntaxError \"a 'âŸ¦' must be followed by one or more identifiers naming the type parameters\" atRange(sym.line, sym.linePos, sym.endPos)",
    "    }",
    "    pushIdentifier.bindingOccurrence         // does next",
    "    typeIds.add(values.pop)",
    "    while {sym.isComma} do {",
    "        next",
    "        if { sym.isIdentifier.not } then {",
    "            errormessages.syntaxError (\"a comma in a list of type parameters must \" ++",
    "                  \"be followed by the name of another type parameter\")",
    "                  atRange (sym.line, sym.linePos, sym.endPos)",
    "        }",
    "        pushIdentifier.bindingOccurrence         // does next",
    "        typeIds.push(values.pop)",
    "    }",
    "    if (acceptKeyword \"where\") then {",
    "        next",
    "        def conditionStart = sym",
    "        if (unsuccessfulParse {expression(noBlocks)}) then {",
    "            errormessages.syntaxError \"`where` must be followed by a condition on one of the type parameters\"",
    "                  atRange(conditionStart.line, conditionStart.linePos, conditionStart.endPos)",
    "        }",
    "        whereConditions.add(checkWhereCondition)",
    "        while {sym.isComma} do {",
    "            next",
    "            if (unsuccessfulParse {expression(noBlocks)}) then {",
    "                errormessages.syntaxError \"`where` must be followed by list of conditions on the type parameters\"",
    "                      atRange(sym.line, sym.linePos, sym.endPos)",
    "            }",
    "            whereConditions.add(checkWhereCondition)",
    "        }",
    "    }",
    "    if (sym.isRGeneric.not) then {",
    "        def suggestion = errormessages.suggestion.new",
    "        suggestion.insert \"âŸ§\" afterToken (lastToken)",
    "        errormessages.syntaxError \"a list of type parameters starting with 'âŸ¦' must end with 'âŸ§'\"",
    "              atRange(lastToken.line, lastToken.linePos, lastToken.endPos) withSuggestion (suggestion)",
    "    }",
    "    next",
    "    ast.typeParametersNode(typeIds) whereClauses(whereConditions).setPositionFrom(openBracket)",
    "}",
    "",
    "def typeRelations = [\"<:\", \"<*\", \":>\", \"*>\"]",
    "",
    "method checkWhereCondition {",
    "    // an expression is on the values stack.  Check that it is a valid where",
    "    // condition, and if so, remove it from calues and return it.",
    "    def cond = values.pop",
    "    if ((cond.kind â‰  \"op\") || { typeRelations.contains(cond.value).not }) then {",
    "        errormessages.syntaxError(\"a where condition must be a relation using \" ++",
    "              \"one of the operators {errormessages.readableStringFrom(typeRelations)}\")",
    "              atRange(cond)",
    "    }",
    "    cond",
    "}",
    "",
    "method doimport {",
    "    // Accept an import statement, which has the form",
    "    //      import â€¹stringâ€º as â€¹identifierâ€º:â€¹type expressionâ€º is â€¹annotationâ€º",
    "    if (acceptKeyword \"import\") then {",
    "        def importSym = sym",
    "        next",
    "        if (sym.kind != \"string\") then {",
    "            var suggestion := errormessages.suggestion.new",
    "            var errorPos",
    "            if ((sym.isIdentifier) && (sym.line == lastToken.line)) then {",
    "                suggestion.replaceToken(sym)with(\"\\\"{sym.value}\\\"\")",
    "                errorPos := sym.linePos",
    "            } else {",
    "                suggestion.insert(\" \\\"Â«module nameÂ»\\\"\")afterToken(lastToken)",
    "                errorPos := lastToken.linePos + lastToken.size + 1",
    "            }",
    "            errormessages.syntaxError(\"an import statement must have the name of the module to be imported (in quotes), 'as', and an identifier after 'import'.\")atPosition(",
    "                lastToken.line, errorPos)withSuggestion(suggestion)",
    "        }",
    "        pushString",
    "        def p = values.pop",
    "        if (! acceptKeyword \"as\") then {",
    "            var suggestion := errormessages.suggestion.new",
    "            if ((sym.isIdentifier) && (sym.line == lastToken.line)) then {",
    "                suggestion.insert(\" as\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.insert(\" as {p.value}\")afterToken(lastToken)",
    "            }",
    "            errormessages.syntaxError(\"an import statement must have 'as', followed by an identifier, after the name of the module in quotes.\")atPosition(",
    "                lastToken.line, lastToken.linePos + lastToken.size + 1)withSuggestion(suggestion)",
    "        }",
    "        next",
    "        if (sym.kind != \"identifier\") then {",
    "            var suggestion := errormessages.suggestion.new",
    "            var errorPos",
    "            if ((sym.isString) && (sym.line == lastToken.line)) then {",
    "                suggestion.replaceToken(sym)with(\"{sym.value}\")",
    "                errorPos := sym.linePos",
    "            } else {",
    "                suggestion.insert(\" {p.value}\")afterToken(lastToken)",
    "                errorPos := lastToken.linePos + lastToken.size + 1",
    "            }",
    "            errormessages.syntaxError(\"an import statement must have an identifier after 'as'.\")atPosition(",
    "                lastToken.line, errorPos)withSuggestion(suggestion)",
    "        }",
    "        pushIdentifier",
    "        def name = values.pop",
    "        name.isBindingOccurrence := true",
    "        def dtype = optionalTypeAnnotation",
    "        def o = ast.importNode.new(p.value, name, dtype).setPositionFrom(importSym)",
    "        def anns = doannotation",
    "        if (false != anns) then { o.annotations.addAll(anns) }",
    "        values.push(o)",
    "        reconcileComments",
    "    }",
    "}",
    "",
    "method doreturn {",
    "    // Accept a return statement; 'return' is followed by an optional expression.",
    "    if (acceptKeyword \"return\") then {",
    "        def retTok = sym",
    "        next",
    "        var retval",
    "        if (sym.isRBrace.not) then {",
    "            if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                def suggestions = list [ ]",
    "                var suggestion := errormessages.suggestion.new",
    "                def nextTok = findNextValidToken [\"rbrace\", \"separator\"]",
    "                if (nextTok == sym) then {",
    "                    suggestion.insert(\" Â«expressionÂ»\")afterToken(lastToken)",
    "                    suggestions.push(suggestion)",
    "                    if (sym.isSeparator.not) then {",
    "                        suggestion := errormessages.suggestion.new",
    "                        suggestion.deleteToken(sym)leading(true)trailing(false)",
    "                        suggestions.push(suggestion)",
    "                    }",
    "                } else {",
    "                    suggestion.replaceTokenRange(sym, nextTok.prev)leading(true)trailing(false)with(\" Â«expressionÂ»\")",
    "                    suggestions.push(suggestion)",
    "                    suggestion := errormessages.suggestion.new",
    "                    suggestion.deleteTokenRange(sym, nextTok.prev)leading(true)trailing(false)",
    "                    suggestions.push(suggestion)",
    "                }",
    "                errormessages.syntaxError (\"a `return` statement must be followed \" ++",
    "                    \"by an expression, or by the end of the block.\")",
    "                    atRange (retTok.line, retTok.linePos, sym.linePos)",
    "                    withSuggestions (suggestions)",
    "            }",
    "            retval := values.pop",
    "        } else {",
    "            retval := ast.identifierNode.new(\"done\", false).setStart(ast.noPosition)",
    "            retval.end := ast.noPosition",
    "        }",
    "        util.setPosition(retTok.line, retTok.linePos)",
    "        var o := ast.returnNode.new(retval)",
    "        values.push(o)",
    "    }",
    "}",
    "",
    "method methodInInterface {",
    "    // parses a method signature in an interface literal, and pushes the",
    "    // resulting node, along with any comments, onto values",
    "    values.push(methodSignature)",
    "    reconcileComments",
    "}",
    "",
    "method methodSignature {",
    "    // parses a method signature, and returns a methodSignatureNode",
    "    def firstTok = sym",
    "    def m = methodHeader",
    "    var rt := m.dtype",
    "    if (false == rt) then { rt := ast.unknownType }",
    "    ast.methodSignatureNode(m.signature, rt).setPositionFrom(firstTok)",
    "}",
    "",
    "method checkForSeparatorInInterface {",
    "    if (sym.isSeparator) then {",
    "        next",
    "    } else {",
    "        if (sym.isRBrace .not) then {",
    "            if (lastToken.line == sym.line) then {",
    "                def suggestion = errormessages.suggestion.new",
    "                def newLine = util.lines.at(sym.line).substringFrom(1)to(lastToken.linePos - 1) ++ sym.value",
    "                suggestion.addLine(sym.line + 0.1, newLine)",
    "                suggestion.deleteToken(sym)leading(true)trailing(true)",
    "                errormessages.syntaxError \"methods and types in an interface literal must be on separate lines (or separated by semicolons)\"",
    "                    atPosition (sym.line, sym.linePos)",
    "                    withSuggestion(suggestion)",
    "            }",
    "        }",
    "    }",
    "}",
    "",
    "method interfaceLiteral {",
    "    // parses an interface literal between braces, with optional",
    "    // leading 'interface' keyword.",
    "    def startToken = sym",
    "    if (acceptKeyword \"interface\") then {",
    "        next",
    "        if (sym.isLBrace.not) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.replaceToken(sym) with(\"\\{\")",
    "            errormessages.syntaxError \"interface literals must open with a brace.\"",
    "                atPosition(sym.line, sym.linePos) withSuggestion(suggestion)",
    "            return",
    "        }",
    "    }",
    "    if (sym.isLBrace) then {",
    "        def meths = list []",
    "        def types = list []",
    "        def mc = auto_count",
    "        auto_count := auto_count + 1",
    "        next",
    "        skipSeparators",
    "        while { sym.isRBrace.not } do {",
    "            if (acceptKeyword \"type\") then {",
    "                typedec",
    "                types.push(values.pop)",
    "            } else {",
    "                methodInInterface",
    "                meths.push(values.pop)",
    "            }",
    "            checkForSeparatorInInterface",
    "        }",
    "        next",
    "        util.setPosition(startToken.line, startToken.linePos)",
    "        def t = ast.typeLiteralNode.new(meths, types)",
    "        values.push(t)",
    "    }",
    "}",
    "",
    "method typedec {",
    "    // Accept a declaration: 'type = <type expression>'",
    "    if (acceptKeyword \"type\") then {",
    "        def line = sym.line",
    "        def pos = sym.linePos",
    "        next",
    "        if (sym.kind != \"identifier\") then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.insert(\" Â«type nameÂ»\")afterToken(lastToken)",
    "            errormessages.syntaxError(\"a type declaration must have a name after the 'type'.\")atPosition(",
    "                lastToken.line, lastToken.linePos + lastToken.size + 1)withSuggestion(suggestion)",
    "        }",
    "        pushIdentifier",
    "        util.setPosition(line, pos)",
    "        def nt = ast.typeDecNode.new(values.pop, false)",
    "        if (sym.isLGeneric) then { nt.typeParams := typeparameters }",
    "        nt.name.isBindingOccurrence := true",
    "        def anns = doannotation",
    "        if (sym.value â‰  \"=\") then {",
    "            var suggestion := errormessages.suggestion.new",
    "            def nextTok = findNextToken { t ->",
    "                (t.isLBrace) || (t.isKeyword)",
    "            }",
    "            if ((false == nextTok) || {nextTok == sym}) then {",
    "                suggestion.insert(\" =\")afterToken(lastToken)",
    "            } else {",
    "                suggestion.replaceTokenRange(sym, nextTok.prev)with(\"=\")",
    "            }",
    "            errormessages.syntaxError \"a type declaration must have an '=' after the type name.\"",
    "                  atPosition(lastToken.line, lastToken.linePos + lastToken.size + 1)",
    "                  withSuggestion(suggestion)",
    "        }",
    "        next",
    "        // Special case for interface Literals without leading 'interface' keyword.",
    "        if (sym.isLBrace) then {",
    "            interfaceLiteral",
    "        } elseif {acceptKeyword \"type\"} then {",
    "            errormessages.syntaxError \"an interface literal must start with 'interface', not 'type'.\"",
    "                  atRange(sym.line, sym.linePos, sym.endPos)",
    "        } else {",
    "            expression(noBlocks)",
    "        }",
    "        nt.value := values.pop",
    "        if (false != anns) then {",
    "            nt.annotations.addAll(anns)",
    "        }",
    "        values.push(nt)",
    "        reconcileComments",
    "    }",
    "}",
    "",
    "method statement {",
    "    // Accept a statement.",
    "    //",
    "    // Here, a \"statement\" is more general than in the grammar: it means",
    "    // anything that is legal at the top level, and inside object constructors,",
    "    // including expressions.",
    "    // A statement may also be a bind statement x := y, which creates a",
    "    // bind AST node out of the expressions on either side (which at this point",
    "    // can be any arbitrary expression).",
    "    // When the parse tree is examined during identifierresolution, illegal",
    "    // constructs (such as type and method declarations that are not inside objects)",
    "    // will be flagged as errors.  This gives better error messages than \"invalid",
    "    // token\", which is what would be generated here due to an unexpected `type`",
    "    // or `method` keyword.",
    "",
    "    statementToken := sym",
    "    def btok = sym",
    "    pushComments",
    "    if (sym.isKeyword) then {",
    "        def symValue = sym.value",
    "        if (symValue == \"var\") then {",
    "            vardec",
    "        } elseif { symValue == \"def\" } then {",
    "            defdec",
    "        } elseif { symValue == \"import\" } then {",
    "            doimport",
    "        } elseif { symValue == \"dialect\" } then {",
    "            dodialect",
    "        } elseif { symValue == \"type\" } then {",
    "            typedec",
    "        } elseif { symValue == \"return\" } then {",
    "            doreturn",
    "        } elseif { acceptKeyword \"object\" } then {",
    "            doobject",
    "        } elseif { acceptKeyword \"interface\" } then {",
    "            interfaceLiteral",
    "        } else {",
    "            methodClassOrTrait",
    "        }",
    "    } else {",
    "        if (successfulParse {expression(blocksOK)}) then {",
    "            if (( values.last.isIdentifier || values.last.isMember ) && {sym.isBind}) then {",
    "                var dest := values.pop",
    "                if (dest.kind == \"lbrace\") then {",
    "                    print \"sym = {sym}, sym.line = {sym.line}\"",
    "                    ProgrammingError.raise \"popped lbrace token while parsing statement\"",
    "                }",
    "                next",
    "                if (unsuccessfulParse {expression(blocksOK)}) then {",
    "                    reportBadRhs",
    "                }",
    "                var val := values.pop",
    "                util.setPosition(btok.line, btok.linePos)",
    "                var o := ast.bindNode.new(dest, val)",
    "                values.push(o)",
    "            }",
    "        }",
    "    }",
    "    reconcileComments",
    "    if (sym.isEof) then {",
    "        return true",
    "    }",
    "}",
    "",
    "method pushComments {",
    "    // Push a comment onto the comments stack as a commentNode. If",
    "    // there are consecutive comments following, deal with them all.",
    "    // Adjacent comments extend the first; a break of a blank line",
    "    // starts a new comment node.",
    "",
    "    if ( sym.isComment.not ) then { return }",
    "    util.setPosition(sym.line, sym.linePos)",
    "    var o := ast.commentNode.new(sym.value)",
    "    if ((lastToken.line == sym.line) && (lastToken.kind != \"comment\")) then {",
    "        o.isPartialLine := true",
    "    } elseif { lastToken.line < (sym.line - 1) } then {",
    "        o.isPreceededByBlankLine := true",
    "    }",
    "    comments.push(o)",
    "    while {",
    "        nextToken",
    "        sym.isComment",
    "    } do {",
    "        o := ast.commentNode.new(sym.value)",
    "        if ( comments.last.endLine == (sym.line - 1) ) then {",
    "            comments.last.extendCommentUsing(o)",
    "        } else {",
    "            comments.push(o)",
    "            if ( lastToken.line < (sym.line - 1) ) then {",
    "                o.isPreceededByBlankLine := true",
    "            }",
    "        }",
    "    }",
    "}",
    "",
    "method reconcileComments {",
    "    // Should be requested after a new node that represents a \"syntactic unit\"",
    "    // to which comments can be attached is pushed onto `values`",
    "    // Finds comments associated with that node, removes them from comments",
    "    // stack, and puts them in that node's comments attribute.",
    "",
    "    pushComments",
    "    def node = if (values.isEmpty) then {",
    "        moduleObject ",
    "    } else {",
    "        values.last",
    "    }",
    "    if (node.kind == \"lbrace\") then {",
    "        // lbrace nodes are not AST nodes.  They are used to mark the stack for",
    "        // nested expressions.  Hence, no comments should be attached to them.",
    "        return",
    "    }",
    "    def oLine = node.line",
    "    def preComments = list.empty",
    "    def postComments = list.empty",
    "",
    "    var ix := comments.size",
    "    while { ix > 0 } do {",
    "        def each = comments.at(ix)",
    "        def isPostComment = (each.line == oLine) || (each.line == (oLine+1))",
    "        def isPreComment = each.isPreceededByBlankLine && (each.endLine == (oLine-1))",
    "        if (isPostComment) then {",
    "            postComments.push(comments.removeAt(ix))",
    "        } elseif { isPreComment } then {",
    "            preComments.addFirst(comments.removeAt(ix))",
    "        } elseif { each.endLine < (oLine-1) } then {",
    "            ix := 0     // exit from while",
    "        }",
    "        ix := ix - 1",
    "    }",
    "",
    "    def postSz = postComments.size",
    "    def preSz = preComments.size",
    "",
    "    if ((postSz > 1) && (preSz > 1)) then {",
    "        preComments.last.value := preComments.last.value ++ \"\\n\"",
    "    }",
    "    node.addComments(preComments)",
    "    node.addComments(postComments)",
    "}",
    "",
    "method checkBadOperators {",
    "    if (sym.value == \"=\") then {",
    "        def sugg = errormessages.suggestion.new",
    "        sugg.insert(\"=\")afterToken(sym)",
    "        errormessages.syntaxError(\"use '==' to test equality, not '='.\")",
    "            atRange(sym.line, sym.linePos, sym.linePos)",
    "            withSuggestion(sugg)",
    "    }",
    "}",
    "",
    "method checkBadTypeLiteral {",
    "    if (sym.isLBrace) then {",
    "        def sugg = errormessages.suggestion.new",
    "        sugg.insert(\"type \") beforeToken(sym)",
    "        errormessages.syntaxError(\"type literals must start with the keyword 'type'.\")",
    "            atRange(sym.line, sym.linePos, sym.linePos)",
    "            withSuggestion(sugg)",
    "    }",
    "}",
    "",
    "method checkUnexpectedTokenAfterStatement {",
    "    if (sym.line == lastToken.line) then {",
    "        if ((sym.isOp) && (sym.value == \"=\") && (lastToken.isIdentifier)) then {",
    "            def sugg = errormessages.suggestion.new",
    "            def suggestions = list [ ]",
    "            sugg.replaceToken(sym)leading(false)trailing(false)with(\":=\")",
    "            suggestions.push(sugg)",
    "            def sugg2 = errormessages.suggestion.new",
    "            sugg2.replaceToken(sym)leading(false)trailing(false)with \"==\"",
    "            suggestions.push(sugg2)",
    "            errormessages.syntaxError(\"assignment uses ':=', not '='.\")",
    "                atRange(sym.line, sym.linePos, sym.linePos)",
    "                withSuggestions (suggestions)",
    "        }",
    "        if (sym.kind != \"rbrace\") then {",
    "            def suggestions = list [ ]",
    "            var suggestion",
    "            if ( (values.size > 0) && { (values.last.isIdentifier) || { values.last.isMember }} && { sym.isIdentifier } ) then {",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.replaceToken(sym)leading(true)trailing(false)with(\"({sym.value})\")",
    "                suggestions.push(suggestion)",
    "                if (false != sym.next) then {",
    "                    def n = sym.next",
    "                    if (n.line == sym.line) then {",
    "                        suggestion := errormessages.suggestion.new",
    "                        suggestion.replaceToken(sym)leading(true)trailing(false)with(\"({sym.value}\")",
    "                        suggestion.append \")\" onLine(sym.line)",
    "                        suggestions.push(suggestion)",
    "                    }",
    "                }",
    "                if (values.last.isIdentifier) then {",
    "                    suggestion := errormessages.suggestion.new",
    "                    suggestion.replaceToken(sym)leading(false)trailing(false)with(\"\\\"{sym.value}\\\"\")",
    "                    suggestions.push(suggestion)",
    "                }",
    "            }",
    "            def nextTok = findNextValidToken [\"rbrace\"]",
    "            if (nextTok == sym) then {",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.addLine(lastToken.line, util.lines.at(lastToken.line).substringFrom(1)to(lastToken.endPos))",
    "                def newLine = util.lines.at(sym.line).substringFrom(sym.linePos)to(util.lines.at(sym.line).size)",
    "                suggestion.addLine(lastToken.line + 0.1, newLine)",
    "                suggestions.push(suggestion)",
    "            } else {",
    "                suggestion := errormessages.suggestion.new",
    "                suggestion.deleteTokenRange(sym, nextTok.prev)leading(true)trailing(false)",
    "                suggestions.push(suggestion)",
    "            }",
    "            errormessages.syntaxError(",
    "                \"multiple statements must be separated by a newline or a semicolon. \" ++",
    "                  \"This error is often caused by unbalanced parentheses, \" ++",
    "                    \"or by omitting a part of a method name.\\nsym = {sym}\")",
    "                      atPosition (sym.line, sym.linePos) withSuggestions (suggestions)",
    "        }",
    "    }",
    "}",
    "",
    "",
    "method parse(toks) {",
    "    // Parses toks, a linked list of tokens, and returns an AST moduleNode",
    "    // corresponding to it.",
    "",
    "    util.log_verbose \"parsing.\"",
    "    moduleObject := ast.moduleNode.body(values) named (util.modname)",
    "",
    "    if (toks.size == 0) then {",
    "        return moduleObject",
    "    }",
    "    tokens := toks",
    "    while { next ; sym.isSeparator } do { }",
    "",
    "    if (sym.indent â‰  0) then {",
    "        def msg = \"the first line must not be indented\"",
    "        errormessages.syntaxError (msg)",
    "              atRange (sym.line, 1, sym.indent)",
    "    }",
    "",
    "    while {sym.isEof.not} do {",
    "        def oldlength = tokens.size",
    "        pushComments",
    "        methodClassOrTrait",
    "        pushComments",
    "        if (successfulParse { inheritOrUse }) then {",
    "            def parentNode = values.pop",
    "            if (parentNode.isUse) then {",
    "                moduleObject.usedTraits.add(parentNode)",
    "            } elseif { moduleObject.usedTraits.isEmpty } then {",
    "                moduleObject.superclass := parentNode",
    "            } else {",
    "                errormessages.syntaxError(\"'inherit' must come \" ++",
    "                    \"before 'use' in a module.\")",
    "                    atRange(parentNode.line, parentNode.linePos,",
    "                    parentNode.linePos + 6)",
    "            }",
    "        }",
    "        pushComments",
    "        statement",
    "        pushComments",
    "        if (tokens.size == oldlength) then {",
    "            def suggestion = errormessages.suggestion.new",
    "            suggestion.deleteToken(sym)",
    "            errormessages.syntaxError (\"invalid statement. This is often \" ++",
    "                \"caused by an extra '}', ')', or ']'.\")",
    "                atRange (sym.line, sym.linePos, sym.endPos)",
    "                withSuggestion (suggestion)",
    "        }",
    "        separator",
    "    }",
    "    return moduleObject",
    "}" ];
}
function gracecode_parser() {
  importedModules["parser"] = this;
  var module$parser = this;
  this.definitionModule = "parser";
  this.definitionLine = 1;
  var var_prelude = var___95__prelude;
  this.closureKeys = this.closureKeys || [];
  this.closureKeys.push("outer_parser_1");
  this.outer_parser_1 = var_prelude;
  // Dialect "standardGrace"
  var_prelude = do_import("standardGrace", gracecode_standardGrace);
  this.outer = var_prelude;
  setLineNumber(1);    // compilenode import
  // Import of "io" as io
  if (typeof gracecode_io == "undefined")
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString("could not find module io"));
  var var_io = do_import("io", gracecode_io);
  var func0 = function(argcv) {     // accessor method io
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("io", 0, numArgs - 0);
    if (var_io === undefined) raiseUninitializedVariable("io");
    return var_io;
  };    // end of method io
  this.methods["io"] = func0;
  func0.methodName = "io";
  func0.paramCounts = [0];
  func0.paramNames = [];
  func0.definitionLine = 1;
  func0.definitionModule = "parser";
  func0.debug = "import";
  func0.confidential = true;
  setLineNumber(2);    // compilenode import
  // Import of "ast" as ast
  if (typeof gracecode_ast == "undefined")
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString("could not find module ast"));
  var var_ast = do_import("ast", gracecode_ast);
  var func1 = function(argcv) {     // accessor method ast
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("ast", 0, numArgs - 0);
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    return var_ast;
  };    // end of method ast
  this.methods["ast"] = func1;
  func1.methodName = "ast";
  func1.paramCounts = [0];
  func1.paramNames = [];
  func1.definitionLine = 2;
  func1.definitionModule = "parser";
  func1.debug = "import";
  func1.confidential = true;
  setLineNumber(3);    // compilenode import
  // Import of "util" as util
  if (typeof gracecode_util == "undefined")
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString("could not find module util"));
  var var_util = do_import("util", gracecode_util);
  var func2 = function(argcv) {     // accessor method util
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("util", 0, numArgs - 0);
    if (var_util === undefined) raiseUninitializedVariable("util");
    return var_util;
  };    // end of method util
  this.methods["util"] = func2;
  func2.methodName = "util";
  func2.paramCounts = [0];
  func2.paramNames = [];
  func2.definitionLine = 3;
  func2.definitionModule = "parser";
  func2.debug = "import";
  func2.confidential = true;
  setLineNumber(4);    // compilenode import
  // Import of "errormessages" as errormessages
  if (typeof gracecode_errormessages == "undefined")
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString("could not find module errormessages"));
  var var_errormessages = do_import("errormessages", gracecode_errormessages);
  var func3 = function(argcv) {     // accessor method errormessages
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("errormessages", 0, numArgs - 0);
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    return var_errormessages;
  };    // end of method errormessages
  this.methods["errormessages"] = func3;
  func3.methodName = "errormessages";
  func3.paramCounts = [0];
  func3.paramNames = [];
  func3.definitionLine = 4;
  func3.definitionModule = "parser";
  func3.debug = "import";
  func3.confidential = true;
  var func4 = function(argcv) {    // method next, line 63
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("next", 0, numArgs - 0);
    }
    var if5 = GraceDone;
    setLineNumber(67);    // compilenode member
    // call case 6: other requests
    if (var_tokens === undefined) raiseUninitializedVariable("tokens");
    var call6 = request(var_tokens, "size", [0]);
    var opresult7 = request(call6, ">(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult7)) {
      setLineNumber(68);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call8 = selfRequest(this, "nextToken", [0]);
      setLineNumber(69);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call9 = selfRequest(this, "pushComments", [0]);
      if5 = call9;
    } else {
      setLineNumber(71);    // compilenode string
      var string11 = new GraceString("unexpectedly found the end of the input. ");
      setLineNumber(72);    // compilenode string
      var string12 = new GraceString("This is often caused by a missing '}'");
      var opresult13 = request(string11, "++(1)", [1], string12);
      setLineNumber(73);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call14 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call15 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call10 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult13, call14, call15);
      if5 = call10;
    }
    return if5;
  };    // end of method next
  this.methods["next"] = func4;
  func4.methodName = "next";
  func4.paramCounts = [0];
  func4.paramNames = [];
  func4.definitionLine = 63;
  func4.definitionModule = "parser";
  var func16 = function(argcv) {    // method nextToken, line 77
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("nextToken", 0, numArgs - 0);
    }
    setLineNumber(78);    // compilenode bind
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var_lastToken = var_sym;
    setLineNumber(79);    // compilenode member
    // call case 6: other requests
    if (var_tokens === undefined) raiseUninitializedVariable("tokens");
    var call17 = request(var_tokens, "poll", [0]);
    var_sym = call17;
    var if18 = GraceDone;
    setLineNumber(80);    // compilenode member
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call19 = request(var_util, "verbosity", [0]);
    var opresult20 = request(call19, ">(1)", [1], new GraceNum(110));
    if (Grace_isTrue(opresult20)) {
      var string22 = new GraceString("");
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var opresult23 = request(string22, "++(1)", [1], var_sym);
      var string24 = new GraceString("\n");
      var opresult25 = request(opresult23, "++(1)", [1], string24);
      // call case 6: other requests
      // call case 6: other requests
      if (var_io === undefined) raiseUninitializedVariable("io");
      var call26 = request(var_io, "error", [0]);
      var call21 = request(call26, "write(1)", [1], opresult25);
      if18 = call21;
    }
    setLineNumber(81);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call28 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call29 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call27 = request(var_util, "setPosition(2)", [2], call28, call29);
    return call27;
  };    // end of method nextToken
  func16.confidential = true;
  this.methods["nextToken"] = func16;
  func16.methodName = "nextToken";
  func16.paramCounts = [0];
  func16.paramNames = [];
  func16.definitionLine = 77;
  func16.definitionModule = "parser";
  var func30 = function(argcv) {    // method isOnAContinationLine, line 84
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("isOnAContinationLine", 0, numArgs - 0);
    }
    setLineNumber(86);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call31 = request(var_sym, "line", [0]);
    var var_currentLine = call31;
    setLineNumber(87);    // compilenode vardec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_s = var_sym;
    setLineNumber(88);    // compilenode block
    var block33 = new GraceBlock(this, 88, 0);
    block33.guard = jsTrue;
    block33.real = function block33() {
      setLineNumber(88);    // compilenode member
      // call case 6: other requests
      if (var_s === undefined) raiseUninitializedVariable("s");
      var call34 = request(var_s, "line", [0]);
      if (var_currentLine === undefined) raiseUninitializedVariable("currentLine");
      var opresult35 = request(call34, "==(1)", [1], var_currentLine);
      return opresult35;
    };
    let applyMeth33 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth33.methodName = "apply";
    applyMeth33.paramCounts = [0];
    applyMeth33.paramNames = [];
    applyMeth33.definitionLine = 88;
    applyMeth33.definitionModule = "parser";
    block33.methods["apply"] = applyMeth33;
    var block36 = new GraceBlock(this, 88, 0);
    block36.guard = jsTrue;
    block36.real = function block36() {
      var if37 = GraceDone;
      setLineNumber(89);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_s === undefined) raiseUninitializedVariable("s");
      var call39 = request(var_s, "hasPrev", [0]);
      var call38 = request(call39, "not", [0]);
      if (Grace_isTrue(call38)) {
        throw new ReturnException(GraceFalse, returnTarget);
      }
      setLineNumber(90);    // compilenode member
      // call case 6: other requests
      if (var_s === undefined) raiseUninitializedVariable("s");
      var call40 = request(var_s, "prev", [0]);
      var_s = call40;
      var if41 = GraceDone;
      setLineNumber(91);    // compilenode member
      // call case 6: other requests
      if (var_s === undefined) raiseUninitializedVariable("s");
      var call42 = request(var_s, "isSeparator", [0]);
      if (Grace_isTrue(call42)) {
        throw new ReturnException(GraceFalse, returnTarget);
      }
      return if41;
    };
    let applyMeth36 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth36.methodName = "apply";
    applyMeth36.paramCounts = [0];
    applyMeth36.paramNames = [];
    applyMeth36.definitionLine = 88;
    applyMeth36.definitionModule = "parser";
    block36.methods["apply"] = applyMeth36;
    // call case 2: outer request
    var call32 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block33, block36);
    setLineNumber(93);    // compilenode return
    return GraceTrue;
  };    // end of method isOnAContinationLine
  this.methods["isOnAContinationLine"] = func30;
  func30.methodName = "isOnAContinationLine";
  func30.paramCounts = [0];
  func30.paramNames = [];
  func30.definitionLine = 84;
  func30.definitionModule = "parser";
  var func43 = function(argcv) {    // method saveParsePosition, line 96
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("saveParsePosition", 0, numArgs - 0);
    }
    setLineNumber(97);    // compilenode member
    // call case 6: other requests
    if (var_tokens === undefined) raiseUninitializedVariable("tokens");
    var call44 = request(var_tokens, "savePosition", [0]);
    var var_lexerState = call44;
    setLineNumber(98);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call46 = request(var_values, "size", [0]);
    var array45 = new GraceSequence([var_lexerState, call46]);
    return array45;
  };    // end of method saveParsePosition
  this.methods["saveParsePosition"] = func43;
  func43.methodName = "saveParsePosition";
  func43.paramCounts = [0];
  func43.paramNames = [];
  func43.definitionLine = 96;
  func43.definitionModule = "parser";
  var func47 = function(argcv, var_saved) {    // method restoreParsePosition(_), line 101
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("restoreParsePosition(_)", 0, numArgs - 1);
    }
    setLineNumber(102);    // compilenode member
    // call case 6: other requests
    var call49 = request(var_saved, "first", [0]);
    // call case 6: other requests
    if (var_tokens === undefined) raiseUninitializedVariable("tokens");
    var call48 = request(var_tokens, "restorePosition(1)", [1], call49);
    setLineNumber(103);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_tokens === undefined) raiseUninitializedVariable("tokens");
    var call51 = request(var_tokens, "first", [0]);
    var call50 = request(call51, "prev", [0]);
    var_sym = call50;
    setLineNumber(104);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call52 = request(var_sym, "prev", [0]);
    var_lastToken = call52;
    setLineNumber(105);    // compilenode member
    // call case 6: other requests
    var call53 = request(var_saved, "second", [0]);
    var var_oldValueStackSize = call53;
    var if54 = GraceDone;
    setLineNumber(106);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call55 = request(var_values, "size", [0]);
    var opresult56 = request(var_oldValueStackSize, ">(1)", [1], call55);
    if (Grace_isTrue(opresult56)) {
      setLineNumber(107);    // compilenode string
      var string58 = new GraceString("can't restore parse position; the values stack has been popped");
      // call case 6: other requests
      // call case 2: outer request
      var call59 = selfRequest(var_prelude, "ProgrammingError", [0]);
      var call57 = request(call59, "raise(1)", [1], string58);
      if54 = call57;
    }
    setLineNumber(109);    // compilenode block
    var block61 = new GraceBlock(this, 109, 0);
    block61.guard = jsTrue;
    block61.real = function block61() {
      setLineNumber(109);    // compilenode op
      if (var_oldValueStackSize === undefined) raiseUninitializedVariable("oldValueStackSize");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call62 = request(var_values, "size", [0]);
      var opresult63 = request(var_oldValueStackSize, "\u2260(1)", [1], call62);
      return opresult63;
    };
    let applyMeth61 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth61.methodName = "apply";
    applyMeth61.paramCounts = [0];
    applyMeth61.paramNames = [];
    applyMeth61.definitionLine = 109;
    applyMeth61.definitionModule = "parser";
    block61.methods["apply"] = applyMeth61;
    var block64 = new GraceBlock(this, 109, 0);
    block64.guard = jsTrue;
    block64.real = function block64() {
      setLineNumber(109);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call65 = request(var_values, "pop", [0]);
      return call65;
    };
    let applyMeth64 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth64.methodName = "apply";
    applyMeth64.paramCounts = [0];
    applyMeth64.paramNames = [];
    applyMeth64.definitionLine = 109;
    applyMeth64.definitionModule = "parser";
    block64.methods["apply"] = applyMeth64;
    // call case 2: outer request
    var call60 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block61, block64);
    return call60;
  };    // end of method restoreParsePosition(_)
  this.methods["restoreParsePosition(1)"] = func47;
  func47.methodName = "restoreParsePosition(1)";
  func47.paramCounts = [1];
  func47.paramNames = ["saved"];
  func47.definitionLine = 101;
  func47.definitionModule = "parser";
  var func66 = function(argcv, var_tokenMatcher) {    // method findNextToken(_), line 112
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("findNextToken(_)", 0, numArgs - 1);
    }
    var if67 = GraceDone;
    setLineNumber(116);    // compilenode call
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    // call case 6: other requests
    var call68 = request(var_tokenMatcher, "apply(1)", [1], var_sym);
    if (Grace_isTrue(call68)) {
      setLineNumber(117);    // compilenode return
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      return var_sym;
    }
    setLineNumber(119);    // compilenode vardec
    var var_nextTok = GraceFalse;
    setLineNumber(120);    // compilenode vardec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_n = var_sym;
    setLineNumber(121);    // compilenode block
    var block70 = new GraceBlock(this, 121, 0);
    block70.guard = jsTrue;
    block70.real = function block70() {
      setLineNumber(121);    // compilenode op
      if (var_n === undefined) raiseUninitializedVariable("n");
      var opresult71 = request(GraceFalse, "\u2260(1)", [1], var_n);
      var block72 = new GraceBlock(this, 121, 0);
      block72.guard = jsTrue;
      block72.real = function block72() {
        setLineNumber(121);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult73 = request(GraceFalse, "==(1)", [1], var_nextTok);
        return opresult73;
      };
      let applyMeth72 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth72.methodName = "apply";
      applyMeth72.paramCounts = [0];
      applyMeth72.paramNames = [];
      applyMeth72.definitionLine = 121;
      applyMeth72.definitionModule = "parser";
      block72.methods["apply"] = applyMeth72;
      var opresult74 = request(opresult71, "&&(1)", [1], block72);
      var block75 = new GraceBlock(this, 121, 0);
      block75.guard = jsTrue;
      block75.real = function block75() {
        setLineNumber(121);    // compilenode member
        // call case 6: other requests
        if (var_n === undefined) raiseUninitializedVariable("n");
        var call76 = request(var_n, "indent", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call77 = request(var_lastToken, "indent", [0]);
        var opresult78 = request(call76, "\u2265(1)", [1], call77);
        return opresult78;
      };
      let applyMeth75 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth75.methodName = "apply";
      applyMeth75.paramCounts = [0];
      applyMeth75.paramNames = [];
      applyMeth75.definitionLine = 121;
      applyMeth75.definitionModule = "parser";
      block75.methods["apply"] = applyMeth75;
      var opresult79 = request(opresult74, "&&(1)", [1], block75);
      return opresult79;
    };
    let applyMeth70 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth70.methodName = "apply";
    applyMeth70.paramCounts = [0];
    applyMeth70.paramNames = [];
    applyMeth70.definitionLine = 121;
    applyMeth70.definitionModule = "parser";
    block70.methods["apply"] = applyMeth70;
    var block80 = new GraceBlock(this, 121, 0);
    block80.guard = jsTrue;
    block80.real = function block80() {
      var if81 = GraceDone;
      setLineNumber(122);    // compilenode call
      if (var_n === undefined) raiseUninitializedVariable("n");
      // call case 6: other requests
      var call82 = request(var_tokenMatcher, "apply(1)", [1], var_n);
      if (Grace_isTrue(call82)) {
        setLineNumber(123);    // compilenode bind
        if (var_n === undefined) raiseUninitializedVariable("n");
        var_nextTok = var_n;
        if81 = GraceDone;
      }
      setLineNumber(125);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call83 = request(var_n, "next", [0]);
      var_n = call83;
      return GraceDone;
    };
    let applyMeth80 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth80.methodName = "apply";
    applyMeth80.paramCounts = [0];
    applyMeth80.paramNames = [];
    applyMeth80.definitionLine = 121;
    applyMeth80.definitionModule = "parser";
    block80.methods["apply"] = applyMeth80;
    // call case 2: outer request
    var call69 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block70, block80);
    return var_nextTok;
  };    // end of method findNextToken(_)
  this.methods["findNextToken(1)"] = func66;
  func66.methodName = "findNextToken(1)";
  func66.paramCounts = [1];
  func66.paramNames = ["tokenMatcher"];
  func66.definitionLine = 112;
  func66.definitionModule = "parser";
  var func84 = function(argcv, var_tok) {    // method findNextTokenIndentedAt(_), line 130
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("findNextTokenIndentedAt(_)", 0, numArgs - 1);
    }
    var if85 = GraceDone;
    setLineNumber(131);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call86 = request(var_sym, "line", [0]);
    // call case 6: other requests
    var call87 = request(var_tok, "line", [0]);
    var opresult88 = request(call86, ">(1)", [1], call87);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call89 = request(var_sym, "indent", [0]);
    // call case 6: other requests
    var call90 = request(var_tok, "indent", [0]);
    var opresult91 = request(call89, "\u2264(1)", [1], call90);
    var opresult92 = request(opresult88, "&&(1)", [1], opresult91);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call93 = request(var_sym, "isEof", [0]);
    var opresult94 = request(opresult92, "||(1)", [1], call93);
    if (Grace_isTrue(opresult94)) {
      setLineNumber(132);    // compilenode return
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      return var_sym;
    }
    setLineNumber(134);    // compilenode vardec
    var var_nextTok = GraceFalse;
    setLineNumber(135);    // compilenode vardec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_n = var_sym;
    setLineNumber(136);    // compilenode block
    var block96 = new GraceBlock(this, 136, 0);
    block96.guard = jsTrue;
    block96.real = function block96() {
      setLineNumber(136);    // compilenode op
      if (var_n === undefined) raiseUninitializedVariable("n");
      var opresult97 = request(GraceFalse, "\u2260(1)", [1], var_n);
      var block98 = new GraceBlock(this, 136, 0);
      block98.guard = jsTrue;
      block98.real = function block98() {
        setLineNumber(136);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult99 = request(GraceFalse, "==(1)", [1], var_nextTok);
        return opresult99;
      };
      let applyMeth98 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth98.methodName = "apply";
      applyMeth98.paramCounts = [0];
      applyMeth98.paramNames = [];
      applyMeth98.definitionLine = 136;
      applyMeth98.definitionModule = "parser";
      block98.methods["apply"] = applyMeth98;
      var opresult100 = request(opresult97, "&&(1)", [1], block98);
      return opresult100;
    };
    let applyMeth96 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth96.methodName = "apply";
    applyMeth96.paramCounts = [0];
    applyMeth96.paramNames = [];
    applyMeth96.definitionLine = 136;
    applyMeth96.definitionModule = "parser";
    block96.methods["apply"] = applyMeth96;
    var block101 = new GraceBlock(this, 136, 0);
    block101.guard = jsTrue;
    block101.real = function block101() {
      var if102 = GraceDone;
      setLineNumber(137);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call103 = request(var_n, "line", [0]);
      // call case 6: other requests
      var call104 = request(var_tok, "line", [0]);
      var opresult105 = request(call103, ">(1)", [1], call104);
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call106 = request(var_n, "indent", [0]);
      // call case 6: other requests
      var call107 = request(var_tok, "indent", [0]);
      var opresult108 = request(call106, "\u2264(1)", [1], call107);
      var opresult109 = request(opresult105, "&&(1)", [1], opresult108);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call110 = request(var_sym, "isEof", [0]);
      var opresult111 = request(opresult109, "||(1)", [1], call110);
      if (Grace_isTrue(opresult111)) {
        setLineNumber(138);    // compilenode bind
        if (var_n === undefined) raiseUninitializedVariable("n");
        var_nextTok = var_n;
        if102 = GraceDone;
      }
      setLineNumber(140);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call112 = request(var_n, "next", [0]);
      var_n = call112;
      return GraceDone;
    };
    let applyMeth101 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth101.methodName = "apply";
    applyMeth101.paramCounts = [0];
    applyMeth101.paramNames = [];
    applyMeth101.definitionLine = 136;
    applyMeth101.definitionModule = "parser";
    block101.methods["apply"] = applyMeth101;
    // call case 2: outer request
    var call95 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block96, block101);
    return var_nextTok;
  };    // end of method findNextTokenIndentedAt(_)
  this.methods["findNextTokenIndentedAt(1)"] = func84;
  func84.methodName = "findNextTokenIndentedAt(1)";
  func84.paramCounts = [1];
  func84.paramNames = ["tok"];
  func84.definitionLine = 130;
  func84.definitionModule = "parser";
  var func113 = function(argcv, var_validFollowTokens) {    // method findNextValidToken(_), line 145
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("findNextValidToken(_)", 0, numArgs - 1);
    }
    setLineNumber(149);    // compilenode string
    var string116 = new GraceString("dot");
    var string117 = new GraceString("comma");
    var string118 = new GraceString("colon");
    var string119 = new GraceString("rparen");
    var string120 = new GraceString("rbrace");
    setLineNumber(150);    // compilenode string
    var string121 = new GraceString("rsquare");
    var string122 = new GraceString("arrow");
    var string123 = new GraceString("bind");
    var array115 = new GraceSequence([string116, string117, string118, string119, string120, string121, string122, string123]);
    // call case 6: other requests
    setLineNumber(149);    // compilenode member
    // call case 2: outer request
    var call124 = selfRequest(var_prelude, "set", [0]);
    var call114 = request(call124, "withAll(1)", [1], array115);
    var var_invalidTokens = call114;
    setLineNumber(152);    // compilenode vardec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_candidate = var_sym;
    setLineNumber(153);    // compilenode block
    var block126 = new GraceBlock(this, 153, 0);
    block126.guard = jsTrue;
    block126.real = function block126() {
      setLineNumber(153);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_candidate === undefined) raiseUninitializedVariable("candidate");
      var call128 = request(var_candidate, "isEof", [0]);
      var call127 = request(call128, "not", [0]);
      return call127;
    };
    let applyMeth126 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth126.methodName = "apply";
    applyMeth126.paramCounts = [0];
    applyMeth126.paramNames = [];
    applyMeth126.definitionLine = 153;
    applyMeth126.definitionModule = "parser";
    block126.methods["apply"] = applyMeth126;
    var block129 = new GraceBlock(this, 153, 0);
    block129.guard = jsTrue;
    block129.real = function block129() {
      var if130 = GraceDone;
      setLineNumber(154);    // compilenode member
      // call case 6: other requests
      if (var_candidate === undefined) raiseUninitializedVariable("candidate");
      var call132 = request(var_candidate, "kind", [0]);
      // call case 6: other requests
      var call131 = request(var_validFollowTokens, "contains(1)", [1], call132);
      if (Grace_isTrue(call131)) {
        setLineNumber(155);    // compilenode return
        if (var_candidate === undefined) raiseUninitializedVariable("candidate");
        throw new ReturnException(var_candidate, returnTarget);
      }
      var if133 = GraceDone;
      setLineNumber(157);    // compilenode call
      // call case 6: other requests
      // call case 6: other requests
      if (var_candidate === undefined) raiseUninitializedVariable("candidate");
      var call136 = request(var_candidate, "kind", [0]);
      // call case 6: other requests
      if (var_invalidTokens === undefined) raiseUninitializedVariable("invalidTokens");
      var call135 = request(var_invalidTokens, "contains(1)", [1], call136);
      var call134 = request(call135, "prefix!", [0]);
      if (Grace_isTrue(call134)) {
        setLineNumber(158);    // compilenode return
        if (var_candidate === undefined) raiseUninitializedVariable("candidate");
        throw new ReturnException(var_candidate, returnTarget);
      }
      setLineNumber(160);    // compilenode member
      // call case 6: other requests
      if (var_candidate === undefined) raiseUninitializedVariable("candidate");
      var call137 = request(var_candidate, "next", [0]);
      var_candidate = call137;
      return GraceDone;
    };
    let applyMeth129 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth129.methodName = "apply";
    applyMeth129.paramCounts = [0];
    applyMeth129.paramNames = [];
    applyMeth129.definitionLine = 153;
    applyMeth129.definitionModule = "parser";
    block129.methods["apply"] = applyMeth129;
    // call case 2: outer request
    var call125 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block126, block129);
    setLineNumber(162);    // compilenode return
    return var_candidate;
  };    // end of method findNextValidToken(_)
  this.methods["findNextValidToken(1)"] = func113;
  func113.methodName = "findNextValidToken(1)";
  func113.paramCounts = [1];
  func113.paramNames = ["validFollowTokens"];
  func113.definitionLine = 145;
  func113.definitionModule = "parser";
  var func138 = function(argcv, var_token, var_inserted) {    // method findClosingBrace(_,_), line 165
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("findClosingBrace(_,_)", 0, numArgs - 2);
    }
    setLineNumber(172);    // compilenode vardec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_n = var_sym;
    var if139 = GraceDone;
    setLineNumber(173);    // compilenode if
    if (Grace_isTrue(var_inserted)) {
      if139 = new GraceNum(1);
    } else {
      if139 = new GraceNum(0);
    }
    var var_numOpening = if139;
    setLineNumber(174);    // compilenode num
    var var_numClosing = new GraceNum(0);
    setLineNumber(175);    // compilenode object
    var obj140_build = function(ignore, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_parser_175");
      this.outer_parser_175 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      this.data.found = undefined;
      var reader141_found = function() {  // reader method found
          if (this.data.found === undefined) raiseUninitializedVariable("found");
          return this.data.found;
      };
      reader141_found.isVar = true;
      this.methods["found"] = reader141_found;
      var writer142_found = function(argcv, n) {   // writer method found:=(_)
        this.data.found = n;
        return GraceDone;
      };
      this.methods["found:=(1)"] = writer142_found;
      this.data.tok = undefined;
      var reader143_tok = function() {  // reader method tok
          if (this.data.tok === undefined) raiseUninitializedVariable("tok");
          return this.data.tok;
      };
      reader143_tok.isVar = true;
      this.methods["tok"] = reader143_tok;
      var writer144_tok = function(argcv, n) {   // writer method tok:=(_)
        this.data.tok = n;
        return GraceDone;
      };
      this.methods["tok:=(1)"] = writer144_tok;
      this.mutable = true;
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 175;
          m.definitionModule = "parser";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj140_init = function() {    // init of object on line 175
        this.data.found = undefined;
        this.data.tok = undefined;
      };
      return obj140_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj140 = emptyGraceObject("result", "parser", 175);
    var obj140_init = obj140_build.call(obj140, null, this, [], []);
    obj140_init.call(obj140);  // end of compileobject
    var var_result = obj140;
    setLineNumber(180);    // compilenode block
    var block146 = new GraceBlock(this, 180, 0);
    block146.guard = jsTrue;
    block146.real = function block146() {
      setLineNumber(180);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call148 = request(var_n, "isEof", [0]);
      var call147 = request(call148, "not", [0]);
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call149 = request(var_n, "line", [0]);
      // call case 6: other requests
      var call150 = request(var_token, "line", [0]);
      var opresult151 = request(call149, "==(1)", [1], call150);
      var opresult152 = request(call147, "&&(1)", [1], opresult151);
      return opresult152;
    };
    let applyMeth146 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth146.methodName = "apply";
    applyMeth146.paramCounts = [0];
    applyMeth146.paramNames = [];
    applyMeth146.definitionLine = 180;
    applyMeth146.definitionModule = "parser";
    block146.methods["apply"] = applyMeth146;
    var block153 = new GraceBlock(this, 180, 0);
    block153.guard = jsTrue;
    block153.real = function block153() {
      var if154 = GraceDone;
      setLineNumber(181);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call155 = request(var_n, "isLBrace", [0]);
      if (Grace_isTrue(call155)) {
        setLineNumber(182);    // compilenode op
        if (var_numOpening === undefined) raiseUninitializedVariable("numOpening");
        var sum156 = request(var_numOpening, "+(1)", [1], new GraceNum(1));
        var_numOpening = sum156;
        if154 = GraceDone;
      } else {
        var if157 = GraceDone;
        setLineNumber(183);    // compilenode member
        // call case 6: other requests
        if (var_n === undefined) raiseUninitializedVariable("n");
        var call158 = request(var_n, "isRBrace", [0]);
        if (Grace_isTrue(call158)) {
          setLineNumber(184);    // compilenode op
          if (var_numClosing === undefined) raiseUninitializedVariable("numClosing");
          var sum159 = request(var_numClosing, "+(1)", [1], new GraceNum(1));
          var_numClosing = sum159;
          if157 = GraceDone;
        }
        if154 = if157;
      }
      setLineNumber(186);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call160 = request(var_n, "next", [0]);
      var_n = call160;
      return GraceDone;
    };
    let applyMeth153 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth153.methodName = "apply";
    applyMeth153.paramCounts = [0];
    applyMeth153.paramNames = [];
    applyMeth153.definitionLine = 180;
    applyMeth153.definitionModule = "parser";
    block153.methods["apply"] = applyMeth153;
    // call case 2: outer request
    var call145 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block146, block153);
    setLineNumber(189);    // compilenode block
    var block162 = new GraceBlock(this, 189, 0);
    block162.guard = jsTrue;
    block162.real = function block162() {
      setLineNumber(189);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call164 = request(var_n, "isEof", [0]);
      var call163 = request(call164, "not", [0]);
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call165 = request(var_n, "indent", [0]);
      // call case 6: other requests
      var call166 = request(var_token, "indent", [0]);
      var opresult167 = request(call165, ">(1)", [1], call166);
      var opresult168 = request(call163, "&&(1)", [1], opresult167);
      return opresult168;
    };
    let applyMeth162 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth162.methodName = "apply";
    applyMeth162.paramCounts = [0];
    applyMeth162.paramNames = [];
    applyMeth162.definitionLine = 189;
    applyMeth162.definitionModule = "parser";
    block162.methods["apply"] = applyMeth162;
    var block169 = new GraceBlock(this, 189, 0);
    block169.guard = jsTrue;
    block169.real = function block169() {
      var if170 = GraceDone;
      setLineNumber(190);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call171 = request(var_n, "isLBrace", [0]);
      if (Grace_isTrue(call171)) {
        setLineNumber(191);    // compilenode op
        if (var_numOpening === undefined) raiseUninitializedVariable("numOpening");
        var sum172 = request(var_numOpening, "+(1)", [1], new GraceNum(1));
        var_numOpening = sum172;
        if170 = GraceDone;
      } else {
        var if173 = GraceDone;
        setLineNumber(192);    // compilenode member
        // call case 6: other requests
        if (var_n === undefined) raiseUninitializedVariable("n");
        var call174 = request(var_n, "isRBrace", [0]);
        if (Grace_isTrue(call174)) {
          setLineNumber(193);    // compilenode op
          if (var_numClosing === undefined) raiseUninitializedVariable("numClosing");
          var sum175 = request(var_numClosing, "+(1)", [1], new GraceNum(1));
          var_numClosing = sum175;
          if173 = GraceDone;
        }
        if170 = if173;
      }
      setLineNumber(195);    // compilenode member
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call176 = request(var_n, "next", [0]);
      var_n = call176;
      return GraceDone;
    };
    let applyMeth169 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth169.methodName = "apply";
    applyMeth169.paramCounts = [0];
    applyMeth169.paramNames = [];
    applyMeth169.definitionLine = 189;
    applyMeth169.definitionModule = "parser";
    block169.methods["apply"] = applyMeth169;
    // call case 2: outer request
    var call161 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block162, block169);
    var if177 = GraceDone;
    setLineNumber(197);    // compilenode member
    // call case 6: other requests
    var call178 = request(var_n, "isRBrace", [0]);
    if (Grace_isTrue(call178)) {
      setLineNumber(198);    // compilenode call
      // call case 6: other requests
      if (var_result === undefined) raiseUninitializedVariable("result");
      var call179 = request(var_result, "found:=(1)", [1], GraceTrue);
      setLineNumber(199);    // compilenode call
      if (var_n === undefined) raiseUninitializedVariable("n");
      // call case 6: other requests
      if (var_result === undefined) raiseUninitializedVariable("result");
      var call180 = request(var_result, "tok:=(1)", [1], var_n);
      if177 = call180;
    } else {
      var if181 = GraceDone;
      setLineNumber(200);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_n === undefined) raiseUninitializedVariable("n");
      var call183 = request(var_n, "prev", [0]);
      var call182 = request(call183, "isRBrace", [0]);
      if (var_numOpening === undefined) raiseUninitializedVariable("numOpening");
      if (var_numClosing === undefined) raiseUninitializedVariable("numClosing");
      var opresult184 = request(var_numOpening, "==(1)", [1], var_numClosing);
      var opresult185 = request(call182, "&&(1)", [1], opresult184);
      if (Grace_isTrue(opresult185)) {
        setLineNumber(202);    // compilenode call
        // call case 6: other requests
        if (var_result === undefined) raiseUninitializedVariable("result");
        var call186 = request(var_result, "found:=(1)", [1], GraceTrue);
        setLineNumber(203);    // compilenode member
        // call case 6: other requests
        if (var_n === undefined) raiseUninitializedVariable("n");
        var call188 = request(var_n, "prev", [0]);
        // call case 6: other requests
        if (var_result === undefined) raiseUninitializedVariable("result");
        var call187 = request(var_result, "tok:=(1)", [1], call188);
        if181 = call187;
      } else {
        setLineNumber(205);    // compilenode call
        // call case 6: other requests
        if (var_result === undefined) raiseUninitializedVariable("result");
        var call189 = request(var_result, "found:=(1)", [1], GraceFalse);
        setLineNumber(206);    // compilenode member
        // call case 6: other requests
        if (var_n === undefined) raiseUninitializedVariable("n");
        var call191 = request(var_n, "prev", [0]);
        // call case 6: other requests
        if (var_result === undefined) raiseUninitializedVariable("result");
        var call190 = request(var_result, "tok:=(1)", [1], call191);
        if181 = call190;
      }
      if177 = if181;
    }
    return var_result;
  };    // end of method findClosingBrace(_,_)
  this.methods["findClosingBrace(2)"] = func138;
  func138.methodName = "findClosingBrace(2)";
  func138.paramCounts = [2];
  func138.paramNames = ["token", "inserted"];
  func138.definitionLine = 165;
  func138.definitionModule = "parser";
  var func192 = function(argcv, var_t) {    // method accept(_), line 212
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("accept(_)", 0, numArgs - 1);
    }
    setLineNumber(215);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call193 = request(var_sym, "kind", [0]);
    var opresult194 = request(call193, "==(1)", [1], var_t);
    return opresult194;
  };    // end of method accept(_)
  this.methods["accept(1)"] = func192;
  func192.methodName = "accept(1)";
  func192.paramCounts = [1];
  func192.paramNames = ["t"];
  func192.definitionLine = 212;
  func192.definitionModule = "parser";
  var func195 = function(argcv, var_kw) {    // method acceptKeyword(_), line 218
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("acceptKeyword(_)", 0, numArgs - 1);
    }
    var if196 = GraceDone;
    setLineNumber(219);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call198 = request(var_sym, "isKeyword", [0]);
    var call197 = request(call198, "not", [0]);
    if (Grace_isTrue(call197)) {
      return GraceFalse;
    }
    setLineNumber(220);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call199 = request(var_sym, "value", [0]);
    var var_v = call199;
    var if200 = GraceDone;
    setLineNumber(221);    // compilenode op
    var opresult201 = request(var_v, "==(1)", [1], var_kw);
    if (Grace_isTrue(opresult201)) {
      return GraceTrue;
    }
    setLineNumber(222);    // compilenode return
    return GraceFalse;
  };    // end of method acceptKeyword(_)
  this.methods["acceptKeyword(1)"] = func195;
  func195.methodName = "acceptKeyword(1)";
  func195.paramCounts = [1];
  func195.paramNames = ["kw"];
  func195.definitionLine = 218;
  func195.definitionModule = "parser";
  var func202 = function(argcv, var_kw1, var_kw2) {    // method acceptKeyword(_)or(_), line 225
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("acceptKeyword(_)or(_)", 0, numArgs - 2);
    }
    var if203 = GraceDone;
    setLineNumber(226);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call205 = request(var_sym, "isKeyword", [0]);
    var call204 = request(call205, "not", [0]);
    if (Grace_isTrue(call204)) {
      return GraceFalse;
    }
    setLineNumber(227);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call206 = request(var_sym, "value", [0]);
    var var_v = call206;
    var if207 = GraceDone;
    setLineNumber(228);    // compilenode op
    var opresult208 = request(var_v, "==(1)", [1], var_kw1);
    if (Grace_isTrue(opresult208)) {
      return GraceTrue;
    }
    var if209 = GraceDone;
    setLineNumber(229);    // compilenode op
    var opresult210 = request(var_v, "==(1)", [1], var_kw2);
    if (Grace_isTrue(opresult210)) {
      return GraceTrue;
    }
    setLineNumber(230);    // compilenode return
    return GraceFalse;
  };    // end of method acceptKeyword(_)or(_)
  this.methods["acceptKeyword(1)or(1)"] = func202;
  func202.methodName = "acceptKeyword(1)or(1)";
  func202.paramCounts = [1, 1];
  func202.paramNames = ["kw1", "kw2"];
  func202.definitionLine = 225;
  func202.definitionModule = "parser";
  var func211 = function(argcv, var_kw1, var_kw2, var_kw3) {    // method acceptKeyword(_)or(_)or(_), line 233
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("acceptKeyword(_)or(_)or(_)", 0, numArgs - 3);
    }
    var if212 = GraceDone;
    setLineNumber(234);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call214 = request(var_sym, "isKeyword", [0]);
    var call213 = request(call214, "not", [0]);
    if (Grace_isTrue(call213)) {
      return GraceFalse;
    }
    setLineNumber(235);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call215 = request(var_sym, "value", [0]);
    var var_v = call215;
    var if216 = GraceDone;
    setLineNumber(236);    // compilenode op
    var opresult217 = request(var_v, "==(1)", [1], var_kw1);
    if (Grace_isTrue(opresult217)) {
      return GraceTrue;
    }
    var if218 = GraceDone;
    setLineNumber(237);    // compilenode op
    var opresult219 = request(var_v, "==(1)", [1], var_kw2);
    if (Grace_isTrue(opresult219)) {
      return GraceTrue;
    }
    var if220 = GraceDone;
    setLineNumber(238);    // compilenode op
    var opresult221 = request(var_v, "==(1)", [1], var_kw3);
    if (Grace_isTrue(opresult221)) {
      return GraceTrue;
    }
    setLineNumber(239);    // compilenode return
    return GraceFalse;
  };    // end of method acceptKeyword(_)or(_)or(_)
  this.methods["acceptKeyword(1)or(1)or(1)"] = func211;
  func211.methodName = "acceptKeyword(1)or(1)or(1)";
  func211.paramCounts = [1, 1, 1];
  func211.paramNames = ["kw1", "kw2", "kw3"];
  func211.definitionLine = 233;
  func211.definitionModule = "parser";
  var func222 = function(argcv) {    // method skipSeparators, line 242
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("skipSeparators", 0, numArgs - 0);
    }
    setLineNumber(243);    // compilenode block
    var block224 = new GraceBlock(this, 243, 0);
    block224.guard = jsTrue;
    block224.real = function block224() {
      setLineNumber(243);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call225 = request(var_sym, "isSeparator", [0]);
      return call225;
    };
    let applyMeth224 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth224.methodName = "apply";
    applyMeth224.paramCounts = [0];
    applyMeth224.paramNames = [];
    applyMeth224.definitionLine = 243;
    applyMeth224.definitionModule = "parser";
    block224.methods["apply"] = applyMeth224;
    var block226 = new GraceBlock(this, 243, 0);
    block226.guard = jsTrue;
    block226.real = function block226() {
      setLineNumber(243);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call227 = selfRequest(this, "next", [0]);
      return call227;
    };
    let applyMeth226 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth226.methodName = "apply";
    applyMeth226.paramCounts = [0];
    applyMeth226.paramNames = [];
    applyMeth226.definitionLine = 243;
    applyMeth226.definitionModule = "parser";
    block226.methods["apply"] = applyMeth226;
    // call case 2: outer request
    var call223 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block224, block226);
    return call223;
  };    // end of method skipSeparators
  this.methods["skipSeparators"] = func222;
  func222.methodName = "skipSeparators";
  func222.paramCounts = [0];
  func222.paramNames = [];
  func222.definitionLine = 242;
  func222.definitionModule = "parser";
  var func228 = function(argcv) {    // method acceptArgument, line 246
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("acceptArgument", 0, numArgs - 0);
    }
    var if229 = GraceDone;
    setLineNumber(248);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call230 = request(var_sym, "isString", [0]);
    if (Grace_isTrue(call230)) {
      return GraceTrue;
    }
    var if231 = GraceDone;
    setLineNumber(249);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call232 = request(var_sym, "isNum", [0]);
    if (Grace_isTrue(call232)) {
      return GraceTrue;
    }
    var if233 = GraceDone;
    setLineNumber(250);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call234 = request(var_sym, "isLBrace", [0]);
    if (Grace_isTrue(call234)) {
      return GraceTrue;
    }
    var if235 = GraceDone;
    setLineNumber(251);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call236 = request(var_sym, "isLSquare", [0]);
    if (Grace_isTrue(call236)) {
      return GraceTrue;
    }
    var if237 = GraceDone;
    setLineNumber(252);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call238 = request(var_sym, "isIdentifier", [0]);
    if (Grace_isTrue(call238)) {
      setLineNumber(253);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call239 = request(var_sym, "value", [0]);
      var var_symValue = call239;
      setLineNumber(254);    // compilenode op
      if (var_symValue === undefined) raiseUninitializedVariable("symValue");
      var string240 = new GraceString("true");
      var opresult241 = request(var_symValue, "==(1)", [1], string240);
      if (var_symValue === undefined) raiseUninitializedVariable("symValue");
      var string242 = new GraceString("false");
      var opresult243 = request(var_symValue, "==(1)", [1], string242);
      var opresult244 = request(opresult241, "||(1)", [1], opresult243);
      return opresult244;
    }
    setLineNumber(256);    // compilenode return
    return GraceFalse;
  };    // end of method acceptArgument
  this.methods["acceptArgument"] = func228;
  func228.methodName = "acceptArgument";
  func228.paramCounts = [0];
  func228.paramNames = [];
  func228.definitionLine = 246;
  func228.definitionModule = "parser";
  var func245 = function(argcv, var_aParsingBlock) {    // method successfulParse(_), line 259
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("successfulParse(_)", 0, numArgs - 1);
    }
    setLineNumber(261);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call246 = request(var_values, "size", [0]);
    var var_sz = call246;
    setLineNumber(262);    // compilenode member
    // call case 6: other requests
    var call247 = request(var_aParsingBlock, "apply", [0]);
    setLineNumber(263);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call248 = request(var_values, "size", [0]);
    var opresult249 = request(call248, "\u2260(1)", [1], var_sz);
    return opresult249;
  };    // end of method successfulParse(_)
  this.methods["successfulParse(1)"] = func245;
  func245.methodName = "successfulParse(1)";
  func245.paramCounts = [1];
  func245.paramNames = ["aParsingBlock"];
  func245.definitionLine = 259;
  func245.definitionModule = "parser";
  var func250 = function(argcv, var_aParsingBlock) {    // method unsuccessfulParse(_), line 265
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("unsuccessfulParse(_)", 0, numArgs - 1);
    }
    setLineNumber(267);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call251 = request(var_values, "size", [0]);
    var var_sz = call251;
    setLineNumber(268);    // compilenode member
    // call case 6: other requests
    var call252 = request(var_aParsingBlock, "apply", [0]);
    setLineNumber(269);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call253 = request(var_values, "size", [0]);
    var opresult254 = request(call253, "==(1)", [1], var_sz);
    return opresult254;
  };    // end of method unsuccessfulParse(_)
  this.methods["unsuccessfulParse(1)"] = func250;
  func250.methodName = "unsuccessfulParse(1)";
  func250.paramCounts = [1];
  func250.paramNames = ["aParsingBlock"];
  func250.definitionLine = 265;
  func250.definitionModule = "parser";
  var func255 = function(argcv) {    // method pushNum, line 271
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("pushNum", 0, numArgs - 0);
    }
    setLineNumber(273);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call257 = request(var_sym, "value", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call258 = request(var_ast, "numNode", [0]);
    var call256 = request(call258, "new(1)", [1], call257);
    var var_o = call256;
    setLineNumber(274);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call259 = request(var_values, "push(1)", [1], var_o);
    setLineNumber(275);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call260 = selfRequest(this, "next", [0]);
    setLineNumber(276);    // compilenode return
    return var_o;
  };    // end of method pushNum
  this.methods["pushNum"] = func255;
  func255.methodName = "pushNum";
  func255.paramCounts = [0];
  func255.paramNames = [];
  func255.definitionLine = 271;
  func255.definitionModule = "parser";
  var func261 = function(argcv) {    // method pushString, line 279
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("pushString", 0, numArgs - 0);
    }
    setLineNumber(281);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call263 = request(var_sym, "value", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call264 = request(var_ast, "stringNode", [0]);
    var call262 = request(call264, "new(1)", [1], call263);
    var var_o = call262;
    setLineNumber(282);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call267 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call268 = request(var_sym, "endPos", [0]);
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call266 = request(var_ast, "line(1)column(1)", [1, 1], call267, call268);
    // call case 6: other requests
    var call265 = request(var_o, "end:=(1)", [1], call266);
    setLineNumber(283);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call269 = request(var_values, "push(1)", [1], var_o);
    setLineNumber(284);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call270 = selfRequest(this, "next", [0]);
    setLineNumber(285);    // compilenode return
    return var_o;
  };    // end of method pushString
  this.methods["pushString"] = func261;
  func261.methodName = "pushString";
  func261.paramCounts = [0];
  func261.paramNames = [];
  func261.definitionLine = 279;
  func261.definitionModule = "parser";
  var func271 = function(argcv) {    // method pushIdentifier, line 288
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("pushIdentifier", 0, numArgs - 0);
    }
    setLineNumber(291);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call273 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call274 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call272 = request(var_util, "setPosition(2)", [2], call273, call274);
    var if275 = GraceDone;
    setLineNumber(292);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call276 = request(var_sym, "value", [0]);
    var string277 = new GraceString("_");
    var opresult278 = request(call276, "==(1)", [1], string277);
    if (Grace_isTrue(opresult278)) {
      setLineNumber(293);    // compilenode call
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call280 = request(var_ast, "identifierNode", [0]);
      var call279 = request(call280, "wildcard(1)", [1], GraceFalse);
      if275 = call279;
    } else {
      setLineNumber(295);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call282 = request(var_sym, "value", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call283 = request(var_ast, "identifierNode", [0]);
      var call281 = request(call283, "new(2)", [2], call282, GraceFalse);
      if275 = call281;
    }
    var var_o = if275;
    setLineNumber(297);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call284 = request(var_values, "push(1)", [1], var_o);
    setLineNumber(298);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call285 = selfRequest(this, "next", [0]);
    setLineNumber(299);    // compilenode return
    return var_o;
  };    // end of method pushIdentifier
  this.methods["pushIdentifier"] = func271;
  func271.methodName = "pushIdentifier";
  func271.paramCounts = [0];
  func271.paramNames = [];
  func271.definitionLine = 288;
  func271.definitionModule = "parser";
  var func286 = function(argcv, var_ann) {    // method checkAnnotation(_), line 302
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("checkAnnotation(_)", 0, numArgs - 1);
    }
    var if287 = GraceDone;
    setLineNumber(303);    // compilenode member
    // call case 6: other requests
    var call288 = request(var_ann, "isCall", [0]);
    if (Grace_isTrue(call288)) {
      setLineNumber(304);    // compilenode member
      // call case 6: other requests
      var call290 = request(var_ann, "parts", [0]);
      var block291 = new GraceBlock(this, 304, 1);
      block291.guard = jsTrue;
      block291.real = function block291(var_p) {
        setLineNumber(305);    // compilenode member
        // call case 6: other requests
        var call293 = request(var_p, "args", [0]);
        var block294 = new GraceBlock(this, 305, 1);
        block294.guard = jsTrue;
        block294.real = function block294(var_a) {
          var if295 = GraceDone;
          setLineNumber(306);    // compilenode member
          // call case 6: other requests
          var call296 = request(var_a, "isIdentifier", [0]);
          var block297 = new GraceBlock(this, 306, 0);
          block297.guard = jsTrue;
          block297.real = function block297() {
            setLineNumber(306);    // compilenode member
            // call case 6: other requests
            var call298 = request(var_a, "dtype", [0]);
            var opresult299 = request(GraceFalse, "\u2260(1)", [1], call298);
            return opresult299;
          };
          let applyMeth297 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth297.methodName = "apply";
          applyMeth297.paramCounts = [0];
          applyMeth297.paramNames = [];
          applyMeth297.definitionLine = 306;
          applyMeth297.definitionModule = "parser";
          block297.methods["apply"] = applyMeth297;
          var opresult300 = request(call296, "&&(1)", [1], block297);
          if (Grace_isTrue(opresult300)) {
            setLineNumber(307);    // compilenode vardec
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var var_tok = var_sym;
            setLineNumber(309);    // compilenode block
            var block302 = new GraceBlock(this, 309, 0);
            block302.guard = jsTrue;
            block302.real = function block302() {
              setLineNumber(309);    // compilenode member
              // call case 6: other requests
              if (var_tok === undefined) raiseUninitializedVariable("tok");
              var call303 = request(var_tok, "value", [0]);
              var string304 = new GraceString(":");
              var opresult305 = request(call303, "\u2260(1)", [1], string304);
              return opresult305;
            };
            let applyMeth302 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth302.methodName = "apply";
            applyMeth302.paramCounts = [0];
            applyMeth302.paramNames = [];
            applyMeth302.definitionLine = 309;
            applyMeth302.definitionModule = "parser";
            block302.methods["apply"] = applyMeth302;
            var block306 = new GraceBlock(this, 309, 0);
            block306.guard = jsTrue;
            block306.real = function block306() {
              setLineNumber(309);    // compilenode member
              // call case 6: other requests
              if (var_tok === undefined) raiseUninitializedVariable("tok");
              var call307 = request(var_tok, "prev", [0]);
              var_tok = call307;
              return GraceDone;
            };
            let applyMeth306 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth306.methodName = "apply";
            applyMeth306.paramCounts = [0];
            applyMeth306.paramNames = [];
            applyMeth306.definitionLine = 309;
            applyMeth306.definitionModule = "parser";
            block306.methods["apply"] = applyMeth306;
            // call case 2: outer request
            var call301 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block302, block306);
            setLineNumber(310);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call309 = request(var_errormessages, "suggestion", [0]);
            var call308 = request(call309, "new", [0]);
            var var_suggestion = call308;
            setLineNumber(311);    // compilenode call
            if (var_tok === undefined) raiseUninitializedVariable("tok");
            // call case 6: other requests
            if (var_tok === undefined) raiseUninitializedVariable("tok");
            var call311 = request(var_tok, "next", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call310 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_tok, call311, GraceTrue, GraceFalse);
            setLineNumber(312);    // compilenode string
            var string313 = new GraceString("an argument to an annotation cannot have a type.");
            setLineNumber(313);    // compilenode member
            // call case 6: other requests
            if (var_tok === undefined) raiseUninitializedVariable("tok");
            var call314 = request(var_tok, "line", [0]);
            // call case 6: other requests
            if (var_tok === undefined) raiseUninitializedVariable("tok");
            var call315 = request(var_tok, "linePos", [0]);
            // call case 6: other requests
            // call case 6: other requests
            if (var_tok === undefined) raiseUninitializedVariable("tok");
            var call317 = request(var_tok, "next", [0]);
            var call316 = request(call317, "endPos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call312 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string313, call314, call315, call316, var_suggestion);
            if295 = call312;
          }
          return if295;
        };
        let applyMeth294 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth294.methodName = "apply(1)";
        applyMeth294.paramCounts = [1];
        applyMeth294.paramNames = ["a"];
        applyMeth294.definitionLine = 305;
        applyMeth294.definitionModule = "parser";
        block294.methods["apply(1)"] = applyMeth294;
        let matchesMeth294 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth294.methodName = "matches(1)";
        matchesMeth294.paramCounts = [1];
        matchesMeth294.paramNames = ["a"];
        matchesMeth294.definitionLine = 305;
        matchesMeth294.definitionModule = "parser";
        block294.methods["matches(1)"] = matchesMeth294;
        // call case 2: outer request
        var call292 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call293, block294);
        return call292;
      };
      let applyMeth291 = function apply_1 (argcv, ...args) {
          if (this.guard.apply(this.receiver, args))
              return this.real.apply(this.receiver, args);
          badBlockArgs.apply(this, args);
      };
      applyMeth291.methodName = "apply(1)";
      applyMeth291.paramCounts = [1];
      applyMeth291.paramNames = ["p"];
      applyMeth291.definitionLine = 304;
      applyMeth291.definitionModule = "parser";
      block291.methods["apply(1)"] = applyMeth291;
      let matchesMeth291 = function matches_1 (argcv, ...args) {
          return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
      };
      matchesMeth291.methodName = "matches(1)";
      matchesMeth291.paramCounts = [1];
      matchesMeth291.paramNames = ["p"];
      matchesMeth291.definitionLine = 304;
      matchesMeth291.definitionModule = "parser";
      block291.methods["matches(1)"] = matchesMeth291;
      // call case 2: outer request
      var call289 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call290, block291);
      if287 = call289;
    }
    return var_ann;
  };    // end of method checkAnnotation(_)
  this.methods["checkAnnotation(1)"] = func286;
  func286.methodName = "checkAnnotation(1)";
  func286.paramCounts = [1];
  func286.paramNames = ["ann"];
  func286.definitionLine = 302;
  func286.definitionModule = "parser";
  var func318 = function(argcv) {    // method doannotation, line 321
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("doannotation", 0, numArgs - 0);
    }
    var if319 = GraceDone;
    setLineNumber(322);    // compilenode member
    // call case 6: other requests
    var string322 = new GraceString("is");
    // call case 2: outer request
    var call321 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string322);
    var call320 = request(call321, "not", [0]);
    if (Grace_isTrue(call320)) {
      setLineNumber(323);    // compilenode return
      return GraceFalse;
    }
    setLineNumber(325);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call323 = selfRequest(this, "next", [0]);
    setLineNumber(326);    // compilenode array
    var array325 = new GraceSequence([]);
    // call case 2: outer request
    var call324 = selfRequest(var_prelude, "list(1)", [1], array325);
    var var_anns = call324;
    var if326 = GraceDone;
    setLineNumber(327);    // compilenode block
    var block328 = new GraceBlock(this, 327, 0);
    block328.guard = jsTrue;
    block328.real = function block328() {
      setLineNumber(327);    // compilenode call
      if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
      // call case 2: outer request
      var call329 = selfRequest(importedModules["parser"], "expression(1)", [1], var_noBlocks);
      return call329;
    };
    let applyMeth328 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth328.methodName = "apply";
    applyMeth328.paramCounts = [0];
    applyMeth328.paramNames = [];
    applyMeth328.definitionLine = 327;
    applyMeth328.definitionModule = "parser";
    block328.methods["apply"] = applyMeth328;
    // call case 2: outer request
    var call327 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block328);
    if (Grace_isTrue(call327)) {
      setLineNumber(328);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call330 = selfRequest(this, "errorMissingAnnotation", [0]);
      if326 = call330;
    }
    setLineNumber(330);    // compilenode block
    var block332 = new GraceBlock(this, 330, 0);
    block332.guard = jsTrue;
    block332.real = function block332() {
      setLineNumber(330);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call333 = request(var_sym, "isComma", [0]);
      return call333;
    };
    let applyMeth332 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth332.methodName = "apply";
    applyMeth332.paramCounts = [0];
    applyMeth332.paramNames = [];
    applyMeth332.definitionLine = 330;
    applyMeth332.definitionModule = "parser";
    block332.methods["apply"] = applyMeth332;
    var block334 = new GraceBlock(this, 330, 0);
    block334.guard = jsTrue;
    block334.real = function block334() {
      setLineNumber(331);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call337 = request(var_values, "pop", [0]);
      // call case 2: outer request
      var call336 = selfRequest(importedModules["parser"], "checkAnnotation(1)", [1], call337);
      // call case 6: other requests
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      var call335 = request(var_anns, "push(1)", [1], call336);
      setLineNumber(332);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call338 = selfRequest(this, "next", [0]);
      var if339 = GraceDone;
      setLineNumber(333);    // compilenode block
      var block341 = new GraceBlock(this, 333, 0);
      block341.guard = jsTrue;
      block341.real = function block341() {
        setLineNumber(333);    // compilenode call
        if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
        // call case 2: outer request
        var call342 = selfRequest(importedModules["parser"], "expression(1)", [1], var_noBlocks);
        return call342;
      };
      let applyMeth341 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth341.methodName = "apply";
      applyMeth341.paramCounts = [0];
      applyMeth341.paramNames = [];
      applyMeth341.definitionLine = 333;
      applyMeth341.definitionModule = "parser";
      block341.methods["apply"] = applyMeth341;
      // call case 2: outer request
      var call340 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block341);
      if (Grace_isTrue(call340)) {
        setLineNumber(334);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call343 = selfRequest(this, "errorMissingAnnotation", [0]);
        if339 = call343;
      }
      return if339;
    };
    let applyMeth334 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth334.methodName = "apply";
    applyMeth334.paramCounts = [0];
    applyMeth334.paramNames = [];
    applyMeth334.definitionLine = 330;
    applyMeth334.definitionModule = "parser";
    block334.methods["apply"] = applyMeth334;
    // call case 2: outer request
    var call331 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block332, block334);
    setLineNumber(337);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call346 = request(var_values, "pop", [0]);
    // call case 2: outer request
    var call345 = selfRequest(importedModules["parser"], "checkAnnotation(1)", [1], call346);
    // call case 6: other requests
    var call344 = request(var_anns, "push(1)", [1], call345);
    return var_anns;
  };    // end of method doannotation
  this.methods["doannotation"] = func318;
  func318.methodName = "doannotation";
  func318.paramCounts = [0];
  func318.paramNames = [];
  func318.definitionLine = 321;
  func318.definitionModule = "parser";
  var func347 = function(argcv) {    // method errorMissingAnnotation, line 341
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("errorMissingAnnotation", 0, numArgs - 0);
    }
    setLineNumber(342);    // compilenode array
    var array349 = new GraceSequence([]);
    // call case 2: outer request
    var call348 = selfRequest(var_prelude, "list(1)", [1], array349);
    var var_suggestions = call348;
    setLineNumber(343);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call351 = request(var_errormessages, "suggestion", [0]);
    var call350 = request(call351, "new", [0]);
    var var_suggestion = call350;
    setLineNumber(344);    // compilenode string
    var string354 = new GraceString("bind");
    var array353 = new GraceSequence([string354]);
    // call case 2: outer request
    var call352 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array353);
    var var_nextTok = call352;
    var if355 = GraceDone;
    setLineNumber(345);    // compilenode op
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var opresult356 = request(var_nextTok, "==(1)", [1], var_sym);
    if (Grace_isTrue(opresult356)) {
      setLineNumber(346);    // compilenode string
      var string358 = new GraceString(" \u00abannotation\u00bb");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call357 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string358, var_lastToken);
      if355 = call357;
    } else {
      setLineNumber(348);    // compilenode call
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      var call360 = request(var_nextTok, "prev", [0]);
      var string361 = new GraceString(" \u00abannotation\u00bb");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call359 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call360, GraceTrue, GraceFalse, string361);
      if355 = call359;
    }
    setLineNumber(350);    // compilenode call
    // call case 6: other requests
    var call362 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(351);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call364 = request(var_errormessages, "suggestion", [0]);
    var call363 = request(call364, "new", [0]);
    var_suggestion = call363;
    setLineNumber(352);    // compilenode call
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    // call case 6: other requests
    var call366 = request(var_nextTok, "prev", [0]);
    // call case 6: other requests
    var call365 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call366, GraceTrue, GraceFalse);
    setLineNumber(353);    // compilenode call
    // call case 6: other requests
    var call367 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(354);    // compilenode string
    var string369 = new GraceString("one or more annotations separated by commas must follow 'is'.");
    setLineNumber(355);    // compilenode member
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call370 = request(var_lastToken, "line", [0]);
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call371 = request(var_lastToken, "linePos", [0]);
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call372 = request(var_lastToken, "endPos", [0]);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call368 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestions(1)", [1, 3, 1], string369, call370, call371, call372, var_suggestions);
    return call368;
  };    // end of method errorMissingAnnotation
  this.methods["errorMissingAnnotation"] = func347;
  func347.methodName = "errorMissingAnnotation";
  func347.paramCounts = [0];
  func347.paramNames = [];
  func347.definitionLine = 341;
  func347.definitionModule = "parser";
  var func373 = function(argcv) {    // method dotypeterm, line 359
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("dotypeterm", 0, numArgs - 0);
    }
    var if374 = GraceDone;
    setLineNumber(360);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call375 = request(var_sym, "isIdentifier", [0]);
    if (Grace_isTrue(call375)) {
      setLineNumber(361);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call376 = selfRequest(this, "pushIdentifier", [0]);
      setLineNumber(362);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call377 = selfRequest(this, "generic", [0]);
      setLineNumber(363);    // compilenode call
      if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
      // call case 2: outer request
      var call378 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_noBlocks);
      if374 = call378;
    } else {
      var if379 = GraceDone;
      setLineNumber(365);    // compilenode string
      var string381 = new GraceString("interface");
      // call case 2: outer request
      var call380 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string381);
      if (Grace_isTrue(call380)) {
        setLineNumber(366);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call382 = selfRequest(this, "interfaceLiteral", [0]);
        if379 = call382;
      }
      if374 = if379;
    }
    return if374;
  };    // end of method dotypeterm
  this.methods["dotypeterm"] = func373;
  func373.methodName = "dotypeterm";
  func373.paramCounts = [0];
  func373.paramNames = [];
  func373.definitionLine = 359;
  func373.definitionModule = "parser";
  var func383 = function(argcv) {    // method typeexpression, line 371
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("typeexpression", 0, numArgs - 0);
    }
    setLineNumber(372);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call384 = request(var_values, "size", [0]);
    var var_sz = call384;
    var if385 = GraceDone;
    setLineNumber(373);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call386 = request(var_sym, "isLParen", [0]);
    if (Grace_isTrue(call386)) {
      setLineNumber(374);    // compilenode defdec
      if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
      var var_prevStatementToken = var_statementToken;
      setLineNumber(375);    // compilenode bind
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var_statementToken = var_sym;
      setLineNumber(376);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call387 = selfRequest(this, "next", [0]);
      var if388 = GraceDone;
      setLineNumber(377);    // compilenode block
      var block390 = new GraceBlock(this, 377, 0);
      block390.guard = jsTrue;
      block390.real = function block390() {
        setLineNumber(377);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call391 = selfRequest(this, "typeexpression", [0]);
        return call391;
      };
      let applyMeth390 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth390.methodName = "apply";
      applyMeth390.paramCounts = [0];
      applyMeth390.paramNames = [];
      applyMeth390.definitionLine = 377;
      applyMeth390.definitionModule = "parser";
      block390.methods["apply"] = applyMeth390;
      // call case 2: outer request
      var call389 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block390);
      if (Grace_isTrue(call389)) {
        setLineNumber(378);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call393 = request(var_errormessages, "suggestion", [0]);
        var call392 = request(call393, "new", [0]);
        var var_suggestion = call392;
        setLineNumber(379);    // compilenode string
        var string396 = new GraceString("rparen");
        var array395 = new GraceSequence([string396]);
        // call case 2: outer request
        var call394 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array395);
        var var_nextTok = call394;
        var if397 = GraceDone;
        setLineNumber(380);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var opresult398 = request(var_nextTok, "==(1)", [1], var_sym);
        if (Grace_isTrue(opresult398)) {
          setLineNumber(381);    // compilenode string
          var string400 = new GraceString("\u00abtype expression\u00bb");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call399 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string400, var_lastToken);
          if397 = call399;
        } else {
          setLineNumber(383);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call402 = request(var_nextTok, "prev", [0]);
          setLineNumber(384);    // compilenode string
          var string403 = new GraceString("\u00abtype expression\u00bb");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call401 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call402, GraceTrue, GraceFalse, string403);
          if397 = call401;
        }
        setLineNumber(386);    // compilenode string
        var string405 = new GraceString("parentheses must contain a valid type expression.");
        setLineNumber(387);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call406 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call407 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call404 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string405, call406, call407, var_suggestion);
        if388 = call404;
      }
      var if408 = GraceDone;
      setLineNumber(389);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call409 = request(var_sym, "kind", [0]);
      var string410 = new GraceString("rparen");
      var opresult411 = request(call409, "\u2260(1)", [1], string410);
      if (Grace_isTrue(opresult411)) {
        setLineNumber(390);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call412 = selfRequest(this, "checkBadOperators", [0]);
        setLineNumber(391);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call414 = request(var_errormessages, "suggestion", [0]);
        var call413 = request(call414, "new", [0]);
        var var_suggestion = call413;
        setLineNumber(392);    // compilenode string
        var string416 = new GraceString(")");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call415 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string416, var_lastToken);
        setLineNumber(393);    // compilenode string
        var string418 = new GraceString("a type expression beginning with a '(' must end with a ')'.");
        setLineNumber(394);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call419 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call420 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call421 = request(var_lastToken, "endPos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call417 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string418, call419, call420, call421, var_suggestion);
        if408 = call417;
      }
      setLineNumber(397);    // compilenode bind
      if (var_prevStatementToken === undefined) raiseUninitializedVariable("prevStatementToken");
      var_statementToken = var_prevStatementToken;
      setLineNumber(398);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call422 = selfRequest(this, "next", [0]);
      if385 = call422;
    } else {
      setLineNumber(400);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call423 = selfRequest(this, "dotypeterm", [0]);
      if385 = call423;
    }
    var if424 = GraceDone;
    setLineNumber(402);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call425 = request(var_values, "size", [0]);
    var opresult426 = request(call425, ">(1)", [1], var_sz);
    if (Grace_isTrue(opresult426)) {
      setLineNumber(403);    // compilenode call
      if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
      // call case 2: outer request
      var call427 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_noBlocks);
      setLineNumber(404);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call428 = selfRequest(this, "typeexpressionrest", [0]);
      if424 = call428;
    }
    return if424;
  };    // end of method typeexpression
  this.methods["typeexpression"] = func383;
  func383.methodName = "typeexpression";
  func383.paramCounts = [0];
  func383.paramNames = [];
  func383.definitionLine = 371;
  func383.definitionModule = "parser";
  var func429 = function(argcv, var_cond, var_thenList, var_elseList) {    // method newIf(_,_,_), line 410
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("newIf(_,_,_)", 0, numArgs - 3);
    }
    setLineNumber(411);    // compilenode member
    // call case 6: other requests
    // call case 2: outer request
    var call432 = selfRequest(var_prelude, "sequence", [0]);
    var call431 = request(call432, "empty", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call433 = request(var_ast, "blockNode", [0]);
    var call430 = request(call433, "new(2)", [2], call431, var_thenList);
    var var_thenBlock = call430;
    setLineNumber(412);    // compilenode member
    // call case 6: other requests
    // call case 2: outer request
    var call436 = selfRequest(var_prelude, "sequence", [0]);
    var call435 = request(call436, "empty", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call437 = request(var_ast, "blockNode", [0]);
    var call434 = request(call437, "new(2)", [2], call435, var_elseList);
    var var_elseBlock = call434;
    setLineNumber(413);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call439 = request(var_ast, "ifNode", [0]);
    var call438 = request(call439, "new(3)", [3], var_cond, var_thenBlock, var_elseBlock);
    return call438;
  };    // end of method newIf(_,_,_)
  this.methods["newIf(3)"] = func429;
  func429.methodName = "newIf(3)";
  func429.paramCounts = [3];
  func429.paramNames = ["cond", "thenList", "elseList"];
  func429.definitionLine = 410;
  func429.definitionModule = "parser";
  var func440 = function(argcv, var_message, var_expectedTokens) {    // method reportSyntaxError(_)before(_), line 416
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("reportSyntaxError(_)before(_)", 0, numArgs - 2);
    }
    setLineNumber(417);    // compilenode array
    var array442 = new GraceSequence([]);
    // call case 2: outer request
    var call441 = selfRequest(var_prelude, "list(1)", [1], array442);
    var var_suggestions = call441;
    setLineNumber(418);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call444 = request(var_errormessages, "suggestion", [0]);
    var call443 = request(call444, "new", [0]);
    var var_suggestion = call443;
    setLineNumber(419);    // compilenode call
    // call case 2: outer request
    var call445 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], var_expectedTokens);
    var var_nextTok = call445;
    var if446 = GraceDone;
    setLineNumber(420);    // compilenode op
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var opresult447 = request(var_nextTok, "==(1)", [1], var_sym);
    if (Grace_isTrue(opresult447)) {
      setLineNumber(421);    // compilenode string
      var string449 = new GraceString(" \u00abexpression\u00bb");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call448 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string449, var_lastToken);
      if446 = call448;
    } else {
      setLineNumber(423);    // compilenode call
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      var call451 = request(var_nextTok, "prev", [0]);
      var string452 = new GraceString(" \u00abexpression\u00bb");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call450 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call451, GraceTrue, GraceFalse, string452);
      if446 = call450;
    }
    setLineNumber(425);    // compilenode call
    // call case 6: other requests
    var call453 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(426);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call455 = request(var_errormessages, "suggestion", [0]);
    var call454 = request(call455, "new", [0]);
    var_suggestion = call454;
    setLineNumber(427);    // compilenode call
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    // call case 6: other requests
    var call457 = request(var_nextTok, "prev", [0]);
    // call case 6: other requests
    var call456 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call457, GraceTrue, GraceFalse);
    setLineNumber(428);    // compilenode call
    // call case 6: other requests
    var call458 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(430);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call460 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call461 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call459 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], var_message, call460, call461, var_suggestions);
    return call459;
  };    // end of method reportSyntaxError(_)before(_)
  this.methods["reportSyntaxError(1)before(1)"] = func440;
  func440.methodName = "reportSyntaxError(1)before(1)";
  func440.paramCounts = [1, 1];
  func440.paramNames = ["message", "expectedTokens"];
  func440.definitionLine = 416;
  func440.definitionModule = "parser";
  var func462 = function(argcv) {    // method reportMissingArrow, line 434
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("reportMissingArrow", 0, numArgs - 0);
    }
    setLineNumber(435);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call464 = request(var_errormessages, "suggestion", [0]);
    var call463 = request(call464, "new", [0]);
    var var_suggestion = call463;
    var if465 = GraceDone;
    setLineNumber(436);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call466 = request(var_sym, "isBind", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call467 = request(var_sym, "value", [0]);
    var string468 = new GraceString("=");
    var opresult469 = request(call467, "==(1)", [1], string468);
    var opresult470 = request(call466, "||(1)", [1], opresult469);
    if (Grace_isTrue(opresult470)) {
      setLineNumber(437);    // compilenode call
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var string472 = new GraceString("->");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call471 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, string472);
      if465 = call471;
    } else {
      setLineNumber(439);    // compilenode string
      var string474 = new GraceString(" ->");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call473 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string474, var_lastToken);
      if465 = call473;
    }
    setLineNumber(441);    // compilenode string
    var string476 = new GraceString("in a block with parameters, the parameters must be followed by '->'");
    setLineNumber(442);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call477 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call478 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call475 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string476, call477, call478, var_suggestion);
    return call475;
  };    // end of method reportMissingArrow
  this.methods["reportMissingArrow"] = func462;
  func462.methodName = "reportMissingArrow";
  func462.paramCounts = [0];
  func462.paramNames = [];
  func462.definitionLine = 434;
  func462.definitionModule = "parser";
  var func479 = function(argcv) {    // method reportBadRhs, line 445
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("reportBadRhs", 0, numArgs - 0);
    }
    setLineNumber(448);    // compilenode array
    var array481 = new GraceSequence([]);
    // call case 2: outer request
    var call480 = selfRequest(var_prelude, "list(1)", [1], array481);
    var var_suggestions = call480;
    setLineNumber(449);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call483 = request(var_errormessages, "suggestion", [0]);
    var call482 = request(call483, "new", [0]);
    var var_suggestion = call482;
    setLineNumber(450);    // compilenode string
    var string486 = new GraceString("rbrace");
    var array485 = new GraceSequence([string486]);
    // call case 2: outer request
    var call484 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array485);
    var var_nextTok = call484;
    var if487 = GraceDone;
    setLineNumber(451);    // compilenode op
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var opresult488 = request(var_nextTok, "==(1)", [1], var_sym);
    if (Grace_isTrue(opresult488)) {
      setLineNumber(452);    // compilenode string
      var string490 = new GraceString(" \u00abexpression\u00bb");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call489 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string490, var_lastToken);
      if487 = call489;
    } else {
      setLineNumber(454);    // compilenode call
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      var call492 = request(var_nextTok, "prev", [0]);
      var string493 = new GraceString(" \u00abexpression\u00bb");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call491 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call492, GraceTrue, GraceFalse, string493);
      if487 = call491;
    }
    setLineNumber(456);    // compilenode call
    // call case 6: other requests
    var call494 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(457);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call496 = request(var_errormessages, "suggestion", [0]);
    var call495 = request(call496, "new", [0]);
    var_suggestion = call495;
    setLineNumber(458);    // compilenode call
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    // call case 6: other requests
    var call498 = request(var_nextTok, "prev", [0]);
    // call case 6: other requests
    var call497 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call498, GraceTrue, GraceFalse);
    setLineNumber(459);    // compilenode call
    // call case 6: other requests
    var call499 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(460);    // compilenode string
    var string501 = new GraceString("a valid expression must follow ':='.");
    setLineNumber(461);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call502 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call503 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call500 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string501, call502, call503, var_suggestions);
    return call500;
  };    // end of method reportBadRhs
  this.methods["reportBadRhs"] = func479;
  func479.methodName = "reportBadRhs";
  func479.paramCounts = [0];
  func479.paramNames = [];
  func479.definitionLine = 445;
  func479.definitionModule = "parser";
  var func504 = function(argcv) {    // method block, line 464
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("block", 0, numArgs - 0);
    }
    var if505 = GraceDone;
    setLineNumber(469);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call506 = request(var_sym, "isLBrace", [0]);
    if (Grace_isTrue(call506)) {
      setLineNumber(470);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_btok = var_sym;
      setLineNumber(471);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call507 = selfRequest(this, "next", [0]);
      setLineNumber(472);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call508 = selfRequest(this, "skipSeparators", [0]);
      setLineNumber(473);    // compilenode defdec
      if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
      var var_oldStatementToken = var_statementToken;
      setLineNumber(474);    // compilenode bind
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var_statementToken = var_sym;
      setLineNumber(475);    // compilenode vardec
      var var_isMatchingBlock = GraceFalse;
      setLineNumber(480);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call509 = selfRequest(this, "saveParsePosition", [0]);
      var var_savedPosition = call509;
      setLineNumber(481);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call510 = selfRequest(this, "blockParameters", [0]);
      var var_params = call510;
      var if511 = GraceDone;
      setLineNumber(482);    // compilenode member
      // call case 6: other requests
      if (var_params === undefined) raiseUninitializedVariable("params");
      var call512 = request(var_params, "isEmpty", [0]);
      if (Grace_isTrue(call512)) {
        setLineNumber(483);    // compilenode call
        if (var_savedPosition === undefined) raiseUninitializedVariable("savedPosition");
        // call case 2: outer request
        var call513 = selfRequest(importedModules["parser"], "restoreParsePosition(1)", [1], var_savedPosition);
        if511 = call513;
      }
      setLineNumber(486);    // compilenode call
      if (var_params === undefined) raiseUninitializedVariable("params");
      if (var_btok === undefined) raiseUninitializedVariable("btok");
      // call case 2: outer request
      var call514 = selfRequest(importedModules["parser"], "blockBody(1)beginningWith(1)", [1, 1], var_params, var_btok);
      var var_blockNode = call514;
      setLineNumber(487);    // compilenode call
      if (var_blockNode === undefined) raiseUninitializedVariable("blockNode");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call515 = request(var_values, "push(1)", [1], var_blockNode);
      setLineNumber(488);    // compilenode bind
      if (var_oldStatementToken === undefined) raiseUninitializedVariable("oldStatementToken");
      var_statementToken = var_oldStatementToken;
      if505 = GraceDone;
    }
    return if505;
  };    // end of method block
  this.methods["block"] = func504;
  func504.methodName = "block";
  func504.paramCounts = [0];
  func504.paramNames = [];
  func504.definitionLine = 464;
  func504.definitionModule = "parser";
  var func516 = function(argcv) {    // method blockParameters, line 492
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("blockParameters", 0, numArgs - 0);
    }
    setLineNumber(495);    // compilenode array
    var array518 = new GraceSequence([]);
    // call case 2: outer request
    var call517 = selfRequest(var_prelude, "list(1)", [1], array518);
    var var_params = call517;
    setLineNumber(496);    // compilenode block
    var block520 = new GraceBlock(this, 496, 0);
    block520.guard = jsTrue;
    block520.real = function block520() {
      setLineNumber(496);    // compilenode call
      if (var_params === undefined) raiseUninitializedVariable("params");
      // call case 2: outer request
      var call521 = selfRequest(importedModules["parser"], "blockParameter(1)", [1], var_params);
      return call521;
    };
    let applyMeth520 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth520.methodName = "apply";
    applyMeth520.paramCounts = [0];
    applyMeth520.paramNames = [];
    applyMeth520.definitionLine = 496;
    applyMeth520.definitionModule = "parser";
    block520.methods["apply"] = applyMeth520;
    var block522 = new GraceBlock(this, 496, 0);
    block522.guard = jsTrue;
    block522.real = function block522() {
      var if523 = GraceDone;
      setLineNumber(497);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call524 = request(var_sym, "isArrow", [0]);
      if (Grace_isTrue(call524)) {
        setLineNumber(498);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call525 = selfRequest(this, "next", [0]);
        setLineNumber(499);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call526 = selfRequest(this, "skipSeparators", [0]);
        setLineNumber(500);    // compilenode return
        if (var_params === undefined) raiseUninitializedVariable("params");
        throw new ReturnException(var_params, returnTarget);
      }
      var if527 = GraceDone;
      setLineNumber(502);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call528 = request(var_sym, "isComma", [0]);
      if (Grace_isTrue(call528)) {
        setLineNumber(503);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call529 = selfRequest(this, "next", [0]);
        if527 = call529;
      } else {
        setLineNumber(505);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call530 = selfRequest(this, "reportMissingArrow", [0]);
        if527 = call530;
      }
      return if527;
    };
    let applyMeth522 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth522.methodName = "apply";
    applyMeth522.paramCounts = [0];
    applyMeth522.paramNames = [];
    applyMeth522.definitionLine = 496;
    applyMeth522.definitionModule = "parser";
    block522.methods["apply"] = applyMeth522;
    // call case 2: outer request
    var call519 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block520, block522);
    setLineNumber(508);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call531 = selfRequest(this, "skipSeparators", [0]);
    setLineNumber(509);    // compilenode return
    return var_params;
  };    // end of method blockParameters
  this.methods["blockParameters"] = func516;
  func516.methodName = "blockParameters";
  func516.paramCounts = [0];
  func516.paramNames = [];
  func516.definitionLine = 492;
  func516.definitionModule = "parser";
  var func532 = function(argcv, var_params) {    // method blockParameter(_), line 512
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("blockParameter(_)", 0, numArgs - 1);
    }
    setLineNumber(516);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call533 = request(var_sym, "isLParen", [0]);
    var var_paramIsPattern = call533;
    var if534 = GraceDone;
    setLineNumber(519);    // compilenode block
    var block536 = new GraceBlock(this, 519, 0);
    block536.guard = jsTrue;
    block536.real = function block536() {
      setLineNumber(519);    // compilenode call
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      // call case 2: outer request
      var call537 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
      return call537;
    };
    let applyMeth536 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth536.methodName = "apply";
    applyMeth536.paramCounts = [0];
    applyMeth536.paramNames = [];
    applyMeth536.definitionLine = 519;
    applyMeth536.definitionModule = "parser";
    block536.methods["apply"] = applyMeth536;
    // call case 2: outer request
    var call535 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block536);
    if (Grace_isTrue(call535)) {
      var if538 = GraceDone;
      setLineNumber(520);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call539 = request(var_sym, "isComma", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call540 = request(var_sym, "isArrow", [0]);
      var opresult541 = request(call539, "||(1)", [1], call540);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call542 = request(var_sym, "isColon", [0]);
      var opresult543 = request(opresult541, "||(1)", [1], call542);
      if (Grace_isTrue(opresult543)) {
        setLineNumber(522);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call544 = request(var_values, "pop", [0]);
        var var_thisParam = call544;
        var if545 = GraceDone;
        setLineNumber(523);    // compilenode op
        if (var_paramIsPattern === undefined) raiseUninitializedVariable("paramIsPattern");
        // call case 6: other requests
        // call case 6: other requests
        if (var_thisParam === undefined) raiseUninitializedVariable("thisParam");
        var call547 = request(var_thisParam, "isIdentifier", [0]);
        var call546 = request(call547, "not", [0]);
        var opresult548 = request(var_paramIsPattern, "||(1)", [1], call546);
        if (Grace_isTrue(opresult548)) {
          setLineNumber(524);    // compilenode bind
          var_paramIsPattern = GraceTrue;
          setLineNumber(525);    // compilenode call
          if (var_thisParam === undefined) raiseUninitializedVariable("thisParam");
          // call case 6: other requests
          // call case 6: other requests
          if (var_ast === undefined) raiseUninitializedVariable("ast");
          var call550 = request(var_ast, "identifierNode", [0]);
          var call549 = request(call550, "wildcard(1)", [1], var_thisParam);
          var_thisParam = call549;
          if545 = GraceDone;
        }
        setLineNumber(528);    // compilenode call
        // call case 6: other requests
        if (var_thisParam === undefined) raiseUninitializedVariable("thisParam");
        var call551 = request(var_thisParam, "isBindingOccurrence:=(1)", [1], GraceTrue);
        var if552 = GraceDone;
        setLineNumber(529);    // compilenode op
        if (var_paramIsPattern === undefined) raiseUninitializedVariable("paramIsPattern");
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call553 = request(var_sym, "isColon", [0]);
        var opresult554 = request(var_paramIsPattern, "&&(1)", [1], call553);
        if (Grace_isTrue(opresult554)) {
          setLineNumber(530);    // compilenode string
          var string556 = new GraceString("a block parameter that's an expression is assumed to mean ");
          setLineNumber(531);    // compilenode string
          var string557 = new GraceString("_:\u2039expression\u203a, and so cannot be followed by a colon");
          var opresult558 = request(string556, "++(1)", [1], string557);
          setLineNumber(532);    // compilenode string
          var string560 = new GraceString("arrow");
          var string561 = new GraceString("comma");
          var array559 = new GraceSequence([string560, string561]);
          // call case 2: outer request
          var call555 = selfRequest(importedModules["parser"], "reportSyntaxError(1)before(1)", [1, 1], opresult558, array559);
          if552 = call555;
        }
        var if562 = GraceDone;
        setLineNumber(534);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call563 = request(var_sym, "isColon", [0]);
        if (Grace_isTrue(call563)) {
          setLineNumber(536);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call564 = selfRequest(this, "next", [0]);
          var if565 = GraceDone;
          setLineNumber(537);    // compilenode member
          // call case 6: other requests
          var block568 = new GraceBlock(this, 537, 0);
          block568.guard = jsTrue;
          block568.real = function block568() {
            setLineNumber(537);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call569 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call569;
          };
          let applyMeth568 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth568.methodName = "apply";
          applyMeth568.paramCounts = [0];
          applyMeth568.paramNames = [];
          applyMeth568.definitionLine = 537;
          applyMeth568.definitionModule = "parser";
          block568.methods["apply"] = applyMeth568;
          // call case 2: outer request
          var call567 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block568);
          var call566 = request(call567, "not", [0]);
          if (Grace_isTrue(call566)) {
            setLineNumber(538);    // compilenode string
            var string571 = new GraceString("a block parameter must have a pattern or type expression after the ':'.");
            var string573 = new GraceString("arrow");
            var string574 = new GraceString("rbrace");
            var array572 = new GraceSequence([string573, string574]);
            // call case 2: outer request
            var call570 = selfRequest(importedModules["parser"], "reportSyntaxError(1)before(1)", [1, 1], string571, array572);
            if565 = call570;
          }
          setLineNumber(540);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call576 = request(var_values, "pop", [0]);
          // call case 6: other requests
          if (var_thisParam === undefined) raiseUninitializedVariable("thisParam");
          var call575 = request(var_thisParam, "dtype:=(1)", [1], call576);
          if562 = call575;
        }
        setLineNumber(542);    // compilenode call
        if (var_thisParam === undefined) raiseUninitializedVariable("thisParam");
        // call case 6: other requests
        var call577 = request(var_params, "push(1)", [1], var_thisParam);
        setLineNumber(543);    // typecheck
        assertTypeOrMsg(GraceTrue, var_Boolean, "return value", "Boolean");
        return GraceTrue;
      } else {
        setLineNumber(546);    // typecheck
        assertTypeOrMsg(GraceFalse, var_Boolean, "return value", "Boolean");
        return GraceFalse;
      }
      if534 = if538;
    } else {
      setLineNumber(549);    // typecheck
      assertTypeOrMsg(GraceFalse, var_Boolean, "return value", "Boolean");
      return GraceFalse;
    }
    setLineNumber(519);    // typecheck
    assertTypeOrMsg(if534, var_Boolean, "result of method blockParameter(_)", "Boolean");
    return if534;
  };    // end of method blockParameter(_)
  this.methods["blockParameter(1)"] = func532;
  func532.methodName = "blockParameter(1)";
  func532.paramCounts = [1];
  func532.paramNames = ["params"];
  func532.definitionLine = 512;
  func532.definitionModule = "parser";
  var func578 = function(argcv, var_params, var_btok) {    // method blockBody(_)beginningWith(_), line 553
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("blockBody(_)beginningWith(_)", 0, numArgs - 2);
    }
    setLineNumber(561);    // compilenode defdec
    if (var_values === undefined) raiseUninitializedVariable("values");
    var var_originalValues = var_values;
    setLineNumber(562);    // compilenode array
    var array580 = new GraceSequence([]);
    // call case 2: outer request
    var call579 = selfRequest(var_prelude, "list(1)", [1], array580);
    var_values = call579;
    setLineNumber(563);    // compilenode block
    var block582 = new GraceBlock(this, 563, 0);
    block582.guard = jsTrue;
    block582.real = function block582() {
      setLineNumber(563);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call584 = request(var_sym, "isRBrace", [0]);
      var call583 = request(call584, "not", [0]);
      return call583;
    };
    let applyMeth582 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth582.methodName = "apply";
    applyMeth582.paramCounts = [0];
    applyMeth582.paramNames = [];
    applyMeth582.definitionLine = 563;
    applyMeth582.definitionModule = "parser";
    block582.methods["apply"] = applyMeth582;
    var block585 = new GraceBlock(this, 563, 0);
    block585.guard = jsTrue;
    block585.real = function block585() {
      var if586 = GraceDone;
      setLineNumber(565);    // compilenode block
      var block588 = new GraceBlock(this, 565, 0);
      block588.guard = jsTrue;
      block588.real = function block588() {
        setLineNumber(565);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call589 = selfRequest(this, "statement", [0]);
        return call589;
      };
      let applyMeth588 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth588.methodName = "apply";
      applyMeth588.paramCounts = [0];
      applyMeth588.paramNames = [];
      applyMeth588.definitionLine = 565;
      applyMeth588.definitionModule = "parser";
      block588.methods["apply"] = applyMeth588;
      // call case 2: outer request
      var call587 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block588);
      if (Grace_isTrue(call587)) {
        setLineNumber(566);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call591 = request(var_errormessages, "suggestion", [0]);
        var call590 = request(call591, "new", [0]);
        var var_suggestion = call590;
        setLineNumber(567);    // compilenode string
        var string593 = new GraceString("}");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call592 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string593, var_lastToken);
        setLineNumber(568);    // compilenode string
        var string595 = new GraceString("a block must end with a '}'.");
        setLineNumber(569);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call596 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call597 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call594 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string595, call596, call597, var_suggestion);
        if586 = call594;
      }
      setLineNumber(571);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call598 = selfRequest(this, "separator", [0]);
      return call598;
    };
    let applyMeth585 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth585.methodName = "apply";
    applyMeth585.paramCounts = [0];
    applyMeth585.paramNames = [];
    applyMeth585.definitionLine = 563;
    applyMeth585.definitionModule = "parser";
    block585.methods["apply"] = applyMeth585;
    // call case 2: outer request
    var call581 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block582, block585);
    setLineNumber(573);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_etok = var_sym;
    setLineNumber(574);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call599 = selfRequest(this, "next", [0]);
    setLineNumber(575);    // compilenode defdec
    if (var_values === undefined) raiseUninitializedVariable("values");
    var var_body = var_values;
    setLineNumber(576);    // compilenode bind
    var_values = var_originalValues;
    setLineNumber(577);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call602 = request(var_ast, "blockNode", [0]);
    var call601 = request(call602, "new(2)", [2], var_params, var_body);
    var call600 = request(call601, "setPositionFrom(1)", [1], var_btok);
    return call600;
  };    // end of method blockBody(_)beginningWith(_)
  this.methods["blockBody(1)beginningWith(1)"] = func578;
  func578.methodName = "blockBody(1)beginningWith(1)";
  func578.paramCounts = [1, 1];
  func578.paramNames = ["params", "btok"];
  func578.definitionLine = 553;
  func578.definitionModule = "parser";
  var func603 = function(argcv) {    // method doif, line 584
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("doif", 0, numArgs - 0);
    }
    var if604 = GraceDone;
    setLineNumber(585);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call605 = request(var_sym, "isIdentifier", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call606 = request(var_sym, "value", [0]);
    var string607 = new GraceString("if");
    var opresult608 = request(call606, "==(1)", [1], string607);
    var opresult609 = request(call605, "&&(1)", [1], opresult608);
    if (Grace_isTrue(opresult609)) {
      setLineNumber(586);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_btok = var_sym;
      setLineNumber(587);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call610 = selfRequest(this, "next", [0]);
      var if611 = GraceDone;
      setLineNumber(588);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call612 = request(var_sym, "isLParen", [0]);
      var block613 = new GraceBlock(this, 588, 0);
      block613.guard = jsTrue;
      block613.real = function block613() {
        setLineNumber(588);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call614 = request(var_sym, "isLBrace", [0]);
        return call614;
      };
      let applyMeth613 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth613.methodName = "apply";
      applyMeth613.paramCounts = [0];
      applyMeth613.paramNames = [];
      applyMeth613.definitionLine = 588;
      applyMeth613.definitionModule = "parser";
      block613.methods["apply"] = applyMeth613;
      var opresult615 = request(call612, "||(1)", [1], block613);
      if (Grace_isTrue(opresult615)) {
        setLineNumber(589);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call616 = request(var_sym, "value", [0]);
        if611 = call616;
      } else {
        var string617 = new GraceString("-missing-");
        if611 = string617;
      }
      var var_opener = if611;
      var if618 = GraceDone;
      setLineNumber(590);    // compilenode op
      if (var_opener === undefined) raiseUninitializedVariable("opener");
      var string619 = new GraceString("(");
      var opresult620 = request(var_opener, "==(1)", [1], string619);
      if (Grace_isTrue(opresult620)) {
        var string621 = new GraceString(")");
        if618 = string621;
      } else {
        var if622 = GraceDone;
        setLineNumber(591);    // compilenode op
        if (var_opener === undefined) raiseUninitializedVariable("opener");
        var string623 = new GraceString("{");
        var opresult624 = request(var_opener, "==(1)", [1], string623);
        if (Grace_isTrue(opresult624)) {
          var string625 = new GraceString("}");
          if622 = string625;
        } else {
          setLineNumber(592);    // compilenode string
          var string626 = new GraceString("-nothing-");
          if622 = string626;
        }
        if618 = if622;
      }
      var var_closer = if618;
      var if627 = GraceDone;
      setLineNumber(593);    // compilenode op
      if (var_opener === undefined) raiseUninitializedVariable("opener");
      var string628 = new GraceString("-missing-");
      var opresult629 = request(var_opener, "==(1)", [1], string628);
      if (Grace_isTrue(opresult629)) {
        setLineNumber(594);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call631 = request(var_errormessages, "suggestion", [0]);
        var call630 = request(call631, "new", [0]);
        var var_suggestion = call630;
        setLineNumber(596);    // compilenode block
        var block633 = new GraceBlock(this, 596, 1);
        block633.guard = jsTrue;
        block633.real = function block633(var_t) {
          setLineNumber(597);    // compilenode member
          // call case 6: other requests
          var call634 = request(var_t, "line", [0]);
          // call case 6: other requests
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          var call635 = request(var_btok, "line", [0]);
          var opresult636 = request(call634, "==(1)", [1], call635);
          // call case 6: other requests
          var call637 = request(var_t, "isRParen", [0]);
          setLineNumber(598);    // compilenode member
          // call case 6: other requests
          var call638 = request(var_t, "isRBrace", [0]);
          var opresult639 = request(call637, "||(1)", [1], call638);
          // call case 6: other requests
          var call640 = request(var_t, "isLBrace", [0]);
          var opresult641 = request(opresult639, "||(1)", [1], call640);
          setLineNumber(599);    // compilenode member
          // call case 6: other requests
          var call642 = request(var_t, "isIdentifier", [0]);
          // call case 6: other requests
          var call643 = request(var_t, "value", [0]);
          var string644 = new GraceString("then");
          var opresult645 = request(call643, "==(1)", [1], string644);
          var opresult646 = request(call642, "&&(1)", [1], opresult645);
          var opresult647 = request(opresult641, "||(1)", [1], opresult646);
          var opresult648 = request(opresult636, "&&(1)", [1], opresult647);
          return opresult648;
        };
        let applyMeth633 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth633.methodName = "apply(1)";
        applyMeth633.paramCounts = [1];
        applyMeth633.paramNames = ["t"];
        applyMeth633.definitionLine = 596;
        applyMeth633.definitionModule = "parser";
        block633.methods["apply(1)"] = applyMeth633;
        let matchesMeth633 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth633.methodName = "matches(1)";
        matchesMeth633.paramCounts = [1];
        matchesMeth633.paramNames = ["t"];
        matchesMeth633.definitionLine = 596;
        matchesMeth633.definitionModule = "parser";
        block633.methods["matches(1)"] = matchesMeth633;
        // call case 2: outer request
        var call632 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block633);
        var var_nextTok = call632;
        var if649 = GraceDone;
        setLineNumber(601);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult650 = request(GraceFalse, "==(1)", [1], var_nextTok);
        if (Grace_isTrue(opresult650)) {
          setLineNumber(602);    // compilenode string
          var string652 = new GraceString(" (\u00abcondition\u00bb) then {");
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call651 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string652, var_btok);
          if649 = call651;
        } else {
          var if653 = GraceDone;
          setLineNumber(603);    // compilenode member
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call654 = request(var_nextTok, "isRParen", [0]);
          if (Grace_isTrue(call654)) {
            var if655 = GraceDone;
            setLineNumber(604);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult656 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult656)) {
              setLineNumber(605);    // compilenode string
              var string658 = new GraceString("(\u00abcondition\u00bb");
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call657 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string658, var_sym);
              if655 = call657;
            } else {
              setLineNumber(607);    // compilenode string
              var string660 = new GraceString("(");
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call659 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string660, var_sym);
              if655 = call659;
            }
            if653 = if655;
          } else {
            var if661 = GraceDone;
            setLineNumber(609);    // compilenode member
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call662 = request(var_nextTok, "isLBrace", [0]);
            if (Grace_isTrue(call662)) {
              var if663 = GraceDone;
              setLineNumber(610);    // compilenode op
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var opresult664 = request(var_nextTok, "==(1)", [1], var_sym);
              if (Grace_isTrue(opresult664)) {
                setLineNumber(611);    // compilenode string
                var string666 = new GraceString(" (\u00abcondition\u00bb) then");
                if (var_btok === undefined) raiseUninitializedVariable("btok");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call665 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string666, var_btok);
                if663 = call665;
              } else {
                setLineNumber(613);    // compilenode string
                var string668 = new GraceString("(");
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call667 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string668, var_sym);
                setLineNumber(614);    // compilenode string
                var string670 = new GraceString(") then");
                // call case 6: other requests
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                var call671 = request(var_nextTok, "prev", [0]);
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call669 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string670, call671, GraceTrue);
                if663 = call669;
              }
              if661 = if663;
            } else {
              var if672 = GraceDone;
              setLineNumber(616);    // compilenode member
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call673 = request(var_nextTok, "isIdentifier", [0]);
              if (Grace_isTrue(call673)) {
                var if674 = GraceDone;
                setLineNumber(617);    // compilenode op
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var opresult675 = request(var_nextTok, "==(1)", [1], var_sym);
                if (Grace_isTrue(opresult675)) {
                  setLineNumber(618);    // compilenode string
                  var string677 = new GraceString("(\u00abcondition\u00bb) ");
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call676 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string677, var_sym);
                  if674 = call676;
                } else {
                  setLineNumber(620);    // compilenode string
                  var string679 = new GraceString("(");
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call678 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string679, var_sym);
                  setLineNumber(621);    // compilenode string
                  var string681 = new GraceString(")");
                  // call case 6: other requests
                  if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                  var call682 = request(var_nextTok, "prev", [0]);
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call680 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string681, call682, GraceTrue);
                  if674 = call680;
                }
                if672 = if674;
              }
              if661 = if672;
            }
            if653 = if661;
          }
          if649 = if653;
        }
        setLineNumber(624);    // compilenode string
        var string684 = new GraceString("an if statement must have a condition ");
        setLineNumber(625);    // compilenode string
        var string685 = new GraceString("in parentheses or braces after the 'if'.");
        var opresult686 = request(string684, "++(1)", [1], string685);
        setLineNumber(626);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call687 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call688 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call683 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult686, call687, call688, var_suggestion);
        if627 = call683;
      }
      setLineNumber(628);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call689 = selfRequest(this, "next", [0]);
      var if690 = GraceDone;
      setLineNumber(629);    // compilenode block
      var block692 = new GraceBlock(this, 629, 0);
      block692.guard = jsTrue;
      block692.real = function block692() {
        setLineNumber(629);    // compilenode call
        if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
        // call case 2: outer request
        var call693 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
        return call693;
      };
      let applyMeth692 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth692.methodName = "apply";
      applyMeth692.paramCounts = [0];
      applyMeth692.paramNames = [];
      applyMeth692.definitionLine = 629;
      applyMeth692.definitionModule = "parser";
      block692.methods["apply"] = applyMeth692;
      // call case 2: outer request
      var call691 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block692);
      if (Grace_isTrue(call691)) {
        setLineNumber(630);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call695 = request(var_errormessages, "suggestion", [0]);
        var call694 = request(call695, "new", [0]);
        var var_suggestion = call694;
        setLineNumber(632);    // compilenode block
        var block697 = new GraceBlock(this, 632, 1);
        block697.guard = jsTrue;
        block697.real = function block697(var_t) {
          setLineNumber(632);    // compilenode member
          // call case 6: other requests
          var call698 = request(var_t, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call699 = request(var_lastToken, "line", [0]);
          var opresult700 = request(call698, "==(1)", [1], call699);
          // call case 6: other requests
          var call701 = request(var_t, "isRParen", [0]);
          var opresult702 = request(opresult700, "&&(1)", [1], call701);
          return opresult702;
        };
        let applyMeth697 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth697.methodName = "apply(1)";
        applyMeth697.paramCounts = [1];
        applyMeth697.paramNames = ["t"];
        applyMeth697.definitionLine = 632;
        applyMeth697.definitionModule = "parser";
        block697.methods["apply(1)"] = applyMeth697;
        let matchesMeth697 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth697.methodName = "matches(1)";
        matchesMeth697.paramCounts = [1];
        matchesMeth697.paramNames = ["t"];
        matchesMeth697.definitionLine = 632;
        matchesMeth697.definitionModule = "parser";
        block697.methods["matches(1)"] = matchesMeth697;
        // call case 2: outer request
        var call696 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block697);
        var var_nextTok = call696;
        var if703 = GraceDone;
        setLineNumber(633);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult704 = request(GraceFalse, "==(1)", [1], var_nextTok);
        if (Grace_isTrue(opresult704)) {
          setLineNumber(634);    // compilenode string
          var string707 = new GraceString("rparen");
          var array706 = new GraceSequence([string707]);
          // call case 2: outer request
          var call705 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array706);
          var_nextTok = call705;
          var if708 = GraceDone;
          setLineNumber(635);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult709 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult709)) {
            setLineNumber(636);    // compilenode string
            var string711 = new GraceString("\u00abexpression\u00bb) then {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call710 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string711, var_lastToken);
            if708 = call710;
          } else {
            setLineNumber(638);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call713 = request(var_nextTok, "prev", [0]);
            setLineNumber(639);    // compilenode string
            var string714 = new GraceString("\u00abexpression\u00bb) then {");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call712 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call713, GraceTrue, GraceFalse, string714);
            if708 = call712;
          }
          setLineNumber(641);    // compilenode string
          var string716 = new GraceString("an if statement must have a ");
          setLineNumber(642);    // compilenode string
          var string717 = new GraceString("condition in parentheses or braces after the 'if'.");
          var opresult718 = request(string716, "++(1)", [1], string717);
          setLineNumber(643);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call719 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call720 = request(var_sym, "linePos", [0]);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call715 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult718, call719, call720, var_suggestion);
          if703 = call715;
        } else {
          var if721 = GraceDone;
          setLineNumber(646);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult722 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult722)) {
            setLineNumber(647);    // compilenode string
            var string724 = new GraceString("\u00abexpression\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call723 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string724, var_lastToken);
            setLineNumber(648);    // compilenode string
            var string726 = new GraceString("an if statement must have a ");
            setLineNumber(649);    // compilenode string
            var string727 = new GraceString("condition in parentheses or braces after the 'if'.");
            var opresult728 = request(string726, "++(1)", [1], string727);
            setLineNumber(650);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call729 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call730 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call725 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult728, call729, call730, var_suggestion);
            if721 = call725;
          } else {
            setLineNumber(653);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call732 = request(var_nextTok, "prev", [0]);
            setLineNumber(654);    // compilenode string
            var string733 = new GraceString("\u00abexpression\u00bb");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call731 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call732, GraceFalse, GraceTrue, string733);
            setLineNumber(655);    // compilenode string
            var string735 = new GraceString("an if statement must have a ");
            setLineNumber(656);    // compilenode string
            var string736 = new GraceString("condition in parentheses or braces after the 'if'.");
            var opresult737 = request(string735, "++(1)", [1], string736);
            setLineNumber(657);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call738 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call739 = request(var_sym, "linePos", [0]);
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call740 = request(var_nextTok, "linePos", [0]);
            var diff741 = request(call740, "-(1)", [1], new GraceNum(1));
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call734 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], opresult737, call738, call739, diff741, var_suggestion);
            if721 = call734;
          }
          if703 = if721;
        }
        if690 = if703;
      }
      var if742 = GraceDone;
      setLineNumber(662);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call743 = request(var_sym, "value", [0]);
      if (var_closer === undefined) raiseUninitializedVariable("closer");
      var opresult744 = request(call743, "\u2260(1)", [1], var_closer);
      if (Grace_isTrue(opresult744)) {
        setLineNumber(663);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call745 = selfRequest(this, "checkBadOperators", [0]);
        setLineNumber(664);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call747 = request(var_errormessages, "suggestion", [0]);
        var call746 = request(call747, "new", [0]);
        var var_suggestion = call746;
        setLineNumber(665);    // compilenode string
        var string749 = new GraceString(")");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call748 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string749, var_lastToken);
        setLineNumber(666);    // compilenode string
        var string751 = new GraceString("an expression beginning with a ");
        setLineNumber(667);    // compilenode string
        var string752 = new GraceString("'");
        if (var_opener === undefined) raiseUninitializedVariable("opener");
        var opresult753 = request(string752, "++(1)", [1], var_opener);
        var string754 = new GraceString("' must end with a '");
        var opresult755 = request(opresult753, "++(1)", [1], string754);
        if (var_closer === undefined) raiseUninitializedVariable("closer");
        var opresult756 = request(opresult755, "++(1)", [1], var_closer);
        var string757 = new GraceString("'.");
        var opresult758 = request(opresult756, "++(1)", [1], string757);
        var opresult759 = request(string751, "++(1)", [1], opresult758);
        setLineNumber(668);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call760 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call761 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call762 = request(var_lastToken, "size", [0]);
        var sum763 = request(call761, "+(1)", [1], call762);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call750 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult759, call760, sum763, var_suggestion);
        if742 = call750;
      }
      setLineNumber(671);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call764 = selfRequest(this, "next", [0]);
      setLineNumber(672);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call765 = request(var_values, "pop", [0]);
      var var_cond = call765;
      setLineNumber(673);    // compilenode array
      var array767 = new GraceSequence([]);
      // call case 2: outer request
      var call766 = selfRequest(var_prelude, "list(1)", [1], array767);
      var var_body = call766;
      setLineNumber(675);    // compilenode array
      var array769 = new GraceSequence([]);
      // call case 2: outer request
      var call768 = selfRequest(var_prelude, "list(1)", [1], array769);
      var var_elseblock = call768;
      setLineNumber(676);    // compilenode vardec
      if (var_elseblock === undefined) raiseUninitializedVariable("elseblock");
      var var_curelse = var_elseblock;
      setLineNumber(683);    // compilenode vardec
      var var_v;
      var if770 = GraceDone;
      setLineNumber(684);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call771 = request(var_sym, "isIdentifier", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call772 = request(var_sym, "value", [0]);
      var string773 = new GraceString("then");
      var opresult774 = request(call772, "==(1)", [1], string773);
      var opresult775 = request(call771, "&&(1)", [1], opresult774);
      if (Grace_isTrue(opresult775)) {
        setLineNumber(685);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call776 = selfRequest(this, "next", [0]);
        var if777 = GraceDone;
        setLineNumber(686);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call778 = request(var_sym, "kind", [0]);
        var string779 = new GraceString("lbrace");
        var opresult780 = request(call778, "\u2260(1)", [1], string779);
        if (Grace_isTrue(opresult780)) {
          setLineNumber(687);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call782 = request(var_errormessages, "suggestion", [0]);
          var call781 = request(call782, "new", [0]);
          var var_suggestion = call781;
          setLineNumber(688);    // compilenode call
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          // call case 2: outer request
          var call783 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceTrue);
          var var_closingBrace = call783;
          var if784 = GraceDone;
          setLineNumber(689);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
          var call786 = request(var_closingBrace, "found", [0]);
          var call785 = request(call786, "not", [0]);
          if (Grace_isTrue(call785)) {
            var if787 = GraceDone;
            setLineNumber(690);    // compilenode member
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call788 = request(var_closingBrace, "tok", [0]);
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var opresult789 = request(call788, "==(1)", [1], var_lastToken);
            if (Grace_isTrue(opresult789)) {
              setLineNumber(691);    // compilenode call
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var string791 = new GraceString("then {}");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call790 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string791);
              if787 = call790;
            } else {
              setLineNumber(693);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call794 = request(var_closingBrace, "tok", [0]);
              var call793 = request(call794, "line", [0]);
              var sum795 = request(call793, "+(1)", [1], new GraceNum(.1));
              var string796 = new GraceString("}");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call792 = request(var_suggestion, "addLine(2)", [2], sum795, string796);
              setLineNumber(694);    // compilenode call
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var string798 = new GraceString("then {");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call797 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string798);
              if787 = call797;
            }
            if784 = if787;
          } else {
            setLineNumber(697);    // compilenode call
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var string800 = new GraceString("then {");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call799 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string800);
            if784 = call799;
          }
          setLineNumber(699);    // compilenode string
          var string802 = new GraceString("an if statement must have a '{' after the 'then'.");
          setLineNumber(700);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call803 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call804 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call805 = request(var_lastToken, "size", [0]);
          var sum806 = request(call804, "+(1)", [1], call805);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call801 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string802, call803, sum806, var_suggestion);
          if777 = call801;
        }
        setLineNumber(702);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call807 = selfRequest(this, "next", [0]);
        setLineNumber(703);    // compilenode block
        var block809 = new GraceBlock(this, 703, 0);
        block809.guard = jsTrue;
        block809.real = function block809() {
          setLineNumber(703);    // compilenode block
          var block811 = new GraceBlock(this, 703, 0);
          block811.guard = jsTrue;
          block811.real = function block811() {
            setLineNumber(703);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call812 = selfRequest(this, "statement", [0]);
            return call812;
          };
          let applyMeth811 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth811.methodName = "apply";
          applyMeth811.paramCounts = [0];
          applyMeth811.paramNames = [];
          applyMeth811.definitionLine = 703;
          applyMeth811.definitionModule = "parser";
          block811.methods["apply"] = applyMeth811;
          // call case 2: outer request
          var call810 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block811);
          return call810;
        };
        let applyMeth809 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth809.methodName = "apply";
        applyMeth809.paramCounts = [0];
        applyMeth809.paramNames = [];
        applyMeth809.definitionLine = 703;
        applyMeth809.definitionModule = "parser";
        block809.methods["apply"] = applyMeth809;
        var block813 = new GraceBlock(this, 703, 0);
        block813.guard = jsTrue;
        block813.real = function block813() {
          setLineNumber(704);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call814 = selfRequest(this, "skipSeparators", [0]);
          var if815 = GraceDone;
          setLineNumber(705);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call816 = request(var_values, "isEmpty", [0]);
          if (Grace_isTrue(call816)) {
            setLineNumber(706);    // compilenode string
            var string818 = new GraceString("values is empty.\n  commentStack = ");
            if (var_comments === undefined) raiseUninitializedVariable("comments");
            var opresult819 = request(string818, "++(1)", [1], var_comments);
            var string820 = new GraceString("\nsym = ");
            var opresult821 = request(opresult819, "++(1)", [1], string820);
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult822 = request(opresult821, "++(1)", [1], var_sym);
            var string823 = new GraceString("");
            var opresult824 = request(opresult822, "++(1)", [1], string823);
            // call case 6: other requests
            // call case 2: outer request
            var call825 = selfRequest(var_prelude, "ProgrammingError", [0]);
            var call817 = request(call825, "raise(1)", [1], opresult824);
            if815 = call817;
          }
          setLineNumber(708);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call827 = request(var_values, "pop", [0]);
          // call case 6: other requests
          if (var_body === undefined) raiseUninitializedVariable("body");
          var call826 = request(var_body, "push(1)", [1], call827);
          return call826;
        };
        let applyMeth813 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth813.methodName = "apply";
        applyMeth813.paramCounts = [0];
        applyMeth813.paramNames = [];
        applyMeth813.definitionLine = 703;
        applyMeth813.definitionModule = "parser";
        block813.methods["apply"] = applyMeth813;
        // call case 2: outer request
        var call808 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block809, block813);
        var if828 = GraceDone;
        setLineNumber(710);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call830 = request(var_sym, "isRBrace", [0]);
        var call829 = request(call830, "not", [0]);
        if (Grace_isTrue(call829)) {
          setLineNumber(711);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call832 = request(var_errormessages, "suggestion", [0]);
          var call831 = request(call832, "new", [0]);
          var var_suggestion = call831;
          setLineNumber(712);    // compilenode call
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          // call case 2: outer request
          var call833 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceFalse);
          var var_closingBrace = call833;
          var if834 = GraceDone;
          setLineNumber(713);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
          var call836 = request(var_closingBrace, "found", [0]);
          var call835 = request(call836, "not", [0]);
          if (Grace_isTrue(call835)) {
            var if837 = GraceDone;
            setLineNumber(714);    // compilenode member
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call838 = request(var_closingBrace, "tok", [0]);
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var opresult839 = request(call838, "==(1)", [1], var_lastToken);
            if (Grace_isTrue(opresult839)) {
              setLineNumber(715);    // compilenode string
              var string841 = new GraceString("}");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call840 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string841, var_lastToken);
              if837 = call840;
            } else {
              setLineNumber(717);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call844 = request(var_closingBrace, "tok", [0]);
              var call843 = request(call844, "line", [0]);
              var sum845 = request(call843, "+(1)", [1], new GraceNum(.1));
              var string846 = new GraceString("}");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call842 = request(var_suggestion, "addLine(2)", [2], sum845, string846);
              if837 = call842;
            }
            if834 = if837;
          }
          setLineNumber(720);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call847 = request(var_suggestion, "deleteToken(1)", [1], var_sym);
          setLineNumber(721);    // compilenode string
          var string849 = new GraceString("an if statement must end with a '}'.");
          setLineNumber(722);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call850 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call851 = request(var_sym, "linePos", [0]);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call848 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string849, call850, call851, var_suggestion);
          if828 = call848;
        }
        setLineNumber(724);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call852 = selfRequest(this, "next", [0]);
        setLineNumber(725);    // compilenode vardec
        var var_econd;
        setLineNumber(726);    // compilenode vardec
        var var_eif;
        setLineNumber(727);    // compilenode vardec
        var var_newelse;
        setLineNumber(728);    // compilenode vardec
        var var_ebody;
        setLineNumber(729);    // compilenode block
        var block854 = new GraceBlock(this, 729, 0);
        block854.guard = jsTrue;
        block854.real = function block854() {
          setLineNumber(729);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call855 = request(var_sym, "isIdentifier", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call856 = request(var_sym, "value", [0]);
          var string857 = new GraceString("elseif");
          var opresult858 = request(call856, "==(1)", [1], string857);
          var opresult859 = request(call855, "&&(1)", [1], opresult858);
          return opresult859;
        };
        let applyMeth854 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth854.methodName = "apply";
        applyMeth854.paramCounts = [0];
        applyMeth854.paramNames = [];
        applyMeth854.definitionLine = 729;
        applyMeth854.definitionModule = "parser";
        block854.methods["apply"] = applyMeth854;
        var block860 = new GraceBlock(this, 729, 0);
        block860.guard = jsTrue;
        block860.real = function block860() {
          setLineNumber(733);    // compilenode bind
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var_statementToken = var_sym;
          setLineNumber(734);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call861 = selfRequest(this, "next", [0]);
          var if862 = GraceDone;
          setLineNumber(735);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call864 = request(var_sym, "isLBrace", [0]);
          var call863 = request(call864, "not", [0]);
          if (Grace_isTrue(call863)) {
            setLineNumber(736);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call866 = request(var_errormessages, "suggestion", [0]);
            var call865 = request(call866, "new", [0]);
            var var_suggestion = call865;
            setLineNumber(738);    // compilenode block
            var block868 = new GraceBlock(this, 738, 1);
            block868.guard = jsTrue;
            block868.real = function block868(var_t) {
              setLineNumber(739);    // compilenode member
              // call case 6: other requests
              var call869 = request(var_t, "line", [0]);
              // call case 6: other requests
              if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
              var call870 = request(var_statementToken, "line", [0]);
              var opresult871 = request(call869, "==(1)", [1], call870);
              setLineNumber(740);    // compilenode member
              // call case 6: other requests
              var call872 = request(var_t, "isRBrace", [0]);
              // call case 6: other requests
              var call873 = request(var_t, "isLBrace", [0]);
              var opresult874 = request(call872, "||(1)", [1], call873);
              setLineNumber(741);    // compilenode member
              // call case 6: other requests
              var call875 = request(var_t, "isIdentifier", [0]);
              // call case 6: other requests
              var call876 = request(var_t, "value", [0]);
              var string877 = new GraceString("then");
              var opresult878 = request(call876, "==(1)", [1], string877);
              var opresult879 = request(call875, "&&(1)", [1], opresult878);
              var opresult880 = request(opresult874, "||(1)", [1], opresult879);
              var opresult881 = request(opresult871, "&&(1)", [1], opresult880);
              return opresult881;
            };
            let applyMeth868 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth868.methodName = "apply(1)";
            applyMeth868.paramCounts = [1];
            applyMeth868.paramNames = ["t"];
            applyMeth868.definitionLine = 738;
            applyMeth868.definitionModule = "parser";
            block868.methods["apply(1)"] = applyMeth868;
            let matchesMeth868 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth868.methodName = "matches(1)";
            matchesMeth868.paramCounts = [1];
            matchesMeth868.paramNames = ["t"];
            matchesMeth868.definitionLine = 738;
            matchesMeth868.definitionModule = "parser";
            block868.methods["matches(1)"] = matchesMeth868;
            // call case 2: outer request
            var call867 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block868);
            var var_nextTok = call867;
            var if882 = GraceDone;
            setLineNumber(742);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var opresult883 = request(GraceFalse, "==(1)", [1], var_nextTok);
            if (Grace_isTrue(opresult883)) {
              setLineNumber(743);    // compilenode string
              var string885 = new GraceString(" { \u00abexpression\u00bb } then {");
              if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call884 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string885, var_statementToken);
              if882 = call884;
            } else {
              var if886 = GraceDone;
              setLineNumber(744);    // compilenode member
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call887 = request(var_nextTok, "isRBrace", [0]);
              if (Grace_isTrue(call887)) {
                var if888 = GraceDone;
                setLineNumber(745);    // compilenode op
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var opresult889 = request(var_nextTok, "==(1)", [1], var_sym);
                if (Grace_isTrue(opresult889)) {
                  setLineNumber(746);    // compilenode string
                  var string891 = new GraceString("{ \u00abexpression\u00bb }");
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call890 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string891, var_sym);
                  if888 = call890;
                } else {
                  setLineNumber(748);    // compilenode string
                  var string893 = new GraceString("{ ");
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call892 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string893, var_sym);
                  if888 = call892;
                }
                if886 = if888;
              } else {
                var if894 = GraceDone;
                setLineNumber(750);    // compilenode member
                // call case 6: other requests
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                var call895 = request(var_nextTok, "isLBrace", [0]);
                if (Grace_isTrue(call895)) {
                  var if896 = GraceDone;
                  setLineNumber(751);    // compilenode op
                  if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  var opresult897 = request(var_nextTok, "==(1)", [1], var_sym);
                  if (Grace_isTrue(opresult897)) {
                    setLineNumber(752);    // compilenode string
                    var string899 = new GraceString(" { \u00abexpression\u00bb } then");
                    if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
                    // call case 6: other requests
                    if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                    var call898 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string899, var_statementToken);
                    if896 = call898;
                  } else {
                    setLineNumber(754);    // compilenode string
                    var string901 = new GraceString("{ ");
                    if (var_sym === undefined) raiseUninitializedVariable("sym");
                    // call case 6: other requests
                    if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                    var call900 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string901, var_sym);
                    setLineNumber(755);    // compilenode string
                    var string903 = new GraceString(" } then");
                    // call case 6: other requests
                    if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                    var call904 = request(var_nextTok, "prev", [0]);
                    // call case 6: other requests
                    if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                    var call902 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string903, call904, GraceTrue);
                    if896 = call902;
                  }
                  if894 = if896;
                } else {
                  var if905 = GraceDone;
                  setLineNumber(757);    // compilenode member
                  // call case 6: other requests
                  if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                  var call906 = request(var_nextTok, "isIdentifier", [0]);
                  if (Grace_isTrue(call906)) {
                    var if907 = GraceDone;
                    setLineNumber(758);    // compilenode op
                    if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                    if (var_sym === undefined) raiseUninitializedVariable("sym");
                    var opresult908 = request(var_nextTok, "==(1)", [1], var_sym);
                    if (Grace_isTrue(opresult908)) {
                      setLineNumber(759);    // compilenode string
                      var string910 = new GraceString("{ \u00abexpression\u00bb } ");
                      if (var_sym === undefined) raiseUninitializedVariable("sym");
                      // call case 6: other requests
                      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                      var call909 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string910, var_sym);
                      if907 = call909;
                    } else {
                      setLineNumber(761);    // compilenode string
                      var string912 = new GraceString("{ ");
                      if (var_sym === undefined) raiseUninitializedVariable("sym");
                      // call case 6: other requests
                      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                      var call911 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string912, var_sym);
                      setLineNumber(762);    // compilenode string
                      var string914 = new GraceString(" }");
                      // call case 6: other requests
                      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                      var call915 = request(var_nextTok, "prev", [0]);
                      // call case 6: other requests
                      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                      var call913 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string914, call915, GraceTrue);
                      if907 = call913;
                    }
                    if905 = if907;
                  }
                  if894 = if905;
                }
                if886 = if894;
              }
              if882 = if886;
            }
            setLineNumber(765);    // compilenode string
            var string917 = new GraceString("an elseif statement must have a ");
            setLineNumber(766);    // compilenode string
            var string918 = new GraceString("condition in braces after the 'elseif'.");
            var opresult919 = request(string917, "++(1)", [1], string918);
            setLineNumber(767);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call920 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call921 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call916 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult919, call920, call921, var_suggestion);
            if862 = call916;
          }
          setLineNumber(770);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call922 = selfRequest(this, "next", [0]);
          var if923 = GraceDone;
          setLineNumber(771);    // compilenode block
          var block925 = new GraceBlock(this, 771, 0);
          block925.guard = jsTrue;
          block925.real = function block925() {
            setLineNumber(771);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call926 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call926;
          };
          let applyMeth925 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth925.methodName = "apply";
          applyMeth925.paramCounts = [0];
          applyMeth925.paramNames = [];
          applyMeth925.definitionLine = 771;
          applyMeth925.definitionModule = "parser";
          block925.methods["apply"] = applyMeth925;
          // call case 2: outer request
          var call924 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block925);
          if (Grace_isTrue(call924)) {
            setLineNumber(772);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call928 = request(var_errormessages, "suggestion", [0]);
            var call927 = request(call928, "new", [0]);
            var var_suggestion = call927;
            setLineNumber(774);    // compilenode block
            var block930 = new GraceBlock(this, 774, 1);
            block930.guard = jsTrue;
            block930.real = function block930(var_t) {
              setLineNumber(775);    // compilenode member
              // call case 6: other requests
              var call931 = request(var_t, "line", [0]);
              // call case 6: other requests
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var call932 = request(var_lastToken, "line", [0]);
              var opresult933 = request(call931, "==(1)", [1], call932);
              // call case 6: other requests
              var call934 = request(var_t, "isRBrace", [0]);
              var opresult935 = request(opresult933, "&&(1)", [1], call934);
              return opresult935;
            };
            let applyMeth930 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth930.methodName = "apply(1)";
            applyMeth930.paramCounts = [1];
            applyMeth930.paramNames = ["t"];
            applyMeth930.definitionLine = 774;
            applyMeth930.definitionModule = "parser";
            block930.methods["apply(1)"] = applyMeth930;
            let matchesMeth930 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth930.methodName = "matches(1)";
            matchesMeth930.paramCounts = [1];
            matchesMeth930.paramNames = ["t"];
            matchesMeth930.definitionLine = 774;
            matchesMeth930.definitionModule = "parser";
            block930.methods["matches(1)"] = matchesMeth930;
            // call case 2: outer request
            var call929 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block930);
            var var_nextTok = call929;
            var if936 = GraceDone;
            setLineNumber(776);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var opresult937 = request(GraceFalse, "==(1)", [1], var_nextTok);
            if (Grace_isTrue(opresult937)) {
              setLineNumber(777);    // compilenode string
              var string940 = new GraceString("rbrace");
              var array939 = new GraceSequence([string940]);
              // call case 2: outer request
              var call938 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array939);
              var_nextTok = call938;
              var if941 = GraceDone;
              setLineNumber(778);    // compilenode op
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var opresult942 = request(var_nextTok, "==(1)", [1], var_sym);
              if (Grace_isTrue(opresult942)) {
                setLineNumber(779);    // compilenode string
                var string944 = new GraceString("\u00abexpression\u00bb } then {");
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call943 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string944, var_lastToken);
                if941 = call943;
              } else {
                setLineNumber(781);    // compilenode call
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                // call case 6: other requests
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                var call946 = request(var_nextTok, "prev", [0]);
                var string947 = new GraceString("\u00abexpression\u00bb } then {");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call945 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call946, GraceTrue, GraceFalse, string947);
                if941 = call945;
              }
              setLineNumber(783);    // compilenode string
              var string949 = new GraceString("an elseif clause must have an expression in braces after the 'elseif'.");
              setLineNumber(784);    // compilenode member
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call950 = request(var_sym, "line", [0]);
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call951 = request(var_sym, "linePos", [0]);
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call948 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string949, call950, call951, var_suggestion);
              if936 = call948;
            } else {
              var if952 = GraceDone;
              setLineNumber(786);    // compilenode op
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var opresult953 = request(var_nextTok, "==(1)", [1], var_sym);
              if (Grace_isTrue(opresult953)) {
                setLineNumber(787);    // compilenode string
                var string955 = new GraceString("\u00abexpression\u00bb");
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call954 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string955, var_lastToken);
                setLineNumber(788);    // compilenode string
                var string957 = new GraceString("an elseif clause must have an expression in braces after the 'elseif'.");
                setLineNumber(789);    // compilenode member
                // call case 6: other requests
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var call958 = request(var_sym, "line", [0]);
                // call case 6: other requests
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var call959 = request(var_sym, "linePos", [0]);
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                // call case 6: other requests
                if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
                var call956 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string957, call958, call959, var_suggestion);
                if952 = call956;
              } else {
                setLineNumber(792);    // compilenode call
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                // call case 6: other requests
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                var call961 = request(var_nextTok, "prev", [0]);
                var string962 = new GraceString("\u00abexpression\u00bb");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call960 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call961, GraceFalse, GraceTrue, string962);
                setLineNumber(793);    // compilenode string
                var string964 = new GraceString("(4) an elseif statement must have an expression in braces after the 'elseif'.");
                setLineNumber(794);    // compilenode member
                // call case 6: other requests
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var call965 = request(var_sym, "line", [0]);
                // call case 6: other requests
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var call966 = request(var_sym, "linePos", [0]);
                // call case 6: other requests
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                var call967 = request(var_nextTok, "linePos", [0]);
                var diff968 = request(call967, "-(1)", [1], new GraceNum(1));
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                // call case 6: other requests
                if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
                var call963 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string964, call965, call966, diff968, var_suggestion);
                if952 = call963;
              }
              if936 = if952;
            }
            if923 = if936;
          }
          var if969 = GraceDone;
          setLineNumber(798);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call970 = request(var_sym, "value", [0]);
          var string971 = new GraceString("}");
          var opresult972 = request(call970, "\u2260(1)", [1], string971);
          if (Grace_isTrue(opresult972)) {
            setLineNumber(799);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call973 = selfRequest(this, "checkBadOperators", [0]);
            setLineNumber(800);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call975 = request(var_errormessages, "suggestion", [0]);
            var call974 = request(call975, "new", [0]);
            var var_suggestion = call974;
            setLineNumber(801);    // compilenode string
            var string977 = new GraceString("}");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call976 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string977, var_lastToken);
            setLineNumber(802);    // compilenode string
            var string979 = new GraceString("a condition beginning with a ");
            setLineNumber(803);    // compilenode string
            var string980 = new GraceString("'{' must end with a '}'.");
            var opresult981 = request(string979, "++(1)", [1], string980);
            setLineNumber(804);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call982 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call983 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call984 = request(var_lastToken, "size", [0]);
            var sum985 = request(call983, "+(1)", [1], call984);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call978 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult981, call982, sum985, var_suggestion);
            if969 = call978;
          }
          setLineNumber(807);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call986 = selfRequest(this, "next", [0]);
          setLineNumber(808);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call987 = request(var_values, "pop", [0]);
          var_econd = call987;
          var if988 = GraceDone;
          setLineNumber(809);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call989 = request(var_sym, "isIdentifier", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call990 = request(var_sym, "value", [0]);
          var string991 = new GraceString("then");
          var opresult992 = request(call990, "==(1)", [1], string991);
          var opresult993 = request(call989, "&&(1)", [1], opresult992);
          if (Grace_isTrue(opresult993)) {
            setLineNumber(810);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call994 = selfRequest(this, "next", [0]);
            setLineNumber(811);    // compilenode array
            var array996 = new GraceSequence([]);
            // call case 2: outer request
            var call995 = selfRequest(var_prelude, "list(1)", [1], array996);
            var_ebody = call995;
            if988 = GraceDone;
          } else {
            setLineNumber(813);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call998 = request(var_errormessages, "suggestion", [0]);
            var call997 = request(call998, "new", [0]);
            var var_suggestion = call997;
            var if999 = GraceDone;
            setLineNumber(814);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1000 = request(var_sym, "isLBrace", [0]);
            if (Grace_isTrue(call1000)) {
              setLineNumber(815);    // compilenode call
              if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
              // call case 2: outer request
              var call1001 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_statementToken, GraceFalse);
              var var_closingBrace = call1001;
              var if1002 = GraceDone;
              setLineNumber(816);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1004 = request(var_closingBrace, "found", [0]);
              var call1003 = request(call1004, "not", [0]);
              if (Grace_isTrue(call1003)) {
                var if1005 = GraceDone;
                setLineNumber(817);    // compilenode member
                // call case 6: other requests
                if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                var call1006 = request(var_closingBrace, "tok", [0]);
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var opresult1007 = request(call1006, "==(1)", [1], var_sym);
                if (Grace_isTrue(opresult1007)) {
                  setLineNumber(818);    // compilenode call
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  var string1009 = new GraceString(" then {}");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1008 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, string1009);
                  if1005 = call1008;
                } else {
                  setLineNumber(820);    // compilenode call
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  var string1011 = new GraceString(" then {");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1010 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, string1011);
                  setLineNumber(821);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                  var call1014 = request(var_closingBrace, "tok", [0]);
                  var call1013 = request(call1014, "line", [0]);
                  var sum1015 = request(call1013, "+(1)", [1], new GraceNum(.1));
                  var string1016 = new GraceString("}");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1012 = request(var_suggestion, "addLine(2)", [2], sum1015, string1016);
                  if1005 = call1012;
                }
                if1002 = if1005;
              } else {
                setLineNumber(824);    // compilenode call
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var string1018 = new GraceString(" then {");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1017 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, string1018);
                if1002 = call1017;
              }
              if999 = if1002;
            } else {
              setLineNumber(827);    // compilenode call
              if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
              // call case 2: outer request
              var call1019 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_statementToken, GraceTrue);
              var var_closingBrace = call1019;
              var if1020 = GraceDone;
              setLineNumber(828);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1022 = request(var_closingBrace, "found", [0]);
              var call1021 = request(call1022, "not", [0]);
              if (Grace_isTrue(call1021)) {
                var if1023 = GraceDone;
                setLineNumber(829);    // compilenode member
                // call case 6: other requests
                if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                var call1024 = request(var_closingBrace, "tok", [0]);
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var opresult1025 = request(call1024, "==(1)", [1], var_lastToken);
                if (Grace_isTrue(opresult1025)) {
                  setLineNumber(830);    // compilenode string
                  var string1027 = new GraceString(" then {}");
                  if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1026 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1027, var_lastToken);
                  if1023 = call1026;
                } else {
                  setLineNumber(832);    // compilenode string
                  var string1029 = new GraceString(" then {");
                  if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1028 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1029, var_lastToken);
                  setLineNumber(833);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                  var call1032 = request(var_closingBrace, "tok", [0]);
                  var call1031 = request(call1032, "line", [0]);
                  var sum1033 = request(call1031, "+(1)", [1], new GraceNum(.1));
                  var string1034 = new GraceString("}");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1030 = request(var_suggestion, "addLine(2)", [2], sum1033, string1034);
                  if1023 = call1030;
                }
                if1020 = if1023;
              } else {
                setLineNumber(836);    // compilenode string
                var string1036 = new GraceString(" then {");
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1035 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1036, var_lastToken);
                if1020 = call1035;
              }
              if999 = if1020;
            }
            setLineNumber(839);    // compilenode string
            var string1038 = new GraceString("an elseif clause must have 'then' after the expression in braces.");
            setLineNumber(840);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1039 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1040 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1037 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1038, call1039, call1040, var_suggestion);
            if988 = call1037;
          }
          var if1041 = GraceDone;
          setLineNumber(842);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1042 = request(var_sym, "kind", [0]);
          var string1043 = new GraceString("lbrace");
          var opresult1044 = request(call1042, "\u2260(1)", [1], string1043);
          if (Grace_isTrue(opresult1044)) {
            setLineNumber(843);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1046 = request(var_errormessages, "suggestion", [0]);
            var call1045 = request(call1046, "new", [0]);
            var var_suggestion = call1045;
            setLineNumber(844);    // compilenode call
            if (var_btok === undefined) raiseUninitializedVariable("btok");
            // call case 2: outer request
            var call1047 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceTrue);
            var var_closingBrace = call1047;
            var if1048 = GraceDone;
            setLineNumber(845);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call1050 = request(var_closingBrace, "found", [0]);
            var call1049 = request(call1050, "not", [0]);
            if (Grace_isTrue(call1049)) {
              var if1051 = GraceDone;
              setLineNumber(846);    // compilenode member
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1052 = request(var_closingBrace, "tok", [0]);
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var opresult1053 = request(call1052, "==(1)", [1], var_lastToken);
              if (Grace_isTrue(opresult1053)) {
                setLineNumber(847);    // compilenode call
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var string1055 = new GraceString("then {}");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1054 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string1055);
                if1051 = call1054;
              } else {
                setLineNumber(849);    // compilenode member
                // call case 6: other requests
                // call case 6: other requests
                if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                var call1058 = request(var_closingBrace, "tok", [0]);
                var call1057 = request(call1058, "line", [0]);
                var sum1059 = request(call1057, "+(1)", [1], new GraceNum(.1));
                var string1060 = new GraceString("}");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1056 = request(var_suggestion, "addLine(2)", [2], sum1059, string1060);
                setLineNumber(850);    // compilenode call
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var string1062 = new GraceString("then {");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1061 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string1062);
                if1051 = call1061;
              }
              if1048 = if1051;
            } else {
              setLineNumber(853);    // compilenode call
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var string1064 = new GraceString("then {");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1063 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string1064);
              if1048 = call1063;
            }
            setLineNumber(855);    // compilenode string
            var string1066 = new GraceString("an elseif clause must have a '{' after the 'then'.");
            setLineNumber(856);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1067 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1068 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1069 = request(var_lastToken, "size", [0]);
            var sum1070 = request(call1068, "+(1)", [1], call1069);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1065 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1066, call1067, sum1070, var_suggestion);
            if1041 = call1065;
          }
          setLineNumber(858);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1071 = selfRequest(this, "next", [0]);
          setLineNumber(859);    // compilenode block
          var block1073 = new GraceBlock(this, 859, 0);
          block1073.guard = jsTrue;
          block1073.real = function block1073() {
            setLineNumber(859);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1075 = request(var_sym, "isRBrace", [0]);
            var call1074 = request(call1075, "not", [0]);
            return call1074;
          };
          let applyMeth1073 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1073.methodName = "apply";
          applyMeth1073.paramCounts = [0];
          applyMeth1073.paramNames = [];
          applyMeth1073.definitionLine = 859;
          applyMeth1073.definitionModule = "parser";
          block1073.methods["apply"] = applyMeth1073;
          var block1076 = new GraceBlock(this, 859, 0);
          block1076.guard = jsTrue;
          block1076.real = function block1076() {
            var if1077 = GraceDone;
            setLineNumber(860);    // compilenode block
            var block1079 = new GraceBlock(this, 860, 0);
            block1079.guard = jsTrue;
            block1079.real = function block1079() {
              setLineNumber(860);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1080 = selfRequest(this, "statement", [0]);
              return call1080;
            };
            let applyMeth1079 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth1079.methodName = "apply";
            applyMeth1079.paramCounts = [0];
            applyMeth1079.paramNames = [];
            applyMeth1079.definitionLine = 860;
            applyMeth1079.definitionModule = "parser";
            block1079.methods["apply"] = applyMeth1079;
            // call case 2: outer request
            var call1078 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1079);
            if (Grace_isTrue(call1078)) {
              setLineNumber(861);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1082 = request(var_errormessages, "suggestion", [0]);
              var call1081 = request(call1082, "new", [0]);
              var var_suggestion = call1081;
              setLineNumber(862);    // compilenode call
              if (var_btok === undefined) raiseUninitializedVariable("btok");
              // call case 2: outer request
              var call1083 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceFalse);
              var var_closingBrace = call1083;
              var if1084 = GraceDone;
              setLineNumber(863);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1086 = request(var_closingBrace, "found", [0]);
              var call1085 = request(call1086, "not", [0]);
              if (Grace_isTrue(call1085)) {
                var if1087 = GraceDone;
                setLineNumber(864);    // compilenode member
                // call case 6: other requests
                if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                var call1088 = request(var_closingBrace, "tok", [0]);
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var opresult1089 = request(call1088, "==(1)", [1], var_lastToken);
                if (Grace_isTrue(opresult1089)) {
                  setLineNumber(865);    // compilenode string
                  var string1091 = new GraceString("}");
                  if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1090 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1091, var_lastToken);
                  if1087 = call1090;
                } else {
                  setLineNumber(867);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                  var call1094 = request(var_closingBrace, "tok", [0]);
                  var call1093 = request(call1094, "line", [0]);
                  var sum1095 = request(call1093, "+(1)", [1], new GraceNum(.1));
                  var string1096 = new GraceString("}");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1092 = request(var_suggestion, "addLine(2)", [2], sum1095, string1096);
                  if1087 = call1092;
                }
                if1084 = if1087;
              }
              setLineNumber(870);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1097 = request(var_suggestion, "deleteToken(1)", [1], var_sym);
              setLineNumber(871);    // compilenode string
              var string1099 = new GraceString("an 'elseif' clause must end with a '}'.");
              setLineNumber(872);    // compilenode member
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call1100 = request(var_sym, "line", [0]);
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call1101 = request(var_sym, "linePos", [0]);
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1098 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1099, call1100, call1101, var_suggestion);
              if1077 = call1098;
            }
            setLineNumber(874);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1102 = selfRequest(this, "separator", [0]);
            setLineNumber(875);    // compilenode member
            // call case 6: other requests
            if (var_values === undefined) raiseUninitializedVariable("values");
            var call1103 = request(var_values, "pop", [0]);
            var_v = call1103;
            setLineNumber(876);    // compilenode call
            if (var_v === undefined) raiseUninitializedVariable("v");
            // call case 6: other requests
            if (var_ebody === undefined) raiseUninitializedVariable("ebody");
            var call1104 = request(var_ebody, "push(1)", [1], var_v);
            return call1104;
          };
          let applyMeth1076 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1076.methodName = "apply";
          applyMeth1076.paramCounts = [0];
          applyMeth1076.paramNames = [];
          applyMeth1076.definitionLine = 859;
          applyMeth1076.definitionModule = "parser";
          block1076.methods["apply"] = applyMeth1076;
          // call case 2: outer request
          var call1072 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1073, block1076);
          setLineNumber(878);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1105 = selfRequest(this, "next", [0]);
          setLineNumber(879);    // compilenode array
          var array1107 = new GraceSequence([]);
          // call case 2: outer request
          var call1106 = selfRequest(var_prelude, "list(1)", [1], array1107);
          var_newelse = call1106;
          setLineNumber(880);    // compilenode call
          if (var_econd === undefined) raiseUninitializedVariable("econd");
          if (var_ebody === undefined) raiseUninitializedVariable("ebody");
          if (var_newelse === undefined) raiseUninitializedVariable("newelse");
          // call case 2: outer request
          var call1108 = selfRequest(importedModules["parser"], "newIf(3)", [3], var_econd, var_ebody, var_newelse);
          var_eif = call1108;
          setLineNumber(883);    // compilenode call
          if (var_eif === undefined) raiseUninitializedVariable("eif");
          // call case 6: other requests
          if (var_curelse === undefined) raiseUninitializedVariable("curelse");
          var call1109 = request(var_curelse, "push(1)", [1], var_eif);
          setLineNumber(886);    // compilenode bind
          if (var_newelse === undefined) raiseUninitializedVariable("newelse");
          var_curelse = var_newelse;
          return GraceDone;
        };
        let applyMeth860 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth860.methodName = "apply";
        applyMeth860.paramCounts = [0];
        applyMeth860.paramNames = [];
        applyMeth860.definitionLine = 729;
        applyMeth860.definitionModule = "parser";
        block860.methods["apply"] = applyMeth860;
        // call case 2: outer request
        var call853 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block854, block860);
        var if1110 = GraceDone;
        setLineNumber(888);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1111 = request(var_sym, "isIdentifier", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1112 = request(var_sym, "value", [0]);
        var string1113 = new GraceString("else");
        var opresult1114 = request(call1112, "==(1)", [1], string1113);
        var opresult1115 = request(call1111, "&&(1)", [1], opresult1114);
        if (Grace_isTrue(opresult1115)) {
          setLineNumber(889);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1116 = selfRequest(this, "next", [0]);
          var if1117 = GraceDone;
          setLineNumber(890);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1119 = request(var_sym, "isLBrace", [0]);
          var call1118 = request(call1119, "not", [0]);
          if (Grace_isTrue(call1118)) {
            setLineNumber(891);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1121 = request(var_errormessages, "suggestion", [0]);
            var call1120 = request(call1121, "new", [0]);
            var var_suggestion = call1120;
            setLineNumber(892);    // compilenode call
            if (var_btok === undefined) raiseUninitializedVariable("btok");
            // call case 2: outer request
            var call1122 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceTrue);
            var var_closingBrace = call1122;
            var if1123 = GraceDone;
            setLineNumber(893);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call1125 = request(var_closingBrace, "found", [0]);
            var call1124 = request(call1125, "not", [0]);
            if (Grace_isTrue(call1124)) {
              var if1126 = GraceDone;
              setLineNumber(894);    // compilenode member
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1127 = request(var_closingBrace, "tok", [0]);
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var opresult1128 = request(call1127, "==(1)", [1], var_lastToken);
              if (Grace_isTrue(opresult1128)) {
                setLineNumber(895);    // compilenode call
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var string1130 = new GraceString("else {}");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1129 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string1130);
                if1126 = call1129;
              } else {
                setLineNumber(897);    // compilenode member
                // call case 6: other requests
                // call case 6: other requests
                if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                var call1133 = request(var_closingBrace, "tok", [0]);
                var call1132 = request(call1133, "line", [0]);
                var sum1134 = request(call1132, "+(1)", [1], new GraceNum(.1));
                var string1135 = new GraceString("}");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1131 = request(var_suggestion, "addLine(2)", [2], sum1134, string1135);
                setLineNumber(898);    // compilenode call
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var string1137 = new GraceString("else {");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1136 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string1137);
                if1126 = call1136;
              }
              if1123 = if1126;
            } else {
              setLineNumber(901);    // compilenode call
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              var string1139 = new GraceString("else {");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1138 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_lastToken, GraceFalse, GraceTrue, string1139);
              if1123 = call1138;
            }
            setLineNumber(903);    // compilenode string
            var string1141 = new GraceString("an else clause must start with a '{' after the 'else'.");
            setLineNumber(904);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1142 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1143 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1144 = request(var_lastToken, "size", [0]);
            var sum1145 = request(call1143, "+(1)", [1], call1144);
            var diff1146 = request(sum1145, "-(1)", [1], new GraceNum(1));
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1140 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1141, call1142, diff1146, var_suggestion);
            if1117 = call1140;
          }
          setLineNumber(907);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1147 = selfRequest(this, "next", [0]);
          setLineNumber(910);    // compilenode block
          var block1149 = new GraceBlock(this, 910, 0);
          block1149.guard = jsTrue;
          block1149.real = function block1149() {
            setLineNumber(910);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1151 = request(var_sym, "isRBrace", [0]);
            var call1150 = request(call1151, "not", [0]);
            return call1150;
          };
          let applyMeth1149 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1149.methodName = "apply";
          applyMeth1149.paramCounts = [0];
          applyMeth1149.paramNames = [];
          applyMeth1149.definitionLine = 910;
          applyMeth1149.definitionModule = "parser";
          block1149.methods["apply"] = applyMeth1149;
          var block1152 = new GraceBlock(this, 910, 0);
          block1152.guard = jsTrue;
          block1152.real = function block1152() {
            var if1153 = GraceDone;
            setLineNumber(911);    // compilenode block
            var block1155 = new GraceBlock(this, 911, 0);
            block1155.guard = jsTrue;
            block1155.real = function block1155() {
              setLineNumber(911);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1156 = selfRequest(this, "statement", [0]);
              return call1156;
            };
            let applyMeth1155 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth1155.methodName = "apply";
            applyMeth1155.paramCounts = [0];
            applyMeth1155.paramNames = [];
            applyMeth1155.definitionLine = 911;
            applyMeth1155.definitionModule = "parser";
            block1155.methods["apply"] = applyMeth1155;
            // call case 2: outer request
            var call1154 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1155);
            if (Grace_isTrue(call1154)) {
              setLineNumber(912);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1158 = request(var_errormessages, "suggestion", [0]);
              var call1157 = request(call1158, "new", [0]);
              var var_suggestion = call1157;
              setLineNumber(913);    // compilenode call
              if (var_btok === undefined) raiseUninitializedVariable("btok");
              // call case 2: outer request
              var call1159 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceFalse);
              var var_closingBrace = call1159;
              var if1160 = GraceDone;
              setLineNumber(914);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1162 = request(var_closingBrace, "found", [0]);
              var call1161 = request(call1162, "not", [0]);
              if (Grace_isTrue(call1161)) {
                var if1163 = GraceDone;
                setLineNumber(915);    // compilenode member
                // call case 6: other requests
                if (var_sym === undefined) raiseUninitializedVariable("sym");
                var call1164 = request(var_sym, "isEof", [0]);
                if (Grace_isTrue(call1164)) {
                  setLineNumber(916);    // compilenode string
                  var string1166 = new GraceString("end of program ");
                  setLineNumber(917);    // compilenode string
                  var string1167 = new GraceString("found while searching for the '}' to close ");
                  var opresult1168 = request(string1166, "++(1)", [1], string1167);
                  setLineNumber(918);    // compilenode string
                  var string1169 = new GraceString("an 'else' statement.");
                  var opresult1170 = request(opresult1168, "++(1)", [1], string1169);
                  setLineNumber(919);    // compilenode member
                  // call case 6: other requests
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  var call1171 = request(var_sym, "line", [0]);
                  // call case 6: other requests
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  var call1172 = request(var_sym, "linePos", [0]);
                  // call case 6: other requests
                  if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
                  var call1165 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult1170, call1171, call1172);
                  if1163 = call1165;
                }
                var if1173 = GraceDone;
                setLineNumber(921);    // compilenode member
                // call case 6: other requests
                if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                var call1174 = request(var_closingBrace, "tok", [0]);
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                var opresult1175 = request(call1174, "==(1)", [1], var_lastToken);
                if (Grace_isTrue(opresult1175)) {
                  setLineNumber(922);    // compilenode string
                  var string1177 = new GraceString("}");
                  if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1176 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1177, var_lastToken);
                  if1173 = call1176;
                } else {
                  setLineNumber(924);    // compilenode member
                  // call case 6: other requests
                  // call case 6: other requests
                  if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
                  var call1180 = request(var_closingBrace, "tok", [0]);
                  var call1179 = request(call1180, "line", [0]);
                  var sum1181 = request(call1179, "+(1)", [1], new GraceNum(.1));
                  var string1182 = new GraceString("}");
                  // call case 6: other requests
                  if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                  var call1178 = request(var_suggestion, "addLine(2)", [2], sum1181, string1182);
                  if1173 = call1178;
                }
                if1160 = if1173;
              }
              setLineNumber(927);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1183 = request(var_suggestion, "deleteToken(1)", [1], var_sym);
              setLineNumber(928);    // compilenode string
              var string1185 = new GraceString("an else statement must end with a '}'.");
              setLineNumber(929);    // compilenode member
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call1186 = request(var_sym, "line", [0]);
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call1187 = request(var_sym, "linePos", [0]);
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1184 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1185, call1186, call1187, var_suggestion);
              if1153 = call1184;
            }
            setLineNumber(931);    // compilenode member
            // call case 6: other requests
            if (var_values === undefined) raiseUninitializedVariable("values");
            var call1188 = request(var_values, "pop", [0]);
            var_v = call1188;
            setLineNumber(932);    // compilenode call
            if (var_v === undefined) raiseUninitializedVariable("v");
            // call case 6: other requests
            if (var_curelse === undefined) raiseUninitializedVariable("curelse");
            var call1189 = request(var_curelse, "push(1)", [1], var_v);
            setLineNumber(933);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1190 = selfRequest(this, "separator", [0]);
            return call1190;
          };
          let applyMeth1152 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1152.methodName = "apply";
          applyMeth1152.paramCounts = [0];
          applyMeth1152.paramNames = [];
          applyMeth1152.definitionLine = 910;
          applyMeth1152.definitionModule = "parser";
          block1152.methods["apply"] = applyMeth1152;
          // call case 2: outer request
          var call1148 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1149, block1152);
          setLineNumber(935);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1191 = selfRequest(this, "next", [0]);
          if1110 = call1191;
        }
        setLineNumber(937);    // compilenode member
        // call case 6: other requests
        if (var_btok === undefined) raiseUninitializedVariable("btok");
        var call1193 = request(var_btok, "line", [0]);
        // call case 6: other requests
        if (var_btok === undefined) raiseUninitializedVariable("btok");
        var call1194 = request(var_btok, "linePos", [0]);
        // call case 6: other requests
        if (var_util === undefined) raiseUninitializedVariable("util");
        var call1192 = request(var_util, "setPosition(2)", [2], call1193, call1194);
        setLineNumber(938);    // compilenode call
        if (var_cond === undefined) raiseUninitializedVariable("cond");
        if (var_body === undefined) raiseUninitializedVariable("body");
        if (var_elseblock === undefined) raiseUninitializedVariable("elseblock");
        // call case 2: outer request
        var call1195 = selfRequest(importedModules["parser"], "newIf(3)", [3], var_cond, var_body, var_elseblock);
        var var_o = call1195;
        setLineNumber(939);    // compilenode call
        if (var_o === undefined) raiseUninitializedVariable("o");
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call1196 = request(var_values, "push(1)", [1], var_o);
        if770 = call1196;
      } else {
        setLineNumber(942);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1198 = request(var_errormessages, "suggestion", [0]);
        var call1197 = request(call1198, "new", [0]);
        var var_suggestion = call1197;
        var if1199 = GraceDone;
        setLineNumber(943);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1200 = request(var_sym, "isLBrace", [0]);
        if (Grace_isTrue(call1200)) {
          setLineNumber(944);    // compilenode call
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          // call case 2: outer request
          var call1201 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceFalse);
          var var_closingBrace = call1201;
          var if1202 = GraceDone;
          setLineNumber(945);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
          var call1204 = request(var_closingBrace, "found", [0]);
          var call1203 = request(call1204, "not", [0]);
          if (Grace_isTrue(call1203)) {
            var if1205 = GraceDone;
            setLineNumber(946);    // compilenode member
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call1206 = request(var_closingBrace, "tok", [0]);
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1207 = request(call1206, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1207)) {
              setLineNumber(947);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var string1209 = new GraceString(" then {}");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1208 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, string1209);
              if1205 = call1208;
            } else {
              setLineNumber(949);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var string1211 = new GraceString(" then {");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1210 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, string1211);
              setLineNumber(950);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1214 = request(var_closingBrace, "tok", [0]);
              var call1213 = request(call1214, "line", [0]);
              var sum1215 = request(call1213, "+(1)", [1], new GraceNum(.1));
              var string1216 = new GraceString("}");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1212 = request(var_suggestion, "addLine(2)", [2], sum1215, string1216);
              if1205 = call1212;
            }
            if1202 = if1205;
          } else {
            setLineNumber(953);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var string1218 = new GraceString(" then {");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1217 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, string1218);
            if1202 = call1217;
          }
          if1199 = if1202;
        } else {
          setLineNumber(956);    // compilenode call
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          // call case 2: outer request
          var call1219 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceTrue);
          var var_closingBrace = call1219;
          var if1220 = GraceDone;
          setLineNumber(957);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
          var call1222 = request(var_closingBrace, "found", [0]);
          var call1221 = request(call1222, "not", [0]);
          if (Grace_isTrue(call1221)) {
            var if1223 = GraceDone;
            setLineNumber(958);    // compilenode member
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call1224 = request(var_closingBrace, "tok", [0]);
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var opresult1225 = request(call1224, "==(1)", [1], var_lastToken);
            if (Grace_isTrue(opresult1225)) {
              setLineNumber(959);    // compilenode string
              var string1227 = new GraceString(" then {}");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1226 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1227, var_lastToken);
              if1223 = call1226;
            } else {
              setLineNumber(961);    // compilenode string
              var string1229 = new GraceString(" then {");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1228 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1229, var_lastToken);
              setLineNumber(962);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
              var call1232 = request(var_closingBrace, "tok", [0]);
              var call1231 = request(call1232, "line", [0]);
              var sum1233 = request(call1231, "+(1)", [1], new GraceNum(.1));
              var string1234 = new GraceString("}");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1230 = request(var_suggestion, "addLine(2)", [2], sum1233, string1234);
              if1223 = call1230;
            }
            if1220 = if1223;
          } else {
            setLineNumber(965);    // compilenode string
            var string1236 = new GraceString(" then {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1235 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1236, var_lastToken);
            if1220 = call1235;
          }
          if1199 = if1220;
        }
        setLineNumber(968);    // compilenode string
        var string1238 = new GraceString("an if statement must have 'then' after ");
        setLineNumber(969);    // compilenode string
        var string1239 = new GraceString("the condition in parentheses.");
        var opresult1240 = request(string1238, "++(1)", [1], string1239);
        setLineNumber(970);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1241 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1242 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1237 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult1240, call1241, call1242, var_suggestion);
        if770 = call1237;
      }
      if604 = if770;
    }
    return if604;
  };    // end of method doif
  this.methods["doif"] = func603;
  func603.methodName = "doif";
  func603.paramCounts = [0];
  func603.paramNames = [];
  func603.definitionLine = 584;
  func603.definitionModule = "parser";
  var func1243 = function(argcv) {    // method identifier, line 977
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("identifier", 0, numArgs - 0);
    }
    var if1244 = GraceDone;
    setLineNumber(978);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1245 = request(var_sym, "isIdentifier", [0]);
    if (Grace_isTrue(call1245)) {
      var if1246 = GraceDone;
      setLineNumber(979);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1247 = request(var_sym, "value", [0]);
      var string1248 = new GraceString("if");
      var opresult1249 = request(call1247, "==(1)", [1], string1248);
      if (Grace_isTrue(opresult1249)) {
        setLineNumber(980);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1250 = selfRequest(this, "doif", [0]);
        if1246 = call1250;
      } else {
        setLineNumber(982);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1251 = selfRequest(this, "pushIdentifier", [0]);
        if1246 = call1251;
      }
      if1244 = if1246;
    }
    return if1244;
  };    // end of method identifier
  this.methods["identifier"] = func1243;
  func1243.methodName = "identifier";
  func1243.paramCounts = [0];
  func1243.paramNames = [];
  func1243.definitionLine = 977;
  func1243.definitionModule = "parser";
  var func1252 = function(argcv) {    // method prefixop, line 987
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("prefixop", 0, numArgs - 0);
    }
    var if1253 = GraceDone;
    setLineNumber(988);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1254 = request(var_sym, "isOp", [0]);
    if (Grace_isTrue(call1254)) {
      setLineNumber(989);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1255 = request(var_sym, "value", [0]);
      var var_op = call1255;
      setLineNumber(990);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1256 = selfRequest(this, "next", [0]);
      var if1257 = GraceDone;
      setLineNumber(991);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1258 = request(var_sym, "isLParen", [0]);
      if (Grace_isTrue(call1258)) {
        setLineNumber(992);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1259 = selfRequest(this, "next", [0]);
        var if1260 = GraceDone;
        setLineNumber(993);    // compilenode block
        var block1262 = new GraceBlock(this, 993, 0);
        block1262.guard = jsTrue;
        block1262.real = function block1262() {
          setLineNumber(993);    // compilenode call
          if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
          // call case 2: outer request
          var call1263 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
          return call1263;
        };
        let applyMeth1262 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1262.methodName = "apply";
        applyMeth1262.paramCounts = [0];
        applyMeth1262.paramNames = [];
        applyMeth1262.definitionLine = 993;
        applyMeth1262.definitionModule = "parser";
        block1262.methods["apply"] = applyMeth1262;
        // call case 2: outer request
        var call1261 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1262);
        if (Grace_isTrue(call1261)) {
          setLineNumber(994);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1265 = request(var_errormessages, "suggestion", [0]);
          var call1264 = request(call1265, "new", [0]);
          var var_suggestion = call1264;
          setLineNumber(995);    // compilenode string
          var string1268 = new GraceString("rparen");
          var array1267 = new GraceSequence([string1268]);
          // call case 2: outer request
          var call1266 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1267);
          var var_nextTok = call1266;
          var if1269 = GraceDone;
          setLineNumber(996);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult1270 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult1270)) {
            setLineNumber(997);    // compilenode string
            var string1272 = new GraceString("\u00abexpression\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1271 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1272, var_lastToken);
            if1269 = call1271;
          } else {
            setLineNumber(999);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call1274 = request(var_nextTok, "prev", [0]);
            var string1275 = new GraceString("\u00abexpression\u00bb");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1273 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1274, GraceTrue, GraceFalse, string1275);
            if1269 = call1273;
          }
          setLineNumber(1001);    // compilenode string
          var string1277 = new GraceString("parentheses must contain a valid expression.");
          setLineNumber(1002);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1278 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1279 = request(var_sym, "linePos", [0]);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1276 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1277, call1278, call1279, var_suggestion);
          if1260 = call1276;
        }
        var if1280 = GraceDone;
        setLineNumber(1004);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1281 = request(var_sym, "kind", [0]);
        var string1282 = new GraceString("rparen");
        var opresult1283 = request(call1281, "\u2260(1)", [1], string1282);
        if (Grace_isTrue(opresult1283)) {
          setLineNumber(1005);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1284 = selfRequest(this, "checkBadOperators", [0]);
          setLineNumber(1006);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1286 = request(var_errormessages, "suggestion", [0]);
          var call1285 = request(call1286, "new", [0]);
          var var_suggestion = call1285;
          setLineNumber(1007);    // compilenode string
          var string1288 = new GraceString(")");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call1287 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1288, var_lastToken);
          setLineNumber(1008);    // compilenode string
          var string1290 = new GraceString("an expression beginning with a '(' must end with a ')'.");
          setLineNumber(1009);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1291 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1292 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1293 = request(var_lastToken, "size", [0]);
          var sum1294 = request(call1292, "+(1)", [1], call1293);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1289 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1290, call1291, sum1294, var_suggestion);
          if1280 = call1289;
        }
        setLineNumber(1011);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1295 = selfRequest(this, "next", [0]);
        if1257 = call1295;
      } else {
        var if1296 = GraceDone;
        setLineNumber(1013);    // compilenode block
        var block1298 = new GraceBlock(this, 1013, 0);
        block1298.guard = jsTrue;
        block1298.real = function block1298() {
          setLineNumber(1013);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1299 = selfRequest(this, "term", [0]);
          return call1299;
        };
        let applyMeth1298 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1298.methodName = "apply";
        applyMeth1298.paramCounts = [0];
        applyMeth1298.paramNames = [];
        applyMeth1298.definitionLine = 1013;
        applyMeth1298.definitionModule = "parser";
        block1298.methods["apply"] = applyMeth1298;
        // call case 2: outer request
        var call1297 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1298);
        if (Grace_isTrue(call1297)) {
          setLineNumber(1014);    // compilenode array
          var array1301 = new GraceSequence([]);
          // call case 2: outer request
          var call1300 = selfRequest(var_prelude, "list(1)", [1], array1301);
          var var_suggestions = call1300;
          setLineNumber(1015);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1303 = request(var_errormessages, "suggestion", [0]);
          var call1302 = request(call1303, "new", [0]);
          var var_suggestion = call1302;
          setLineNumber(1016);    // compilenode string
          var string1306 = new GraceString("rparen");
          var array1305 = new GraceSequence([string1306]);
          // call case 2: outer request
          var call1304 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1305);
          var var_nextTok = call1304;
          var if1307 = GraceDone;
          setLineNumber(1017);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult1308 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult1308)) {
            setLineNumber(1018);    // compilenode string
            var string1310 = new GraceString("\u00abexpression\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1309 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1310, var_lastToken);
            if1307 = call1309;
          } else {
            setLineNumber(1020);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call1312 = request(var_nextTok, "prev", [0]);
            setLineNumber(1021);    // compilenode string
            var string1313 = new GraceString("\u00abexpression\u00bb");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1311 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1312, GraceTrue, GraceFalse, string1313);
            if1307 = call1311;
          }
          setLineNumber(1023);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call1314 = request(var_suggestions, "push(1)", [1], var_suggestion);
          var if1315 = GraceDone;
          setLineNumber(1024);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1317 = request(var_lastToken, "prev", [0]);
          var call1316 = request(call1317, "isBind", [0]);
          if (Grace_isTrue(call1316)) {
            setLineNumber(1025);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1319 = request(var_errormessages, "suggestion", [0]);
            var call1318 = request(call1319, "new", [0]);
            var_suggestion = call1318;
            setLineNumber(1026);    // compilenode call
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call1321 = request(var_nextTok, "prev", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1320 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call1321, GraceTrue, GraceFalse);
            setLineNumber(1027);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1323 = request(var_lastToken, "prev", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1322 = request(var_suggestion, "deleteToken(1)leading(1)trailing(1)", [1, 1, 1], call1323, GraceTrue, GraceFalse);
            setLineNumber(1028);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call1324 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if1315 = call1324;
          }
          setLineNumber(1030);    // compilenode string
          var string1326 = new GraceString("a prefix operator must be followed by an expression.");
          setLineNumber(1031);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1327 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1328 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call1329 = request(var_lastToken, "size", [0]);
          var sum1330 = request(call1328, "+(1)", [1], call1329);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1325 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string1326, call1327, sum1330, var_suggestions);
          if1296 = call1325;
        }
        if1257 = if1296;
      }
      setLineNumber(1034);    // compilenode call
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      // call case 2: outer request
      var call1331 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_blocksOK);
      setLineNumber(1035);    // compilenode call
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      // call case 2: outer request
      var call1332 = selfRequest(importedModules["parser"], "callrest(1)", [1], var_blocksOK);
      setLineNumber(1036);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1333 = request(var_values, "pop", [0]);
      var var_rcvr = call1333;
      setLineNumber(1037);    // compilenode call
      if (var_rcvr === undefined) raiseUninitializedVariable("rcvr");
      setLineNumber(1038);    // compilenode string
      var string1337 = new GraceString("prefix");
      if (var_op === undefined) raiseUninitializedVariable("op");
      var opresult1338 = request(string1337, "++(1)", [1], var_op);
      var string1339 = new GraceString("");
      var opresult1340 = request(opresult1338, "++(1)", [1], string1339);
      var array1341 = new GraceSequence([]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call1342 = request(var_ast, "requestPart", [0]);
      var call1336 = request(call1342, "request(1)withArgs(1)", [1, 1], opresult1340, array1341);
      var array1335 = new GraceSequence([call1336]);
      // call case 6: other requests
      setLineNumber(1037);    // compilenode member
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call1343 = request(var_ast, "callNode", [0]);
      var call1334 = request(call1343, "new(2)", [2], var_rcvr, array1335);
      var var_call = call1334;
      setLineNumber(1039);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call1346 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call1347 = request(var_lastToken, "endPos", [0]);
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call1345 = request(var_ast, "line(1)column(1)", [1, 1], call1346, call1347);
      // call case 6: other requests
      if (var_call === undefined) raiseUninitializedVariable("call");
      var call1344 = request(var_call, "end:=(1)", [1], call1345);
      setLineNumber(1040);    // compilenode call
      if (var_call === undefined) raiseUninitializedVariable("call");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1348 = request(var_values, "push(1)", [1], var_call);
      if1253 = call1348;
    }
    return if1253;
  };    // end of method prefixop
  this.methods["prefixop"] = func1252;
  func1252.methodName = "prefixop";
  func1252.paramCounts = [0];
  func1252.paramNames = [];
  func1252.definitionLine = 987;
  func1252.definitionModule = "parser";
  var func1349 = function(argcv) {    // method generic, line 1044
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("generic", 0, numArgs - 0);
    }
    var if1350 = GraceDone;
    setLineNumber(1045);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1351 = request(var_sym, "isLGeneric", [0]);
    if (Grace_isTrue(call1351)) {
      setLineNumber(1046);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1352 = request(var_values, "pop", [0]);
      var var_id = call1352;
      setLineNumber(1047);    // compilenode array
      var array1354 = new GraceSequence([]);
      // call case 2: outer request
      var call1353 = selfRequest(var_prelude, "list(1)", [1], array1354);
      var var_gens = call1353;
      setLineNumber(1048);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_startToken = var_sym;
      setLineNumber(1049);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1355 = selfRequest(this, "next", [0]);
      setLineNumber(1050);    // compilenode block
      var block1357 = new GraceBlock(this, 1050, 0);
      block1357.guard = jsTrue;
      block1357.real = function block1357() {
        setLineNumber(1050);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1358 = request(var_sym, "isIdentifier", [0]);
        return call1358;
      };
      let applyMeth1357 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1357.methodName = "apply";
      applyMeth1357.paramCounts = [0];
      applyMeth1357.paramNames = [];
      applyMeth1357.definitionLine = 1050;
      applyMeth1357.definitionModule = "parser";
      block1357.methods["apply"] = applyMeth1357;
      var block1359 = new GraceBlock(this, 1050, 0);
      block1359.guard = jsTrue;
      block1359.real = function block1359() {
        setLineNumber(1051);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1360 = selfRequest(this, "identifier", [0]);
        setLineNumber(1052);    // compilenode block
        var block1362 = new GraceBlock(this, 1052, 0);
        block1362.guard = jsTrue;
        block1362.real = function block1362() {
          setLineNumber(1052);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1363 = request(var_sym, "isDot", [0]);
          return call1363;
        };
        let applyMeth1362 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1362.methodName = "apply";
        applyMeth1362.paramCounts = [0];
        applyMeth1362.paramNames = [];
        applyMeth1362.definitionLine = 1052;
        applyMeth1362.definitionModule = "parser";
        block1362.methods["apply"] = applyMeth1362;
        var block1364 = new GraceBlock(this, 1052, 0);
        block1364.guard = jsTrue;
        block1364.real = function block1364() {
          setLineNumber(1053);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1365 = selfRequest(this, "next", [0]);
          setLineNumber(1054);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call1366 = request(var_values, "pop", [0]);
          var var_receiver = call1366;
          var if1367 = GraceDone;
          setLineNumber(1055);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1368 = request(var_sym, "kind", [0]);
          var string1369 = new GraceString("identifier");
          var opresult1370 = request(call1368, "\u2260(1)", [1], string1369);
          if (Grace_isTrue(opresult1370)) {
            setLineNumber(1056);    // compilenode array
            var array1372 = new GraceSequence([]);
            // call case 2: outer request
            var call1371 = selfRequest(var_prelude, "list(1)", [1], array1372);
            var var_suggestions = call1371;
            setLineNumber(1057);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1374 = request(var_errormessages, "suggestion", [0]);
            var call1373 = request(call1374, "new", [0]);
            var var_suggestion = call1373;
            setLineNumber(1058);    // compilenode string
            var string1376 = new GraceString("\u00abtype name\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1375 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1376, var_lastToken);
            setLineNumber(1059);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call1377 = request(var_suggestions, "push(1)", [1], var_suggestion);
            setLineNumber(1060);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1379 = request(var_errormessages, "suggestion", [0]);
            var call1378 = request(call1379, "new", [0]);
            var_suggestion = call1378;
            setLineNumber(1061);    // compilenode call
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1380 = request(var_suggestion, "deleteToken(1)", [1], var_lastToken);
            setLineNumber(1062);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call1381 = request(var_suggestions, "push(1)", [1], var_suggestion);
            setLineNumber(1063);    // compilenode string
            var string1383 = new GraceString("a type name must follow the '.'.");
            setLineNumber(1064);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1384 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1385 = request(var_lastToken, "linePos", [0]);
            var sum1386 = request(call1385, "+(1)", [1], new GraceNum(1));
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1382 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string1383, call1384, sum1386, var_suggestions);
            if1367 = call1382;
          }
          setLineNumber(1066);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1387 = selfRequest(this, "identifier", [0]);
          setLineNumber(1067);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call1388 = request(var_values, "pop", [0]);
          var var_attributeName = call1388;
          setLineNumber(1068);    // compilenode call
          if (var_receiver === undefined) raiseUninitializedVariable("receiver");
          // call case 6: other requests
          // call case 6: other requests
          if (var_attributeName === undefined) raiseUninitializedVariable("attributeName");
          var call1391 = request(var_attributeName, "value", [0]);
          if (var_receiver === undefined) raiseUninitializedVariable("receiver");
          // call case 6: other requests
          // call case 6: other requests
          if (var_ast === undefined) raiseUninitializedVariable("ast");
          var call1392 = request(var_ast, "memberNode", [0]);
          var call1390 = request(call1392, "new(2)", [2], call1391, var_receiver);
          var call1389 = request(call1390, "setPositionFrom(1)", [1], var_receiver);
          var var_memberNd = call1389;
          setLineNumber(1070);    // compilenode call
          if (var_memberNd === undefined) raiseUninitializedVariable("memberNd");
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call1393 = request(var_values, "push(1)", [1], var_memberNd);
          return call1393;
        };
        let applyMeth1364 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1364.methodName = "apply";
        applyMeth1364.paramCounts = [0];
        applyMeth1364.paramNames = [];
        applyMeth1364.definitionLine = 1052;
        applyMeth1364.definitionModule = "parser";
        block1364.methods["apply"] = applyMeth1364;
        // call case 2: outer request
        var call1361 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1362, block1364);
        setLineNumber(1072);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1394 = selfRequest(this, "generic", [0]);
        setLineNumber(1073);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call1396 = request(var_values, "pop", [0]);
        // call case 6: other requests
        if (var_gens === undefined) raiseUninitializedVariable("gens");
        var call1395 = request(var_gens, "push(1)", [1], call1396);
        var if1397 = GraceDone;
        setLineNumber(1074);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1398 = request(var_sym, "isComma", [0]);
        if (Grace_isTrue(call1398)) {
          setLineNumber(1075);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1399 = selfRequest(this, "next", [0]);
          if1397 = call1399;
        } else {
          var if1400 = GraceDone;
          setLineNumber(1077);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1401 = request(var_sym, "kind", [0]);
          var string1402 = new GraceString("rgeneric");
          var opresult1403 = request(call1401, "\u2260(1)", [1], string1402);
          if (Grace_isTrue(opresult1403)) {
            setLineNumber(1078);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1405 = request(var_errormessages, "suggestion", [0]);
            var call1404 = request(call1405, "new", [0]);
            var var_suggestion = call1404;
            setLineNumber(1079);    // compilenode string
            var string1407 = new GraceString("\u27e7");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1406 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1407, var_lastToken);
            setLineNumber(1080);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1409 = request(var_errormessages, "suggestion", [0]);
            var call1408 = request(call1409, "new", [0]);
            var var_suggestion2 = call1408;
            setLineNumber(1081);    // compilenode string
            var string1411 = new GraceString(" ");
            if (var_startToken === undefined) raiseUninitializedVariable("startToken");
            // call case 6: other requests
            if (var_suggestion2 === undefined) raiseUninitializedVariable("suggestion2");
            var call1410 = request(var_suggestion2, "insert(1)beforeToken(1)", [1, 1], string1411, var_startToken);
            setLineNumber(1082);    // compilenode array
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            if (var_suggestion2 === undefined) raiseUninitializedVariable("suggestion2");
            var array1412 = new GraceSequence([var_suggestion, var_suggestion2]);
            var var_suggestions = array1412;
            setLineNumber(1083);    // compilenode string
            var string1414 = new GraceString("a type containing a '\u27e6' must end with a '\u27e7'.");
            setLineNumber(1084);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1415 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1416 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1417 = request(var_lastToken, "size", [0]);
            var sum1418 = request(call1416, "+(1)", [1], call1417);
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1413 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string1414, call1415, sum1418, var_suggestions);
            if1400 = call1413;
          }
          if1397 = if1400;
        }
        return if1397;
      };
      let applyMeth1359 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1359.methodName = "apply";
      applyMeth1359.paramCounts = [0];
      applyMeth1359.paramNames = [];
      applyMeth1359.definitionLine = 1050;
      applyMeth1359.definitionModule = "parser";
      block1359.methods["apply"] = applyMeth1359;
      // call case 2: outer request
      var call1356 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1357, block1359);
      var if1419 = GraceDone;
      setLineNumber(1089);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1420 = request(var_sym, "kind", [0]);
      var string1421 = new GraceString("rgeneric");
      var opresult1422 = request(call1420, "\u2260(1)", [1], string1421);
      if (Grace_isTrue(opresult1422)) {
        setLineNumber(1090);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1424 = request(var_errormessages, "suggestion", [0]);
        var call1423 = request(call1424, "new", [0]);
        var var_suggestion = call1423;
        setLineNumber(1091);    // compilenode string
        var string1426 = new GraceString("\u27e7");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call1425 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1426, var_lastToken);
        setLineNumber(1092);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1428 = request(var_errormessages, "suggestion", [0]);
        var call1427 = request(call1428, "new", [0]);
        var var_suggestion2 = call1427;
        setLineNumber(1093);    // compilenode string
        var string1430 = new GraceString(" ");
        if (var_startToken === undefined) raiseUninitializedVariable("startToken");
        // call case 6: other requests
        if (var_suggestion2 === undefined) raiseUninitializedVariable("suggestion2");
        var call1429 = request(var_suggestion2, "insert(1)beforeToken(1)", [1, 1], string1430, var_startToken);
        setLineNumber(1094);    // compilenode array
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        if (var_suggestion2 === undefined) raiseUninitializedVariable("suggestion2");
        var array1431 = new GraceSequence([var_suggestion, var_suggestion2]);
        var var_suggestions = array1431;
        setLineNumber(1095);    // compilenode string
        var string1433 = new GraceString("a type containing a '\u27e6' must end with a '\u27e7'.");
        setLineNumber(1096);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call1434 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call1435 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call1436 = request(var_lastToken, "size", [0]);
        var sum1437 = request(call1435, "+(1)", [1], call1436);
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1432 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string1433, call1434, sum1437, var_suggestions);
        if1419 = call1432;
      }
      setLineNumber(1099);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1438 = selfRequest(this, "next", [0]);
      setLineNumber(1100);    // compilenode call
      if (var_id === undefined) raiseUninitializedVariable("id");
      if (var_gens === undefined) raiseUninitializedVariable("gens");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call1441 = request(var_ast, "genericNode", [0]);
      var call1440 = request(call1441, "new(2)", [2], var_id, var_gens);
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1439 = request(var_values, "push(1)", [1], call1440);
      if1350 = call1439;
    }
    return if1350;
  };    // end of method generic
  this.methods["generic"] = func1349;
  func1349.methodName = "generic";
  func1349.paramCounts = [0];
  func1349.paramNames = [];
  func1349.definitionLine = 1044;
  func1349.definitionModule = "parser";
  var func1442 = function(argcv) {    // method trycatch, line 1103
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("trycatch", 0, numArgs - 0);
    }
    var if1443 = GraceDone;
    setLineNumber(1104);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1445 = request(var_sym, "isIdentifier", [0]);
    var block1446 = new GraceBlock(this, 1104, 0);
    block1446.guard = jsTrue;
    block1446.real = function block1446() {
      setLineNumber(1104);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1447 = request(var_sym, "value", [0]);
      var string1448 = new GraceString("try");
      var opresult1449 = request(call1447, "==(1)", [1], string1448);
      return opresult1449;
    };
    let applyMeth1446 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1446.methodName = "apply";
    applyMeth1446.paramCounts = [0];
    applyMeth1446.paramNames = [];
    applyMeth1446.definitionLine = 1104;
    applyMeth1446.definitionModule = "parser";
    block1446.methods["apply"] = applyMeth1446;
    var opresult1450 = request(call1445, "&&(1)", [1], block1446);
    var call1444 = request(opresult1450, "prefix!", [0]);
    if (Grace_isTrue(call1444)) {
      setLineNumber(1105);    // compilenode return
      return var_done;
    }
    setLineNumber(1107);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_tryTok = var_sym;
    setLineNumber(1108);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call1451 = selfRequest(this, "next", [0]);
    var if1452 = GraceDone;
    setLineNumber(1109);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1453 = request(var_sym, "isLBrace", [0]);
    if (Grace_isTrue(call1453)) {
      setLineNumber(1110);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1454 = selfRequest(this, "block", [0]);
      if1452 = call1454;
    } else {
      var if1455 = GraceDone;
      setLineNumber(1112);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1456 = request(var_sym, "kind", [0]);
      var string1457 = new GraceString("lparen");
      var opresult1458 = request(call1456, "\u2260(1)", [1], string1457);
      if (Grace_isTrue(opresult1458)) {
        setLineNumber(1113);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1460 = request(var_errormessages, "suggestion", [0]);
        var call1459 = request(call1460, "new", [0]);
        var var_suggestion = call1459;
        setLineNumber(1115);    // compilenode block
        var block1462 = new GraceBlock(this, 1115, 1);
        block1462.guard = jsTrue;
        block1462.real = function block1462(var_t) {
          setLineNumber(1116);    // compilenode member
          // call case 6: other requests
          var call1463 = request(var_t, "isRBrace", [0]);
          setLineNumber(1117);    // compilenode member
          // call case 6: other requests
          var call1464 = request(var_t, "isRParen", [0]);
          // call case 6: other requests
          var call1465 = request(var_t, "line", [0]);
          // call case 6: other requests
          if (var_tryTok === undefined) raiseUninitializedVariable("tryTok");
          var call1466 = request(var_tryTok, "line", [0]);
          var opresult1467 = request(call1465, "==(1)", [1], call1466);
          var opresult1468 = request(call1464, "&&(1)", [1], opresult1467);
          var opresult1469 = request(call1463, "||(1)", [1], opresult1468);
          setLineNumber(1118);    // compilenode member
          // call case 6: other requests
          var call1470 = request(var_t, "isIdentifier", [0]);
          // call case 6: other requests
          var call1471 = request(var_t, "value", [0]);
          var string1472 = new GraceString("catch");
          var opresult1473 = request(call1471, "==(1)", [1], string1472);
          var opresult1474 = request(call1470, "&&(1)", [1], opresult1473);
          var opresult1475 = request(opresult1469, "||(1)", [1], opresult1474);
          return opresult1475;
        };
        let applyMeth1462 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth1462.methodName = "apply(1)";
        applyMeth1462.paramCounts = [1];
        applyMeth1462.paramNames = ["t"];
        applyMeth1462.definitionLine = 1115;
        applyMeth1462.definitionModule = "parser";
        block1462.methods["apply(1)"] = applyMeth1462;
        let matchesMeth1462 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth1462.methodName = "matches(1)";
        matchesMeth1462.paramCounts = [1];
        matchesMeth1462.paramNames = ["t"];
        matchesMeth1462.definitionLine = 1115;
        matchesMeth1462.definitionModule = "parser";
        block1462.methods["matches(1)"] = matchesMeth1462;
        // call case 2: outer request
        var call1461 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block1462);
        var var_nextTok = call1461;
        var if1476 = GraceDone;
        setLineNumber(1120);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult1477 = request(GraceFalse, "==(1)", [1], var_nextTok);
        if (Grace_isTrue(opresult1477)) {
          setLineNumber(1121);    // compilenode string
          var string1479 = new GraceString(" {}");
          if (var_tryTok === undefined) raiseUninitializedVariable("tryTok");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call1478 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1479, var_tryTok);
          if1476 = call1478;
        } else {
          var if1480 = GraceDone;
          setLineNumber(1122);    // compilenode member
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call1481 = request(var_nextTok, "isRBrace", [0]);
          if (Grace_isTrue(call1481)) {
            setLineNumber(1123);    // compilenode string
            var string1483 = new GraceString(" {");
            if (var_tryTok === undefined) raiseUninitializedVariable("tryTok");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1482 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1483, var_tryTok);
            if1480 = call1482;
          } else {
            var if1484 = GraceDone;
            setLineNumber(1124);    // compilenode member
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call1485 = request(var_nextTok, "isRParen", [0]);
            if (Grace_isTrue(call1485)) {
              var if1486 = GraceDone;
              setLineNumber(1125);    // compilenode op
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var opresult1487 = request(var_nextTok, "==(1)", [1], var_sym);
              if (Grace_isTrue(opresult1487)) {
                setLineNumber(1126);    // compilenode string
                var string1489 = new GraceString("(\u00abexpression\u00bb");
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1488 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string1489, var_lastToken, GraceTrue);
                if1486 = call1488;
              } else {
                setLineNumber(1128);    // compilenode string
                var string1491 = new GraceString("(");
                if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1490 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string1491, var_lastToken, GraceTrue);
                if1486 = call1490;
              }
              if1484 = if1486;
            } else {
              var if1492 = GraceDone;
              setLineNumber(1130);    // compilenode member
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1493 = request(var_nextTok, "isIdentifier", [0]);
              if (Grace_isTrue(call1493)) {
                setLineNumber(1131);    // compilenode string
                var string1495 = new GraceString(" {");
                if (var_tryTok === undefined) raiseUninitializedVariable("tryTok");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1494 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1495, var_tryTok);
                setLineNumber(1132);    // compilenode string
                var string1497 = new GraceString("} ");
                if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
                // call case 6: other requests
                if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
                var call1496 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string1497, var_nextTok);
                if1492 = call1496;
              }
              if1484 = if1492;
            }
            if1480 = if1484;
          }
          if1476 = if1480;
        }
        setLineNumber(1134);    // compilenode string
        var string1499 = new GraceString("a try(_)catch(_) statement must have ");
        setLineNumber(1135);    // compilenode string
        var string1500 = new GraceString("a block or an expression in parentheses after the 'try'.");
        var opresult1501 = request(string1499, "++(1)", [1], string1500);
        setLineNumber(1136);    // compilenode member
        // call case 6: other requests
        if (var_tryTok === undefined) raiseUninitializedVariable("tryTok");
        var call1502 = request(var_tryTok, "line", [0]);
        // call case 6: other requests
        if (var_tryTok === undefined) raiseUninitializedVariable("tryTok");
        var call1503 = request(var_tryTok, "endPos", [0]);
        var sum1504 = request(call1503, "+(1)", [1], new GraceNum(1));
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1498 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult1501, call1502, sum1504, var_suggestion);
        if1455 = call1498;
      }
      setLineNumber(1139);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1505 = selfRequest(this, "next", [0]);
      var if1506 = GraceDone;
      setLineNumber(1140);    // compilenode block
      var block1508 = new GraceBlock(this, 1140, 0);
      block1508.guard = jsTrue;
      block1508.real = function block1508() {
        setLineNumber(1140);    // compilenode call
        if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
        // call case 2: outer request
        var call1509 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
        return call1509;
      };
      let applyMeth1508 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1508.methodName = "apply";
      applyMeth1508.paramCounts = [0];
      applyMeth1508.paramNames = [];
      applyMeth1508.definitionLine = 1140;
      applyMeth1508.definitionModule = "parser";
      block1508.methods["apply"] = applyMeth1508;
      // call case 2: outer request
      var call1507 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1508);
      if (Grace_isTrue(call1507)) {
        setLineNumber(1141);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1511 = request(var_errormessages, "suggestion", [0]);
        var call1510 = request(call1511, "new", [0]);
        var var_suggestion = call1510;
        setLineNumber(1142);    // compilenode string
        var string1514 = new GraceString("rparen");
        var array1513 = new GraceSequence([string1514]);
        // call case 2: outer request
        var call1512 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1513);
        var var_nextTok = call1512;
        var if1515 = GraceDone;
        setLineNumber(1143);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var opresult1516 = request(var_nextTok, "==(1)", [1], var_sym);
        if (Grace_isTrue(opresult1516)) {
          setLineNumber(1144);    // compilenode string
          var string1518 = new GraceString("\u00abexpression\u00bb");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call1517 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1518, var_lastToken);
          if1515 = call1517;
        } else {
          setLineNumber(1146);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call1520 = request(var_nextTok, "prev", [0]);
          var string1521 = new GraceString("\u00abexpression\u00bb");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call1519 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1520, GraceTrue, GraceFalse, string1521);
          if1515 = call1519;
        }
        setLineNumber(1148);    // compilenode string
        var string1523 = new GraceString("a 'try(_)catch(_)\u2026' statement must have ");
        setLineNumber(1149);    // compilenode string
        var string1524 = new GraceString("a block or an expression in parentheses after the 'try'.");
        var opresult1525 = request(string1523, "++(1)", [1], string1524);
        setLineNumber(1150);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1526 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1527 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1522 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult1525, call1526, call1527, var_suggestion);
        if1506 = call1522;
      }
      var if1528 = GraceDone;
      setLineNumber(1152);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1529 = request(var_sym, "kind", [0]);
      var string1530 = new GraceString("rparen");
      var opresult1531 = request(call1529, "\u2260(1)", [1], string1530);
      if (Grace_isTrue(opresult1531)) {
        setLineNumber(1153);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1532 = selfRequest(this, "checkBadOperators", [0]);
        setLineNumber(1154);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1534 = request(var_errormessages, "suggestion", [0]);
        var call1533 = request(call1534, "new", [0]);
        var var_suggestion = call1533;
        setLineNumber(1155);    // compilenode string
        var string1536 = new GraceString(")");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call1535 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1536, var_lastToken);
        setLineNumber(1156);    // compilenode string
        var string1538 = new GraceString("an expression beginning with a '(' must end with a ')'.");
        setLineNumber(1157);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call1539 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call1540 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call1541 = request(var_lastToken, "size", [0]);
        var sum1542 = request(call1540, "+(1)", [1], call1541);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call1537 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1538, call1539, sum1542, var_suggestion);
        if1528 = call1537;
      }
      setLineNumber(1160);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1543 = selfRequest(this, "next", [0]);
      if1452 = call1543;
    }
    setLineNumber(1162);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call1544 = request(var_values, "pop", [0]);
    var var_mainblock = call1544;
    setLineNumber(1163);    // compilenode array
    var array1546 = new GraceSequence([]);
    // call case 2: outer request
    var call1545 = selfRequest(var_prelude, "list(1)", [1], array1546);
    var var_cases = call1545;
    setLineNumber(1164);    // compilenode vardec
    var var_finally = GraceFalse;
    setLineNumber(1165);    // compilenode block
    var block1548 = new GraceBlock(this, 1165, 0);
    block1548.guard = jsTrue;
    block1548.real = function block1548() {
      setLineNumber(1165);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1549 = request(var_sym, "isIdentifier", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1550 = request(var_sym, "value", [0]);
      var string1551 = new GraceString("catch");
      var opresult1552 = request(call1550, "==(1)", [1], string1551);
      var opresult1553 = request(call1549, "&&(1)", [1], opresult1552);
      return opresult1553;
    };
    let applyMeth1548 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1548.methodName = "apply";
    applyMeth1548.paramCounts = [0];
    applyMeth1548.paramNames = [];
    applyMeth1548.definitionLine = 1165;
    applyMeth1548.definitionModule = "parser";
    block1548.methods["apply"] = applyMeth1548;
    var block1554 = new GraceBlock(this, 1165, 0);
    block1554.guard = jsTrue;
    block1554.real = function block1554() {
      setLineNumber(1166);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1555 = selfRequest(this, "next", [0]);
      var if1556 = GraceDone;
      setLineNumber(1167);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1557 = request(var_sym, "isLBrace", [0]);
      if (Grace_isTrue(call1557)) {
        setLineNumber(1168);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1558 = selfRequest(this, "block", [0]);
        if1556 = call1558;
      } else {
        var if1559 = GraceDone;
        setLineNumber(1169);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1560 = request(var_sym, "isLParen", [0]);
        if (Grace_isTrue(call1560)) {
          setLineNumber(1170);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1561 = selfRequest(this, "next", [0]);
          var if1562 = GraceDone;
          setLineNumber(1171);    // compilenode block
          var block1564 = new GraceBlock(this, 1171, 0);
          block1564.guard = jsTrue;
          block1564.real = function block1564() {
            setLineNumber(1171);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call1565 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call1565;
          };
          let applyMeth1564 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1564.methodName = "apply";
          applyMeth1564.paramCounts = [0];
          applyMeth1564.paramNames = [];
          applyMeth1564.definitionLine = 1171;
          applyMeth1564.definitionModule = "parser";
          block1564.methods["apply"] = applyMeth1564;
          // call case 2: outer request
          var call1563 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1564);
          if (Grace_isTrue(call1563)) {
            setLineNumber(1172);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1567 = request(var_errormessages, "suggestion", [0]);
            var call1566 = request(call1567, "new", [0]);
            var var_suggestion = call1566;
            setLineNumber(1173);    // compilenode string
            var string1570 = new GraceString("rparen");
            var array1569 = new GraceSequence([string1570]);
            // call case 2: outer request
            var call1568 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1569);
            var var_nextTok = call1568;
            var if1571 = GraceDone;
            setLineNumber(1174);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1572 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1572)) {
              setLineNumber(1175);    // compilenode string
              var string1574 = new GraceString("\u00abexpression\u00bb");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1573 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1574, var_lastToken);
              if1571 = call1573;
            } else {
              setLineNumber(1177);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1576 = request(var_nextTok, "prev", [0]);
              var string1577 = new GraceString("\u00abexpression\u00bb");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1575 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1576, GraceTrue, GraceFalse, string1577);
              if1571 = call1575;
            }
            setLineNumber(1179);    // compilenode string
            var string1579 = new GraceString("a try-catch statement must have either a matching block or an expression in parentheses after the 'catch'.");
            setLineNumber(1180);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1580 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1581 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1578 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1579, call1580, call1581, var_suggestion);
            if1562 = call1578;
          }
          var if1582 = GraceDone;
          setLineNumber(1182);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1583 = request(var_sym, "kind", [0]);
          var string1584 = new GraceString("rparen");
          var opresult1585 = request(call1583, "\u2260(1)", [1], string1584);
          if (Grace_isTrue(opresult1585)) {
            setLineNumber(1183);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1586 = selfRequest(this, "checkBadOperators", [0]);
            setLineNumber(1184);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1588 = request(var_errormessages, "suggestion", [0]);
            var call1587 = request(call1588, "new", [0]);
            var var_suggestion = call1587;
            setLineNumber(1185);    // compilenode string
            var string1590 = new GraceString(")");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1589 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1590, var_lastToken);
            setLineNumber(1186);    // compilenode string
            var string1592 = new GraceString("an expression beginning with a '(' must end with a ')'.");
            setLineNumber(1187);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1593 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1594 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1595 = request(var_lastToken, "size", [0]);
            var sum1596 = request(call1594, "+(1)", [1], call1595);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1591 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1592, call1593, sum1596, var_suggestion);
            if1582 = call1591;
          }
          setLineNumber(1189);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1597 = selfRequest(this, "next", [0]);
          if1559 = call1597;
        } else {
          setLineNumber(1191);    // compilenode array
          var array1599 = new GraceSequence([]);
          // call case 2: outer request
          var call1598 = selfRequest(var_prelude, "list(1)", [1], array1599);
          var var_suggestions = call1598;
          setLineNumber(1192);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 2: outer request
          var call1600 = selfRequest(importedModules["parser"], "findNextTokenIndentedAt(1)", [1], var_lastToken);
          var var_nextTok = call1600;
          setLineNumber(1193);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1602 = request(var_errormessages, "suggestion", [0]);
          var call1601 = request(call1602, "new", [0]);
          var var_suggestion = call1601;
          var if1603 = GraceDone;
          setLineNumber(1194);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var opresult1604 = request(GraceFalse, "==(1)", [1], var_nextTok);
          if (Grace_isTrue(opresult1604)) {
            setLineNumber(1195);    // compilenode string
            var string1606 = new GraceString(" }");
            // call case 6: other requests
            if (var_tokens === undefined) raiseUninitializedVariable("tokens");
            var call1607 = request(var_tokens, "last", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1605 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1606, call1607);
            setLineNumber(1196);    // compilenode string
            var string1609 = new GraceString(" {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1608 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1609, var_lastToken);
            setLineNumber(1197);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call1610 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if1603 = call1610;
          } else {
            var if1611 = GraceDone;
            setLineNumber(1198);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1612 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1612)) {
              setLineNumber(1199);    // compilenode string
              var string1614 = new GraceString(" (\u00abexpression\u00bb)");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1613 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1614, var_lastToken);
              setLineNumber(1200);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1615 = request(var_suggestions, "push(1)", [1], var_suggestion);
              setLineNumber(1201);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1617 = request(var_errormessages, "suggestion", [0]);
              var call1616 = request(call1617, "new", [0]);
              var_suggestion = call1616;
              setLineNumber(1202);    // compilenode string
              var string1619 = new GraceString(" { \u00abmatch expression\u00bb }");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1618 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1619, var_lastToken);
              setLineNumber(1203);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1620 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if1611 = call1620;
            } else {
              setLineNumber(1205);    // compilenode string
              var string1622 = new GraceString(" }");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1623 = request(var_nextTok, "prev", [0]);
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1621 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1622, call1623);
              setLineNumber(1206);    // compilenode string
              var string1625 = new GraceString(" {");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1624 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1625, var_lastToken);
              setLineNumber(1207);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1626 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if1611 = call1626;
            }
            if1603 = if1611;
          }
          setLineNumber(1209);    // compilenode string
          var string1628 = new GraceString("a 'try(_)catch(_)\u2026' statement must have ");
          setLineNumber(1210);    // compilenode string
          var string1629 = new GraceString("either a matching block or an expression in parentheses after the 'catch'.");
          var opresult1630 = request(string1628, "++(1)", [1], string1629);
          setLineNumber(1211);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1631 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1632 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1627 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult1630, call1631, call1632, var_suggestions);
          if1559 = call1627;
        }
        if1556 = if1559;
      }
      setLineNumber(1213);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1634 = request(var_values, "pop", [0]);
      // call case 6: other requests
      if (var_cases === undefined) raiseUninitializedVariable("cases");
      var call1633 = request(var_cases, "push(1)", [1], call1634);
      return call1633;
    };
    let applyMeth1554 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1554.methodName = "apply";
    applyMeth1554.paramCounts = [0];
    applyMeth1554.paramNames = [];
    applyMeth1554.definitionLine = 1165;
    applyMeth1554.definitionModule = "parser";
    block1554.methods["apply"] = applyMeth1554;
    // call case 2: outer request
    var call1547 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1548, block1554);
    var if1635 = GraceDone;
    setLineNumber(1215);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1636 = request(var_sym, "isIdentifier", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1637 = request(var_sym, "value", [0]);
    var string1638 = new GraceString("case");
    var opresult1639 = request(call1637, "==(1)", [1], string1638);
    var opresult1640 = request(call1636, "&&(1)", [1], opresult1639);
    if (Grace_isTrue(opresult1640)) {
      setLineNumber(1216);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1642 = request(var_errormessages, "suggestion", [0]);
      var call1641 = request(call1642, "new", [0]);
      var var_suggestion = call1641;
      setLineNumber(1217);    // compilenode call
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var string1644 = new GraceString("catch");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call1643 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, string1644);
      setLineNumber(1218);    // compilenode string
      var string1646 = new GraceString("a 'try(_)catch(_)\u2026' statement starts with a ");
      setLineNumber(1219);    // compilenode string
      var string1647 = new GraceString("'try', followed by zero or more 'catch' blocks; there ");
      var opresult1648 = request(string1646, "++(1)", [1], string1647);
      setLineNumber(1220);    // compilenode string
      var string1649 = new GraceString("are no 'case' blocks.");
      var opresult1650 = request(opresult1648, "++(1)", [1], string1649);
      setLineNumber(1221);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1651 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1652 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1653 = request(var_sym, "linePos", [0]);
      var sum1654 = request(call1653, "+(1)", [1], new GraceNum(3));
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1645 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], opresult1650, call1651, call1652, sum1654, var_suggestion);
      if1635 = call1645;
    }
    var if1655 = GraceDone;
    setLineNumber(1224);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1656 = request(var_sym, "isIdentifier", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1657 = request(var_sym, "value", [0]);
    var string1658 = new GraceString("finally");
    var opresult1659 = request(call1657, "==(1)", [1], string1658);
    var opresult1660 = request(call1656, "&&(1)", [1], opresult1659);
    if (Grace_isTrue(opresult1660)) {
      setLineNumber(1225);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1661 = selfRequest(this, "next", [0]);
      var if1662 = GraceDone;
      setLineNumber(1226);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1663 = request(var_sym, "isLBrace", [0]);
      if (Grace_isTrue(call1663)) {
        setLineNumber(1227);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1664 = selfRequest(this, "block", [0]);
        if1662 = call1664;
      } else {
        var if1665 = GraceDone;
        setLineNumber(1228);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1666 = request(var_sym, "isLParen", [0]);
        if (Grace_isTrue(call1666)) {
          setLineNumber(1229);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1667 = selfRequest(this, "next", [0]);
          var if1668 = GraceDone;
          setLineNumber(1230);    // compilenode block
          var block1670 = new GraceBlock(this, 1230, 0);
          block1670.guard = jsTrue;
          block1670.real = function block1670() {
            setLineNumber(1230);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call1671 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call1671;
          };
          let applyMeth1670 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1670.methodName = "apply";
          applyMeth1670.paramCounts = [0];
          applyMeth1670.paramNames = [];
          applyMeth1670.definitionLine = 1230;
          applyMeth1670.definitionModule = "parser";
          block1670.methods["apply"] = applyMeth1670;
          // call case 2: outer request
          var call1669 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1670);
          if (Grace_isTrue(call1669)) {
            setLineNumber(1231);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1673 = request(var_errormessages, "suggestion", [0]);
            var call1672 = request(call1673, "new", [0]);
            var var_suggestion = call1672;
            setLineNumber(1232);    // compilenode string
            var string1676 = new GraceString("rparen");
            var array1675 = new GraceSequence([string1676]);
            // call case 2: outer request
            var call1674 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1675);
            var var_nextTok = call1674;
            var if1677 = GraceDone;
            setLineNumber(1233);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1678 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1678)) {
              setLineNumber(1234);    // compilenode string
              var string1680 = new GraceString("\u00abexpression\u00bb");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1679 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1680, var_lastToken);
              if1677 = call1679;
            } else {
              setLineNumber(1236);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1682 = request(var_nextTok, "prev", [0]);
              var string1683 = new GraceString("\u00abexpression\u00bb");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1681 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1682, GraceTrue, GraceFalse, string1683);
              if1677 = call1681;
            }
            setLineNumber(1238);    // compilenode string
            var string1685 = new GraceString("a 'try(_)catch(_)\u2026finally(_)' statement ");
            setLineNumber(1239);    // compilenode string
            var string1686 = new GraceString("must have either a block, or an expression in parentheses, ");
            var opresult1687 = request(string1685, "++(1)", [1], string1686);
            setLineNumber(1240);    // compilenode string
            var string1688 = new GraceString("after the 'finally'.");
            var opresult1689 = request(opresult1687, "++(1)", [1], string1688);
            setLineNumber(1241);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1690 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1691 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1684 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult1689, call1690, call1691, var_suggestion);
            if1668 = call1684;
          }
          var if1692 = GraceDone;
          setLineNumber(1243);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1693 = request(var_sym, "kind", [0]);
          var string1694 = new GraceString("rparen");
          var opresult1695 = request(call1693, "\u2260(1)", [1], string1694);
          if (Grace_isTrue(opresult1695)) {
            setLineNumber(1244);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1696 = selfRequest(this, "checkBadOperators", [0]);
            setLineNumber(1245);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1698 = request(var_errormessages, "suggestion", [0]);
            var call1697 = request(call1698, "new", [0]);
            var var_suggestion = call1697;
            setLineNumber(1246);    // compilenode string
            var string1700 = new GraceString(")");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1699 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1700, var_lastToken);
            setLineNumber(1247);    // compilenode string
            var string1702 = new GraceString("an expression beginning with a '(' must end with a ')'.");
            setLineNumber(1248);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1703 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1704 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1705 = request(var_lastToken, "size", [0]);
            var sum1706 = request(call1704, "+(1)", [1], call1705);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1701 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1702, call1703, sum1706, var_suggestion);
            if1692 = call1701;
          }
          setLineNumber(1250);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1707 = selfRequest(this, "next", [0]);
          if1665 = call1707;
        } else {
          setLineNumber(1252);    // compilenode array
          var array1709 = new GraceSequence([]);
          // call case 2: outer request
          var call1708 = selfRequest(var_prelude, "list(1)", [1], array1709);
          var var_suggestions = call1708;
          setLineNumber(1253);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 2: outer request
          var call1710 = selfRequest(importedModules["parser"], "findNextTokenIndentedAt(1)", [1], var_lastToken);
          var var_nextTok = call1710;
          setLineNumber(1254);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1712 = request(var_errormessages, "suggestion", [0]);
          var call1711 = request(call1712, "new", [0]);
          var var_suggestion = call1711;
          var if1713 = GraceDone;
          setLineNumber(1255);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var opresult1714 = request(GraceFalse, "==(1)", [1], var_nextTok);
          if (Grace_isTrue(opresult1714)) {
            setLineNumber(1256);    // compilenode string
            var string1716 = new GraceString(" }");
            // call case 6: other requests
            if (var_tokens === undefined) raiseUninitializedVariable("tokens");
            var call1717 = request(var_tokens, "first", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1715 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1716, call1717);
            setLineNumber(1257);    // compilenode string
            var string1719 = new GraceString(" {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1718 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1719, var_lastToken);
            setLineNumber(1258);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call1720 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if1713 = call1720;
          } else {
            var if1721 = GraceDone;
            setLineNumber(1259);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1722 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1722)) {
              setLineNumber(1260);    // compilenode string
              var string1724 = new GraceString(" (\u00abexpression\u00bb)");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1723 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1724, var_lastToken);
              setLineNumber(1261);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1725 = request(var_suggestions, "push(1)", [1], var_suggestion);
              setLineNumber(1262);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1727 = request(var_errormessages, "suggestion", [0]);
              var call1726 = request(call1727, "new", [0]);
              var_suggestion = call1726;
              setLineNumber(1263);    // compilenode string
              var string1729 = new GraceString(" { \u00abexpression\u00bb }");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1728 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1729, var_lastToken);
              setLineNumber(1264);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1730 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if1721 = call1730;
            } else {
              setLineNumber(1266);    // compilenode string
              var string1732 = new GraceString(" }");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1733 = request(var_nextTok, "prev", [0]);
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1731 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1732, call1733);
              setLineNumber(1267);    // compilenode string
              var string1735 = new GraceString(" {");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1734 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1735, var_lastToken);
              setLineNumber(1268);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1736 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if1721 = call1736;
            }
            if1713 = if1721;
          }
          setLineNumber(1270);    // compilenode string
          var string1738 = new GraceString("a try(_)catch(_)\u2026finally(_) statement must have either a block or an expression in parentheses after the 'finally'.");
          setLineNumber(1271);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1739 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1740 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1737 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string1738, call1739, call1740, var_suggestions);
          if1665 = call1737;
        }
        if1662 = if1665;
      }
      setLineNumber(1273);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1741 = request(var_values, "pop", [0]);
      var_finally = call1741;
      if1655 = GraceDone;
    }
    setLineNumber(1275);    // compilenode member
    // call case 6: other requests
    var call1743 = request(var_tryTok, "line", [0]);
    // call case 6: other requests
    var call1744 = request(var_tryTok, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call1742 = request(var_util, "setPosition(2)", [2], call1743, call1744);
    setLineNumber(1276);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call1747 = request(var_ast, "tryCatchNode", [0]);
    var call1746 = request(call1747, "new(3)", [3], var_mainblock, var_cases, var_finally);
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call1745 = request(var_values, "push(1)", [1], call1746);
    return call1745;
  };    // end of method trycatch
  this.methods["trycatch"] = func1442;
  func1442.methodName = "trycatch";
  func1442.paramCounts = [0];
  func1442.paramNames = [];
  func1442.definitionLine = 1103;
  func1442.definitionModule = "parser";
  var func1748 = function(argcv) {    // method matchcase, line 1278
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("matchcase", 0, numArgs - 0);
    }
    var if1749 = GraceDone;
    setLineNumber(1279);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1751 = request(var_sym, "isIdentifier", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1752 = request(var_sym, "value", [0]);
    var string1753 = new GraceString("match");
    var opresult1754 = request(call1752, "==(1)", [1], string1753);
    var opresult1755 = request(call1751, "&&(1)", [1], opresult1754);
    var call1750 = request(opresult1755, "prefix!", [0]);
    if (Grace_isTrue(call1750)) {
      setLineNumber(1280);    // compilenode num
      return new GraceNum(0);
    }
    setLineNumber(1282);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_matchTok = var_sym;
    setLineNumber(1283);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call1756 = selfRequest(this, "next", [0]);
    var if1757 = GraceDone;
    setLineNumber(1284);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1758 = request(var_sym, "kind", [0]);
    var string1759 = new GraceString("lparen");
    var opresult1760 = request(call1758, "\u2260(1)", [1], string1759);
    if (Grace_isTrue(opresult1760)) {
      setLineNumber(1285);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1762 = request(var_errormessages, "suggestion", [0]);
      var call1761 = request(call1762, "new", [0]);
      var var_suggestion = call1761;
      setLineNumber(1287);    // compilenode block
      var block1764 = new GraceBlock(this, 1287, 1);
      block1764.guard = jsTrue;
      block1764.real = function block1764(var_t) {
        setLineNumber(1288);    // compilenode member
        // call case 6: other requests
        var call1765 = request(var_t, "isRParen", [0]);
        // call case 6: other requests
        var call1766 = request(var_t, "line", [0]);
        // call case 6: other requests
        if (var_matchTok === undefined) raiseUninitializedVariable("matchTok");
        var call1767 = request(var_matchTok, "line", [0]);
        var opresult1768 = request(call1766, "==(1)", [1], call1767);
        var opresult1769 = request(call1765, "&&(1)", [1], opresult1768);
        setLineNumber(1289);    // compilenode member
        // call case 6: other requests
        var call1770 = request(var_t, "isIdentifier", [0]);
        // call case 6: other requests
        var call1771 = request(var_t, "value", [0]);
        var string1772 = new GraceString("case");
        var opresult1773 = request(call1771, "==(1)", [1], string1772);
        var opresult1774 = request(call1770, "&&(1)", [1], opresult1773);
        var opresult1775 = request(opresult1769, "||(1)", [1], opresult1774);
        return opresult1775;
      };
      let applyMeth1764 = function apply_1 (argcv, ...args) {
          if (this.guard.apply(this.receiver, args))
              return this.real.apply(this.receiver, args);
          badBlockArgs.apply(this, args);
      };
      applyMeth1764.methodName = "apply(1)";
      applyMeth1764.paramCounts = [1];
      applyMeth1764.paramNames = ["t"];
      applyMeth1764.definitionLine = 1287;
      applyMeth1764.definitionModule = "parser";
      block1764.methods["apply(1)"] = applyMeth1764;
      let matchesMeth1764 = function matches_1 (argcv, ...args) {
          return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
      };
      matchesMeth1764.methodName = "matches(1)";
      matchesMeth1764.paramCounts = [1];
      matchesMeth1764.paramNames = ["t"];
      matchesMeth1764.definitionLine = 1287;
      matchesMeth1764.definitionModule = "parser";
      block1764.methods["matches(1)"] = matchesMeth1764;
      // call case 2: outer request
      var call1763 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block1764);
      var var_nextTok = call1763;
      var if1776 = GraceDone;
      setLineNumber(1290);    // compilenode op
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      var opresult1777 = request(GraceFalse, "==(1)", [1], var_nextTok);
      if (Grace_isTrue(opresult1777)) {
        setLineNumber(1291);    // compilenode string
        var string1779 = new GraceString("(\u00abexpression\u00bb)");
        if (var_matchTok === undefined) raiseUninitializedVariable("matchTok");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call1778 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1779, var_matchTok);
        if1776 = call1778;
      } else {
        var if1780 = GraceDone;
        setLineNumber(1292);    // compilenode member
        // call case 6: other requests
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var call1781 = request(var_nextTok, "isRParen", [0]);
        if (Grace_isTrue(call1781)) {
          var if1782 = GraceDone;
          setLineNumber(1293);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult1783 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult1783)) {
            setLineNumber(1294);    // compilenode string
            var string1785 = new GraceString("(\u00abexpression\u00bb");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1784 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string1785, var_sym);
            if1782 = call1784;
          } else {
            setLineNumber(1296);    // compilenode string
            var string1787 = new GraceString("(");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1786 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string1787, var_sym);
            if1782 = call1786;
          }
          if1780 = if1782;
        } else {
          var if1788 = GraceDone;
          setLineNumber(1298);    // compilenode member
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call1789 = request(var_nextTok, "isIdentifier", [0]);
          if (Grace_isTrue(call1789)) {
            setLineNumber(1299);    // compilenode string
            var string1791 = new GraceString("(");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1790 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string1791, var_sym);
            setLineNumber(1300);    // compilenode string
            var string1793 = new GraceString(")");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call1794 = request(var_nextTok, "prev", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1792 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string1793, call1794, GraceTrue);
            if1788 = call1792;
          }
          if1780 = if1788;
        }
        if1776 = if1780;
      }
      setLineNumber(1302);    // compilenode string
      var string1796 = new GraceString("a match statement must have an expression in parentheses after the 'match'.");
      setLineNumber(1303);    // compilenode member
      // call case 6: other requests
      if (var_matchTok === undefined) raiseUninitializedVariable("matchTok");
      var call1797 = request(var_matchTok, "line", [0]);
      // call case 6: other requests
      if (var_matchTok === undefined) raiseUninitializedVariable("matchTok");
      var call1798 = request(var_matchTok, "linePos", [0]);
      // call case 6: other requests
      if (var_matchTok === undefined) raiseUninitializedVariable("matchTok");
      var call1799 = request(var_matchTok, "size", [0]);
      var sum1800 = request(call1798, "+(1)", [1], call1799);
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1795 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1796, call1797, sum1800, var_suggestion);
      if1757 = call1795;
    }
    setLineNumber(1305);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call1801 = selfRequest(this, "next", [0]);
    var if1802 = GraceDone;
    setLineNumber(1306);    // compilenode block
    var block1804 = new GraceBlock(this, 1306, 0);
    block1804.guard = jsTrue;
    block1804.real = function block1804() {
      setLineNumber(1306);    // compilenode call
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      // call case 2: outer request
      var call1805 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
      return call1805;
    };
    let applyMeth1804 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1804.methodName = "apply";
    applyMeth1804.paramCounts = [0];
    applyMeth1804.paramNames = [];
    applyMeth1804.definitionLine = 1306;
    applyMeth1804.definitionModule = "parser";
    block1804.methods["apply"] = applyMeth1804;
    // call case 2: outer request
    var call1803 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1804);
    if (Grace_isTrue(call1803)) {
      setLineNumber(1307);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1807 = request(var_errormessages, "suggestion", [0]);
      var call1806 = request(call1807, "new", [0]);
      var var_suggestion = call1806;
      setLineNumber(1308);    // compilenode string
      var string1810 = new GraceString("rparen");
      var array1809 = new GraceSequence([string1810]);
      // call case 2: outer request
      var call1808 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1809);
      var var_nextTok = call1808;
      var if1811 = GraceDone;
      setLineNumber(1309);    // compilenode op
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var opresult1812 = request(var_nextTok, "==(1)", [1], var_sym);
      if (Grace_isTrue(opresult1812)) {
        setLineNumber(1310);    // compilenode string
        var string1814 = new GraceString("\u00abexpression\u00bb");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call1813 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1814, var_lastToken);
        if1811 = call1813;
      } else {
        setLineNumber(1312);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        // call case 6: other requests
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var call1816 = request(var_nextTok, "prev", [0]);
        var string1817 = new GraceString("\u00abexpression\u00bb");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call1815 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1816, GraceTrue, GraceFalse, string1817);
        if1811 = call1815;
      }
      setLineNumber(1314);    // compilenode string
      var string1819 = new GraceString("a match statement must have an expression in parentheses after the 'match'.");
      setLineNumber(1315);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1820 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1821 = request(var_sym, "linePos", [0]);
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1818 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1819, call1820, call1821, var_suggestion);
      if1802 = call1818;
    }
    setLineNumber(1317);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call1822 = request(var_values, "pop", [0]);
    var var_matchee = call1822;
    var if1823 = GraceDone;
    setLineNumber(1318);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1824 = request(var_sym, "kind", [0]);
    var string1825 = new GraceString("rparen");
    var opresult1826 = request(call1824, "\u2260(1)", [1], string1825);
    if (Grace_isTrue(opresult1826)) {
      setLineNumber(1319);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1827 = selfRequest(this, "checkBadOperators", [0]);
      setLineNumber(1320);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1829 = request(var_errormessages, "suggestion", [0]);
      var call1828 = request(call1829, "new", [0]);
      var var_suggestion = call1828;
      setLineNumber(1321);    // compilenode string
      var string1831 = new GraceString(")");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call1830 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1831, var_lastToken);
      setLineNumber(1322);    // compilenode string
      var string1833 = new GraceString("an expression beginning with a '(' must end with a ')'.");
      setLineNumber(1323);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call1834 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call1835 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call1836 = request(var_lastToken, "size", [0]);
      var sum1837 = request(call1835, "+(1)", [1], call1836);
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call1832 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1833, call1834, sum1837, var_suggestion);
      if1823 = call1832;
    }
    setLineNumber(1325);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call1838 = selfRequest(this, "next", [0]);
    setLineNumber(1326);    // compilenode array
    var array1840 = new GraceSequence([]);
    // call case 2: outer request
    var call1839 = selfRequest(var_prelude, "list(1)", [1], array1840);
    var var_cases = call1839;
    setLineNumber(1327);    // compilenode vardec
    var var_elsecase = GraceFalse;
    setLineNumber(1328);    // compilenode block
    var block1842 = new GraceBlock(this, 1328, 0);
    block1842.guard = jsTrue;
    block1842.real = function block1842() {
      setLineNumber(1328);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1843 = request(var_sym, "isIdentifier", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1844 = request(var_sym, "value", [0]);
      var string1845 = new GraceString("case");
      var opresult1846 = request(call1844, "==(1)", [1], string1845);
      var opresult1847 = request(call1843, "&&(1)", [1], opresult1846);
      return opresult1847;
    };
    let applyMeth1842 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1842.methodName = "apply";
    applyMeth1842.paramCounts = [0];
    applyMeth1842.paramNames = [];
    applyMeth1842.definitionLine = 1328;
    applyMeth1842.definitionModule = "parser";
    block1842.methods["apply"] = applyMeth1842;
    var block1848 = new GraceBlock(this, 1328, 0);
    block1848.guard = jsTrue;
    block1848.real = function block1848() {
      setLineNumber(1329);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1849 = selfRequest(this, "next", [0]);
      var if1850 = GraceDone;
      setLineNumber(1330);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1851 = request(var_sym, "isLBrace", [0]);
      if (Grace_isTrue(call1851)) {
        setLineNumber(1331);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1852 = selfRequest(this, "block", [0]);
        if1850 = call1852;
      } else {
        var if1853 = GraceDone;
        setLineNumber(1332);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1854 = request(var_sym, "isLParen", [0]);
        if (Grace_isTrue(call1854)) {
          setLineNumber(1333);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1855 = selfRequest(this, "next", [0]);
          var if1856 = GraceDone;
          setLineNumber(1334);    // compilenode block
          var block1858 = new GraceBlock(this, 1334, 0);
          block1858.guard = jsTrue;
          block1858.real = function block1858() {
            setLineNumber(1334);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call1859 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call1859;
          };
          let applyMeth1858 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1858.methodName = "apply";
          applyMeth1858.paramCounts = [0];
          applyMeth1858.paramNames = [];
          applyMeth1858.definitionLine = 1334;
          applyMeth1858.definitionModule = "parser";
          block1858.methods["apply"] = applyMeth1858;
          // call case 2: outer request
          var call1857 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block1858);
          if (Grace_isTrue(call1857)) {
            setLineNumber(1335);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1861 = request(var_errormessages, "suggestion", [0]);
            var call1860 = request(call1861, "new", [0]);
            var var_suggestion = call1860;
            setLineNumber(1336);    // compilenode string
            var string1864 = new GraceString("rparen");
            var array1863 = new GraceSequence([string1864]);
            // call case 2: outer request
            var call1862 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1863);
            var var_nextTok = call1862;
            var if1865 = GraceDone;
            setLineNumber(1337);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1866 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1866)) {
              setLineNumber(1338);    // compilenode string
              var string1868 = new GraceString("\u00abexpression\u00bb");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1867 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1868, var_lastToken);
              if1865 = call1867;
            } else {
              setLineNumber(1340);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1870 = request(var_nextTok, "prev", [0]);
              var string1871 = new GraceString("\u00abexpression\u00bb");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1869 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1870, GraceTrue, GraceFalse, string1871);
              if1865 = call1869;
            }
            setLineNumber(1342);    // compilenode string
            var string1873 = new GraceString("a match statement must have either a matching block or an expression in parentheses after the 'case'.");
            setLineNumber(1343);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1874 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1875 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1872 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1873, call1874, call1875, var_suggestion);
            if1856 = call1872;
          }
          var if1876 = GraceDone;
          setLineNumber(1345);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1877 = request(var_sym, "kind", [0]);
          var string1878 = new GraceString("rparen");
          var opresult1879 = request(call1877, "\u2260(1)", [1], string1878);
          if (Grace_isTrue(opresult1879)) {
            setLineNumber(1346);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1880 = selfRequest(this, "checkBadOperators", [0]);
            setLineNumber(1347);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1882 = request(var_errormessages, "suggestion", [0]);
            var call1881 = request(call1882, "new", [0]);
            var var_suggestion = call1881;
            setLineNumber(1348);    // compilenode string
            var string1884 = new GraceString(")");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1883 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1884, var_lastToken);
            setLineNumber(1349);    // compilenode string
            var string1886 = new GraceString("an expression beginning with a '(' must end with a ')'.");
            setLineNumber(1350);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1887 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1888 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1889 = request(var_lastToken, "size", [0]);
            var sum1890 = request(call1888, "+(1)", [1], call1889);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1885 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1886, call1887, sum1890, var_suggestion);
            if1876 = call1885;
          }
          setLineNumber(1352);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1891 = selfRequest(this, "next", [0]);
          if1853 = call1891;
        } else {
          setLineNumber(1354);    // compilenode array
          var array1893 = new GraceSequence([]);
          // call case 2: outer request
          var call1892 = selfRequest(var_prelude, "list(1)", [1], array1893);
          var var_suggestions = call1892;
          setLineNumber(1355);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 2: outer request
          var call1894 = selfRequest(importedModules["parser"], "findNextTokenIndentedAt(1)", [1], var_lastToken);
          var var_nextTok = call1894;
          setLineNumber(1356);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1896 = request(var_errormessages, "suggestion", [0]);
          var call1895 = request(call1896, "new", [0]);
          var var_suggestion = call1895;
          var if1897 = GraceDone;
          setLineNumber(1357);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var opresult1898 = request(GraceFalse, "==(1)", [1], var_nextTok);
          if (Grace_isTrue(opresult1898)) {
            setLineNumber(1358);    // compilenode string
            var string1900 = new GraceString(" }");
            // call case 6: other requests
            if (var_tokens === undefined) raiseUninitializedVariable("tokens");
            var call1901 = request(var_tokens, "last", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1899 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1900, call1901);
            setLineNumber(1359);    // compilenode string
            var string1903 = new GraceString(" {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1902 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1903, var_lastToken);
            setLineNumber(1360);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call1904 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if1897 = call1904;
          } else {
            var if1905 = GraceDone;
            setLineNumber(1361);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1906 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1906)) {
              setLineNumber(1362);    // compilenode string
              var string1908 = new GraceString(" (\u00abexpression\u00bb)");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1907 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1908, var_lastToken);
              setLineNumber(1363);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1909 = request(var_suggestions, "push(1)", [1], var_suggestion);
              setLineNumber(1364);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call1911 = request(var_errormessages, "suggestion", [0]);
              var call1910 = request(call1911, "new", [0]);
              var_suggestion = call1910;
              setLineNumber(1365);    // compilenode string
              var string1913 = new GraceString(" { \u00abmatch expression\u00bb }");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1912 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1913, var_lastToken);
              setLineNumber(1366);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1914 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if1905 = call1914;
            } else {
              setLineNumber(1368);    // compilenode string
              var string1916 = new GraceString(" }");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1917 = request(var_nextTok, "prev", [0]);
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1915 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1916, call1917);
              setLineNumber(1369);    // compilenode string
              var string1919 = new GraceString(" {");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1918 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1919, var_lastToken);
              setLineNumber(1370);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call1920 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if1905 = call1920;
            }
            if1897 = if1905;
          }
          setLineNumber(1372);    // compilenode string
          var string1922 = new GraceString("a match statement must have either a matching block or an expression in parentheses after the 'case'.");
          setLineNumber(1373);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1923 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1924 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1921 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string1922, call1923, call1924, var_suggestions);
          if1853 = call1921;
        }
        if1850 = if1853;
      }
      setLineNumber(1375);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call1925 = request(var_values, "pop", [0]);
      var var_case = call1925;
      var if1926 = GraceDone;
      setLineNumber(1376);    // compilenode member
      // call case 6: other requests
      if (var_case === undefined) raiseUninitializedVariable("case");
      var call1927 = request(var_case, "isBlock", [0]);
      if (Grace_isTrue(call1927)) {
        setLineNumber(1377);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        if (var_case === undefined) raiseUninitializedVariable("case");
        var call1930 = request(var_case, "params", [0]);
        var call1929 = request(call1930, "first", [0]);
        var call1928 = request(call1929, "decType", [0]);
        var var_guard = call1928;
        var if1931 = GraceDone;
        setLineNumber(1378);    // compilenode member
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call1932 = request(var_ast, "unknownType", [0]);
        if (var_guard === undefined) raiseUninitializedVariable("guard");
        var opresult1933 = request(call1932, "==(1)", [1], var_guard);
        if (Grace_isTrue(opresult1933)) {
          setLineNumber(1379);    // compilenode string
          var string1935 = new GraceString("case guard on line ");
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          if (var_case === undefined) raiseUninitializedVariable("case");
          var call1938 = request(var_case, "params", [0]);
          var call1937 = request(call1938, "first", [0]);
          var call1936 = request(call1937, "line", [0]);
          var opresult1939 = request(string1935, "++(1)", [1], call1936);
          var string1940 = new GraceString(" is type Unknown; this is not useful, because it will always be true.  Perhaps you want an 'else' branch, which is true only when all other cases are false?");
          var opresult1941 = request(opresult1939, "++(1)", [1], string1940);
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call1934 = request(var_util, "log(1)verbose(1)", [1, 1], new GraceNum(20), opresult1941);
          if1931 = call1934;
        }
        if1926 = if1931;
      }
      setLineNumber(1382);    // compilenode call
      if (var_case === undefined) raiseUninitializedVariable("case");
      // call case 6: other requests
      if (var_cases === undefined) raiseUninitializedVariable("cases");
      var call1942 = request(var_cases, "push(1)", [1], var_case);
      return call1942;
    };
    let applyMeth1848 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1848.methodName = "apply";
    applyMeth1848.paramCounts = [0];
    applyMeth1848.paramNames = [];
    applyMeth1848.definitionLine = 1328;
    applyMeth1848.definitionModule = "parser";
    block1848.methods["apply"] = applyMeth1848;
    // call case 2: outer request
    var call1841 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1842, block1848);
    var if1943 = GraceDone;
    setLineNumber(1384);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1944 = request(var_sym, "isIdentifier", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call1945 = request(var_sym, "value", [0]);
    var string1946 = new GraceString("else");
    var opresult1947 = request(call1945, "==(1)", [1], string1946);
    var opresult1948 = request(call1944, "&&(1)", [1], opresult1947);
    if (Grace_isTrue(opresult1948)) {
      setLineNumber(1385);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1949 = selfRequest(this, "next", [0]);
      var if1950 = GraceDone;
      setLineNumber(1386);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call1951 = request(var_sym, "isLBrace", [0]);
      if (Grace_isTrue(call1951)) {
        setLineNumber(1387);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1952 = selfRequest(this, "block", [0]);
        if1950 = call1952;
      } else {
        var if1953 = GraceDone;
        setLineNumber(1388);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call1954 = request(var_sym, "isLParen", [0]);
        if (Grace_isTrue(call1954)) {
          setLineNumber(1389);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1955 = selfRequest(this, "next", [0]);
          var if1956 = GraceDone;
          setLineNumber(1390);    // compilenode member
          // call case 6: other requests
          var block1959 = new GraceBlock(this, 1390, 0);
          block1959.guard = jsTrue;
          block1959.real = function block1959() {
            setLineNumber(1390);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call1960 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call1960;
          };
          let applyMeth1959 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1959.methodName = "apply";
          applyMeth1959.paramCounts = [0];
          applyMeth1959.paramNames = [];
          applyMeth1959.definitionLine = 1390;
          applyMeth1959.definitionModule = "parser";
          block1959.methods["apply"] = applyMeth1959;
          // call case 2: outer request
          var call1958 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block1959);
          var call1957 = request(call1958, "not", [0]);
          if (Grace_isTrue(call1957)) {
            setLineNumber(1391);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1962 = request(var_errormessages, "suggestion", [0]);
            var call1961 = request(call1962, "new", [0]);
            var var_suggestion = call1961;
            setLineNumber(1392);    // compilenode string
            var string1965 = new GraceString("rparen");
            var array1964 = new GraceSequence([string1965]);
            // call case 2: outer request
            var call1963 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array1964);
            var var_nextTok = call1963;
            var if1966 = GraceDone;
            setLineNumber(1393);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult1967 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult1967)) {
              setLineNumber(1394);    // compilenode string
              var string1969 = new GraceString("\u00abexpression\u00bb");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1968 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1969, var_lastToken);
              if1966 = call1968;
            } else {
              setLineNumber(1396);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call1971 = request(var_nextTok, "prev", [0]);
              var string1972 = new GraceString("\u00abexpression\u00bb");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call1970 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call1971, GraceTrue, GraceFalse, string1972);
              if1966 = call1970;
            }
            setLineNumber(1398);    // compilenode string
            var string1974 = new GraceString("A match(_)case(_) statement must have a block after the 'else'");
            setLineNumber(1399);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1975 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call1976 = request(var_sym, "linePos", [0]);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1973 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1974, call1975, call1976, var_suggestion);
            if1956 = call1973;
          }
          var if1977 = GraceDone;
          setLineNumber(1401);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call1979 = request(var_sym, "isRParen", [0]);
          var call1978 = request(call1979, "not", [0]);
          if (Grace_isTrue(call1978)) {
            setLineNumber(1402);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1980 = selfRequest(this, "checkBadOperators", [0]);
            setLineNumber(1403);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1982 = request(var_errormessages, "suggestion", [0]);
            var call1981 = request(call1982, "new", [0]);
            var var_suggestion = call1981;
            setLineNumber(1404);    // compilenode string
            var string1984 = new GraceString(")");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1983 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string1984, var_lastToken);
            setLineNumber(1405);    // compilenode string
            var string1986 = new GraceString("An expression beginning with a '(' must end with a ')'.");
            setLineNumber(1406);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1987 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1988 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call1989 = request(var_lastToken, "size", [0]);
            var sum1990 = request(call1988, "+(1)", [1], call1989);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call1985 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string1986, call1987, sum1990, var_suggestion);
            if1977 = call1985;
          }
          setLineNumber(1409);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1991 = selfRequest(this, "next", [0]);
          if1953 = call1991;
        } else {
          setLineNumber(1411);    // compilenode member
          // call case 6: other requests
          // call case 2: outer request
          var call1993 = selfRequest(var_prelude, "list", [0]);
          var call1992 = request(call1993, "empty", [0]);
          var var_suggestions = call1992;
          setLineNumber(1412);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 2: outer request
          var call1994 = selfRequest(importedModules["parser"], "findNextTokenIndentedAt(1)", [1], var_lastToken);
          var var_nextTok = call1994;
          setLineNumber(1413);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call1996 = request(var_errormessages, "suggestion", [0]);
          var call1995 = request(call1996, "new", [0]);
          var var_suggestion = call1995;
          var if1997 = GraceDone;
          setLineNumber(1414);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var opresult1998 = request(var_nextTok, "==(1)", [1], GraceFalse);
          if (Grace_isTrue(opresult1998)) {
            setLineNumber(1415);    // compilenode string
            var string2000 = new GraceString(" }");
            // call case 6: other requests
            if (var_tokens === undefined) raiseUninitializedVariable("tokens");
            var call2001 = request(var_tokens, "first", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call1999 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2000, call2001);
            setLineNumber(1416);    // compilenode string
            var string2003 = new GraceString(" {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2002 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2003, var_lastToken);
            setLineNumber(1417);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call2004 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if1997 = call2004;
          } else {
            var if2005 = GraceDone;
            setLineNumber(1418);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult2006 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult2006)) {
              setLineNumber(1419);    // compilenode string
              var string2008 = new GraceString(" (\u00abblock expression\u00bb)");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call2007 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2008, var_lastToken);
              setLineNumber(1420);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call2009 = request(var_suggestions, "push(1)", [1], var_suggestion);
              setLineNumber(1421);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call2011 = request(var_errormessages, "suggestion", [0]);
              var call2010 = request(call2011, "new", [0]);
              var_suggestion = call2010;
              setLineNumber(1422);    // compilenode string
              var string2013 = new GraceString(" { \u00abexpression\u00bb }");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call2012 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2013, var_lastToken);
              setLineNumber(1423);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call2014 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if2005 = call2014;
            } else {
              setLineNumber(1425);    // compilenode string
              var string2016 = new GraceString(" }");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call2017 = request(var_nextTok, "prev", [0]);
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call2015 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2016, call2017);
              setLineNumber(1426);    // compilenode string
              var string2019 = new GraceString(" {");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call2018 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2019, var_lastToken);
              setLineNumber(1427);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call2020 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if2005 = call2020;
            }
            if1997 = if2005;
          }
          setLineNumber(1429);    // compilenode string
          var string2022 = new GraceString("A match(_)case(_) must have a block after the 'else'");
          setLineNumber(1430);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2023 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2024 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2021 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string2022, call2023, call2024, var_suggestions);
          if1953 = call2021;
        }
        if1950 = if1953;
      }
      setLineNumber(1432);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2025 = request(var_values, "pop", [0]);
      var_elsecase = call2025;
      if1943 = GraceDone;
    }
    setLineNumber(1434);    // compilenode member
    // call case 6: other requests
    var call2027 = request(var_matchTok, "line", [0]);
    // call case 6: other requests
    var call2028 = request(var_matchTok, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call2026 = request(var_util, "setPosition(2)", [2], call2027, call2028);
    setLineNumber(1435);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call2031 = request(var_ast, "matchCaseNode", [0]);
    var call2030 = request(call2031, "new(3)", [3], var_matchee, var_cases, var_elsecase);
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2029 = request(var_values, "push(1)", [1], call2030);
    return call2029;
  };    // end of method matchcase
  this.methods["matchcase"] = func1748;
  func1748.methodName = "matchcase";
  func1748.paramCounts = [0];
  func1748.paramNames = [];
  func1748.definitionLine = 1278;
  func1748.definitionModule = "parser";
  var func2032 = function(argcv) {    // method term, line 1439
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("term", 0, numArgs - 0);
    }
    setLineNumber(1440);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2034 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2035 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call2033 = request(var_util, "setPosition(2)", [2], call2034, call2035);
    var if2036 = GraceDone;
    setLineNumber(1441);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2037 = request(var_sym, "isNum", [0]);
    if (Grace_isTrue(call2037)) {
      setLineNumber(1442);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2038 = selfRequest(this, "pushNum", [0]);
      if2036 = call2038;
    } else {
      var if2039 = GraceDone;
      setLineNumber(1443);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2040 = request(var_sym, "isString", [0]);
      if (Grace_isTrue(call2040)) {
        setLineNumber(1444);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2041 = selfRequest(this, "pushString", [0]);
        if2039 = call2041;
      } else {
        var if2042 = GraceDone;
        setLineNumber(1445);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2043 = request(var_sym, "isIdentifier", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2044 = request(var_sym, "value", [0]);
        var string2045 = new GraceString("match");
        var opresult2046 = request(call2044, "==(1)", [1], string2045);
        var opresult2047 = request(call2043, "&&(1)", [1], opresult2046);
        if (Grace_isTrue(opresult2047)) {
          setLineNumber(1446);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2048 = selfRequest(this, "matchcase", [0]);
          if2042 = call2048;
        } else {
          var if2049 = GraceDone;
          setLineNumber(1447);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2050 = request(var_sym, "isIdentifier", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2051 = request(var_sym, "value", [0]);
          var string2052 = new GraceString("try");
          var opresult2053 = request(call2051, "==(1)", [1], string2052);
          var opresult2054 = request(call2050, "&&(1)", [1], opresult2053);
          if (Grace_isTrue(opresult2054)) {
            setLineNumber(1448);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2055 = selfRequest(this, "trycatch", [0]);
            if2049 = call2055;
          } else {
            var if2056 = GraceDone;
            setLineNumber(1449);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call2057 = request(var_sym, "isIdentifier", [0]);
            if (Grace_isTrue(call2057)) {
              setLineNumber(1450);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call2058 = selfRequest(this, "identifier", [0]);
              if2056 = call2058;
            } else {
              var if2059 = GraceDone;
              setLineNumber(1451);    // compilenode string
              var string2061 = new GraceString("object");
              // call case 2: outer request
              var call2060 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string2061);
              if (Grace_isTrue(call2060)) {
                setLineNumber(1452);    // compilenode member
                // call case 4: self request with 0 args and 0 typeArgs 
                var call2062 = selfRequest(this, "doobject", [0]);
                if2059 = call2062;
              } else {
                var if2063 = GraceDone;
                setLineNumber(1453);    // compilenode string
                var string2065 = new GraceString("interface");
                // call case 2: outer request
                var call2064 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string2065);
                if (Grace_isTrue(call2064)) {
                  setLineNumber(1454);    // compilenode member
                  // call case 4: self request with 0 args and 0 typeArgs 
                  var call2066 = selfRequest(this, "interfaceLiteral", [0]);
                  if2063 = call2066;
                } else {
                  var if2067 = GraceDone;
                  setLineNumber(1455);    // compilenode member
                  // call case 6: other requests
                  if (var_sym === undefined) raiseUninitializedVariable("sym");
                  var call2068 = request(var_sym, "isLBrace", [0]);
                  if (Grace_isTrue(call2068)) {
                    setLineNumber(1456);    // compilenode member
                    // call case 4: self request with 0 args and 0 typeArgs 
                    var call2069 = selfRequest(this, "block", [0]);
                    if2067 = call2069;
                  } else {
                    var if2070 = GraceDone;
                    setLineNumber(1457);    // compilenode member
                    // call case 6: other requests
                    if (var_sym === undefined) raiseUninitializedVariable("sym");
                    var call2071 = request(var_sym, "isLSquare", [0]);
                    if (Grace_isTrue(call2071)) {
                      setLineNumber(1458);    // compilenode member
                      // call case 4: self request with 0 args and 0 typeArgs 
                      var call2072 = selfRequest(this, "sequenceConstructor", [0]);
                      if2070 = call2072;
                    } else {
                      var if2073 = GraceDone;
                      setLineNumber(1459);    // compilenode member
                      // call case 6: other requests
                      if (var_sym === undefined) raiseUninitializedVariable("sym");
                      var call2074 = request(var_sym, "isOp", [0]);
                      if (Grace_isTrue(call2074)) {
                        setLineNumber(1461);    // compilenode member
                        // call case 4: self request with 0 args and 0 typeArgs 
                        var call2075 = selfRequest(this, "prefixop", [0]);
                        if2073 = call2075;
                      }
                      if2070 = if2073;
                    }
                    if2067 = if2070;
                  }
                  if2063 = if2067;
                }
                if2059 = if2063;
              }
              if2056 = if2059;
            }
            if2049 = if2056;
          }
          if2042 = if2049;
        }
        if2039 = if2042;
      }
      if2036 = if2039;
    }
    return if2036;
  };    // end of method term
  this.methods["term"] = func2032;
  func2032.methodName = "term";
  func2032.paramCounts = [0];
  func2032.paramNames = [];
  func2032.definitionLine = 1439;
  func2032.definitionModule = "parser";
  var func2076 = function(argcv, var_acceptBlocks) {    // method expression(_), line 1465
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("expression(_)", 0, numArgs - 1);
    }
    setLineNumber(1470);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2077 = request(var_values, "size", [0]);
    var var_sz = call2077;
    setLineNumber(1471);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2079 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2080 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call2078 = request(var_util, "setPosition(2)", [2], call2079, call2080);
    var if2081 = GraceDone;
    setLineNumber(1472);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2082 = request(var_sym, "isLParen", [0]);
    if (Grace_isTrue(call2082)) {
      setLineNumber(1473);    // compilenode defdec
      if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
      var var_tmpStatementToken = var_statementToken;
      setLineNumber(1474);    // compilenode bind
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var_statementToken = var_sym;
      setLineNumber(1475);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2084 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2085 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call2083 = request(var_util, "setPosition(2)", [2], call2084, call2085);
      setLineNumber(1476);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2086 = selfRequest(this, "next", [0]);
      var if2087 = GraceDone;
      setLineNumber(1477);    // compilenode member
      // call case 6: other requests
      var block2090 = new GraceBlock(this, 1477, 0);
      block2090.guard = jsTrue;
      block2090.real = function block2090() {
        setLineNumber(1477);    // compilenode call
        // call case 2: outer request
        var call2091 = selfRequest(importedModules["parser"], "expression(1)", [1], var_acceptBlocks);
        return call2091;
      };
      let applyMeth2090 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2090.methodName = "apply";
      applyMeth2090.paramCounts = [0];
      applyMeth2090.paramNames = [];
      applyMeth2090.definitionLine = 1477;
      applyMeth2090.definitionModule = "parser";
      block2090.methods["apply"] = applyMeth2090;
      // call case 2: outer request
      var call2089 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block2090);
      var call2088 = request(call2089, "not", [0]);
      if (Grace_isTrue(call2088)) {
        setLineNumber(1478);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2093 = request(var_errormessages, "suggestion", [0]);
        var call2092 = request(call2093, "new", [0]);
        var var_suggestion = call2092;
        setLineNumber(1479);    // compilenode string
        var string2096 = new GraceString("rparen");
        var array2095 = new GraceSequence([string2096]);
        // call case 2: outer request
        var call2094 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2095);
        var var_nextTok = call2094;
        var if2097 = GraceDone;
        setLineNumber(1480);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var opresult2098 = request(var_nextTok, "==(1)", [1], var_sym);
        if (Grace_isTrue(opresult2098)) {
          setLineNumber(1481);    // compilenode string
          var string2100 = new GraceString("\u00abexpression\u00bb");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2099 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2100, var_lastToken);
          if2097 = call2099;
        } else {
          setLineNumber(1483);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call2102 = request(var_nextTok, "prev", [0]);
          setLineNumber(1484);    // compilenode string
          var string2103 = new GraceString("\u00abexpression\u00bb");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2101 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2102, GraceTrue, GraceFalse, string2103);
          if2097 = call2101;
        }
        setLineNumber(1486);    // compilenode string
        var string2105 = new GraceString("parentheses must contain a valid expression.");
        setLineNumber(1487);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2106 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2107 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2104 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string2105, call2106, call2107, var_suggestion);
        if2087 = call2104;
      }
      var if2108 = GraceDone;
      setLineNumber(1489);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2109 = request(var_sym, "kind", [0]);
      var string2110 = new GraceString("rparen");
      var opresult2111 = request(call2109, "\u2260(1)", [1], string2110);
      if (Grace_isTrue(opresult2111)) {
        setLineNumber(1490);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2112 = selfRequest(this, "checkBadOperators", [0]);
        setLineNumber(1491);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2114 = request(var_errormessages, "suggestion", [0]);
        var call2113 = request(call2114, "new", [0]);
        var var_suggestion = call2113;
        setLineNumber(1492);    // compilenode string
        var string2116 = new GraceString(")");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2115 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2116, var_lastToken);
        setLineNumber(1493);    // compilenode string
        var string2118 = new GraceString("an expression beginning with a '(' must end with a ')'.");
        setLineNumber(1494);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2119 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2120 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2121 = request(var_lastToken, "size", [0]);
        var sum2122 = request(call2120, "+(1)", [1], call2121);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2117 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string2118, call2119, sum2122, var_suggestion);
        if2108 = call2117;
      }
      setLineNumber(1497);    // compilenode bind
      if (var_tmpStatementToken === undefined) raiseUninitializedVariable("tmpStatementToken");
      var_statementToken = var_tmpStatementToken;
      setLineNumber(1498);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2123 = selfRequest(this, "next", [0]);
      if2081 = call2123;
    } else {
      setLineNumber(1500);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2124 = selfRequest(this, "term", [0]);
      if2081 = call2124;
    }
    var if2125 = GraceDone;
    setLineNumber(1502);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2126 = request(var_values, "size", [0]);
    var opresult2127 = request(call2126, ">(1)", [1], var_sz);
    if (Grace_isTrue(opresult2127)) {
      setLineNumber(1503);    // compilenode call
      // call case 2: outer request
      var call2128 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_acceptBlocks);
      setLineNumber(1504);    // compilenode call
      // call case 2: outer request
      var call2129 = selfRequest(importedModules["parser"], "callrest(1)", [1], var_acceptBlocks);
      setLineNumber(1505);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2130 = selfRequest(this, "valueexpressionrest", [0]);
      if2125 = call2130;
    }
    return if2125;
  };    // end of method expression(_)
  this.methods["expression(1)"] = func2076;
  func2076.methodName = "expression(1)";
  func2076.paramCounts = [1];
  func2076.paramNames = ["acceptBlocks"];
  func2076.definitionLine = 1465;
  func2076.definitionModule = "parser";
  var func2131 = function(argcv, var_o) {    // method oprec(_), line 1512
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("oprec(_)", 0, numArgs - 1);
    }
    var if2132 = GraceDone;
    setLineNumber(1513);    // compilenode string
    var string2133 = new GraceString("*");
    var opresult2134 = request(var_o, "==(1)", [1], string2133);
    if (Grace_isTrue(opresult2134)) {
      setLineNumber(1514);    // compilenode num
      return new GraceNum(10);
    } else {
      var if2135 = GraceDone;
      setLineNumber(1515);    // compilenode string
      var string2136 = new GraceString("/");
      var opresult2137 = request(var_o, "==(1)", [1], string2136);
      if (Grace_isTrue(opresult2137)) {
        setLineNumber(1516);    // compilenode num
        return new GraceNum(10);
      }
      if2132 = if2135;
    }
    setLineNumber(1518);    // compilenode num
    return new GraceNum(5);
  };    // end of method oprec(_)
  this.methods["oprec(1)"] = func2131;
  func2131.methodName = "oprec(1)";
  func2131.paramCounts = [1];
  func2131.paramNames = ["o"];
  func2131.definitionLine = 1512;
  func2131.definitionModule = "parser";
  var func2138 = function(argcv, var_ops) {    // method toprec(_), line 1522
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("toprec(_)", 0, numArgs - 1);
    }
    var if2139 = GraceDone;
    setLineNumber(1523);    // compilenode member
    // call case 6: other requests
    var call2140 = request(var_ops, "size", [0]);
    var opresult2141 = request(call2140, ">(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult2141)) {
      setLineNumber(1524);    // compilenode member
      // call case 6: other requests
      var call2142 = request(var_ops, "last", [0]);
      var var_o = call2142;
      setLineNumber(1525);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 2: outer request
      var call2143 = selfRequest(importedModules["parser"], "oprec(1)", [1], var_o);
      return call2143;
    }
    setLineNumber(1527);    // compilenode num
    return new GraceNum(0);
  };    // end of method toprec(_)
  this.methods["toprec(1)"] = func2138;
  func2138.methodName = "toprec(1)";
  func2138.paramCounts = [1];
  func2138.paramNames = ["ops"];
  func2138.definitionLine = 1522;
  func2138.definitionModule = "parser";
  var func2144 = function(argcv) {    // method typeexpressionrest, line 1531
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("typeexpressionrest", 0, numArgs - 0);
    }
    var if2145 = GraceDone;
    setLineNumber(1532);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2146 = request(var_sym, "isOp", [0]);
    if (Grace_isTrue(call2146)) {
      setLineNumber(1533);    // compilenode string
      var string2148 = new GraceString("type expression");
      var block2149 = new GraceBlock(this, 1533, 0);
      block2149.guard = jsTrue;
      block2149.real = function block2149() {
        setLineNumber(1533);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2150 = selfRequest(this, "typeexpression", [0]);
        return call2150;
      };
      let applyMeth2149 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2149.methodName = "apply";
      applyMeth2149.paramCounts = [0];
      applyMeth2149.paramNames = [];
      applyMeth2149.definitionLine = 1533;
      applyMeth2149.definitionModule = "parser";
      block2149.methods["apply"] = applyMeth2149;
      if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
      // call case 2: outer request
      var call2147 = selfRequest(importedModules["parser"], "expressionrest(1)recursingWith(1)blocks(1)", [1, 1, 1], string2148, block2149, var_noBlocks);
      if2145 = call2147;
    }
    return if2145;
  };    // end of method typeexpressionrest
  this.methods["typeexpressionrest"] = func2144;
  func2144.methodName = "typeexpressionrest";
  func2144.paramCounts = [0];
  func2144.paramNames = [];
  func2144.definitionLine = 1531;
  func2144.definitionModule = "parser";
  var func2151 = function(argcv) {    // method valueexpressionrest, line 1537
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("valueexpressionrest", 0, numArgs - 0);
    }
    var if2152 = GraceDone;
    setLineNumber(1538);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2153 = request(var_sym, "isOp", [0]);
    if (Grace_isTrue(call2153)) {
      setLineNumber(1539);    // compilenode string
      var string2155 = new GraceString("expression");
      var block2156 = new GraceBlock(this, 1539, 0);
      block2156.guard = jsTrue;
      block2156.real = function block2156() {
        setLineNumber(1539);    // compilenode call
        if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
        // call case 2: outer request
        var call2157 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
        return call2157;
      };
      let applyMeth2156 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2156.methodName = "apply";
      applyMeth2156.paramCounts = [0];
      applyMeth2156.paramNames = [];
      applyMeth2156.definitionLine = 1539;
      applyMeth2156.definitionModule = "parser";
      block2156.methods["apply"] = applyMeth2156;
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      // call case 2: outer request
      var call2154 = selfRequest(importedModules["parser"], "expressionrest(1)recursingWith(1)blocks(1)", [1, 1, 1], string2155, block2156, var_blocksOK);
      if2152 = call2154;
    }
    return if2152;
  };    // end of method valueexpressionrest
  this.methods["valueexpressionrest"] = func2151;
  func2151.methodName = "valueexpressionrest";
  func2151.paramCounts = [0];
  func2151.paramNames = [];
  func2151.definitionLine = 1537;
  func2151.definitionModule = "parser";
  var func2158 = function(argcv, var_name, var_recurse, var_acceptBlocks) {    // method expressionrest(_)recursingWith(_)blocks(_), line 1543
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("expressionrest(_)recursingWith(_)blocks(_)", 0, numArgs - 3);
    }
    setLineNumber(1550);    // compilenode array
    var array2160 = new GraceSequence([]);
    // call case 2: outer request
    var call2159 = selfRequest(var_prelude, "list(1)", [1], array2160);
    var var_terms = call2159;
    setLineNumber(1551);    // compilenode array
    var array2162 = new GraceSequence([]);
    // call case 2: outer request
    var call2161 = selfRequest(var_prelude, "list(1)", [1], array2162);
    var var_ops = call2161;
    setLineNumber(1552);    // compilenode vardec
    var var_o;
    setLineNumber(1553);    // compilenode vardec
    var var_o2;
    setLineNumber(1554);    // compilenode vardec
    var var_tmp2;
    setLineNumber(1555);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2163 = request(var_values, "pop", [0]);
    var var_tmp = call2163;
    setLineNumber(1556);    // compilenode call
    // call case 6: other requests
    var call2164 = request(var_terms, "push(1)", [1], var_tmp);
    setLineNumber(1557);    // compilenode vardec
    var var_prec;
    setLineNumber(1558);    // compilenode vardec
    var var_allarith = GraceTrue;
    setLineNumber(1559);    // compilenode num
    var var_opcount = new GraceNum(0);
    setLineNumber(1560);    // compilenode string
    var string2165 = new GraceString("");
    var var_opdtype = string2165;
    setLineNumber(1561);    // compilenode block
    var block2167 = new GraceBlock(this, 1561, 0);
    block2167.guard = jsTrue;
    block2167.real = function block2167() {
      setLineNumber(1562);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2168 = request(var_sym, "isOp", [0]);
      var block2169 = new GraceBlock(this, 1562, 0);
      block2169.guard = jsTrue;
      block2169.real = function block2169() {
        setLineNumber(1562);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2170 = request(var_sym, "value", [0]);
        var string2171 = new GraceString("=");
        var opresult2172 = request(call2170, "\u2260(1)", [1], string2171);
        return opresult2172;
      };
      let applyMeth2169 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2169.methodName = "apply";
      applyMeth2169.paramCounts = [0];
      applyMeth2169.paramNames = [];
      applyMeth2169.definitionLine = 1562;
      applyMeth2169.definitionModule = "parser";
      block2169.methods["apply"] = applyMeth2169;
      var opresult2173 = request(call2168, "&&(1)", [1], block2169);
      return opresult2173;
    };
    let applyMeth2167 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2167.methodName = "apply";
    applyMeth2167.paramCounts = [0];
    applyMeth2167.paramNames = [];
    applyMeth2167.definitionLine = 1561;
    applyMeth2167.definitionModule = "parser";
    block2167.methods["apply"] = applyMeth2167;
    setLineNumber(1563);    // compilenode block
    var block2174 = new GraceBlock(this, 1563, 0);
    block2174.guard = jsTrue;
    block2174.real = function block2174() {
      setLineNumber(1564);    // compilenode op
      if (var_opcount === undefined) raiseUninitializedVariable("opcount");
      var sum2175 = request(var_opcount, "+(1)", [1], new GraceNum(1));
      var_opcount = sum2175;
      setLineNumber(1565);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2176 = request(var_sym, "value", [0]);
      var_o = call2176;
      setLineNumber(1566);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2177 = selfRequest(this, "next", [0]);
      setLineNumber(1567);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2178 = selfRequest(this, "typeArgs", [0]);
      var var_oTypeArgs = call2178;
      setLineNumber(1568);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 2: outer request
      var call2179 = selfRequest(importedModules["parser"], "oprec(1)", [1], var_o);
      var_prec = call2179;
      var if2180 = GraceDone;
      setLineNumber(1569);    // compilenode op
      if (var_o === undefined) raiseUninitializedVariable("o");
      var string2181 = new GraceString("*");
      var opresult2182 = request(var_o, "\u2260(1)", [1], string2181);
      if (var_o === undefined) raiseUninitializedVariable("o");
      var string2183 = new GraceString("/");
      var opresult2184 = request(var_o, "\u2260(1)", [1], string2183);
      var opresult2185 = request(opresult2182, "&&(1)", [1], opresult2184);
      if (var_o === undefined) raiseUninitializedVariable("o");
      var string2186 = new GraceString("+");
      var opresult2187 = request(var_o, "\u2260(1)", [1], string2186);
      var opresult2188 = request(opresult2185, "&&(1)", [1], opresult2187);
      if (var_o === undefined) raiseUninitializedVariable("o");
      var string2189 = new GraceString("-");
      var opresult2190 = request(var_o, "\u2260(1)", [1], string2189);
      var opresult2191 = request(opresult2188, "&&(1)", [1], opresult2190);
      if (Grace_isTrue(opresult2191)) {
        setLineNumber(1570);    // compilenode bind
        var_allarith = GraceFalse;
        if2180 = GraceDone;
      }
      var if2192 = GraceDone;
      setLineNumber(1572);    // compilenode op
      if (var_opdtype === undefined) raiseUninitializedVariable("opdtype");
      var string2193 = new GraceString("");
      var opresult2194 = request(var_opdtype, "\u2260(1)", [1], string2193);
      if (var_opdtype === undefined) raiseUninitializedVariable("opdtype");
      if (var_o === undefined) raiseUninitializedVariable("o");
      var opresult2195 = request(var_opdtype, "\u2260(1)", [1], var_o);
      var opresult2196 = request(opresult2194, "&&(1)", [1], opresult2195);
      // call case 6: other requests
      if (var_allarith === undefined) raiseUninitializedVariable("allarith");
      var call2197 = request(var_allarith, "not", [0]);
      var opresult2198 = request(opresult2196, "&&(1)", [1], call2197);
      if (Grace_isTrue(opresult2198)) {
        setLineNumber(1576);    // compilenode array
        var array2200 = new GraceSequence([]);
        // call case 2: outer request
        var call2199 = selfRequest(var_prelude, "list(1)", [1], array2200);
        var var_suggestions = call2199;
        setLineNumber(1577);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2202 = request(var_errormessages, "suggestion", [0]);
        var call2201 = request(call2202, "new", [0]);
        var var_suggestion = call2201;
        setLineNumber(1578);    // compilenode string
        var string2204 = new GraceString(")");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2203 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2204, var_sym);
        setLineNumber(1579);    // compilenode string
        var string2206 = new GraceString("(");
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2207 = request(var_lastToken, "prev", [0]);
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2205 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string2206, call2207);
        setLineNumber(1580);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call2208 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(1581);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2210 = request(var_errormessages, "suggestion", [0]);
        var call2209 = request(call2210, "new", [0]);
        var_suggestion = call2209;
        setLineNumber(1582);    // compilenode string
        var string2212 = new GraceString(")");
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2213 = request(var_lastToken, "prev", [0]);
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2211 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2212, call2213);
        setLineNumber(1583);    // compilenode string
        var string2215 = new GraceString("(");
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2218 = request(var_lastToken, "prev", [0]);
        var call2217 = request(call2218, "prev", [0]);
        var call2216 = request(call2217, "prev", [0]);
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2214 = request(var_suggestion, "insert(1)beforeToken(1)", [1, 1], string2215, call2216);
        setLineNumber(1584);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call2219 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(1585);    // compilenode string
        var string2221 = new GraceString("an expression containing both arithmetic ");
        setLineNumber(1586);    // compilenode string
        var string2222 = new GraceString("and non-arithmetic operators requires parentheses");
        var opresult2223 = request(string2221, "++(1)", [1], string2222);
        setLineNumber(1587);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2227 = request(var_lastToken, "prev", [0]);
        var call2226 = request(call2227, "prev", [0]);
        var call2225 = request(call2226, "prev", [0]);
        var call2224 = request(call2225, "line", [0]);
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2231 = request(var_lastToken, "prev", [0]);
        var call2230 = request(call2231, "prev", [0]);
        var call2229 = request(call2230, "prev", [0]);
        var call2228 = request(call2229, "linePos", [0]);
        setLineNumber(1588);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2232 = request(var_lastToken, "linePos", [0]);
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2220 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestions(1)", [1, 3, 1], opresult2223, call2224, call2228, call2232, var_suggestions);
        if2192 = call2220;
      }
      setLineNumber(1590);    // compilenode bind
      if (var_o === undefined) raiseUninitializedVariable("o");
      var_opdtype = var_o;
      setLineNumber(1591);    // compilenode block
      var block2234 = new GraceBlock(this, 1591, 0);
      block2234.guard = jsTrue;
      block2234.real = function block2234() {
        setLineNumber(1591);    // compilenode member
        // call case 6: other requests
        if (var_ops === undefined) raiseUninitializedVariable("ops");
        var call2235 = request(var_ops, "size", [0]);
        var opresult2236 = request(call2235, ">(1)", [1], new GraceNum(0));
        if (var_prec === undefined) raiseUninitializedVariable("prec");
        if (var_ops === undefined) raiseUninitializedVariable("ops");
        // call case 2: outer request
        var call2237 = selfRequest(importedModules["parser"], "toprec(1)", [1], var_ops);
        var opresult2238 = request(var_prec, "\u2264(1)", [1], call2237);
        var opresult2239 = request(opresult2236, "&&(1)", [1], opresult2238);
        return opresult2239;
      };
      let applyMeth2234 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2234.methodName = "apply";
      applyMeth2234.paramCounts = [0];
      applyMeth2234.paramNames = [];
      applyMeth2234.definitionLine = 1591;
      applyMeth2234.definitionModule = "parser";
      block2234.methods["apply"] = applyMeth2234;
      var block2240 = new GraceBlock(this, 1591, 0);
      block2240.guard = jsTrue;
      block2240.real = function block2240() {
        setLineNumber(1597);    // compilenode member
        // call case 6: other requests
        if (var_ops === undefined) raiseUninitializedVariable("ops");
        var call2241 = request(var_ops, "pop", [0]);
        var_o2 = call2241;
        setLineNumber(1598);    // compilenode member
        // call case 6: other requests
        if (var_terms === undefined) raiseUninitializedVariable("terms");
        var call2242 = request(var_terms, "pop", [0]);
        var_tmp2 = call2242;
        setLineNumber(1599);    // compilenode member
        // call case 6: other requests
        if (var_terms === undefined) raiseUninitializedVariable("terms");
        var call2243 = request(var_terms, "pop", [0]);
        var_tmp = call2243;
        setLineNumber(1600);    // compilenode member
        // call case 6: other requests
        if (var_tmp === undefined) raiseUninitializedVariable("tmp");
        var call2245 = request(var_tmp, "line", [0]);
        // call case 6: other requests
        if (var_tmp === undefined) raiseUninitializedVariable("tmp");
        var call2246 = request(var_tmp, "linePos", [0]);
        // call case 6: other requests
        if (var_util === undefined) raiseUninitializedVariable("util");
        var call2244 = request(var_util, "setPosition(2)", [2], call2245, call2246);
        setLineNumber(1601);    // compilenode call
        if (var_o2 === undefined) raiseUninitializedVariable("o2");
        if (var_tmp === undefined) raiseUninitializedVariable("tmp");
        if (var_tmp2 === undefined) raiseUninitializedVariable("tmp2");
        // call case 6: other requests
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call2248 = request(var_ast, "opNode", [0]);
        var call2247 = request(call2248, "new(3)", [3], var_o2, var_tmp, var_tmp2);
        var_tmp = call2247;
        setLineNumber(1602);    // compilenode call
        if (var_tmp === undefined) raiseUninitializedVariable("tmp");
        // call case 6: other requests
        if (var_terms === undefined) raiseUninitializedVariable("terms");
        var call2249 = request(var_terms, "push(1)", [1], var_tmp);
        return call2249;
      };
      let applyMeth2240 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2240.methodName = "apply";
      applyMeth2240.paramCounts = [0];
      applyMeth2240.paramNames = [];
      applyMeth2240.definitionLine = 1591;
      applyMeth2240.definitionModule = "parser";
      block2240.methods["apply"] = applyMeth2240;
      // call case 2: outer request
      var call2233 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2234, block2240);
      setLineNumber(1604);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 6: other requests
      if (var_ops === undefined) raiseUninitializedVariable("ops");
      var call2250 = request(var_ops, "push(1)", [1], var_o);
      var if2251 = GraceDone;
      setLineNumber(1605);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2252 = request(var_sym, "isLParen", [0]);
      if (Grace_isTrue(call2252)) {
        setLineNumber(1612);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2253 = selfRequest(this, "next", [0]);
        var if2254 = GraceDone;
        setLineNumber(1613);    // compilenode member
        // call case 6: other requests
        // call case 2: outer request
        var call2256 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], var_recurse);
        var call2255 = request(call2256, "not", [0]);
        if (Grace_isTrue(call2255)) {
          setLineNumber(1614);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2258 = request(var_errormessages, "suggestion", [0]);
          var call2257 = request(call2258, "new", [0]);
          var var_suggestion = call2257;
          setLineNumber(1615);    // compilenode string
          var string2261 = new GraceString("rparen");
          var array2260 = new GraceSequence([string2261]);
          // call case 2: outer request
          var call2259 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2260);
          var var_nextTok = call2259;
          var if2262 = GraceDone;
          setLineNumber(1616);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult2263 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult2263)) {
            setLineNumber(1617);    // compilenode string
            var string2265 = new GraceString("\u00ab");
            var opresult2266 = request(string2265, "++(1)", [1], var_name);
            var string2267 = new GraceString("\u00bb");
            var opresult2268 = request(opresult2266, "++(1)", [1], string2267);
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2264 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult2268, var_lastToken);
            if2262 = call2264;
          } else {
            setLineNumber(1619);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call2270 = request(var_nextTok, "prev", [0]);
            var string2271 = new GraceString("\u00ab");
            var opresult2272 = request(string2271, "++(1)", [1], var_name);
            var string2273 = new GraceString("\u00bb");
            var opresult2274 = request(opresult2272, "++(1)", [1], string2273);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2269 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2270, GraceTrue, GraceFalse, opresult2274);
            if2262 = call2269;
          }
          setLineNumber(1621);    // compilenode string
          var string2276 = new GraceString("parentheses must contain a valid ");
          var opresult2277 = request(string2276, "++(1)", [1], var_name);
          var string2278 = new GraceString(".");
          var opresult2279 = request(opresult2277, "++(1)", [1], string2278);
          setLineNumber(1622);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2280 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2281 = request(var_sym, "linePos", [0]);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2275 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult2279, call2280, call2281, var_suggestion);
          if2254 = call2275;
        }
        var if2282 = GraceDone;
        setLineNumber(1624);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2283 = request(var_sym, "kind", [0]);
        var string2284 = new GraceString("rparen");
        var opresult2285 = request(call2283, "\u2260(1)", [1], string2284);
        if (Grace_isTrue(opresult2285)) {
          setLineNumber(1625);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2286 = selfRequest(this, "checkBadOperators", [0]);
          setLineNumber(1626);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2288 = request(var_errormessages, "suggestion", [0]);
          var call2287 = request(call2288, "new", [0]);
          var var_suggestion = call2287;
          setLineNumber(1627);    // compilenode string
          var string2290 = new GraceString(")");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2289 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2290, var_lastToken);
          setLineNumber(1628);    // compilenode string
          var string2292 = new GraceString("an expression beginning with a '(' must end with a ')'.");
          setLineNumber(1629);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2293 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2294 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2295 = request(var_lastToken, "size", [0]);
          var sum2296 = request(call2294, "+(1)", [1], call2295);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2291 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string2292, call2293, sum2296, var_suggestion);
          if2282 = call2291;
        }
        setLineNumber(1631);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2297 = selfRequest(this, "next", [0]);
        if2251 = call2297;
      } else {
        var if2298 = GraceDone;
        setLineNumber(1633);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2299 = request(var_sym, "isSeparator", [0]);
        if (Grace_isTrue(call2299)) {
          setLineNumber(1634);    // compilenode array
          var array2301 = new GraceSequence([]);
          // call case 2: outer request
          var call2300 = selfRequest(var_prelude, "list(1)", [1], array2301);
          var var_suggestions = call2300;
          setLineNumber(1635);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2303 = request(var_errormessages, "suggestion", [0]);
          var call2302 = request(call2303, "new", [0]);
          var var_suggestion = call2302;
          setLineNumber(1636);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2304 = request(var_suggestion, "deleteToken(1)leading(1)trailing(1)", [1, 1, 1], var_lastToken, GraceTrue, GraceFalse);
          setLineNumber(1637);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2305 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1638);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2307 = request(var_errormessages, "suggestion", [0]);
          var call2306 = request(call2307, "new", [0]);
          var_suggestion = call2306;
          setLineNumber(1639);    // compilenode string
          var string2309 = new GraceString(" \u00ab");
          var opresult2310 = request(string2309, "++(1)", [1], var_name);
          var string2311 = new GraceString("\u00bb");
          var opresult2312 = request(opresult2310, "++(1)", [1], string2311);
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2308 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult2312, var_lastToken);
          setLineNumber(1640);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2313 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1641);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2315 = request(var_errormessages, "suggestion", [0]);
          var call2314 = request(call2315, "new", [0]);
          var_suggestion = call2314;
          setLineNumber(1642);    // compilenode string
          var string2317 = new GraceString(" ");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2319 = request(var_sym, "line", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call2320 = request(var_util, "lines", [0]);
          var call2318 = request(call2320, "at(1)", [1], call2319);
          var opresult2321 = request(string2317, "++(1)", [1], call2318);
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2316 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult2321, var_lastToken);
          setLineNumber(1643);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2323 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2322 = request(var_suggestion, "deleteLine(1)", [1], call2323);
          setLineNumber(1644);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2324 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1645);    // compilenode string
          var string2326 = new GraceString("a valid expression must follow '");
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2327 = request(var_lastToken, "value", [0]);
          var opresult2328 = request(string2326, "++(1)", [1], call2327);
          var string2329 = new GraceString("'. This is often caused by a new line in the middle of an expression.");
          var opresult2330 = request(opresult2328, "++(1)", [1], string2329);
          setLineNumber(1646);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2331 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2332 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2333 = request(var_lastToken, "size", [0]);
          var sum2334 = request(call2332, "+(1)", [1], call2333);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2325 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult2330, call2331, sum2334, var_suggestions);
          if2298 = call2325;
        }
        var if2335 = GraceDone;
        setLineNumber(1648);    // compilenode block
        var block2337 = new GraceBlock(this, 1648, 0);
        block2337.guard = jsTrue;
        block2337.real = function block2337() {
          setLineNumber(1648);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2338 = selfRequest(this, "term", [0]);
          return call2338;
        };
        let applyMeth2337 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2337.methodName = "apply";
        applyMeth2337.paramCounts = [0];
        applyMeth2337.paramNames = [];
        applyMeth2337.definitionLine = 1648;
        applyMeth2337.definitionModule = "parser";
        block2337.methods["apply"] = applyMeth2337;
        // call case 2: outer request
        var call2336 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block2337);
        if (Grace_isTrue(call2336)) {
          setLineNumber(1649);    // compilenode array
          var array2340 = new GraceSequence([]);
          // call case 2: outer request
          var call2339 = selfRequest(var_prelude, "list(1)", [1], array2340);
          var var_suggestions = call2339;
          setLineNumber(1650);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2342 = request(var_errormessages, "suggestion", [0]);
          var call2341 = request(call2342, "new", [0]);
          var var_suggestion = call2341;
          setLineNumber(1651);    // compilenode string
          var string2345 = new GraceString("comma");
          var string2346 = new GraceString("rparen");
          var string2347 = new GraceString("rsquare");
          var string2348 = new GraceString("rbrace");
          var array2344 = new GraceSequence([string2345, string2346, string2347, string2348]);
          // call case 2: outer request
          var call2343 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2344);
          var var_nextTok = call2343;
          var if2349 = GraceDone;
          setLineNumber(1652);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult2350 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult2350)) {
            setLineNumber(1653);    // compilenode string
            var string2352 = new GraceString(" \u00ab");
            var opresult2353 = request(string2352, "++(1)", [1], var_name);
            var string2354 = new GraceString("\u00bb");
            var opresult2355 = request(opresult2353, "++(1)", [1], string2354);
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2351 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult2355, var_lastToken);
            if2349 = call2351;
          } else {
            setLineNumber(1655);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call2357 = request(var_nextTok, "prev", [0]);
            var string2358 = new GraceString(" \u00ab");
            var opresult2359 = request(string2358, "++(1)", [1], var_name);
            var string2360 = new GraceString("\u00bb");
            var opresult2361 = request(opresult2359, "++(1)", [1], string2360);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2356 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2357, GraceTrue, GraceFalse, opresult2361);
            if2349 = call2356;
          }
          setLineNumber(1657);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2362 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1658);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2364 = request(var_errormessages, "suggestion", [0]);
          var call2363 = request(call2364, "new", [0]);
          var_suggestion = call2363;
          setLineNumber(1659);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call2366 = request(var_nextTok, "prev", [0]);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2365 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call2366, GraceTrue, GraceFalse);
          setLineNumber(1660);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2367 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1661);    // compilenode string
          var string2369 = new GraceString("a valid ");
          var opresult2370 = request(string2369, "++(1)", [1], var_name);
          var string2371 = new GraceString(" must follow '");
          var opresult2372 = request(opresult2370, "++(1)", [1], string2371);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2373 = request(var_lastToken, "value", [0]);
          var opresult2374 = request(opresult2372, "++(1)", [1], call2373);
          var string2375 = new GraceString("'. This is often caused by a new line in the middle of an expression.");
          var opresult2376 = request(opresult2374, "++(1)", [1], string2375);
          setLineNumber(1662);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2377 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2378 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2379 = request(var_lastToken, "size", [0]);
          var sum2380 = request(call2378, "+(1)", [1], call2379);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2368 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult2376, call2377, sum2380, var_suggestions);
          if2335 = call2368;
        }
        if2251 = if2335;
      }
      setLineNumber(1670);    // compilenode call
      // call case 2: outer request
      var call2381 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_acceptBlocks);
      setLineNumber(1671);    // compilenode call
      // call case 2: outer request
      var call2382 = selfRequest(importedModules["parser"], "callrest(1)", [1], var_acceptBlocks);
      setLineNumber(1672);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2383 = request(var_values, "pop", [0]);
      var_tmp = call2383;
      setLineNumber(1673);    // compilenode call
      if (var_tmp === undefined) raiseUninitializedVariable("tmp");
      // call case 6: other requests
      if (var_terms === undefined) raiseUninitializedVariable("terms");
      var call2384 = request(var_terms, "push(1)", [1], var_tmp);
      return call2384;
    };
    let applyMeth2174 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2174.methodName = "apply";
    applyMeth2174.paramCounts = [0];
    applyMeth2174.paramNames = [];
    applyMeth2174.definitionLine = 1563;
    applyMeth2174.definitionModule = "parser";
    block2174.methods["apply"] = applyMeth2174;
    // call case 2: outer request
    var call2166 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2167, block2174);
    setLineNumber(1675);    // compilenode block
    var block2386 = new GraceBlock(this, 1675, 0);
    block2386.guard = jsTrue;
    block2386.real = function block2386() {
      setLineNumber(1675);    // compilenode member
      // call case 6: other requests
      if (var_ops === undefined) raiseUninitializedVariable("ops");
      var call2387 = request(var_ops, "size", [0]);
      var opresult2388 = request(call2387, ">(1)", [1], new GraceNum(0));
      return opresult2388;
    };
    let applyMeth2386 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2386.methodName = "apply";
    applyMeth2386.paramCounts = [0];
    applyMeth2386.paramNames = [];
    applyMeth2386.definitionLine = 1675;
    applyMeth2386.definitionModule = "parser";
    block2386.methods["apply"] = applyMeth2386;
    var block2389 = new GraceBlock(this, 1675, 0);
    block2389.guard = jsTrue;
    block2389.real = function block2389() {
      setLineNumber(1677);    // compilenode member
      // call case 6: other requests
      if (var_ops === undefined) raiseUninitializedVariable("ops");
      var call2390 = request(var_ops, "pop", [0]);
      var_o = call2390;
      setLineNumber(1678);    // compilenode member
      // call case 6: other requests
      if (var_terms === undefined) raiseUninitializedVariable("terms");
      var call2391 = request(var_terms, "pop", [0]);
      var_tmp2 = call2391;
      setLineNumber(1679);    // compilenode member
      // call case 6: other requests
      if (var_terms === undefined) raiseUninitializedVariable("terms");
      var call2392 = request(var_terms, "pop", [0]);
      var_tmp = call2392;
      setLineNumber(1680);    // compilenode member
      // call case 6: other requests
      if (var_tmp === undefined) raiseUninitializedVariable("tmp");
      var call2394 = request(var_tmp, "line", [0]);
      // call case 6: other requests
      if (var_tmp === undefined) raiseUninitializedVariable("tmp");
      var call2395 = request(var_tmp, "linePos", [0]);
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call2393 = request(var_util, "setPosition(2)", [2], call2394, call2395);
      setLineNumber(1681);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      if (var_tmp === undefined) raiseUninitializedVariable("tmp");
      if (var_tmp2 === undefined) raiseUninitializedVariable("tmp2");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2397 = request(var_ast, "opNode", [0]);
      var call2396 = request(call2397, "new(3)", [3], var_o, var_tmp, var_tmp2);
      var_tmp = call2396;
      setLineNumber(1682);    // compilenode call
      if (var_tmp === undefined) raiseUninitializedVariable("tmp");
      // call case 6: other requests
      if (var_terms === undefined) raiseUninitializedVariable("terms");
      var call2398 = request(var_terms, "push(1)", [1], var_tmp);
      return call2398;
    };
    let applyMeth2389 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2389.methodName = "apply";
    applyMeth2389.paramCounts = [0];
    applyMeth2389.paramNames = [];
    applyMeth2389.definitionLine = 1675;
    applyMeth2389.definitionModule = "parser";
    block2389.methods["apply"] = applyMeth2389;
    // call case 2: outer request
    var call2385 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2386, block2389);
    setLineNumber(1684);    // compilenode member
    // call case 6: other requests
    var call2399 = request(var_terms, "pop", [0]);
    var_tmp = call2399;
    setLineNumber(1685);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2400 = request(var_values, "push(1)", [1], var_tmp);
    var if2401 = GraceDone;
    setLineNumber(1686);    // compilenode member
    // call case 6: other requests
    var call2402 = request(var_terms, "size", [0]);
    var opresult2403 = request(call2402, ">(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult2403)) {
      setLineNumber(1687);    // compilenode string
      var string2405 = new GraceString("values left on term stack.");
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2406 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2407 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call2404 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], string2405, call2406, call2407);
      if2401 = call2404;
    }
    return if2401;
  };    // end of method expressionrest(_)recursingWith(_)blocks(_)
  this.methods["expressionrest(1)recursingWith(1)blocks(1)"] = func2158;
  func2158.methodName = "expressionrest(1)recursingWith(1)blocks(1)";
  func2158.paramCounts = [1, 1, 1];
  func2158.paramNames = ["name", "recurse", "acceptBlocks"];
  func2158.definitionLine = 1543;
  func2158.definitionModule = "parser";
  var func2408 = function(argcv, var_acceptBlocks) {    // method dotrest(_), line 1691
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("dotrest(_)", 0, numArgs - 1);
    }
    var if2409 = GraceDone;
    setLineNumber(1698);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2410 = request(var_sym, "isDot", [0]);
    if (Grace_isTrue(call2410)) {
      setLineNumber(1699);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2412 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2413 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call2411 = request(var_util, "setPosition(2)", [2], call2412, call2413);
      setLineNumber(1700);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2414 = request(var_values, "pop", [0]);
      var var_receiver = call2414;
      setLineNumber(1701);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2415 = selfRequest(this, "next", [0]);
      var if2416 = GraceDone;
      setLineNumber(1702);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2417 = request(var_sym, "isIdentifier", [0]);
      if (Grace_isTrue(call2417)) {
        setLineNumber(1703);    // compilenode call
        if (var_receiver === undefined) raiseUninitializedVariable("receiver");
        // call case 6: other requests
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2420 = request(var_sym, "value", [0]);
        if (var_receiver === undefined) raiseUninitializedVariable("receiver");
        // call case 6: other requests
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call2421 = request(var_ast, "memberNode", [0]);
        var call2419 = request(call2421, "new(2)", [2], call2420, var_receiver);
        var call2418 = request(call2419, "setPositionFrom(1)", [1], var_receiver);
        var var_dro = call2418;
        setLineNumber(1705);    // compilenode call
        if (var_dro === undefined) raiseUninitializedVariable("dro");
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2422 = request(var_values, "push(1)", [1], var_dro);
        setLineNumber(1706);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2423 = selfRequest(this, "next", [0]);
        var if2424 = GraceDone;
        setLineNumber(1707);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2425 = request(var_sym, "isDot", [0]);
        if (Grace_isTrue(call2425)) {
          setLineNumber(1708);    // compilenode call
          // call case 2: outer request
          var call2426 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_acceptBlocks);
          if2424 = call2426;
        } else {
          var if2427 = GraceDone;
          setLineNumber(1709);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2428 = request(var_sym, "isLGeneric", [0]);
          if (Grace_isTrue(call2428)) {
            setLineNumber(1710);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2430 = selfRequest(this, "typeArgs", [0]);
            // call case 6: other requests
            if (var_dro === undefined) raiseUninitializedVariable("dro");
            var call2429 = request(var_dro, "generics:=(1)", [1], call2430);
            if2427 = call2429;
          }
          if2424 = if2427;
        }
        var if2431 = GraceDone;
        setLineNumber(1712);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2432 = request(var_sym, "isLParen", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2433 = request(var_sym, "isLBrace", [0]);
        var opresult2434 = request(var_acceptBlocks, "&&(1)", [1], call2433);
        var opresult2435 = request(call2432, "||(1)", [1], opresult2434);
        setLineNumber(1713);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2436 = request(var_sym, "isNum", [0]);
        var opresult2437 = request(opresult2435, "||(1)", [1], call2436);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2438 = request(var_sym, "isString", [0]);
        var opresult2439 = request(opresult2437, "||(1)", [1], call2438);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2440 = request(var_sym, "isLSquare", [0]);
        var opresult2441 = request(opresult2439, "||(1)", [1], call2440);
        if (Grace_isTrue(opresult2441)) {
          setLineNumber(1714);    // compilenode call
          // call case 2: outer request
          var call2442 = selfRequest(importedModules["parser"], "callrest(1)", [1], var_acceptBlocks);
          if2431 = call2442;
        }
        if2416 = if2431;
      } else {
        setLineNumber(1717);    // compilenode array
        var array2444 = new GraceSequence([]);
        // call case 2: outer request
        var call2443 = selfRequest(var_prelude, "list(1)", [1], array2444);
        var var_suggestions = call2443;
        setLineNumber(1718);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2446 = request(var_errormessages, "suggestion", [0]);
        var call2445 = request(call2446, "new", [0]);
        var var_suggestion = call2445;
        setLineNumber(1719);    // compilenode call
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2447 = request(var_suggestion, "deleteToken(1)", [1], var_lastToken);
        setLineNumber(1720);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call2448 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(1721);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2450 = request(var_errormessages, "suggestion", [0]);
        var call2449 = request(call2450, "new", [0]);
        var_suggestion = call2449;
        setLineNumber(1722);    // compilenode string
        var string2452 = new GraceString("\u00abmethod name\u00bb");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2451 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2452, var_lastToken);
        setLineNumber(1723);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call2453 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(1724);    // compilenode string
        var string2455 = new GraceString("a field or method name must follow a '.'.");
        setLineNumber(1725);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2456 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2457 = request(var_sym, "linePos", [0]);
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2454 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string2455, call2456, call2457, var_suggestions);
        if2416 = call2454;
      }
      if2409 = if2416;
    }
    return if2409;
  };    // end of method dotrest(_)
  this.methods["dotrest(1)"] = func2408;
  func2408.methodName = "dotrest(1)";
  func2408.paramCounts = [1];
  func2408.paramNames = ["acceptBlocks"];
  func2408.definitionLine = 1691;
  func2408.definitionModule = "parser";
  var func2458 = function(argcv, var_acceptBlocks) {    // method callrest(_), line 1730
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("callrest(_)", 0, numArgs - 1);
    }
    var if2459 = GraceDone;
    setLineNumber(1742);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2460 = request(var_values, "size", [0]);
    var opresult2461 = request(call2460, "==(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult2461)) {
      setLineNumber(1743);    // compilenode return
      return var_done;
    }
    setLineNumber(1745);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2462 = request(var_values, "pop", [0]);
    var var_meth = call2462;
    var if2463 = GraceDone;
    setLineNumber(1746);    // compilenode member
    // call case 6: other requests
    var call2464 = request(var_meth, "kind", [0]);
    var string2465 = new GraceString("identifier");
    var opresult2466 = request(call2464, "\u2260(1)", [1], string2465);
    if (Grace_isTrue(opresult2466)) {
      var if2467 = GraceDone;
      setLineNumber(1747);    // compilenode member
      // call case 6: other requests
      if (var_meth === undefined) raiseUninitializedVariable("meth");
      var call2468 = request(var_meth, "kind", [0]);
      var string2469 = new GraceString("member");
      var opresult2470 = request(call2468, "\u2260(1)", [1], string2469);
      if (Grace_isTrue(opresult2470)) {
        setLineNumber(1748);    // compilenode call
        if (var_meth === undefined) raiseUninitializedVariable("meth");
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2471 = request(var_values, "push(1)", [1], var_meth);
        setLineNumber(1749);    // compilenode return
        return var_done;
      }
      if2463 = if2467;
    }
    setLineNumber(1752);    // compilenode member
    // call case 6: other requests
    var call2472 = request(var_meth, "line", [0]);
    var var_lnum = call2472;
    setLineNumber(1753);    // compilenode member
    // call case 6: other requests
    var call2473 = request(var_meth, "linePos", [0]);
    var var_lpos = call2473;
    setLineNumber(1754);    // compilenode member
    // call case 6: other requests
    var call2474 = request(var_meth, "nameString", [0]);
    var var_methn = call2474;
    setLineNumber(1755);    // compilenode array
    var array2476 = new GraceSequence([]);
    // call case 2: outer request
    var call2475 = selfRequest(var_prelude, "list(1)", [1], array2476);
    var var_argumentParts = call2475;
    setLineNumber(1756);    // compilenode call
    // call case 6: other requests
    var array2480 = new GraceSequence([]);
    // call case 2: outer request
    var call2479 = selfRequest(var_prelude, "list(1)", [1], array2480);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call2481 = request(var_ast, "requestPart", [0]);
    var call2478 = request(call2481, "request(1)withArgs(1)", [1, 1], var_methn, call2479);
    var call2477 = request(call2478, "setPositionFrom(1)", [1], var_meth);
    var var_part = call2477;
    setLineNumber(1757);    // compilenode call
    // call case 6: other requests
    var call2482 = request(var_argumentParts, "push(1)", [1], var_part);
    setLineNumber(1758);    // compilenode vardec
    var var_foundArgs = GraceFalse;
    setLineNumber(1759);    // compilenode vardec
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var var_tok = var_lastToken;
    setLineNumber(1760);    // compilenode vardec
    var var_genericIdents = GraceFalse;
    setLineNumber(1761);    // compilenode member
    // call case 6: other requests
    var call2483 = request(var_meth, "generics", [0]);
    var var_g = call2483;
    var if2484 = GraceDone;
    setLineNumber(1765);    // compilenode op
    var opresult2485 = request(GraceFalse, "==(1)", [1], var_g);
    if (Grace_isTrue(opresult2485)) {
      var if2486 = GraceDone;
      setLineNumber(1766);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2487 = request(var_sym, "isLGeneric", [0]);
      if (Grace_isTrue(call2487)) {
        setLineNumber(1767);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2488 = selfRequest(this, "typeArgs", [0]);
        var_genericIdents = call2488;
        if2486 = GraceDone;
      }
      if2484 = if2486;
    } else {
      setLineNumber(1770);    // compilenode bind
      if (var_g === undefined) raiseUninitializedVariable("g");
      var_genericIdents = var_g;
      if2484 = GraceDone;
    }
    setLineNumber(1772);    // compilenode call
    // call case 2: outer request
    var call2489 = selfRequest(importedModules["parser"], "parseArgumentsFor(1)into(1)acceptBlocks(1)", [1, 1, 1], var_meth, var_part, var_acceptBlocks);
    var_foundArgs = call2489;
    var if2490 = GraceDone;
    setLineNumber(1774);    // compilenode if
    if (Grace_isTrue(var_foundArgs)) {
      var if2491 = GraceDone;
      setLineNumber(1775);    // compilenode member
      // call case 6: other requests
      if (var_meth === undefined) raiseUninitializedVariable("meth");
      var call2492 = request(var_meth, "isIdentifier", [0]);
      if (Grace_isTrue(call2492)) {
        setLineNumber(1776);    // compilenode call
        if (var_meth === undefined) raiseUninitializedVariable("meth");
        // call case 6: other requests
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call2494 = request(var_ast, "implicit", [0]);
        var call2493 = request(call2494, "setPositionFrom(1)", [1], var_meth);
        if2491 = call2493;
      } else {
        setLineNumber(1778);    // compilenode member
        // call case 6: other requests
        if (var_meth === undefined) raiseUninitializedVariable("meth");
        var call2495 = request(var_meth, "receiver", [0]);
        if2491 = call2495;
      }
      var var_realRcvr = if2491;
      setLineNumber(1780);    // compilenode call
      if (var_realRcvr === undefined) raiseUninitializedVariable("realRcvr");
      // call case 6: other requests
      if (var_realRcvr === undefined) raiseUninitializedVariable("realRcvr");
      if (var_argumentParts === undefined) raiseUninitializedVariable("argumentParts");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2498 = request(var_ast, "callNode", [0]);
      var call2497 = request(call2498, "new(2)", [2], var_realRcvr, var_argumentParts);
      var call2496 = request(call2497, "setPositionFrom(1)", [1], var_realRcvr);
      var_meth = call2496;
      setLineNumber(1782);    // compilenode block
      var block2500 = new GraceBlock(this, 1782, 0);
      block2500.guard = jsTrue;
      block2500.real = function block2500() {
        setLineNumber(1782);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2501 = request(var_sym, "isIdentifier", [0]);
        return call2501;
      };
      let applyMeth2500 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2500.methodName = "apply";
      applyMeth2500.paramCounts = [0];
      applyMeth2500.paramNames = [];
      applyMeth2500.definitionLine = 1782;
      applyMeth2500.definitionModule = "parser";
      block2500.methods["apply"] = applyMeth2500;
      var block2502 = new GraceBlock(this, 1782, 0);
      block2502.guard = jsTrue;
      block2502.real = function block2502() {
        setLineNumber(1784);    // compilenode array
        var array2504 = new GraceSequence([]);
        // call case 2: outer request
        var call2503 = selfRequest(var_prelude, "list(1)", [1], array2504);
        var var_argList = call2503;
        setLineNumber(1785);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        // call case 6: other requests
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2507 = request(var_sym, "value", [0]);
        if (var_argList === undefined) raiseUninitializedVariable("argList");
        // call case 6: other requests
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call2508 = request(var_ast, "requestPart", [0]);
        var call2506 = request(call2508, "request(1)withArgs(1)", [1, 1], call2507, var_argList);
        var call2505 = request(call2506, "setPositionFrom(1)", [1], var_sym);
        var var_namePart = call2505;
        setLineNumber(1786);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2509 = selfRequest(this, "next", [0]);
        setLineNumber(1787);    // compilenode call
        if (var_meth === undefined) raiseUninitializedVariable("meth");
        if (var_namePart === undefined) raiseUninitializedVariable("namePart");
        // call case 2: outer request
        var call2510 = selfRequest(importedModules["parser"], "parseArgumentsFor(1)into(1)acceptBlocks(1)", [1, 1, 1], var_meth, var_namePart, var_acceptBlocks);
        var var_argsFound = call2510;
        var if2511 = GraceDone;
        setLineNumber(1788);    // compilenode member
        // call case 6: other requests
        if (var_argsFound === undefined) raiseUninitializedVariable("argsFound");
        var call2512 = request(var_argsFound, "not", [0]);
        if (Grace_isTrue(call2512)) {
          setLineNumber(1789);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2514 = request(var_errormessages, "suggestion", [0]);
          var call2513 = request(call2514, "new", [0]);
          var var_suggestion = call2513;
          setLineNumber(1790);    // compilenode string
          var string2516 = new GraceString("(\u2039expression\u203a)");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2515 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2516, var_lastToken);
          var if2517 = GraceDone;
          setLineNumber(1791);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2518 = selfRequest(this, "isOnAContinationLine", [0]);
          if (Grace_isTrue(call2518)) {
            setLineNumber(1792);    // compilenode string
            var string2519 = new GraceString("  The indentation tells me that this is a continuation of");
            setLineNumber(1793);    // compilenode string
            var string2520 = new GraceString(" the previous line; is that what you intended?");
            var opresult2521 = request(string2519, "++(1)", [1], string2520);
            if2517 = opresult2521;
          } else {
            setLineNumber(1794);    // compilenode string
            var string2522 = new GraceString("");
            if2517 = string2522;
          }
          var var_more = if2517;
          setLineNumber(1795);    // compilenode call
          if (var_lnum === undefined) raiseUninitializedVariable("lnum");
          if (var_lpos === undefined) raiseUninitializedVariable("lpos");
          // call case 6: other requests
          if (var_ast === undefined) raiseUninitializedVariable("ast");
          var call2523 = request(var_ast, "line(1)column(1)", [1, 1], var_lnum, var_lpos);
          var var_reqStart = call2523;
          setLineNumber(1796);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2525 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2526 = request(var_lastToken, "endPos", [0]);
          // call case 6: other requests
          if (var_ast === undefined) raiseUninitializedVariable("ast");
          var call2524 = request(var_ast, "line(1)column(1)", [1, 1], call2525, call2526);
          var var_reqEnd = call2524;
          setLineNumber(1797);    // compilenode call
          if (var_reqStart === undefined) raiseUninitializedVariable("reqStart");
          if (var_reqEnd === undefined) raiseUninitializedVariable("reqEnd");
          // call case 6: other requests
          if (var_ast === undefined) raiseUninitializedVariable("ast");
          var call2527 = request(var_ast, "start(1)end(1)", [1, 1], var_reqStart, var_reqEnd);
          var var_reqRange = call2527;
          setLineNumber(1798);    // compilenode string
          var string2529 = new GraceString("a multi-part method request must end with an argument list,");
          setLineNumber(1799);    // compilenode string
          var string2530 = new GraceString(" either parenthesized or self-delimiting.");
          var opresult2531 = request(string2529, "++(1)", [1], string2530);
          if (var_more === undefined) raiseUninitializedVariable("more");
          var opresult2532 = request(opresult2531, "++(1)", [1], var_more);
          if (var_reqRange === undefined) raiseUninitializedVariable("reqRange");
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2528 = request(var_errormessages, "syntaxError(1)atRange(1)withSuggestion(1)", [1, 1, 1], opresult2532, var_reqRange, var_suggestion);
          if2511 = call2528;
        }
        setLineNumber(1802);    // compilenode call
        if (var_namePart === undefined) raiseUninitializedVariable("namePart");
        // call case 6: other requests
        if (var_argumentParts === undefined) raiseUninitializedVariable("argumentParts");
        var call2533 = request(var_argumentParts, "addLast(1)", [1], var_namePart);
        return call2533;
      };
      let applyMeth2502 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2502.methodName = "apply";
      applyMeth2502.paramCounts = [0];
      applyMeth2502.paramNames = [];
      applyMeth2502.definitionLine = 1782;
      applyMeth2502.definitionModule = "parser";
      block2502.methods["apply"] = applyMeth2502;
      // call case 2: outer request
      var call2499 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2500, block2502);
      setLineNumber(1804);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2536 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2537 = request(var_lastToken, "endPos", [0]);
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2535 = request(var_ast, "line(1)column(1)", [1, 1], call2536, call2537);
      // call case 6: other requests
      if (var_meth === undefined) raiseUninitializedVariable("meth");
      var call2534 = request(var_meth, "end:=(1)", [1], call2535);
      if2490 = call2534;
    }
    setLineNumber(1808);    // compilenode call
    // call case 6: other requests
    var call2538 = request(var_meth, "generics:=(1)", [1], var_genericIdents);
    setLineNumber(1809);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call2539 = request(var_values, "push(1)", [1], var_meth);
    setLineNumber(1810);    // compilenode call
    // call case 2: outer request
    var call2540 = selfRequest(importedModules["parser"], "dotrest(1)", [1], var_acceptBlocks);
    return call2540;
  };    // end of method callrest(_)
  this.methods["callrest(1)"] = func2458;
  func2458.methodName = "callrest(1)";
  func2458.paramCounts = [1];
  func2458.paramNames = ["acceptBlocks"];
  func2458.definitionLine = 1730;
  func2458.definitionModule = "parser";
  var func2541 = function(argcv, var_meth, var_part, var_acceptBlocks) {    // method parseArgumentsFor(_)into(_)acceptBlocks(_), line 1813
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("parseArgumentsFor(_)into(_)acceptBlocks(_)", 0, numArgs - 3);
    }
    setLineNumber(1820);    // compilenode vardec
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var var_tok = var_lastToken;
    var if2542 = GraceDone;
    setLineNumber(1821);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2543 = request(var_sym, "isLParen", [0]);
    if (Grace_isTrue(call2543)) {
      setLineNumber(1822);    // compilenode bind
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var_tok = var_sym;
      setLineNumber(1823);    // compilenode call
      if (var_tok === undefined) raiseUninitializedVariable("tok");
      // call case 2: outer request
      var call2544 = selfRequest(importedModules["parser"], "parenthesizedArgs(1)startingWith(1)", [1, 1], var_part, var_tok);
      if2542 = GraceTrue;
    } else {
      var if2545 = GraceDone;
      setLineNumber(1825);    // compilenode member
      // call case 6: other requests
      var call2546 = request(var_acceptBlocks, "not", [0]);
      var block2547 = new GraceBlock(this, 1825, 0);
      block2547.guard = jsTrue;
      block2547.real = function block2547() {
        setLineNumber(1825);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2548 = request(var_sym, "isLBrace", [0]);
        return call2548;
      };
      let applyMeth2547 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2547.methodName = "apply";
      applyMeth2547.paramCounts = [0];
      applyMeth2547.paramNames = [];
      applyMeth2547.definitionLine = 1825;
      applyMeth2547.definitionModule = "parser";
      block2547.methods["apply"] = applyMeth2547;
      var opresult2549 = request(call2546, "&&(1)", [1], block2547);
      if (Grace_isTrue(opresult2549)) {
        if2545 = GraceFalse;
      } else {
        var if2550 = GraceDone;
        setLineNumber(1827);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2551 = selfRequest(this, "acceptArgument", [0]);
        if (Grace_isTrue(call2551)) {
          setLineNumber(1828);    // compilenode bind
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var_tok = var_sym;
          setLineNumber(1829);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2552 = selfRequest(this, "term", [0]);
          setLineNumber(1830);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call2554 = request(var_values, "pop", [0]);
          // call case 6: other requests
          // call case 6: other requests
          var call2555 = request(var_part, "args", [0]);
          var call2553 = request(call2555, "push(1)", [1], call2554);
          if2550 = GraceTrue;
        } else {
          if2550 = GraceFalse;
        }
        if2545 = if2550;
      }
      if2542 = if2545;
    }
    return if2542;
  };    // end of method parseArgumentsFor(_)into(_)acceptBlocks(_)
  this.methods["parseArgumentsFor(1)into(1)acceptBlocks(1)"] = func2541;
  func2541.methodName = "parseArgumentsFor(1)into(1)acceptBlocks(1)";
  func2541.paramCounts = [1, 1, 1];
  func2541.paramNames = ["meth", "part", "acceptBlocks"];
  func2541.definitionLine = 1813;
  func2541.definitionModule = "parser";
  var func2556 = function(argcv, var_part, var_tok) {    // method parenthesizedArgs(_)startingWith(_), line 1837
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("parenthesizedArgs(_)startingWith(_)", 0, numArgs - 2);
    }
    setLineNumber(1838);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call2557 = selfRequest(this, "next", [0]);
    var if2558 = GraceDone;
    setLineNumber(1839);    // compilenode block
    var block2560 = new GraceBlock(this, 1839, 0);
    block2560.guard = jsTrue;
    block2560.real = function block2560() {
      setLineNumber(1839);    // compilenode call
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      // call case 2: outer request
      var call2561 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
      return call2561;
    };
    let applyMeth2560 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2560.methodName = "apply";
    applyMeth2560.paramCounts = [0];
    applyMeth2560.paramNames = [];
    applyMeth2560.definitionLine = 1839;
    applyMeth2560.definitionModule = "parser";
    block2560.methods["apply"] = applyMeth2560;
    // call case 2: outer request
    var call2559 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block2560);
    if (Grace_isTrue(call2559)) {
      setLineNumber(1840);    // compilenode block
      var block2563 = new GraceBlock(this, 1840, 0);
      block2563.guard = jsTrue;
      block2563.real = function block2563() {
        setLineNumber(1840);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2564 = request(var_sym, "isComma", [0]);
        return call2564;
      };
      let applyMeth2563 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2563.methodName = "apply";
      applyMeth2563.paramCounts = [0];
      applyMeth2563.paramNames = [];
      applyMeth2563.definitionLine = 1840;
      applyMeth2563.definitionModule = "parser";
      block2563.methods["apply"] = applyMeth2563;
      var block2565 = new GraceBlock(this, 1840, 0);
      block2565.guard = jsTrue;
      block2565.real = function block2565() {
        setLineNumber(1841);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2567 = request(var_values, "pop", [0]);
        // call case 6: other requests
        // call case 6: other requests
        var call2568 = request(var_part, "args", [0]);
        var call2566 = request(call2568, "push(1)", [1], call2567);
        setLineNumber(1842);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2569 = selfRequest(this, "next", [0]);
        var if2570 = GraceDone;
        setLineNumber(1843);    // compilenode block
        var block2572 = new GraceBlock(this, 1843, 0);
        block2572.guard = jsTrue;
        block2572.real = function block2572() {
          setLineNumber(1843);    // compilenode call
          if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
          // call case 2: outer request
          var call2573 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
          return call2573;
        };
        let applyMeth2572 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2572.methodName = "apply";
        applyMeth2572.paramCounts = [0];
        applyMeth2572.paramNames = [];
        applyMeth2572.definitionLine = 1843;
        applyMeth2572.definitionModule = "parser";
        block2572.methods["apply"] = applyMeth2572;
        // call case 2: outer request
        var call2571 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block2572);
        if (Grace_isTrue(call2571)) {
          setLineNumber(1844);    // compilenode array
          var array2575 = new GraceSequence([]);
          // call case 2: outer request
          var call2574 = selfRequest(var_prelude, "list(1)", [1], array2575);
          var var_suggestions = call2574;
          setLineNumber(1845);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2577 = request(var_errormessages, "suggestion", [0]);
          var call2576 = request(call2577, "new", [0]);
          var var_suggestion = call2576;
          setLineNumber(1846);    // compilenode string
          var string2580 = new GraceString("rparen");
          var array2579 = new GraceSequence([string2580]);
          // call case 2: outer request
          var call2578 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2579);
          var var_nextTok = call2578;
          var if2581 = GraceDone;
          setLineNumber(1847);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult2582 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult2582)) {
            setLineNumber(1848);    // compilenode string
            var string2584 = new GraceString(" \u00abexpression\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2583 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2584, var_lastToken);
            if2581 = call2583;
          } else {
            setLineNumber(1850);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call2586 = request(var_nextTok, "prev", [0]);
            setLineNumber(1851);    // compilenode string
            var string2587 = new GraceString(" \u00abexpression\u00bb");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2585 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2586, GraceTrue, GraceFalse, string2587);
            if2581 = call2585;
          }
          setLineNumber(1853);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2588 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1854);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2590 = request(var_errormessages, "suggestion", [0]);
          var call2589 = request(call2590, "new", [0]);
          var_suggestion = call2589;
          setLineNumber(1855);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call2592 = request(var_nextTok, "prev", [0]);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2591 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call2592, GraceTrue, GraceFalse);
          setLineNumber(1856);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2593 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(1857);    // compilenode string
          var string2595 = new GraceString("an argument list must have an expression after a ','.");
          setLineNumber(1858);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2596 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2597 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2594 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string2595, call2596, call2597, var_suggestions);
          if2570 = call2594;
        }
        return if2570;
      };
      let applyMeth2565 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2565.methodName = "apply";
      applyMeth2565.paramCounts = [0];
      applyMeth2565.paramNames = [];
      applyMeth2565.definitionLine = 1840;
      applyMeth2565.definitionModule = "parser";
      block2565.methods["apply"] = applyMeth2565;
      // call case 2: outer request
      var call2562 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2563, block2565);
      setLineNumber(1862);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2599 = request(var_values, "pop", [0]);
      // call case 6: other requests
      // call case 6: other requests
      var call2600 = request(var_part, "args", [0]);
      var call2598 = request(call2600, "push(1)", [1], call2599);
      if2558 = call2598;
    }
    var if2601 = GraceDone;
    setLineNumber(1864);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2602 = request(var_sym, "kind", [0]);
    var string2603 = new GraceString("rparen");
    var opresult2604 = request(call2602, "\u2260(1)", [1], string2603);
    if (Grace_isTrue(opresult2604)) {
      setLineNumber(1865);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2605 = selfRequest(this, "checkBadOperators", [0]);
      setLineNumber(1866);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call2607 = request(var_errormessages, "suggestion", [0]);
      var call2606 = request(call2607, "new", [0]);
      var var_suggestion = call2606;
      setLineNumber(1867);    // compilenode string
      var string2609 = new GraceString(")");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call2608 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2609, var_lastToken);
      setLineNumber(1868);    // compilenode member
      // call case 6: other requests
      var call2612 = request(var_tok, "line", [0]);
      // call case 6: other requests
      var call2613 = request(var_tok, "linePos", [0]);
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2611 = request(var_ast, "line(1)column(1)", [1, 1], call2612, call2613);
      setLineNumber(1869);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2615 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2616 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2617 = request(var_lastToken, "size", [0]);
      var sum2618 = request(call2616, "+(1)", [1], call2617);
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2614 = request(var_ast, "line(1)column(1)", [1, 1], call2615, sum2618);
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2610 = request(var_ast, "start(1)end(1)", [1, 1], call2611, call2614);
      var var_rng = call2610;
      setLineNumber(1870);    // compilenode string
      var string2620 = new GraceString("an argument list beginning with a '(' must end with a ')'.");
      if (var_rng === undefined) raiseUninitializedVariable("rng");
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call2619 = request(var_errormessages, "syntaxError(1)atRange(1)withSuggestion(1)", [1, 1, 1], string2620, var_rng, var_suggestion);
      if2601 = call2619;
    }
    var if2621 = GraceDone;
    setLineNumber(1873);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2622 = request(var_sym, "line", [0]);
    // call case 6: other requests
    var call2623 = request(var_part, "line", [0]);
    var opresult2624 = request(call2622, "==(1)", [1], call2623);
    if (Grace_isTrue(opresult2624)) {
      setLineNumber(1874);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2626 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      var call2627 = request(var_part, "linePos", [0]);
      var diff2628 = request(call2626, "-(1)", [1], call2627);
      // call case 6: other requests
      var call2625 = request(var_part, "lineLength:=(1)", [1], diff2628);
      if2621 = call2625;
    }
    setLineNumber(1876);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call2629 = selfRequest(this, "next", [0]);
    return call2629;
  };    // end of method parenthesizedArgs(_)startingWith(_)
  this.methods["parenthesizedArgs(1)startingWith(1)"] = func2556;
  func2556.methodName = "parenthesizedArgs(1)startingWith(1)";
  func2556.paramCounts = [1, 1];
  func2556.paramNames = ["part", "tok"];
  func2556.definitionLine = 1837;
  func2556.definitionModule = "parser";
  var func2630 = function(argcv) {    // method typeArgs, line 1879
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("typeArgs", 0, numArgs - 0);
    }
    var if2631 = GraceDone;
    setLineNumber(1882);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2633 = request(var_sym, "isLGeneric", [0]);
    var call2632 = request(call2633, "not", [0]);
    if (Grace_isTrue(call2632)) {
      var array2634 = new GraceSequence([]);
      return array2634;
    }
    setLineNumber(1883);    // compilenode array
    var array2636 = new GraceSequence([]);
    // call case 2: outer request
    var call2635 = selfRequest(var_prelude, "list(1)", [1], array2636);
    var var_args = call2635;
    setLineNumber(1884);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_startToken = var_sym;
    setLineNumber(1885);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call2637 = selfRequest(this, "next", [0]);
    setLineNumber(1886);    // compilenode block
    var block2639 = new GraceBlock(this, 1886, 0);
    block2639.guard = jsTrue;
    block2639.real = function block2639() {
      setLineNumber(1886);    // compilenode block
      var block2641 = new GraceBlock(this, 1886, 0);
      block2641.guard = jsTrue;
      block2641.real = function block2641() {
        setLineNumber(1886);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2642 = selfRequest(this, "typeArg", [0]);
        return call2642;
      };
      let applyMeth2641 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2641.methodName = "apply";
      applyMeth2641.paramCounts = [0];
      applyMeth2641.paramNames = [];
      applyMeth2641.definitionLine = 1886;
      applyMeth2641.definitionModule = "parser";
      block2641.methods["apply"] = applyMeth2641;
      // call case 2: outer request
      var call2640 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block2641);
      return call2640;
    };
    let applyMeth2639 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2639.methodName = "apply";
    applyMeth2639.paramCounts = [0];
    applyMeth2639.paramNames = [];
    applyMeth2639.definitionLine = 1886;
    applyMeth2639.definitionModule = "parser";
    block2639.methods["apply"] = applyMeth2639;
    var block2643 = new GraceBlock(this, 1886, 0);
    block2643.guard = jsTrue;
    block2643.real = function block2643() {
      setLineNumber(1887);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2645 = request(var_values, "pop", [0]);
      // call case 6: other requests
      if (var_args === undefined) raiseUninitializedVariable("args");
      var call2644 = request(var_args, "add(1)", [1], call2645);
      var if2646 = GraceDone;
      setLineNumber(1888);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2647 = request(var_sym, "isComma", [0]);
      if (Grace_isTrue(call2647)) {
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2648 = selfRequest(this, "next", [0]);
        if2646 = call2648;
      }
      return if2646;
    };
    let applyMeth2643 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth2643.methodName = "apply";
    applyMeth2643.paramCounts = [0];
    applyMeth2643.paramNames = [];
    applyMeth2643.definitionLine = 1886;
    applyMeth2643.definitionModule = "parser";
    block2643.methods["apply"] = applyMeth2643;
    // call case 2: outer request
    var call2638 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2639, block2643);
    var if2649 = GraceDone;
    setLineNumber(1890);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2651 = request(var_sym, "isRGeneric", [0]);
    var call2650 = request(call2651, "not", [0]);
    if (Grace_isTrue(call2650)) {
      setLineNumber(1891);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call2653 = request(var_errormessages, "suggestion", [0]);
      var call2652 = request(call2653, "new", [0]);
      var var_suggestion = call2652;
      setLineNumber(1892);    // compilenode string
      var string2655 = new GraceString("\u27e7");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call2654 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2655, var_lastToken);
      setLineNumber(1893);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call2657 = request(var_errormessages, "suggestion", [0]);
      var call2656 = request(call2657, "new", [0]);
      var var_suggestion2 = call2656;
      setLineNumber(1894);    // compilenode string
      var string2659 = new GraceString(" ");
      if (var_startToken === undefined) raiseUninitializedVariable("startToken");
      // call case 6: other requests
      if (var_suggestion2 === undefined) raiseUninitializedVariable("suggestion2");
      var call2658 = request(var_suggestion2, "insert(1)beforeToken(1)", [1, 1], string2659, var_startToken);
      setLineNumber(1895);    // compilenode array
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      if (var_suggestion2 === undefined) raiseUninitializedVariable("suggestion2");
      var array2660 = new GraceSequence([var_suggestion, var_suggestion2]);
      var var_suggestions = array2660;
      setLineNumber(1896);    // compilenode string
      var string2662 = new GraceString("a method request containing a '\u27e6' must have a matching '\u27e7'. ");
      setLineNumber(1897);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2663 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2664 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call2665 = request(var_lastToken, "size", [0]);
      var sum2666 = request(call2664, "+(1)", [1], call2665);
      if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call2661 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string2662, call2663, sum2666, var_suggestions);
      if2649 = call2661;
    }
    setLineNumber(1900);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call2667 = selfRequest(this, "next", [0]);
    setLineNumber(1901);    // compilenode return
    return var_args;
  };    // end of method typeArgs
  this.methods["typeArgs"] = func2630;
  func2630.methodName = "typeArgs";
  func2630.paramCounts = [0];
  func2630.paramNames = [];
  func2630.definitionLine = 1879;
  func2630.definitionModule = "parser";
  var func2668 = function(argcv) {    // method typeArg, line 1904
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("typeArg", 0, numArgs - 0);
    }
    var if2669 = GraceDone;
    setLineNumber(1909);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2670 = request(var_sym, "isIdentifier", [0]);
    if (Grace_isTrue(call2670)) {
      setLineNumber(1910);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2671 = selfRequest(this, "identifier", [0]);
      var if2672 = GraceDone;
      setLineNumber(1911);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2673 = request(var_sym, "isLGeneric", [0]);
      if (Grace_isTrue(call2673)) {
        setLineNumber(1912);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2676 = request(var_values, "pop", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2677 = selfRequest(this, "typeArgs", [0]);
        // call case 6: other requests
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call2678 = request(var_ast, "genericNode", [0]);
        var call2675 = request(call2678, "new(2)", [2], call2676, call2677);
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2674 = request(var_values, "push(1)", [1], call2675);
        if2672 = call2674;
      }
      if2669 = if2672;
    } else {
      setLineNumber(1915);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2679 = selfRequest(this, "interfaceLiteral", [0]);
      if2669 = call2679;
    }
    return if2669;
  };    // end of method typeArg
  this.methods["typeArg"] = func2668;
  func2668.methodName = "typeArg";
  func2668.paramCounts = [0];
  func2668.paramNames = [];
  func2668.definitionLine = 1904;
  func2668.definitionModule = "parser";
  var func2680 = function(argcv) {    // method errorDefNoName, line 1919
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("errorDefNoName", 0, numArgs - 0);
    }
    setLineNumber(1920);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2682 = request(var_errormessages, "suggestion", [0]);
    var call2681 = request(call2682, "new", [0]);
    var var_suggestion = call2681;
    setLineNumber(1921);    // compilenode block
    var block2684 = new GraceBlock(this, 1921, 1);
    block2684.guard = jsTrue;
    block2684.real = function block2684(var_t) {
      setLineNumber(1922);    // compilenode member
      // call case 6: other requests
      var call2685 = request(var_t, "isOp", [0]);
      // call case 6: other requests
      var call2686 = request(var_t, "value", [0]);
      var string2687 = new GraceString("=");
      var opresult2688 = request(call2686, "==(1)", [1], string2687);
      var opresult2689 = request(call2685, "&&(1)", [1], opresult2688);
      // call case 6: other requests
      var call2690 = request(var_t, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2691 = request(var_sym, "line", [0]);
      var opresult2692 = request(call2690, "==(1)", [1], call2691);
      var opresult2693 = request(opresult2689, "&&(1)", [1], opresult2692);
      return opresult2693;
    };
    let applyMeth2684 = function apply_1 (argcv, ...args) {
        if (this.guard.apply(this.receiver, args))
            return this.real.apply(this.receiver, args);
        badBlockArgs.apply(this, args);
    };
    applyMeth2684.methodName = "apply(1)";
    applyMeth2684.paramCounts = [1];
    applyMeth2684.paramNames = ["t"];
    applyMeth2684.definitionLine = 1921;
    applyMeth2684.definitionModule = "parser";
    block2684.methods["apply(1)"] = applyMeth2684;
    let matchesMeth2684 = function matches_1 (argcv, ...args) {
        return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
    };
    matchesMeth2684.methodName = "matches(1)";
    matchesMeth2684.paramCounts = [1];
    matchesMeth2684.paramNames = ["t"];
    matchesMeth2684.definitionLine = 1921;
    matchesMeth2684.definitionModule = "parser";
    block2684.methods["matches(1)"] = matchesMeth2684;
    // call case 2: outer request
    var call2683 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block2684);
    var var_nextTok = call2683;
    var if2694 = GraceDone;
    setLineNumber(1924);    // compilenode op
    var opresult2695 = request(GraceFalse, "==(1)", [1], var_nextTok);
    if (Grace_isTrue(opresult2695)) {
      setLineNumber(1925);    // compilenode string
      var string2697 = new GraceString(" \u00abname\u00bb =");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call2696 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2697, var_lastToken);
      if2694 = call2696;
    } else {
      var if2698 = GraceDone;
      setLineNumber(1926);    // compilenode op
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var opresult2699 = request(var_nextTok, "==(1)", [1], var_sym);
      if (Grace_isTrue(opresult2699)) {
        setLineNumber(1927);    // compilenode string
        var string2701 = new GraceString(" \u00abname\u00bb");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2700 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2701, var_lastToken);
        if2698 = call2700;
      } else {
        setLineNumber(1929);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        // call case 6: other requests
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var call2703 = request(var_nextTok, "prev", [0]);
        setLineNumber(1930);    // compilenode string
        var string2704 = new GraceString("\u00abname\u00bb ");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2702 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2703, GraceFalse, GraceTrue, string2704);
        if2698 = call2702;
      }
      if2694 = if2698;
    }
    setLineNumber(1932);    // compilenode string
    var string2706 = new GraceString("a definition must have a name, '=', ");
    setLineNumber(1933);    // compilenode string
    var string2707 = new GraceString("and a value after the 'def'.");
    var opresult2708 = request(string2706, "++(1)", [1], string2707);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2709 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2710 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2705 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult2708, call2709, call2710, var_suggestion);
    return call2705;
  };    // end of method errorDefNoName
  this.methods["errorDefNoName"] = func2680;
  func2680.methodName = "errorDefNoName";
  func2680.paramCounts = [0];
  func2680.paramNames = [];
  func2680.definitionLine = 1919;
  func2680.definitionModule = "parser";
  var func2711 = function(argcv) {    // method errorDefNoExpression, line 1937
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("errorDefNoExpression", 0, numArgs - 0);
    }
    setLineNumber(1938);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2713 = request(var_errormessages, "suggestion", [0]);
    var call2712 = request(call2713, "new", [0]);
    var var_suggestion = call2712;
    setLineNumber(1939);    // compilenode array
    var array2715 = new GraceSequence([]);
    // call case 2: outer request
    var call2714 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2715);
    var var_nextTok = call2714;
    var if2716 = GraceDone;
    setLineNumber(1940);    // compilenode op
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var opresult2717 = request(var_nextTok, "==(1)", [1], var_sym);
    if (Grace_isTrue(opresult2717)) {
      setLineNumber(1941);    // compilenode string
      var string2719 = new GraceString(" \u00abexpression\u00bb");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call2718 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2719, var_lastToken);
      if2716 = call2718;
    } else {
      setLineNumber(1943);    // compilenode call
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      var call2721 = request(var_nextTok, "prev", [0]);
      setLineNumber(1944);    // compilenode string
      var string2722 = new GraceString(" \u00abexpression\u00bb");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call2720 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2721, GraceTrue, GraceFalse, string2722);
      if2716 = call2720;
    }
    setLineNumber(1946);    // compilenode string
    var string2724 = new GraceString("a definition must have a value after the '='.");
    setLineNumber(1947);    // compilenode member
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call2725 = request(var_lastToken, "line", [0]);
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call2726 = request(var_lastToken, "linePos", [0]);
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call2727 = request(var_lastToken, "size", [0]);
    var sum2728 = request(call2726, "+(1)", [1], call2727);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2723 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string2724, call2725, sum2728, var_suggestion);
    return call2723;
  };    // end of method errorDefNoExpression
  this.methods["errorDefNoExpression"] = func2711;
  func2711.methodName = "errorDefNoExpression";
  func2711.paramCounts = [0];
  func2711.paramNames = [];
  func2711.definitionLine = 1937;
  func2711.definitionModule = "parser";
  var func2729 = function(argcv, var_defTok) {    // method errorDefUsesAssign(_), line 1951
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("errorDefUsesAssign(_)", 0, numArgs - 1);
    }
    setLineNumber(1952);    // compilenode array
    var array2731 = new GraceSequence([]);
    // call case 2: outer request
    var call2730 = selfRequest(var_prelude, "list(1)", [1], array2731);
    var var_suggestions = call2730;
    setLineNumber(1953);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2733 = request(var_errormessages, "suggestion", [0]);
    var call2732 = request(call2733, "new", [0]);
    var var_suggestion = call2732;
    setLineNumber(1954);    // compilenode call
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var string2735 = new GraceString("=");
    // call case 6: other requests
    var call2734 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, string2735);
    setLineNumber(1955);    // compilenode call
    // call case 6: other requests
    var call2736 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(1956);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2738 = request(var_errormessages, "suggestion", [0]);
    var call2737 = request(call2738, "new", [0]);
    var_suggestion = call2737;
    setLineNumber(1957);    // compilenode string
    var string2740 = new GraceString("var");
    // call case 6: other requests
    var call2739 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_defTok, string2740);
    setLineNumber(1958);    // compilenode call
    // call case 6: other requests
    var call2741 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(1959);    // compilenode string
    var string2743 = new GraceString("a definition must use '=' instead of ':='. ");
    setLineNumber(1960);    // compilenode string
    var string2744 = new GraceString("A variable declaration uses 'var' and ':='.");
    var opresult2745 = request(string2743, "++(1)", [1], string2744);
    setLineNumber(1961);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2746 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2747 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2748 = request(var_sym, "linePos", [0]);
    var sum2749 = request(call2748, "+(1)", [1], new GraceNum(1));
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2742 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestions(1)", [1, 3, 1], opresult2745, call2746, call2747, sum2749, var_suggestions);
    return call2742;
  };    // end of method errorDefUsesAssign(_)
  this.methods["errorDefUsesAssign(1)"] = func2729;
  func2729.methodName = "errorDefUsesAssign(1)";
  func2729.paramCounts = [1];
  func2729.paramNames = ["defTok"];
  func2729.definitionLine = 1951;
  func2729.definitionModule = "parser";
  var func2750 = function(argcv, var_defTok) {    // method errorDefMissingRhs(_), line 1964
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("errorDefMissingRhs(_)", 0, numArgs - 1);
    }
    setLineNumber(1965);    // compilenode array
    var array2752 = new GraceSequence([]);
    // call case 2: outer request
    var call2751 = selfRequest(var_prelude, "list(1)", [1], array2752);
    var var_suggestions = call2751;
    setLineNumber(1966);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2754 = request(var_errormessages, "suggestion", [0]);
    var call2753 = request(call2754, "new", [0]);
    var var_suggestion = call2753;
    setLineNumber(1967);    // compilenode string
    var string2756 = new GraceString(" = \u00abexpression\u00bb");
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    // call case 6: other requests
    var call2755 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2756, var_lastToken);
    setLineNumber(1968);    // compilenode call
    // call case 6: other requests
    var call2757 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(1969);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2759 = request(var_errormessages, "suggestion", [0]);
    var call2758 = request(call2759, "new", [0]);
    var_suggestion = call2758;
    setLineNumber(1970);    // compilenode string
    var string2761 = new GraceString("var");
    // call case 6: other requests
    var call2760 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_defTok, string2761);
    setLineNumber(1971);    // compilenode call
    // call case 6: other requests
    var call2762 = request(var_suggestions, "push(1)", [1], var_suggestion);
    setLineNumber(1972);    // compilenode string
    var string2764 = new GraceString("a definition must have '=' and a value after the name. ");
    setLineNumber(1973);    // compilenode string
    var string2765 = new GraceString("A variable declaration does not require a value but uses 'var', not 'def'.");
    var opresult2766 = request(string2764, "++(1)", [1], string2765);
    setLineNumber(1974);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2767 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2768 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
    var call2763 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult2766, call2767, call2768, var_suggestions);
    return call2763;
  };    // end of method errorDefMissingRhs(_)
  this.methods["errorDefMissingRhs(1)"] = func2750;
  func2750.methodName = "errorDefMissingRhs(1)";
  func2750.paramCounts = [1];
  func2750.paramNames = ["defTok"];
  func2750.definitionLine = 1964;
  func2750.definitionModule = "parser";
  var func2769 = function(argcv) {    // method defdec, line 1977
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("defdec", 0, numArgs - 0);
    }
    var if2770 = GraceDone;
    setLineNumber(1980);    // compilenode string
    var string2772 = new GraceString("def");
    // call case 2: outer request
    var call2771 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string2772);
    if (Grace_isTrue(call2771)) {
      setLineNumber(1981);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2773 = request(var_sym, "line", [0]);
      var var_line = call2773;
      setLineNumber(1982);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2774 = request(var_sym, "linePos", [0]);
      var var_pos = call2774;
      setLineNumber(1983);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_defTok = var_sym;
      setLineNumber(1984);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2775 = selfRequest(this, "next", [0]);
      var if2776 = GraceDone;
      setLineNumber(1985);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2778 = request(var_sym, "isIdentifier", [0]);
      var call2777 = request(call2778, "not", [0]);
      if (Grace_isTrue(call2777)) {
        setLineNumber(1986);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2779 = selfRequest(this, "errorDefNoName", [0]);
        if2776 = call2779;
      }
      setLineNumber(1988);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2780 = selfRequest(this, "pushIdentifier", [0]);
      setLineNumber(1989);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2781 = request(var_values, "pop", [0]);
      var var_name = call2781;
      setLineNumber(1990);    // compilenode call
      // call case 6: other requests
      if (var_name === undefined) raiseUninitializedVariable("name");
      var call2782 = request(var_name, "isBindingOccurrence:=(1)", [1], GraceTrue);
      setLineNumber(1991);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2783 = selfRequest(this, "optionalTypeAnnotation", [0]);
      var var_dtype = call2783;
      setLineNumber(1992);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2784 = selfRequest(this, "doannotation", [0]);
      var var_anns = call2784;
      setLineNumber(1993);    // compilenode call
      if (var_defTok === undefined) raiseUninitializedVariable("defTok");
      // call case 6: other requests
      if (var_name === undefined) raiseUninitializedVariable("name");
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2787 = request(var_ast, "nullNode", [0]);
      if (var_dtype === undefined) raiseUninitializedVariable("dtype");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2788 = request(var_ast, "defDecNode", [0]);
      var call2786 = request(call2788, "new(3)", [3], var_name, call2787, var_dtype);
      var call2785 = request(call2786, "setPositionFrom(1)", [1], var_defTok);
      var var_o = call2785;
      var if2789 = GraceDone;
      setLineNumber(1994);    // compilenode op
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      var opresult2790 = request(GraceFalse, "\u2260(1)", [1], var_anns);
      if (Grace_isTrue(opresult2790)) {
        if (var_anns === undefined) raiseUninitializedVariable("anns");
        // call case 6: other requests
        // call case 6: other requests
        if (var_o === undefined) raiseUninitializedVariable("o");
        var call2792 = request(var_o, "annotations", [0]);
        var call2791 = request(call2792, "addAll(1)", [1], var_anns);
        if2789 = call2791;
      }
      setLineNumber(1995);    // compilenode call
      if (var_defTok === undefined) raiseUninitializedVariable("defTok");
      // call case 6: other requests
      if (var_o === undefined) raiseUninitializedVariable("o");
      var call2793 = request(var_o, "startToken:=(1)", [1], var_defTok);
      var if2794 = GraceDone;
      setLineNumber(1996);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2795 = request(var_sym, "isOp", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2796 = request(var_sym, "value", [0]);
      var string2797 = new GraceString("=");
      var opresult2798 = request(call2796, "==(1)", [1], string2797);
      var opresult2799 = request(call2795, "&&(1)", [1], opresult2798);
      if (Grace_isTrue(opresult2799)) {
        setLineNumber(1997);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2800 = selfRequest(this, "next", [0]);
        var if2801 = GraceDone;
        setLineNumber(1998);    // compilenode block
        var block2803 = new GraceBlock(this, 1998, 0);
        block2803.guard = jsTrue;
        block2803.real = function block2803() {
          setLineNumber(1998);    // compilenode call
          if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
          // call case 2: outer request
          var call2804 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
          return call2804;
        };
        let applyMeth2803 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2803.methodName = "apply";
        applyMeth2803.paramCounts = [0];
        applyMeth2803.paramNames = [];
        applyMeth2803.definitionLine = 1998;
        applyMeth2803.definitionModule = "parser";
        block2803.methods["apply"] = applyMeth2803;
        // call case 2: outer request
        var call2802 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block2803);
        if (Grace_isTrue(call2802)) {
          setLineNumber(1999);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2805 = selfRequest(this, "errorDefNoExpression", [0]);
          if2801 = call2805;
        }
        setLineNumber(2001);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2807 = request(var_values, "pop", [0]);
        // call case 6: other requests
        if (var_o === undefined) raiseUninitializedVariable("o");
        var call2806 = request(var_o, "value:=(1)", [1], call2807);
        if2794 = call2806;
      } else {
        var if2808 = GraceDone;
        setLineNumber(2002);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2809 = request(var_sym, "isBind", [0]);
        if (Grace_isTrue(call2809)) {
          setLineNumber(2003);    // compilenode call
          if (var_defTok === undefined) raiseUninitializedVariable("defTok");
          // call case 2: outer request
          var call2810 = selfRequest(importedModules["parser"], "errorDefUsesAssign(1)", [1], var_defTok);
          if2808 = call2810;
        } else {
          var if2811 = GraceDone;
          setLineNumber(2004);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_o === undefined) raiseUninitializedVariable("o");
          var call2813 = request(var_o, "isAnnotationDecl", [0]);
          var call2812 = request(call2813, "not", [0]);
          if (Grace_isTrue(call2812)) {
            setLineNumber(2005);    // compilenode call
            if (var_defTok === undefined) raiseUninitializedVariable("defTok");
            // call case 2: outer request
            var call2814 = selfRequest(importedModules["parser"], "errorDefMissingRhs(1)", [1], var_defTok);
            if2811 = call2814;
          }
          if2808 = if2811;
        }
        if2794 = if2808;
      }
      setLineNumber(2007);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2815 = request(var_values, "push(1)", [1], var_o);
      setLineNumber(2008);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2816 = selfRequest(this, "reconcileComments", [0]);
      if2770 = call2816;
    }
    return if2770;
  };    // end of method defdec
  this.methods["defdec"] = func2769;
  func2769.methodName = "defdec";
  func2769.paramCounts = [0];
  func2769.paramNames = [];
  func2769.definitionLine = 1977;
  func2769.definitionModule = "parser";
  var func2817 = function(argcv) {    // method vardec, line 2012
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("vardec", 0, numArgs - 0);
    }
    var if2818 = GraceDone;
    setLineNumber(2015);    // compilenode string
    var string2820 = new GraceString("var");
    // call case 2: outer request
    var call2819 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string2820);
    if (Grace_isTrue(call2819)) {
      setLineNumber(2016);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2821 = request(var_sym, "line", [0]);
      var var_line = call2821;
      setLineNumber(2017);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2822 = request(var_sym, "linePos", [0]);
      var var_pos = call2822;
      setLineNumber(2018);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_varTok = var_sym;
      setLineNumber(2019);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2823 = selfRequest(this, "next", [0]);
      var if2824 = GraceDone;
      setLineNumber(2020);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2826 = request(var_sym, "isIdentifier", [0]);
      var call2825 = request(call2826, "not", [0]);
      if (Grace_isTrue(call2825)) {
        setLineNumber(2021);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2828 = request(var_errormessages, "suggestion", [0]);
        var call2827 = request(call2828, "new", [0]);
        var var_suggestion = call2827;
        setLineNumber(2022);    // compilenode block
        var block2830 = new GraceBlock(this, 2022, 1);
        block2830.guard = jsTrue;
        block2830.real = function block2830(var_t) {
          setLineNumber(2023);    // compilenode member
          // call case 6: other requests
          var call2831 = request(var_t, "isBind", [0]);
          // call case 6: other requests
          var call2832 = request(var_t, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2833 = request(var_sym, "line", [0]);
          var opresult2834 = request(call2832, "==(1)", [1], call2833);
          var opresult2835 = request(call2831, "&&(1)", [1], opresult2834);
          return opresult2835;
        };
        let applyMeth2830 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth2830.methodName = "apply(1)";
        applyMeth2830.paramCounts = [1];
        applyMeth2830.paramNames = ["t"];
        applyMeth2830.definitionLine = 2022;
        applyMeth2830.definitionModule = "parser";
        block2830.methods["apply(1)"] = applyMeth2830;
        let matchesMeth2830 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth2830.methodName = "matches(1)";
        matchesMeth2830.paramCounts = [1];
        matchesMeth2830.paramNames = ["t"];
        matchesMeth2830.definitionLine = 2022;
        matchesMeth2830.definitionModule = "parser";
        block2830.methods["matches(1)"] = matchesMeth2830;
        // call case 2: outer request
        var call2829 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block2830);
        var var_nextTok = call2829;
        var if2836 = GraceDone;
        setLineNumber(2025);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult2837 = request(GraceFalse, "==(1)", [1], var_nextTok);
        var block2838 = new GraceBlock(this, 2025, 0);
        block2838.guard = jsTrue;
        block2838.real = function block2838() {
          setLineNumber(2025);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult2839 = request(var_nextTok, "==(1)", [1], var_sym);
          return opresult2839;
        };
        let applyMeth2838 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2838.methodName = "apply";
        applyMeth2838.paramCounts = [0];
        applyMeth2838.paramNames = [];
        applyMeth2838.definitionLine = 2025;
        applyMeth2838.definitionModule = "parser";
        block2838.methods["apply"] = applyMeth2838;
        var opresult2840 = request(opresult2837, "||(1)", [1], block2838);
        if (Grace_isTrue(opresult2840)) {
          setLineNumber(2026);    // compilenode string
          var string2842 = new GraceString(" \u00abname\u00bb");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2841 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2842, var_lastToken);
          if2836 = call2841;
        } else {
          setLineNumber(2028);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call2844 = request(var_nextTok, "prev", [0]);
          setLineNumber(2029);    // compilenode string
          var string2845 = new GraceString("\u00abname\u00bb ");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2843 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2844, GraceFalse, GraceTrue, string2845);
          if2836 = call2843;
        }
        setLineNumber(2031);    // compilenode string
        var string2847 = new GraceString("a variable declaration must have a name after the 'var'.");
        setLineNumber(2032);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2848 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2849 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2846 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string2847, call2848, call2849, var_suggestion);
        if2824 = call2846;
      }
      setLineNumber(2034);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2850 = selfRequest(this, "pushIdentifier", [0]);
      setLineNumber(2035);    // compilenode vardec
      var var_val = GraceFalse;
      setLineNumber(2036);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2851 = request(var_values, "pop", [0]);
      var var_name = call2851;
      setLineNumber(2037);    // compilenode call
      // call case 6: other requests
      if (var_name === undefined) raiseUninitializedVariable("name");
      var call2852 = request(var_name, "isBindingOccurrence:=(1)", [1], GraceTrue);
      setLineNumber(2038);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2853 = selfRequest(this, "optionalTypeAnnotation", [0]);
      var var_dtype = call2853;
      setLineNumber(2039);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2854 = selfRequest(this, "doannotation", [0]);
      var var_anns = call2854;
      var if2855 = GraceDone;
      setLineNumber(2040);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2856 = request(var_sym, "isBind", [0]);
      if (Grace_isTrue(call2856)) {
        setLineNumber(2041);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call2857 = selfRequest(this, "next", [0]);
        var if2858 = GraceDone;
        setLineNumber(2042);    // compilenode block
        var block2860 = new GraceBlock(this, 2042, 0);
        block2860.guard = jsTrue;
        block2860.real = function block2860() {
          setLineNumber(2042);    // compilenode call
          if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
          // call case 2: outer request
          var call2861 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
          return call2861;
        };
        let applyMeth2860 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2860.methodName = "apply";
        applyMeth2860.paramCounts = [0];
        applyMeth2860.paramNames = [];
        applyMeth2860.definitionLine = 2042;
        applyMeth2860.definitionModule = "parser";
        block2860.methods["apply"] = applyMeth2860;
        // call case 2: outer request
        var call2859 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block2860);
        if (Grace_isTrue(call2859)) {
          setLineNumber(2043);    // compilenode array
          var array2863 = new GraceSequence([]);
          // call case 2: outer request
          var call2862 = selfRequest(var_prelude, "list(1)", [1], array2863);
          var var_suggestions = call2862;
          setLineNumber(2044);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2865 = request(var_errormessages, "suggestion", [0]);
          var call2864 = request(call2865, "new", [0]);
          var var_suggestion = call2864;
          setLineNumber(2045);    // compilenode array
          var array2867 = new GraceSequence([]);
          // call case 2: outer request
          var call2866 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2867);
          var var_nextTok = call2866;
          var if2868 = GraceDone;
          setLineNumber(2046);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult2869 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult2869)) {
            setLineNumber(2047);    // compilenode string
            var string2871 = new GraceString(" \u00abexpression\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2870 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2871, var_lastToken);
            if2868 = call2870;
          } else {
            setLineNumber(2049);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call2873 = request(var_nextTok, "prev", [0]);
            setLineNumber(2050);    // compilenode string
            var string2874 = new GraceString(" \u00abexpression\u00bb");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2872 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2873, GraceTrue, GraceFalse, string2874);
            if2868 = call2872;
          }
          setLineNumber(2052);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2875 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(2053);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2877 = request(var_errormessages, "suggestion", [0]);
          var call2876 = request(call2877, "new", [0]);
          var_suggestion = call2876;
          setLineNumber(2054);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call2879 = request(var_nextTok, "prev", [0]);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2878 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call2879, GraceTrue, GraceFalse);
          setLineNumber(2055);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2880 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(2056);    // compilenode string
          var string2882 = new GraceString("a variable declaration must have a value after the ':='. ");
          setLineNumber(2057);    // compilenode string
          var string2883 = new GraceString("A variable without a value can be declared with 'var' followed only by the variable name.");
          var opresult2884 = request(string2882, "++(1)", [1], string2883);
          setLineNumber(2058);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2885 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2886 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call2887 = request(var_lastToken, "size", [0]);
          var sum2888 = request(call2886, "+(1)", [1], call2887);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2881 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult2884, call2885, sum2888, var_suggestions);
          if2858 = call2881;
        }
        setLineNumber(2060);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2889 = request(var_values, "pop", [0]);
        var_val = call2889;
        if2855 = GraceDone;
      } else {
        var if2890 = GraceDone;
        setLineNumber(2062);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2891 = request(var_sym, "isOp", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2892 = request(var_sym, "value", [0]);
        var string2893 = new GraceString("=");
        var opresult2894 = request(call2892, "==(1)", [1], string2893);
        var opresult2895 = request(call2891, "&&(1)", [1], opresult2894);
        if (Grace_isTrue(opresult2895)) {
          setLineNumber(2063);    // compilenode array
          var array2897 = new GraceSequence([]);
          // call case 2: outer request
          var call2896 = selfRequest(var_prelude, "list(1)", [1], array2897);
          var var_suggestions = call2896;
          setLineNumber(2064);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2899 = request(var_errormessages, "suggestion", [0]);
          var call2898 = request(call2899, "new", [0]);
          var var_suggestion = call2898;
          setLineNumber(2065);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var string2901 = new GraceString(":=");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2900 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, string2901);
          setLineNumber(2066);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2902 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(2067);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2904 = request(var_errormessages, "suggestion", [0]);
          var call2903 = request(call2904, "new", [0]);
          var_suggestion = call2903;
          setLineNumber(2068);    // compilenode call
          if (var_varTok === undefined) raiseUninitializedVariable("varTok");
          var string2906 = new GraceString("def");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call2905 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_varTok, string2906);
          setLineNumber(2069);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call2907 = request(var_suggestions, "push(1)", [1], var_suggestion);
          setLineNumber(2070);    // compilenode string
          var string2909 = new GraceString("a variable declaration must use ':=' instead of '='. A definition uses 'def' and '='.");
          setLineNumber(2071);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2910 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2911 = request(var_sym, "linePos", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2912 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call2908 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestions(1)", [1, 3, 1], string2909, call2910, call2911, call2912, var_suggestions);
          if2890 = call2908;
        }
        if2855 = if2890;
      }
      setLineNumber(2075);    // compilenode call
      if (var_line === undefined) raiseUninitializedVariable("line");
      if (var_pos === undefined) raiseUninitializedVariable("pos");
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call2913 = request(var_util, "setPosition(2)", [2], var_line, var_pos);
      setLineNumber(2076);    // compilenode call
      if (var_name === undefined) raiseUninitializedVariable("name");
      if (var_val === undefined) raiseUninitializedVariable("val");
      if (var_dtype === undefined) raiseUninitializedVariable("dtype");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2915 = request(var_ast, "varDecNode", [0]);
      var call2914 = request(call2915, "new(3)", [3], var_name, var_val, var_dtype);
      var var_o = call2914;
      var if2916 = GraceDone;
      setLineNumber(2077);    // compilenode op
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      var opresult2917 = request(GraceFalse, "\u2260(1)", [1], var_anns);
      if (Grace_isTrue(opresult2917)) {
        if (var_anns === undefined) raiseUninitializedVariable("anns");
        // call case 6: other requests
        // call case 6: other requests
        if (var_o === undefined) raiseUninitializedVariable("o");
        var call2919 = request(var_o, "annotations", [0]);
        var call2918 = request(call2919, "addAll(1)", [1], var_anns);
        if2916 = call2918;
      }
      setLineNumber(2078);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2920 = request(var_values, "push(1)", [1], var_o);
      setLineNumber(2079);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2921 = selfRequest(this, "reconcileComments", [0]);
      if2818 = call2921;
    }
    return if2818;
  };    // end of method vardec
  this.methods["vardec"] = func2817;
  func2817.methodName = "vardec";
  func2817.paramCounts = [0];
  func2817.paramNames = [];
  func2817.definitionLine = 2012;
  func2817.definitionModule = "parser";
  var func2922 = function(argcv) {    // method sequenceConstructor, line 2083
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("sequenceConstructor", 0, numArgs - 0);
    }
    var if2923 = GraceDone;
    setLineNumber(2086);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call2924 = request(var_sym, "isLSquare", [0]);
    if (Grace_isTrue(call2924)) {
      setLineNumber(2087);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_lSq = var_sym;
      setLineNumber(2088);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2925 = selfRequest(this, "next", [0]);
      setLineNumber(2089);    // compilenode vardec
      var var_tmp;
      setLineNumber(2090);    // compilenode array
      var array2927 = new GraceSequence([]);
      // call case 2: outer request
      var call2926 = selfRequest(var_prelude, "list(1)", [1], array2927);
      var var_params = call2926;
      var if2928 = GraceDone;
      setLineNumber(2091);    // compilenode block
      var block2930 = new GraceBlock(this, 2091, 0);
      block2930.guard = jsTrue;
      block2930.real = function block2930() {
        setLineNumber(2091);    // compilenode call
        if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
        // call case 2: outer request
        var call2931 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
        return call2931;
      };
      let applyMeth2930 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth2930.methodName = "apply";
      applyMeth2930.paramCounts = [0];
      applyMeth2930.paramNames = [];
      applyMeth2930.definitionLine = 2091;
      applyMeth2930.definitionModule = "parser";
      block2930.methods["apply"] = applyMeth2930;
      // call case 2: outer request
      var call2929 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block2930);
      if (Grace_isTrue(call2929)) {
        setLineNumber(2092);    // compilenode block
        var block2933 = new GraceBlock(this, 2092, 0);
        block2933.guard = jsTrue;
        block2933.real = function block2933() {
          setLineNumber(2092);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call2934 = request(var_sym, "isComma", [0]);
          return call2934;
        };
        let applyMeth2933 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2933.methodName = "apply";
        applyMeth2933.paramCounts = [0];
        applyMeth2933.paramNames = [];
        applyMeth2933.definitionLine = 2092;
        applyMeth2933.definitionModule = "parser";
        block2933.methods["apply"] = applyMeth2933;
        var block2935 = new GraceBlock(this, 2092, 0);
        block2935.guard = jsTrue;
        block2935.real = function block2935() {
          setLineNumber(2093);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call2936 = request(var_values, "pop", [0]);
          var_tmp = call2936;
          setLineNumber(2094);    // compilenode call
          if (var_tmp === undefined) raiseUninitializedVariable("tmp");
          // call case 6: other requests
          if (var_params === undefined) raiseUninitializedVariable("params");
          var call2937 = request(var_params, "push(1)", [1], var_tmp);
          setLineNumber(2095);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2938 = selfRequest(this, "next", [0]);
          var if2939 = GraceDone;
          setLineNumber(2096);    // compilenode block
          var block2941 = new GraceBlock(this, 2096, 0);
          block2941.guard = jsTrue;
          block2941.real = function block2941() {
            setLineNumber(2096);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call2942 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call2942;
          };
          let applyMeth2941 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth2941.methodName = "apply";
          applyMeth2941.paramCounts = [0];
          applyMeth2941.paramNames = [];
          applyMeth2941.definitionLine = 2096;
          applyMeth2941.definitionModule = "parser";
          block2941.methods["apply"] = applyMeth2941;
          // call case 2: outer request
          var call2940 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block2941);
          if (Grace_isTrue(call2940)) {
            setLineNumber(2097);    // compilenode array
            var array2944 = new GraceSequence([]);
            // call case 2: outer request
            var call2943 = selfRequest(var_prelude, "list(1)", [1], array2944);
            var var_suggestions = call2943;
            setLineNumber(2098);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call2946 = request(var_errormessages, "suggestion", [0]);
            var call2945 = request(call2946, "new", [0]);
            var var_suggestion = call2945;
            setLineNumber(2099);    // compilenode string
            var string2949 = new GraceString("rsquare");
            var array2948 = new GraceSequence([string2949]);
            // call case 2: outer request
            var call2947 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array2948);
            var var_nextTok = call2947;
            var if2950 = GraceDone;
            setLineNumber(2100);    // compilenode op
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult2951 = request(var_nextTok, "==(1)", [1], var_sym);
            if (Grace_isTrue(opresult2951)) {
              setLineNumber(2101);    // compilenode string
              var string2953 = new GraceString(" \u00abexpression\u00bb");
              if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call2952 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2953, var_lastToken);
              if2950 = call2952;
            } else {
              setLineNumber(2103);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
              var call2955 = request(var_nextTok, "prev", [0]);
              var string2956 = new GraceString(" \u00abexpression\u00bb");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call2954 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call2955, GraceTrue, GraceFalse, string2956);
              if2950 = call2954;
            }
            setLineNumber(2105);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call2957 = request(var_suggestions, "push(1)", [1], var_suggestion);
            setLineNumber(2106);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call2959 = request(var_errormessages, "suggestion", [0]);
            var call2958 = request(call2959, "new", [0]);
            var_suggestion = call2958;
            setLineNumber(2107);    // compilenode call
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call2961 = request(var_nextTok, "prev", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call2960 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call2961, GraceTrue, GraceFalse);
            setLineNumber(2108);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call2962 = request(var_suggestions, "push(1)", [1], var_suggestion);
            setLineNumber(2109);    // compilenode string
            var string2964 = new GraceString("a collection must contain zero or more expressions separated by commas.");
            setLineNumber(2110);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call2965 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call2966 = request(var_sym, "linePos", [0]);
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call2963 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string2964, call2965, call2966, var_suggestions);
            if2939 = call2963;
          }
          return if2939;
        };
        let applyMeth2935 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth2935.methodName = "apply";
        applyMeth2935.paramCounts = [0];
        applyMeth2935.paramNames = [];
        applyMeth2935.definitionLine = 2092;
        applyMeth2935.definitionModule = "parser";
        block2935.methods["apply"] = applyMeth2935;
        // call case 2: outer request
        var call2932 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block2933, block2935);
        setLineNumber(2113);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call2967 = request(var_values, "pop", [0]);
        var_tmp = call2967;
        setLineNumber(2114);    // compilenode call
        if (var_tmp === undefined) raiseUninitializedVariable("tmp");
        // call case 6: other requests
        if (var_params === undefined) raiseUninitializedVariable("params");
        var call2968 = request(var_params, "push(1)", [1], var_tmp);
        if2928 = call2968;
      }
      var if2969 = GraceDone;
      setLineNumber(2116);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2971 = request(var_sym, "isRSquare", [0]);
      var call2970 = request(call2971, "not", [0]);
      if (Grace_isTrue(call2970)) {
        setLineNumber(2117);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2973 = request(var_errormessages, "suggestion", [0]);
        var call2972 = request(call2973, "new", [0]);
        var var_suggestion = call2972;
        setLineNumber(2118);    // compilenode string
        var string2975 = new GraceString("]");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call2974 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string2975, var_lastToken);
        setLineNumber(2119);    // compilenode string
        var string2977 = new GraceString("a collection beginning with a '[' must end with a ']'.");
        setLineNumber(2120);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2978 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2979 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call2980 = request(var_lastToken, "size", [0]);
        var sum2981 = request(call2979, "+(1)", [1], call2980);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2976 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string2977, call2978, sum2981, var_suggestion);
        if2969 = call2976;
      }
      setLineNumber(2122);    // compilenode call
      if (var_lSq === undefined) raiseUninitializedVariable("lSq");
      // call case 6: other requests
      if (var_params === undefined) raiseUninitializedVariable("params");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call2984 = request(var_ast, "arrayNode", [0]);
      var call2983 = request(call2984, "new(1)", [1], var_params);
      var call2982 = request(call2983, "setPositionFrom(1)", [1], var_lSq);
      var var_o = call2982;
      setLineNumber(2123);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call2985 = request(var_values, "push(1)", [1], var_o);
      setLineNumber(2124);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2986 = selfRequest(this, "next", [0]);
      if2923 = call2986;
    }
    return if2923;
  };    // end of method sequenceConstructor
  this.methods["sequenceConstructor"] = func2922;
  func2922.methodName = "sequenceConstructor";
  func2922.paramCounts = [0];
  func2922.paramNames = [];
  func2922.definitionLine = 2083;
  func2922.definitionModule = "parser";
  var func2987 = function(argcv) {    // method dodialect, line 2128
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("dodialect", 0, numArgs - 0);
    }
    var if2988 = GraceDone;
    setLineNumber(2131);    // compilenode string
    var string2990 = new GraceString("dialect");
    // call case 2: outer request
    var call2989 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string2990);
    if (Grace_isTrue(call2989)) {
      setLineNumber(2132);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_dialectToken = var_sym;
      setLineNumber(2133);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call2991 = selfRequest(this, "next", [0]);
      var if2992 = GraceDone;
      setLineNumber(2134);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call2994 = request(var_sym, "isString", [0]);
      var call2993 = request(call2994, "not", [0]);
      if (Grace_isTrue(call2993)) {
        setLineNumber(2135);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call2996 = request(var_errormessages, "suggestion", [0]);
        var call2995 = request(call2996, "new", [0]);
        var var_suggestion = call2995;
        setLineNumber(2136);    // compilenode vardec
        var var_errorPos;
        var if2997 = GraceDone;
        setLineNumber(2137);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2998 = request(var_sym, "isIdentifier", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call2999 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3000 = request(var_lastToken, "line", [0]);
        var opresult3001 = request(call2999, "==(1)", [1], call3000);
        var opresult3002 = request(call2998, "&&(1)", [1], opresult3001);
        if (Grace_isTrue(opresult3002)) {
          setLineNumber(2138);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var string3004 = new GraceString("\"");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3005 = request(var_sym, "value", [0]);
          var opresult3006 = request(string3004, "++(1)", [1], call3005);
          var string3007 = new GraceString("\"");
          var opresult3008 = request(opresult3006, "++(1)", [1], string3007);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3003 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, opresult3008);
          setLineNumber(2139);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3009 = request(var_sym, "linePos", [0]);
          var_errorPos = call3009;
          if2997 = GraceDone;
        } else {
          setLineNumber(2141);    // compilenode string
          var string3011 = new GraceString(" \"\u00abdialect name\u00bb\"");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3010 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3011, var_lastToken);
          setLineNumber(2142);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3012 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3013 = request(var_lastToken, "size", [0]);
          var sum3014 = request(call3012, "+(1)", [1], call3013);
          var sum3015 = request(sum3014, "+(1)", [1], new GraceNum(1));
          var_errorPos = sum3015;
          if2997 = GraceDone;
        }
        setLineNumber(2144);    // compilenode string
        var string3017 = new GraceString("a dialect statement must have the name ");
        setLineNumber(2145);    // compilenode string
        var string3018 = new GraceString("of the dialect in quotes after the word 'dialect'.");
        var opresult3019 = request(string3017, "++(1)", [1], string3018);
        setLineNumber(2146);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3020 = request(var_lastToken, "line", [0]);
        if (var_errorPos === undefined) raiseUninitializedVariable("errorPos");
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3016 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult3019, call3020, var_errorPos, var_suggestion);
        if2992 = call3016;
      }
      setLineNumber(2148);    // compilenode call
      if (var_dialectToken === undefined) raiseUninitializedVariable("dialectToken");
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call3023 = request(var_ast, "dialectNode", [0]);
      var call3022 = request(call3023, "fromToken(1)", [1], var_sym);
      var call3021 = request(call3022, "setPositionFrom(1)", [1], var_dialectToken);
      var var_dn = call3021;
      setLineNumber(2149);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3024 = selfRequest(this, "next", [0]);
      var if3025 = GraceDone;
      setLineNumber(2150);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3026 = request(var_values, "isEmpty", [0]);
      if (Grace_isTrue(call3026)) {
        var if3027 = GraceDone;
        setLineNumber(2151);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
        var call3029 = request(var_moduleObject, "theDialect", [0]);
        var call3028 = request(call3029, "line", [0]);
        var opresult3030 = request(call3028, "==(1)", [1], new GraceNum(0));
        if (Grace_isTrue(opresult3030)) {
          setLineNumber(2152);    // compilenode call
          if (var_dn === undefined) raiseUninitializedVariable("dn");
          // call case 6: other requests
          if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
          var call3031 = request(var_moduleObject, "theDialect:=(1)", [1], var_dn);
          if3027 = call3031;
        } else {
          setLineNumber(2154);    // compilenode string
          var string3033 = new GraceString("at most one dialect statement may appear in a module.");
          if (var_dn === undefined) raiseUninitializedVariable("dn");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call3032 = request(var_errormessages, "syntaxError(1)atRange(1)", [1, 1], string3033, var_dn);
          if3027 = call3032;
        }
        if3025 = if3027;
      } else {
        setLineNumber(2158);    // compilenode string
        var string3035 = new GraceString("a dialect statement must be at the start of the module.");
        if (var_dn === undefined) raiseUninitializedVariable("dn");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3034 = request(var_errormessages, "syntaxError(1)atRange(1)", [1, 1], string3035, var_dn);
        if3025 = call3034;
      }
      if2988 = if3025;
    }
    return if2988;
  };    // end of method dodialect
  this.methods["dodialect"] = func2987;
  func2987.methodName = "dodialect";
  func2987.paramCounts = [0];
  func2987.paramNames = [];
  func2987.definitionLine = 2128;
  func2987.definitionModule = "parser";
  var func3036 = function(argcv) {    // method inheritOrUse, line 2164
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("inheritOrUse", 0, numArgs - 0);
    }
    var if3037 = GraceDone;
    setLineNumber(2166);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3039 = request(var_sym, "isKeyword", [0]);
    var call3038 = request(call3039, "not", [0]);
    if (Grace_isTrue(call3038)) {
      return var_done;
    }
    var if3040 = GraceDone;
    setLineNumber(2167);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3041 = request(var_sym, "value", [0]);
    var string3042 = new GraceString("inherit");
    var opresult3043 = request(call3041, "==(1)", [1], string3042);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3044 = request(var_sym, "value", [0]);
    var string3045 = new GraceString("use");
    var opresult3046 = request(call3044, "==(1)", [1], string3045);
    var opresult3047 = request(opresult3043, "||(1)", [1], opresult3046);
    if (Grace_isTrue(opresult3047)) {
      setLineNumber(2168);    // compilenode bind
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var_statementToken = var_sym;
      setLineNumber(2169);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_btok = var_sym;
      setLineNumber(2170);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3048 = selfRequest(this, "next", [0]);
      var if3049 = GraceDone;
      setLineNumber(2171);    // compilenode block
      var block3051 = new GraceBlock(this, 2171, 0);
      block3051.guard = jsTrue;
      block3051.real = function block3051() {
        setLineNumber(2171);    // compilenode call
        if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
        // call case 2: outer request
        var call3052 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
        return call3052;
      };
      let applyMeth3051 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3051.methodName = "apply";
      applyMeth3051.paramCounts = [0];
      applyMeth3051.paramNames = [];
      applyMeth3051.definitionLine = 2171;
      applyMeth3051.definitionModule = "parser";
      block3051.methods["apply"] = applyMeth3051;
      // call case 2: outer request
      var call3050 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block3051);
      if (Grace_isTrue(call3050)) {
        setLineNumber(2172);    // compilenode array
        var array3054 = new GraceSequence([]);
        // call case 2: outer request
        var call3053 = selfRequest(var_prelude, "list(1)", [1], array3054);
        var var_suggestions = call3053;
        setLineNumber(2173);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3056 = request(var_errormessages, "suggestion", [0]);
        var call3055 = request(call3056, "new", [0]);
        var var_suggestion = call3055;
        setLineNumber(2174);    // compilenode string
        var string3059 = new GraceString("rsquare");
        var array3058 = new GraceSequence([string3059]);
        // call case 2: outer request
        var call3057 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array3058);
        var var_nextTok = call3057;
        var if3060 = GraceDone;
        setLineNumber(2175);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var opresult3061 = request(var_nextTok, "==(1)", [1], var_sym);
        if (Grace_isTrue(opresult3061)) {
          setLineNumber(2176);    // compilenode string
          var string3063 = new GraceString(" \u00abparent\u00bb");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3062 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3063, var_lastToken);
          if3060 = call3062;
        } else {
          setLineNumber(2178);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call3065 = request(var_nextTok, "prev", [0]);
          var string3066 = new GraceString(" \u00abparent\u00bb");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3064 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call3065, GraceTrue, GraceFalse, string3066);
          if3060 = call3064;
        }
        setLineNumber(2180);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3067 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(2181);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3069 = request(var_errormessages, "suggestion", [0]);
        var call3068 = request(call3069, "new", [0]);
        var_suggestion = call3068;
        setLineNumber(2182);    // compilenode call
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var call3071 = request(var_nextTok, "prev", [0]);
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3070 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_lastToken, call3071, GraceTrue, GraceFalse);
        setLineNumber(2183);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3072 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(2184);    // compilenode string
        var string3073 = new GraceString("The ");
        // call case 6: other requests
        if (var_btok === undefined) raiseUninitializedVariable("btok");
        var call3074 = request(var_btok, "value", [0]);
        var opresult3075 = request(string3073, "++(1)", [1], call3074);
        var string3076 = new GraceString(" keyword must be followed by an expression that creates ");
        var opresult3077 = request(opresult3075, "++(1)", [1], string3076);
        var var_msg = opresult3077;
        var if3078 = GraceDone;
        setLineNumber(2185);    // compilenode member
        // call case 6: other requests
        if (var_btok === undefined) raiseUninitializedVariable("btok");
        var call3079 = request(var_btok, "value", [0]);
        var string3080 = new GraceString("use");
        var opresult3081 = request(call3079, "==(1)", [1], string3080);
        if (Grace_isTrue(opresult3081)) {
          setLineNumber(2186);    // compilenode op
          if (var_msg === undefined) raiseUninitializedVariable("msg");
          var string3082 = new GraceString("the trait being used.");
          var opresult3083 = request(var_msg, "++(1)", [1], string3082);
          var_msg = opresult3083;
          if3078 = GraceDone;
        } else {
          setLineNumber(2188);    // compilenode op
          if (var_msg === undefined) raiseUninitializedVariable("msg");
          var string3084 = new GraceString("the object being inherited.");
          var opresult3085 = request(var_msg, "++(1)", [1], string3084);
          var_msg = opresult3085;
          if3078 = GraceDone;
        }
        setLineNumber(2190);    // compilenode call
        if (var_msg === undefined) raiseUninitializedVariable("msg");
        setLineNumber(2191);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3087 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3088 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3089 = request(var_lastToken, "size", [0]);
        var sum3090 = request(call3088, "+(1)", [1], call3089);
        var sum3091 = request(sum3090, "+(1)", [1], new GraceNum(1));
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3086 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], var_msg, call3087, sum3091, var_suggestions);
        if3049 = call3086;
      }
      setLineNumber(2194);    // compilenode member
      // call case 6: other requests
      if (var_btok === undefined) raiseUninitializedVariable("btok");
      var call3093 = request(var_btok, "line", [0]);
      // call case 6: other requests
      if (var_btok === undefined) raiseUninitializedVariable("btok");
      var call3094 = request(var_btok, "linePos", [0]);
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call3092 = request(var_util, "setPosition(2)", [2], call3093, call3094);
      setLineNumber(2195);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3096 = request(var_values, "pop", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call3097 = request(var_ast, "inheritNode", [0]);
      var call3095 = request(call3097, "new(1)", [1], call3096);
      var var_inhNode = call3095;
      var if3098 = GraceDone;
      setLineNumber(2196);    // compilenode member
      // call case 6: other requests
      if (var_btok === undefined) raiseUninitializedVariable("btok");
      var call3099 = request(var_btok, "value", [0]);
      var string3100 = new GraceString("use");
      var opresult3101 = request(call3099, "==(1)", [1], string3100);
      if (Grace_isTrue(opresult3101)) {
        setLineNumber(2197);    // compilenode call
        // call case 6: other requests
        if (var_inhNode === undefined) raiseUninitializedVariable("inhNode");
        var call3102 = request(var_inhNode, "isUse:=(1)", [1], GraceTrue);
        if3098 = call3102;
      }
      setLineNumber(2199);    // compilenode block
      var block3104 = new GraceBlock(this, 2199, 0);
      block3104.guard = jsTrue;
      block3104.real = function block3104() {
        setLineNumber(2199);    // compilenode call
        if (var_inhNode === undefined) raiseUninitializedVariable("inhNode");
        // call case 2: outer request
        var call3105 = selfRequest(importedModules["parser"], "inheritModifier(1)", [1], var_inhNode);
        return call3105;
      };
      let applyMeth3104 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3104.methodName = "apply";
      applyMeth3104.paramCounts = [0];
      applyMeth3104.paramNames = [];
      applyMeth3104.definitionLine = 2199;
      applyMeth3104.definitionModule = "parser";
      block3104.methods["apply"] = applyMeth3104;
      var block3106 = new GraceBlock(this, 2199, 0);
      block3106.guard = jsTrue;
      block3106.real = function block3106() {
        setLineNumber(2199);    // compileBlock
        return GraceDone;
      };
      let applyMeth3106 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3106.methodName = "apply";
      applyMeth3106.paramCounts = [0];
      applyMeth3106.paramNames = [];
      applyMeth3106.definitionLine = 2199;
      applyMeth3106.definitionModule = "parser";
      block3106.methods["apply"] = applyMeth3106;
      // call case 2: outer request
      var call3103 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3104, block3106);
      setLineNumber(2200);    // compilenode call
      if (var_inhNode === undefined) raiseUninitializedVariable("inhNode");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3107 = request(var_values, "push(1)", [1], var_inhNode);
      if3040 = call3107;
    }
    return if3040;
  };    // end of method inheritOrUse
  this.methods["inheritOrUse"] = func3036;
  func3036.methodName = "inheritOrUse";
  func3036.paramCounts = [0];
  func3036.paramNames = [];
  func3036.definitionLine = 2164;
  func3036.definitionModule = "parser";
  var func3108 = function(argcv, var_node) {    // method inheritModifier(_), line 2204
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("inheritModifier(_)", 0, numArgs - 1);
    }
    var if3109 = GraceDone;
    setLineNumber(2208);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3111 = request(var_sym, "isKeyword", [0]);
    var call3110 = request(call3111, "not", [0]);
    if (Grace_isTrue(call3110)) {
      return GraceFalse;
    }
    setLineNumber(2209);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3112 = request(var_sym, "value", [0]);
    var var_symValue = call3112;
    var if3113 = GraceDone;
    setLineNumber(2210);    // compilenode string
    var string3114 = new GraceString("alias");
    var opresult3115 = request(var_symValue, "==(1)", [1], string3114);
    if (Grace_isTrue(opresult3115)) {
      setLineNumber(2211);    // compilenode call
      // call case 2: outer request
      var call3116 = selfRequest(importedModules["parser"], "parseAlias(1)", [1], var_node);
      if3113 = call3116;
    } else {
      var if3117 = GraceDone;
      setLineNumber(2212);    // compilenode op
      if (var_symValue === undefined) raiseUninitializedVariable("symValue");
      var string3118 = new GraceString("exclude");
      var opresult3119 = request(var_symValue, "==(1)", [1], string3118);
      if (Grace_isTrue(opresult3119)) {
        setLineNumber(2213);    // compilenode call
        // call case 2: outer request
        var call3120 = selfRequest(importedModules["parser"], "parseExclude(1)", [1], var_node);
        if3117 = call3120;
      } else {
        if3117 = GraceFalse;
      }
      if3113 = if3117;
    }
    return if3113;
  };    // end of method inheritModifier(_)
  this.methods["inheritModifier(1)"] = func3108;
  func3108.methodName = "inheritModifier(1)";
  func3108.paramCounts = [1];
  func3108.paramNames = ["node"];
  func3108.definitionLine = 2204;
  func3108.definitionModule = "parser";
  var func3121 = function(argcv, var_node) {    // method parseAlias(_), line 2219
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("parseAlias(_)", 0, numArgs - 1);
    }
    setLineNumber(2221);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3122 = selfRequest(this, "next", [0]);
    setLineNumber(2222);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3123 = selfRequest(this, "methodSignature", [0]);
    var var_newMeth = call3123;
    var if3124 = GraceDone;
    setLineNumber(2223);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3125 = request(var_sym, "isOp", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3126 = request(var_sym, "value", [0]);
    var string3127 = new GraceString("=");
    var opresult3128 = request(call3126, "==(1)", [1], string3127);
    var opresult3129 = request(call3125, "&&(1)", [1], opresult3128);
    if (Grace_isTrue(opresult3129)) {
      setLineNumber(2224);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3130 = selfRequest(this, "next", [0]);
      setLineNumber(2225);    // compilenode member
      // call case 6: other requests
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3132 = selfRequest(this, "methodSignature", [0]);
      var call3131 = request(call3132, "appliedOccurrence", [0]);
      var var_oldMeth = call3131;
      var if3133 = GraceDone;
      setLineNumber(2226);    // compilenode member
      // call case 6: other requests
      if (var_newMeth === undefined) raiseUninitializedVariable("newMeth");
      var call3134 = request(var_newMeth, "numParams", [0]);
      // call case 6: other requests
      if (var_oldMeth === undefined) raiseUninitializedVariable("oldMeth");
      var call3135 = request(var_oldMeth, "numParams", [0]);
      var opresult3136 = request(call3134, "\u2260(1)", [1], call3135);
      if (Grace_isTrue(opresult3136)) {
        setLineNumber(2227);    // compilenode string
        var string3138 = new GraceString("a method and its alias must have the same number of parameters");
        setLineNumber(2228);    // compilenode member
        // call case 6: other requests
        if (var_newMeth === undefined) raiseUninitializedVariable("newMeth");
        var call3139 = request(var_newMeth, "line", [0]);
        // call case 6: other requests
        if (var_newMeth === undefined) raiseUninitializedVariable("newMeth");
        var call3140 = request(var_newMeth, "linePos", [0]);
        // call case 6: other requests
        if (var_oldMeth === undefined) raiseUninitializedVariable("oldMeth");
        var call3141 = request(var_oldMeth, "endPos", [0]);
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3137 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], string3138, call3139, call3140, call3141);
        if3133 = call3137;
      }
      setLineNumber(2230);    // compilenode call
      if (var_newMeth === undefined) raiseUninitializedVariable("newMeth");
      if (var_oldMeth === undefined) raiseUninitializedVariable("oldMeth");
      // call case 6: other requests
      var call3142 = request(var_node, "addAlias(1)for(1)", [1, 1], var_newMeth, var_oldMeth);
      if3124 = call3142;
    } else {
      setLineNumber(2232);    // compilenode string
      var string3144 = new GraceString("an alias modifier must take the form ");
      setLineNumber(2233);    // compilenode string
      var string3145 = new GraceString("'\u2039newMethodHeader\u203a = \u2039oldMethodHeader\u203a'");
      var opresult3146 = request(string3144, "++(1)", [1], string3145);
      setLineNumber(2234);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3147 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3148 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3149 = request(var_lastToken, "size", [0]);
      var sum3150 = request(call3148, "+(1)", [1], call3149);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3143 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult3146, call3147, sum3150);
      if3124 = call3143;
    }
    setLineNumber(2236);    // compilenode return
    return GraceTrue;
  };    // end of method parseAlias(_)
  this.methods["parseAlias(1)"] = func3121;
  func3121.methodName = "parseAlias(1)";
  func3121.paramCounts = [1];
  func3121.paramNames = ["node"];
  func3121.definitionLine = 2219;
  func3121.definitionModule = "parser";
  var func3151 = function(argcv, var_node) {    // method parseExclude(_), line 2238
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("parseExclude(_)", 0, numArgs - 1);
    }
    setLineNumber(2240);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3152 = selfRequest(this, "next", [0]);
    setLineNumber(2241);    // compilenode member
    // call case 6: other requests
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3154 = selfRequest(this, "methodHeader", [0]);
    var call3153 = request(call3154, "appliedOccurrence", [0]);
    var var_excludedMeth = call3153;
    setLineNumber(2242);    // compilenode call
    // call case 6: other requests
    var call3155 = request(var_node, "addExclusion(1)", [1], var_excludedMeth);
    setLineNumber(2243);    // compilenode return
    return GraceTrue;
  };    // end of method parseExclude(_)
  this.methods["parseExclude(1)"] = func3151;
  func3151.methodName = "parseExclude(1)";
  func3151.paramCounts = [1];
  func3151.paramNames = ["node"];
  func3151.definitionLine = 2238;
  func3151.definitionModule = "parser";
  var func3156 = function(argcv) {    // method doobject, line 2246
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("doobject", 0, numArgs - 0);
    }
    var if3157 = GraceDone;
    setLineNumber(2250);    // compilenode string
    var string3159 = new GraceString("object");
    // call case 2: outer request
    var call3158 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3159);
    if (Grace_isTrue(call3158)) {
      setLineNumber(2251);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3160 = selfRequest(this, "next", [0]);
      setLineNumber(2252);    // compilenode string
      var string3162 = new GraceString("an object constructor");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      setLineNumber(2253);    // compilenode string
      var string3163 = new GraceString("'object'");
      // call case 2: outer request
      var call3161 = selfRequest(importedModules["parser"], "parseObjectConstructorBody(1)startingWith(1)after(1)", [1, 1, 1], string3162, var_lastToken, string3163);
      if3157 = call3161;
    }
    return if3157;
  };    // end of method doobject
  this.methods["doobject"] = func3156;
  func3156.methodName = "doobject";
  func3156.paramCounts = [0];
  func3156.paramNames = [];
  func3156.definitionLine = 2246;
  func3156.definitionModule = "parser";
  var func3164 = function(argcv, var_constructName, var_btok, var_prev) {    // method parseObjectConstructorBody(_)startingWith(_)after(_), line 2257
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("parseObjectConstructorBody(_)startingWith(_)after(_)", 0, numArgs - 3);
    }
    setLineNumber(2263);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3165 = selfRequest(this, "doannotation", [0]);
    var var_anns = call3165;
    var if3166 = GraceDone;
    setLineNumber(2264);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3168 = request(var_sym, "isLBrace", [0]);
    var call3167 = request(call3168, "not", [0]);
    if (Grace_isTrue(call3167)) {
      setLineNumber(2265);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3170 = request(var_errormessages, "suggestion", [0]);
      var call3169 = request(call3170, "new", [0]);
      var var_suggestion = call3169;
      setLineNumber(2266);    // compilenode block
      var block3172 = new GraceBlock(this, 2266, 1);
      block3172.guard = jsTrue;
      block3172.real = function block3172(var_t) {
        setLineNumber(2266);    // compilenode member
        // call case 6: other requests
        var call3173 = request(var_t, "isRBrace", [0]);
        return call3173;
      };
      let applyMeth3172 = function apply_1 (argcv, ...args) {
          if (this.guard.apply(this.receiver, args))
              return this.real.apply(this.receiver, args);
          badBlockArgs.apply(this, args);
      };
      applyMeth3172.methodName = "apply(1)";
      applyMeth3172.paramCounts = [1];
      applyMeth3172.paramNames = ["t"];
      applyMeth3172.definitionLine = 2266;
      applyMeth3172.definitionModule = "parser";
      block3172.methods["apply(1)"] = applyMeth3172;
      let matchesMeth3172 = function matches_1 (argcv, ...args) {
          return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
      };
      matchesMeth3172.methodName = "matches(1)";
      matchesMeth3172.paramCounts = [1];
      matchesMeth3172.paramNames = ["t"];
      matchesMeth3172.definitionLine = 2266;
      matchesMeth3172.definitionModule = "parser";
      block3172.methods["matches(1)"] = matchesMeth3172;
      // call case 2: outer request
      var call3171 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block3172);
      var var_nextTok = call3171;
      var if3174 = GraceDone;
      setLineNumber(2267);    // compilenode op
      if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
      var opresult3175 = request(GraceFalse, "==(1)", [1], var_nextTok);
      if (Grace_isTrue(opresult3175)) {
        setLineNumber(2268);    // compilenode string
        var string3177 = new GraceString(" {}");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3176 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3177, var_lastToken);
        if3174 = call3176;
      } else {
        setLineNumber(2270);    // compilenode string
        var string3179 = new GraceString(" {");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3178 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3179, var_lastToken);
        if3174 = call3178;
      }
      setLineNumber(2272);    // compilenode string
      var string3181 = new GraceString("");
      var opresult3182 = request(string3181, "++(1)", [1], var_constructName);
      var string3183 = new GraceString(" must have a '{' after ");
      var opresult3184 = request(opresult3182, "++(1)", [1], string3183);
      var opresult3185 = request(opresult3184, "++(1)", [1], var_prev);
      var string3186 = new GraceString(".");
      var opresult3187 = request(opresult3185, "++(1)", [1], string3186);
      setLineNumber(2273);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3188 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3189 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3190 = request(var_lastToken, "size", [0]);
      var sum3191 = request(call3189, "+(1)", [1], call3190);
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3180 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult3187, call3188, sum3191, var_suggestion);
      if3166 = call3180;
    }
    setLineNumber(2276);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3192 = selfRequest(this, "next", [0]);
    setLineNumber(2277);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3193 = selfRequest(this, "skipSeparators", [0]);
    setLineNumber(2278);    // compilenode defdec
    if (var_values === undefined) raiseUninitializedVariable("values");
    var var_originalValues = var_values;
    setLineNumber(2279);    // compilenode array
    var array3195 = new GraceSequence([]);
    // call case 2: outer request
    var call3194 = selfRequest(var_prelude, "list(1)", [1], array3195);
    var_values = call3194;
    setLineNumber(2280);    // compilenode vardec
    var var_superObject = GraceFalse;
    setLineNumber(2281);    // compilenode array
    var array3197 = new GraceSequence([]);
    // call case 2: outer request
    var call3196 = selfRequest(var_prelude, "list(1)", [1], array3197);
    var var_usedTraits = call3196;
    setLineNumber(2282);    // compilenode vardec
    var var_inPreamble = GraceTrue;
    setLineNumber(2283);    // compilenode block
    var block3199 = new GraceBlock(this, 2283, 0);
    block3199.guard = jsTrue;
    block3199.real = function block3199() {
      setLineNumber(2283);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3201 = request(var_sym, "isRBrace", [0]);
      var call3200 = request(call3201, "not", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3203 = request(var_sym, "isEof", [0]);
      var call3202 = request(call3203, "not", [0]);
      var opresult3204 = request(call3200, "&&(1)", [1], call3202);
      return opresult3204;
    };
    let applyMeth3199 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3199.methodName = "apply";
    applyMeth3199.paramCounts = [0];
    applyMeth3199.paramNames = [];
    applyMeth3199.definitionLine = 2283;
    applyMeth3199.definitionModule = "parser";
    block3199.methods["apply"] = applyMeth3199;
    var block3205 = new GraceBlock(this, 2283, 0);
    block3205.guard = jsTrue;
    block3205.real = function block3205() {
      setLineNumber(2284);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3206 = selfRequest(this, "pushComments", [0]);
      var if3207 = GraceDone;
      setLineNumber(2285);    // compilenode block
      var block3209 = new GraceBlock(this, 2285, 0);
      block3209.guard = jsTrue;
      block3209.real = function block3209() {
        setLineNumber(2285);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3210 = selfRequest(this, "inheritOrUse", [0]);
        return call3210;
      };
      let applyMeth3209 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3209.methodName = "apply";
      applyMeth3209.paramCounts = [0];
      applyMeth3209.paramNames = [];
      applyMeth3209.definitionLine = 2285;
      applyMeth3209.definitionModule = "parser";
      block3209.methods["apply"] = applyMeth3209;
      // call case 2: outer request
      var call3208 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block3209);
      if (Grace_isTrue(call3208)) {
        setLineNumber(2286);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call3211 = request(var_values, "pop", [0]);
        var var_parentNode = call3211;
        var if3212 = GraceDone;
        setLineNumber(2287);    // compilenode if
        if (var_inPreamble === undefined) raiseUninitializedVariable("inPreamble");
        if (Grace_isTrue(var_inPreamble)) {
          var if3213 = GraceDone;
          setLineNumber(2288);    // compilenode member
          // call case 6: other requests
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          var call3214 = request(var_parentNode, "isUse", [0]);
          if (Grace_isTrue(call3214)) {
            setLineNumber(2289);    // compilenode call
            if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
            // call case 6: other requests
            if (var_usedTraits === undefined) raiseUninitializedVariable("usedTraits");
            var call3215 = request(var_usedTraits, "add(1)", [1], var_parentNode);
            if3213 = call3215;
          } else {
            var if3216 = GraceDone;
            setLineNumber(2290);    // compilenode member
            // call case 6: other requests
            if (var_usedTraits === undefined) raiseUninitializedVariable("usedTraits");
            var call3217 = request(var_usedTraits, "isEmpty", [0]);
            if (Grace_isTrue(call3217)) {
              setLineNumber(2291);    // compilenode bind
              if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
              var_superObject = var_parentNode;
              if3216 = GraceDone;
            } else {
              setLineNumber(2293);    // compilenode string
              var string3219 = new GraceString("'inherit' must come ");
              setLineNumber(2294);    // compilenode string
              var string3220 = new GraceString("before 'use' in ");
              var opresult3221 = request(string3220, "++(1)", [1], var_constructName);
              var string3222 = new GraceString("");
              var opresult3223 = request(opresult3221, "++(1)", [1], string3222);
              var opresult3224 = request(string3219, "++(1)", [1], opresult3223);
              setLineNumber(2295);    // compilenode member
              // call case 6: other requests
              if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
              var call3225 = request(var_parentNode, "line", [0]);
              // call case 6: other requests
              if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
              var call3226 = request(var_parentNode, "linePos", [0]);
              setLineNumber(2296);    // compilenode member
              // call case 6: other requests
              if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
              var call3227 = request(var_parentNode, "linePos", [0]);
              var sum3228 = request(call3227, "+(1)", [1], new GraceNum(7));
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call3218 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], opresult3224, call3225, call3226, sum3228);
              if3216 = call3218;
            }
            if3213 = if3216;
          }
          if3212 = if3213;
        } else {
          setLineNumber(2299);    // compilenode string
          var string3230 = new GraceString("'");
          // call case 6: other requests
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          var call3231 = request(var_parentNode, "statementName", [0]);
          var opresult3232 = request(string3230, "++(1)", [1], call3231);
          var string3233 = new GraceString("' must ");
          var opresult3234 = request(opresult3232, "++(1)", [1], string3233);
          setLineNumber(2300);    // compilenode string
          var string3235 = new GraceString("come at the start of ");
          var opresult3236 = request(string3235, "++(1)", [1], var_constructName);
          var string3237 = new GraceString("");
          var opresult3238 = request(opresult3236, "++(1)", [1], string3237);
          var opresult3239 = request(opresult3234, "++(1)", [1], opresult3238);
          setLineNumber(2301);    // compilenode member
          // call case 6: other requests
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          var call3240 = request(var_parentNode, "line", [0]);
          // call case 6: other requests
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          var call3241 = request(var_parentNode, "linePos", [0]);
          setLineNumber(2302);    // compilenode member
          // call case 6: other requests
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          var call3242 = request(var_parentNode, "linePos", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          var call3244 = request(var_parentNode, "statementName", [0]);
          var call3243 = request(call3244, "size", [0]);
          var sum3245 = request(call3242, "+(1)", [1], call3243);
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call3229 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], opresult3239, call3240, call3241, sum3245);
          if3212 = call3229;
        }
        if3207 = if3212;
      } else {
        var if3246 = GraceDone;
        setLineNumber(2304);    // compilenode block
        var block3248 = new GraceBlock(this, 2304, 0);
        block3248.guard = jsTrue;
        block3248.real = function block3248() {
          setLineNumber(2304);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3249 = selfRequest(this, "methodClassOrTrait", [0]);
          return call3249;
        };
        let applyMeth3248 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth3248.methodName = "apply";
        applyMeth3248.paramCounts = [0];
        applyMeth3248.paramNames = [];
        applyMeth3248.definitionLine = 2304;
        applyMeth3248.definitionModule = "parser";
        block3248.methods["apply"] = applyMeth3248;
        // call case 2: outer request
        var call3247 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block3248);
        if (Grace_isTrue(call3247)) {
          setLineNumber(2305);    // compilenode bind
          var_inPreamble = GraceFalse;
          if3246 = GraceDone;
        } else {
          var if3250 = GraceDone;
          setLineNumber(2306);    // compilenode block
          var block3252 = new GraceBlock(this, 2306, 0);
          block3252.guard = jsTrue;
          block3252.real = function block3252() {
            setLineNumber(2306);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3253 = selfRequest(this, "statement", [0]);
            return call3253;
          };
          let applyMeth3252 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth3252.methodName = "apply";
          applyMeth3252.paramCounts = [0];
          applyMeth3252.paramNames = [];
          applyMeth3252.definitionLine = 2306;
          applyMeth3252.definitionModule = "parser";
          block3252.methods["apply"] = applyMeth3252;
          // call case 2: outer request
          var call3251 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block3252);
          if (Grace_isTrue(call3251)) {
            setLineNumber(2307);    // compilenode bind
            var_inPreamble = GraceFalse;
            if3250 = GraceDone;
          } else {
            setLineNumber(2309);    // compilenode string
            var string3255 = new GraceString("unexpected symbol '");
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call3256 = request(var_sym, "value", [0]);
            var opresult3257 = request(string3255, "++(1)", [1], call3256);
            var string3258 = new GraceString("' in body ");
            var opresult3259 = request(opresult3257, "++(1)", [1], string3258);
            setLineNumber(2310);    // compilenode string
            var string3260 = new GraceString("of ");
            var opresult3261 = request(string3260, "++(1)", [1], var_constructName);
            var string3262 = new GraceString("");
            var opresult3263 = request(opresult3261, "++(1)", [1], string3262);
            var opresult3264 = request(opresult3259, "++(1)", [1], opresult3263);
            setLineNumber(2311);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call3265 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call3266 = request(var_sym, "linePos", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call3267 = request(var_sym, "endPos", [0]);
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call3254 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], opresult3264, call3265, call3266, call3267);
            if3250 = call3254;
          }
          if3246 = if3250;
        }
        if3207 = if3246;
      }
      setLineNumber(2313);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3268 = selfRequest(this, "separator", [0]);
      return call3268;
    };
    let applyMeth3205 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3205.methodName = "apply";
    applyMeth3205.paramCounts = [0];
    applyMeth3205.paramNames = [];
    applyMeth3205.definitionLine = 2283;
    applyMeth3205.definitionModule = "parser";
    block3205.methods["apply"] = applyMeth3205;
    // call case 2: outer request
    var call3198 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3199, block3205);
    setLineNumber(2315);    // compilenode defdec
    if (var_values === undefined) raiseUninitializedVariable("values");
    var var_body = var_values;
    setLineNumber(2316);    // compilenode bind
    var_values = var_originalValues;
    setLineNumber(2317);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3269 = selfRequest(this, "next", [0]);
    setLineNumber(2318);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call3272 = request(var_ast, "objectNode", [0]);
    var call3271 = request(call3272, "new(2)", [2], var_body, var_superObject);
    var call3270 = request(call3271, "setPositionFrom(1)", [1], var_btok);
    var var_objNode = call3270;
    var if3273 = GraceDone;
    setLineNumber(2319);    // compilenode op
    var opresult3274 = request(GraceFalse, "\u2260(1)", [1], var_anns);
    if (Grace_isTrue(opresult3274)) {
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      // call case 6: other requests
      // call case 6: other requests
      if (var_objNode === undefined) raiseUninitializedVariable("objNode");
      var call3276 = request(var_objNode, "annotations", [0]);
      var call3275 = request(call3276, "addAll(1)", [1], var_anns);
      if3273 = call3275;
    }
    setLineNumber(2320);    // compilenode call
    // call case 6: other requests
    var call3277 = request(var_objNode, "usedTraits:=(1)", [1], var_usedTraits);
    setLineNumber(2321);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3278 = request(var_values, "push(1)", [1], var_objNode);
    return call3278;
  };    // end of method parseObjectConstructorBody(_)startingWith(_)after(_)
  this.methods["parseObjectConstructorBody(1)startingWith(1)after(1)"] = func3164;
  func3164.methodName = "parseObjectConstructorBody(1)startingWith(1)after(1)";
  func3164.paramCounts = [1, 1, 1];
  func3164.paramNames = ["constructName", "btok", "prev"];
  func3164.definitionLine = 2257;
  func3164.definitionModule = "parser";
  var func3279 = function(argcv, var_btok) {    // method classOrTrait(_), line 2324
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("classOrTrait(_)", 0, numArgs - 1);
    }
    setLineNumber(2361);    // compilenode bind
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var_statementToken = var_sym;
    setLineNumber(2362);    // compilenode member
    // call case 6: other requests
    if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
    var call3280 = request(var_statementToken, "value", [0]);
    var var_myKind = call3280;
    setLineNumber(2363);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3281 = selfRequest(this, "next", [0]);
    var if3282 = GraceDone;
    setLineNumber(2364);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3284 = request(var_sym, "isIdentifier", [0]);
    var call3283 = request(call3284, "not", [0]);
    if (Grace_isTrue(call3283)) {
      setLineNumber(2365);    // compilenode array
      var array3286 = new GraceSequence([]);
      // call case 2: outer request
      var call3285 = selfRequest(var_prelude, "list(1)", [1], array3286);
      var var_suggestions = call3285;
      var if3287 = GraceDone;
      setLineNumber(2366);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3288 = request(var_sym, "isLBrace", [0]);
      if (Grace_isTrue(call3288)) {
        setLineNumber(2367);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3290 = request(var_errormessages, "suggestion", [0]);
        var call3289 = request(call3290, "new", [0]);
        var var_suggestion = call3289;
        setLineNumber(2368);    // compilenode string
        var string3292 = new GraceString(" \u00ab");
        if (var_myKind === undefined) raiseUninitializedVariable("myKind");
        var opresult3293 = request(string3292, "++(1)", [1], var_myKind);
        var string3294 = new GraceString(" name\u00bb");
        var opresult3295 = request(opresult3293, "++(1)", [1], string3294);
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3291 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult3295, var_lastToken);
        setLineNumber(2369);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3296 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(2370);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3298 = request(var_errormessages, "suggestion", [0]);
        var call3297 = request(call3298, "new", [0]);
        var_suggestion = call3297;
        setLineNumber(2371);    // compilenode call
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var string3300 = new GraceString("object");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3299 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_lastToken, string3300);
        setLineNumber(2372);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3301 = request(var_suggestions, "push(1)", [1], var_suggestion);
        if3287 = call3301;
      } else {
        setLineNumber(2374);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3303 = request(var_errormessages, "suggestion", [0]);
        var call3302 = request(call3303, "new", [0]);
        var var_suggestion = call3302;
        setLineNumber(2375);    // compilenode string
        var string3305 = new GraceString(" \u00ab");
        if (var_myKind === undefined) raiseUninitializedVariable("myKind");
        var opresult3306 = request(string3305, "++(1)", [1], var_myKind);
        var string3307 = new GraceString(" name\u00bb {}");
        var opresult3308 = request(opresult3306, "++(1)", [1], string3307);
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3304 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult3308, var_lastToken);
        setLineNumber(2376);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3309 = request(var_suggestions, "push(1)", [1], var_suggestion);
        if3287 = call3309;
      }
      setLineNumber(2378);    // compilenode string
      var string3311 = new GraceString("a ");
      if (var_myKind === undefined) raiseUninitializedVariable("myKind");
      var opresult3312 = request(string3311, "++(1)", [1], var_myKind);
      var string3313 = new GraceString(" must have a name after the keyword '");
      var opresult3314 = request(opresult3312, "++(1)", [1], string3313);
      if (var_myKind === undefined) raiseUninitializedVariable("myKind");
      var opresult3315 = request(opresult3314, "++(1)", [1], var_myKind);
      var string3316 = new GraceString("'.");
      var opresult3317 = request(opresult3315, "++(1)", [1], string3316);
      setLineNumber(2379);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3318 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3319 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3320 = request(var_lastToken, "size", [0]);
      var sum3321 = request(call3319, "+(1)", [1], call3320);
      var sum3322 = request(sum3321, "+(1)", [1], new GraceNum(1));
      if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3310 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult3317, call3318, sum3322, var_suggestions);
      if3282 = call3310;
    }
    var if3323 = GraceDone;
    setLineNumber(2382);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_tokens === undefined) raiseUninitializedVariable("tokens");
    var call3325 = request(var_tokens, "first", [0]);
    var call3324 = request(call3325, "isDot", [0]);
    if (Grace_isTrue(call3324)) {
      setLineNumber(2383);    // compilenode string
      var string3327 = new GraceString("dotted classes are no longer supported. ");
      setLineNumber(2384);    // compilenode string
      var string3328 = new GraceString("Consider using a class, or a class inside an object constructor.");
      var opresult3329 = request(string3327, "++(1)", [1], string3328);
      setLineNumber(2385);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_tokens === undefined) raiseUninitializedVariable("tokens");
      var call3331 = request(var_tokens, "first", [0]);
      var call3330 = request(call3331, "line", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_tokens === undefined) raiseUninitializedVariable("tokens");
      var call3333 = request(var_tokens, "first", [0]);
      var call3332 = request(call3333, "linePos", [0]);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3326 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult3329, call3330, call3332);
      if3323 = call3326;
    }
    setLineNumber(2387);    // compilenode call
    // call case 6: other requests
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3335 = selfRequest(this, "methodHeader", [0]);
    var call3334 = request(call3335, "setPositionFrom(1)", [1], var_btok);
    var var_methNode = call3334;
    setLineNumber(2388);    // compilenode string
    var string3337 = new GraceString("a ");
    var opresult3338 = request(string3337, "++(1)", [1], var_myKind);
    var string3339 = new GraceString("");
    var opresult3340 = request(opresult3338, "++(1)", [1], string3339);
    var string3341 = new GraceString("the ");
    var opresult3342 = request(string3341, "++(1)", [1], var_myKind);
    var string3343 = new GraceString(" header");
    var opresult3344 = request(opresult3342, "++(1)", [1], string3343);
    // call case 2: outer request
    var call3336 = selfRequest(importedModules["parser"], "parseObjectConstructorBody(1)startingWith(1)after(1)", [1, 1, 1], opresult3340, var_btok, opresult3344);
    setLineNumber(2389);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3345 = request(var_values, "pop", [0]);
    var var_objNode = call3345;
    setLineNumber(2390);    // compilenode array
    var array3347 = new GraceSequence([var_objNode]);
    // call case 6: other requests
    var call3346 = request(var_methNode, "body:=(1)", [1], array3347);
    setLineNumber(2391);    // compilenode call
    // call case 6: other requests
    var call3348 = request(var_methNode, "description:=(1)", [1], var_myKind);
    setLineNumber(2392);    // compilenode member
    // call case 6: other requests
    var call3350 = request(var_objNode, "annotations", [0]);
    // call case 6: other requests
    // call case 6: other requests
    var call3351 = request(var_methNode, "annotations", [0]);
    var call3349 = request(call3351, "addAll(1)", [1], call3350);
    setLineNumber(2396);    // compilenode member
    // call case 6: other requests
    var call3353 = request(var_methNode, "canonicalName", [0]);
    // call case 6: other requests
    var call3352 = request(var_objNode, "name:=(1)", [1], call3353);
    var if3354 = GraceDone;
    setLineNumber(2397);    // compilenode string
    var string3355 = new GraceString("class");
    var opresult3356 = request(var_myKind, "==(1)", [1], string3355);
    if (Grace_isTrue(opresult3356)) {
      setLineNumber(2398);    // compilenode call
      // call case 6: other requests
      if (var_objNode === undefined) raiseUninitializedVariable("objNode");
      var call3357 = request(var_objNode, "inClass:=(1)", [1], GraceTrue);
      if3354 = call3357;
    } else {
      var if3358 = GraceDone;
      setLineNumber(2399);    // compilenode op
      if (var_myKind === undefined) raiseUninitializedVariable("myKind");
      var string3359 = new GraceString("trait");
      var opresult3360 = request(var_myKind, "==(1)", [1], string3359);
      if (Grace_isTrue(opresult3360)) {
        setLineNumber(2400);    // compilenode call
        // call case 6: other requests
        if (var_objNode === undefined) raiseUninitializedVariable("objNode");
        var call3361 = request(var_objNode, "inTrait:=(1)", [1], GraceTrue);
        if3358 = call3361;
      }
      if3354 = if3358;
    }
    setLineNumber(2402);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3362 = request(var_values, "push(1)", [1], var_methNode);
    setLineNumber(2403);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3363 = selfRequest(this, "reconcileComments", [0]);
    return call3363;
  };    // end of method classOrTrait(_)
  this.methods["classOrTrait(1)"] = func3279;
  func3279.methodName = "classOrTrait(1)";
  func3279.paramCounts = [1];
  func3279.paramNames = ["btok"];
  func3279.definitionLine = 2324;
  func3279.definitionModule = "parser";
  var func3364 = function(argcv) {    // method methodClassOrTrait, line 2406
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("methodClassOrTrait", 0, numArgs - 0);
    }
    setLineNumber(2408);    // compilenode vardec
    var var_isOnceMethod = GraceFalse;
    setLineNumber(2409);    // compilenode vardec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_btok = var_sym;
    var if3365 = GraceDone;
    setLineNumber(2410);    // compilenode string
    var string3367 = new GraceString("once");
    // call case 2: outer request
    var call3366 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3367);
    if (Grace_isTrue(call3366)) {
      setLineNumber(2411);    // compilenode bind
      var_isOnceMethod = GraceTrue;
      setLineNumber(2412);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3368 = selfRequest(this, "next", [0]);
      var if3369 = GraceDone;
      setLineNumber(2413);    // compilenode member
      // call case 6: other requests
      var string3372 = new GraceString("method");
      var string3373 = new GraceString("class");
      var string3374 = new GraceString("trait");
      // call case 2: outer request
      var call3371 = selfRequest(importedModules["parser"], "acceptKeyword(1)or(1)or(1)", [1, 1, 1], string3372, string3373, string3374);
      var call3370 = request(call3371, "not", [0]);
      if (Grace_isTrue(call3370)) {
        setLineNumber(2414);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3376 = request(var_errormessages, "suggestion", [0]);
        var call3375 = request(call3376, "new", [0]);
        var var_suggestion = call3375;
        setLineNumber(2415);    // compilenode string
        var string3378 = new GraceString(" method");
        if (var_btok === undefined) raiseUninitializedVariable("btok");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3377 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3378, var_btok);
        setLineNumber(2416);    // compilenode string
        var string3380 = new GraceString("`once` must be followed by `method`, `class` or `trait`");
        setLineNumber(2417);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3381 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3382 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3379 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3380, call3381, call3382, var_suggestion);
        if3369 = call3379;
      }
      if3365 = if3369;
    }
    var if3383 = GraceDone;
    setLineNumber(2420);    // compilenode string
    var string3385 = new GraceString("method");
    // call case 2: outer request
    var call3384 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3385);
    if (Grace_isTrue(call3384)) {
      setLineNumber(2421);    // compilenode call
      if (var_btok === undefined) raiseUninitializedVariable("btok");
      // call case 2: outer request
      var call3386 = selfRequest(importedModules["parser"], "methodDeclaration(1)", [1], var_btok);
      if3383 = call3386;
    } else {
      var if3387 = GraceDone;
      setLineNumber(2422);    // compilenode string
      var string3389 = new GraceString("class");
      var string3390 = new GraceString("trait");
      // call case 2: outer request
      var call3388 = selfRequest(importedModules["parser"], "acceptKeyword(1)or(1)", [1, 1], string3389, string3390);
      if (Grace_isTrue(call3388)) {
        setLineNumber(2423);    // compilenode call
        if (var_btok === undefined) raiseUninitializedVariable("btok");
        // call case 2: outer request
        var call3391 = selfRequest(importedModules["parser"], "classOrTrait(1)", [1], var_btok);
        if3387 = call3391;
      } else {
        setLineNumber(2425);    // compilenode return
        return var_done;
      }
      if3383 = if3387;
    }
    setLineNumber(2427);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3393 = request(var_values, "last", [0]);
    var call3392 = request(call3393, "isOnceMethod:=(1)", [1], var_isOnceMethod);
    return call3392;
  };    // end of method methodClassOrTrait
  this.methods["methodClassOrTrait"] = func3364;
  func3364.methodName = "methodClassOrTrait";
  func3364.paramCounts = [0];
  func3364.paramNames = [];
  func3364.definitionLine = 2406;
  func3364.definitionModule = "parser";
  var func3394 = function(argcv, var_btok) {    // method methodDeclaration(_), line 2430
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("methodDeclaration(_)", 0, numArgs - 1);
    }
    setLineNumber(2431);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3395 = selfRequest(this, "next", [0]);
    setLineNumber(2432);    // compilenode call
    // call case 6: other requests
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3397 = selfRequest(this, "methodHeader", [0]);
    var call3396 = request(call3397, "setPositionFrom(1)", [1], var_btok);
    var var_methNode = call3396;
    setLineNumber(2433);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3398 = selfRequest(this, "doannotation", [0]);
    var var_anns = call3398;
    setLineNumber(2434);    // compilenode defdec
    if (var_values === undefined) raiseUninitializedVariable("values");
    var var_originalValues = var_values;
    setLineNumber(2435);    // compilenode array
    var array3400 = new GraceSequence([]);
    // call case 2: outer request
    var call3399 = selfRequest(var_prelude, "list(1)", [1], array3400);
    var_values = call3399;
    setLineNumber(2436);    // compilenode vardec
    var var_lBraceSym;
    var if3401 = GraceDone;
    setLineNumber(2437);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3402 = request(var_sym, "isLBrace", [0]);
    if (Grace_isTrue(call3402)) {
      setLineNumber(2438);    // compilenode bind
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var_lBraceSym = var_sym;
      setLineNumber(2439);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3403 = selfRequest(this, "next", [0]);
      setLineNumber(2440);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3404 = selfRequest(this, "skipSeparators", [0]);
      setLineNumber(2442);    // compilenode block
      var block3406 = new GraceBlock(this, 2442, 0);
      block3406.guard = jsTrue;
      block3406.real = function block3406() {
        setLineNumber(2442);    // compilenode block
        var block3408 = new GraceBlock(this, 2442, 0);
        block3408.guard = jsTrue;
        block3408.real = function block3408() {
          setLineNumber(2442);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3409 = selfRequest(this, "statement", [0]);
          return call3409;
        };
        let applyMeth3408 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth3408.methodName = "apply";
        applyMeth3408.paramCounts = [0];
        applyMeth3408.paramNames = [];
        applyMeth3408.definitionLine = 2442;
        applyMeth3408.definitionModule = "parser";
        block3408.methods["apply"] = applyMeth3408;
        // call case 2: outer request
        var call3407 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block3408);
        return call3407;
      };
      let applyMeth3406 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3406.methodName = "apply";
      applyMeth3406.paramCounts = [0];
      applyMeth3406.paramNames = [];
      applyMeth3406.definitionLine = 2442;
      applyMeth3406.definitionModule = "parser";
      block3406.methods["apply"] = applyMeth3406;
      var block3410 = new GraceBlock(this, 2442, 0);
      block3410.guard = jsTrue;
      block3410.real = function block3410() {
        setLineNumber(2442);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3411 = selfRequest(this, "separator", [0]);
        return call3411;
      };
      let applyMeth3410 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3410.methodName = "apply";
      applyMeth3410.paramCounts = [0];
      applyMeth3410.paramNames = [];
      applyMeth3410.definitionLine = 2442;
      applyMeth3410.definitionModule = "parser";
      block3410.methods["apply"] = applyMeth3410;
      // call case 2: outer request
      var call3405 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3406, block3410);
      var if3412 = GraceDone;
      setLineNumber(2445);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3414 = request(var_sym, "isRBrace", [0]);
      var call3413 = request(call3414, "not", [0]);
      if (Grace_isTrue(call3413)) {
        setLineNumber(2446);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3416 = request(var_errormessages, "suggestion", [0]);
        var call3415 = request(call3416, "new", [0]);
        var var_suggestion = call3415;
        setLineNumber(2447);    // compilenode call
        // call case 2: outer request
        var call3417 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceFalse);
        var var_closingBrace = call3417;
        var if3418 = GraceDone;
        setLineNumber(2448);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
        var call3420 = request(var_closingBrace, "found", [0]);
        var call3419 = request(call3420, "not", [0]);
        if (Grace_isTrue(call3419)) {
          var if3421 = GraceDone;
          setLineNumber(2449);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3422 = request(var_sym, "isEof", [0]);
          if (Grace_isTrue(call3422)) {
            setLineNumber(2450);    // compilenode string
            var string3424 = new GraceString("end of program ");
            setLineNumber(2451);    // compilenode string
            var string3425 = new GraceString("found while searching for the '}' to close ");
            var opresult3426 = request(string3424, "++(1)", [1], string3425);
            setLineNumber(2452);    // compilenode string
            var string3427 = new GraceString("a method declaration.");
            var opresult3428 = request(opresult3426, "++(1)", [1], string3427);
            setLineNumber(2453);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call3429 = request(var_sym, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call3430 = request(var_sym, "linePos", [0]);
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call3423 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult3428, call3429, call3430);
            if3421 = call3423;
          }
          var if3431 = GraceDone;
          setLineNumber(2455);    // compilenode member
          // call case 6: other requests
          if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
          var call3432 = request(var_closingBrace, "tok", [0]);
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult3433 = request(call3432, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult3433)) {
            setLineNumber(2456);    // compilenode string
            var string3435 = new GraceString("}");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call3434 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3435, var_lastToken);
            if3431 = call3434;
          } else {
            setLineNumber(2458);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call3438 = request(var_closingBrace, "tok", [0]);
            var call3437 = request(call3438, "line", [0]);
            var sum3439 = request(call3437, "+(1)", [1], new GraceNum(.1));
            var string3440 = new GraceString("}");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call3436 = request(var_suggestion, "addLine(2)", [2], sum3439, string3440);
            if3431 = call3436;
          }
          if3418 = if3431;
        }
        setLineNumber(2461);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3441 = request(var_suggestion, "deleteToken(1)", [1], var_sym);
        setLineNumber(2462);    // compilenode string
        var string3443 = new GraceString("a method must end with a '}'.");
        setLineNumber(2463);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3444 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3445 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3442 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3443, call3444, call3445, var_suggestion);
        if3412 = call3442;
      }
      setLineNumber(2465);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3446 = selfRequest(this, "next", [0]);
      if3401 = call3446;
    } else {
      var if3447 = GraceDone;
      setLineNumber(2466);    // compilenode op
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      var opresult3448 = request(GraceFalse, "==(1)", [1], var_anns);
      if (Grace_isTrue(opresult3448)) {
        setLineNumber(2467);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3450 = request(var_errormessages, "suggestion", [0]);
        var call3449 = request(call3450, "new", [0]);
        var var_suggestion = call3449;
        setLineNumber(2468);    // compilenode call
        // call case 2: outer request
        var call3451 = selfRequest(importedModules["parser"], "findClosingBrace(2)", [2], var_btok, GraceTrue);
        var var_closingBrace = call3451;
        var if3452 = GraceDone;
        setLineNumber(2469);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
        var call3454 = request(var_closingBrace, "found", [0]);
        var call3453 = request(call3454, "not", [0]);
        if (Grace_isTrue(call3453)) {
          var if3455 = GraceDone;
          setLineNumber(2470);    // compilenode member
          // call case 6: other requests
          if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
          var call3456 = request(var_closingBrace, "tok", [0]);
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var opresult3457 = request(call3456, "==(1)", [1], var_lastToken);
          if (Grace_isTrue(opresult3457)) {
            setLineNumber(2471);    // compilenode string
            var string3459 = new GraceString(" {}");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call3458 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string3459, var_lastToken, GraceTrue);
            if3455 = call3458;
          } else {
            setLineNumber(2473);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_closingBrace === undefined) raiseUninitializedVariable("closingBrace");
            var call3462 = request(var_closingBrace, "tok", [0]);
            var call3461 = request(call3462, "line", [0]);
            var sum3463 = request(call3461, "+(1)", [1], new GraceNum(.1));
            var string3464 = new GraceString("}");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call3460 = request(var_suggestion, "addLine(2)", [2], sum3463, string3464);
            setLineNumber(2474);    // compilenode string
            var string3466 = new GraceString(" {");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call3465 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string3466, var_lastToken, GraceTrue);
            if3455 = call3465;
          }
          if3452 = if3455;
        } else {
          setLineNumber(2477);    // compilenode string
          var string3468 = new GraceString(" {");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3467 = request(var_suggestion, "insert(1)afterToken(1)andTrailingSpace(1)", [1, 1, 1], string3468, var_lastToken, GraceTrue);
          if3452 = call3467;
        }
        setLineNumber(2479);    // compilenode string
        var string3470 = new GraceString("a method must have a '{' after the name.");
        setLineNumber(2480);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3471 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3472 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3473 = request(var_lastToken, "size", [0]);
        var sum3474 = request(call3472, "+(1)", [1], call3473);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3469 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3470, call3471, sum3474, var_suggestion);
        if3447 = call3469;
      } else {
        setLineNumber(2482);    // compilenode call
        // call case 6: other requests
        if (var_methNode === undefined) raiseUninitializedVariable("methNode");
        var call3475 = request(var_methNode, "hasBody:=(1)", [1], GraceFalse);
        if3447 = call3475;
      }
      if3401 = if3447;
    }
    setLineNumber(2484);    // compilenode call
    if (var_values === undefined) raiseUninitializedVariable("values");
    // call case 6: other requests
    var call3476 = request(var_methNode, "body:=(1)", [1], var_values);
    var if3477 = GraceDone;
    setLineNumber(2485);    // compilenode op
    var opresult3478 = request(GraceFalse, "\u2260(1)", [1], var_anns);
    if (Grace_isTrue(opresult3478)) {
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      // call case 6: other requests
      // call case 6: other requests
      if (var_methNode === undefined) raiseUninitializedVariable("methNode");
      var call3480 = request(var_methNode, "annotations", [0]);
      var call3479 = request(call3480, "addAll(1)", [1], var_anns);
      if3477 = call3479;
    }
    var if3481 = GraceDone;
    setLineNumber(2486);    // compilenode member
    // call case 6: other requests
    var call3482 = request(var_methNode, "hasBody", [0]);
    if (Grace_isTrue(call3482)) {
      setLineNumber(2487);    // compilenode member
      // call case 6: other requests
      if (var_methNode === undefined) raiseUninitializedVariable("methNode");
      var call3483 = request(var_methNode, "isAbstract", [0]);
      var var_abst = call3483;
      var if3484 = GraceDone;
      setLineNumber(2488);    // compilenode op
      if (var_abst === undefined) raiseUninitializedVariable("abst");
      // call case 6: other requests
      if (var_methNode === undefined) raiseUninitializedVariable("methNode");
      var call3485 = request(var_methNode, "isRequired", [0]);
      var opresult3486 = request(var_abst, "||(1)", [1], call3485);
      if (Grace_isTrue(opresult3486)) {
        var if3487 = GraceDone;
        setLineNumber(2489);    // compilenode if
        if (var_abst === undefined) raiseUninitializedVariable("abst");
        if (Grace_isTrue(var_abst)) {
          var string3488 = new GraceString("an abstract");
          if3487 = string3488;
        } else {
          var string3489 = new GraceString("a required");
          if3487 = string3489;
        }
        var var_which = if3487;
        setLineNumber(2490);    // compilenode string
        var string3491 = new GraceString("");
        if (var_which === undefined) raiseUninitializedVariable("which");
        var opresult3492 = request(string3491, "++(1)", [1], var_which);
        var string3493 = new GraceString(" method must not have a method body");
        var opresult3494 = request(opresult3492, "++(1)", [1], string3493);
        setLineNumber(2491);    // compilenode member
        // call case 6: other requests
        if (var_lBraceSym === undefined) raiseUninitializedVariable("lBraceSym");
        var call3495 = request(var_lBraceSym, "line", [0]);
        // call case 6: other requests
        if (var_lBraceSym === undefined) raiseUninitializedVariable("lBraceSym");
        var call3496 = request(var_lBraceSym, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3497 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3498 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3490 = request(var_errormessages, "syntaxError(1)atRange(4)", [1, 4], opresult3494, call3495, call3496, call3497, call3498);
        if3484 = call3490;
      }
      if3481 = if3484;
    }
    setLineNumber(2494);    // compilenode bind
    var_values = var_originalValues;
    setLineNumber(2495);    // compilenode member
    // call case 6: other requests
    var call3500 = request(var_btok, "line", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call3499 = request(var_util, "setline(1)", [1], call3500);
    setLineNumber(2496);    // compilenode call
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3501 = request(var_values, "push(1)", [1], var_methNode);
    setLineNumber(2497);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3502 = selfRequest(this, "reconcileComments", [0]);
    return call3502;
  };    // end of method methodDeclaration(_)
  this.methods["methodDeclaration(1)"] = func3394;
  func3394.methodName = "methodDeclaration(1)";
  func3394.paramCounts = [1];
  func3394.paramNames = ["btok"];
  func3394.definitionLine = 2430;
  func3394.definitionModule = "parser";
  var func3503 = function(argcv) {    // method separator, line 2500
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("separator", 0, numArgs - 0);
    }
    setLineNumber(2501);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3504 = selfRequest(this, "pushComments", [0]);
    var if3505 = GraceDone;
    setLineNumber(2502);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3506 = request(var_sym, "isSeparator", [0]);
    if (Grace_isTrue(call3506)) {
      setLineNumber(2503);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3507 = selfRequest(this, "skipSeparators", [0]);
      if3505 = call3507;
    } else {
      var if3508 = GraceDone;
      setLineNumber(2504);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3509 = request(var_sym, "isEof", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3510 = request(var_sym, "isRBrace", [0]);
      var opresult3511 = request(call3509, "||(1)", [1], call3510);
      if (Grace_isTrue(opresult3511)) {
        if3508 = GraceDone;
      } else {
        setLineNumber(2507);    // compilenode string
        var string3513 = new GraceString("statements must be separated by newlines (or semicolons)");
        setLineNumber(2508);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3514 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3515 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3516 = request(var_lastToken, "size", [0]);
        var sum3517 = request(call3515, "+(1)", [1], call3516);
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3512 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], string3513, call3514, sum3517);
        if3508 = call3512;
      }
      if3505 = if3508;
    }
    return if3505;
  };    // end of method separator
  this.methods["separator"] = func3503;
  func3503.methodName = "separator";
  func3503.paramCounts = [0];
  func3503.paramNames = [];
  func3503.definitionLine = 2500;
  func3503.definitionModule = "parser";
  var func3518 = function(argcv, var_tm) {    // method methodDecRest(_), line 2512
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("methodDecRest(_)", 0, numArgs - 1);
    }
    setLineNumber(2518);    // compilenode member
    // call case 6: other requests
    var call3519 = request(var_tm, "signature", [0]);
    var var_signature = call3519;
    setLineNumber(2519);    // compilenode block
    var block3521 = new GraceBlock(this, 2519, 0);
    block3521.guard = jsTrue;
    block3521.real = function block3521() {
      setLineNumber(2519);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3522 = request(var_sym, "isIdentifier", [0]);
      return call3522;
    };
    let applyMeth3521 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3521.methodName = "apply";
    applyMeth3521.paramCounts = [0];
    applyMeth3521.paramNames = [];
    applyMeth3521.definitionLine = 2519;
    applyMeth3521.definitionModule = "parser";
    block3521.methods["apply"] = applyMeth3521;
    var block3523 = new GraceBlock(this, 2519, 0);
    block3523.guard = jsTrue;
    block3523.real = function block3523() {
      setLineNumber(2520);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3524 = selfRequest(this, "pushIdentifier", [0]);
      setLineNumber(2521);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3527 = request(var_values, "pop", [0]);
      var call3526 = request(call3527, "nameString", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call3528 = request(var_ast, "signaturePart", [0]);
      var call3525 = request(call3528, "partName(1)", [1], call3526);
      var var_part = call3525;
      var if3529 = GraceDone;
      setLineNumber(2522);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3531 = request(var_sym, "isLParen", [0]);
      var call3530 = request(call3531, "not", [0]);
      if (Grace_isTrue(call3530)) {
        setLineNumber(2523);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3533 = request(var_errormessages, "suggestion", [0]);
        var call3532 = request(call3533, "new", [0]);
        var var_suggestion = call3532;
        setLineNumber(2524);    // compilenode string
        var string3535 = new GraceString("(");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3534 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3535, var_lastToken);
        setLineNumber(2525);    // compilenode string
        var string3537 = new GraceString("the declaration of a method with multiple ");
        setLineNumber(2526);    // compilenode string
        var string3538 = new GraceString("parameter lists must have parentheses around each parameter list.");
        var opresult3539 = request(string3537, "++(1)", [1], string3538);
        setLineNumber(2527);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3540 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3541 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3536 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult3539, call3540, call3541, var_suggestion);
        if3529 = call3536;
      }
      setLineNumber(2529);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3542 = selfRequest(this, "next", [0]);
      setLineNumber(2530);    // compilenode vardec
      var var_comma = GraceFalse;
      setLineNumber(2531);    // compilenode block
      var block3544 = new GraceBlock(this, 2531, 0);
      block3544.guard = jsTrue;
      block3544.real = function block3544() {
        setLineNumber(2532);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3545 = request(var_sym, "isIdentifier", [0]);
        var block3546 = new GraceBlock(this, 2532, 0);
        block3546.guard = jsTrue;
        block3546.real = function block3546() {
          setLineNumber(2532);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3547 = request(var_sym, "isOp", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3548 = request(var_sym, "value", [0]);
          var string3549 = new GraceString("*");
          var opresult3550 = request(call3548, "==(1)", [1], string3549);
          var opresult3551 = request(call3547, "&&(1)", [1], opresult3550);
          return opresult3551;
        };
        let applyMeth3546 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth3546.methodName = "apply";
        applyMeth3546.paramCounts = [0];
        applyMeth3546.paramNames = [];
        applyMeth3546.definitionLine = 2532;
        applyMeth3546.definitionModule = "parser";
        block3546.methods["apply"] = applyMeth3546;
        var opresult3552 = request(call3545, "||(1)", [1], block3546);
        return opresult3552;
      };
      let applyMeth3544 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3544.methodName = "apply";
      applyMeth3544.paramCounts = [0];
      applyMeth3544.paramNames = [];
      applyMeth3544.definitionLine = 2531;
      applyMeth3544.definitionModule = "parser";
      block3544.methods["apply"] = applyMeth3544;
      setLineNumber(2533);    // compilenode block
      var block3553 = new GraceBlock(this, 2533, 0);
      block3553.guard = jsTrue;
      block3553.real = function block3553() {
        var if3554 = GraceDone;
        setLineNumber(2534);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3555 = request(var_sym, "isOp", [0]);
        if (Grace_isTrue(call3555)) {
          setLineNumber(2535);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3556 = selfRequest(this, "next", [0]);
          setLineNumber(2536);    // compilenode string
          var string3558 = new GraceString("variable length parameter lists (parameters prefixed by '*') are no longer part of Grace.  Consider making ");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3559 = request(var_sym, "value", [0]);
          var opresult3560 = request(string3558, "++(1)", [1], call3559);
          var string3561 = new GraceString(" a Collection.");
          var opresult3562 = request(opresult3560, "++(1)", [1], string3561);
          setLineNumber(2537);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3563 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3564 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call3557 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult3562, call3563, call3564);
          if3554 = call3557;
        }
        setLineNumber(2539);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3565 = selfRequest(this, "pushIdentifier", [0]);
        setLineNumber(2540);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call3566 = request(var_values, "pop", [0]);
        var var_nxt = call3566;
        setLineNumber(2541);    // compilenode call
        // call case 6: other requests
        if (var_nxt === undefined) raiseUninitializedVariable("nxt");
        var call3567 = request(var_nxt, "isBindingOccurrence:=(1)", [1], GraceTrue);
        setLineNumber(2542);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3569 = selfRequest(this, "optionalTypeAnnotation", [0]);
        // call case 6: other requests
        if (var_nxt === undefined) raiseUninitializedVariable("nxt");
        var call3568 = request(var_nxt, "dtype:=(1)", [1], call3569);
        setLineNumber(2543);    // compilenode call
        if (var_nxt === undefined) raiseUninitializedVariable("nxt");
        // call case 6: other requests
        // call case 6: other requests
        if (var_part === undefined) raiseUninitializedVariable("part");
        var call3571 = request(var_part, "params", [0]);
        var call3570 = request(call3571, "push(1)", [1], var_nxt);
        var if3572 = GraceDone;
        setLineNumber(2544);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3573 = request(var_sym, "isComma", [0]);
        if (Grace_isTrue(call3573)) {
          setLineNumber(2545);    // compilenode bind
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var_comma = var_sym;
          setLineNumber(2546);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3574 = selfRequest(this, "next", [0]);
          if3572 = call3574;
        }
        return if3572;
      };
      let applyMeth3553 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3553.methodName = "apply";
      applyMeth3553.paramCounts = [0];
      applyMeth3553.paramNames = [];
      applyMeth3553.definitionLine = 2533;
      applyMeth3553.definitionModule = "parser";
      block3553.methods["apply"] = applyMeth3553;
      // call case 2: outer request
      var call3543 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3544, block3553);
      var if3575 = GraceDone;
      setLineNumber(2549);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3577 = request(var_sym, "isRParen", [0]);
      var call3576 = request(call3577, "not", [0]);
      if (Grace_isTrue(call3576)) {
        setLineNumber(2550);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3579 = request(var_errormessages, "suggestion", [0]);
        var call3578 = request(call3579, "new", [0]);
        var var_suggestion = call3578;
        setLineNumber(2551);    // compilenode string
        var string3581 = new GraceString(")");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3580 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3581, var_lastToken);
        setLineNumber(2552);    // compilenode string
        var string3583 = new GraceString("a parameter list beginning with a '(' must end with a ')'");
        setLineNumber(2553);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3584 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3585 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3586 = request(var_lastToken, "size", [0]);
        var sum3587 = request(call3585, "+(1)", [1], call3586);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3582 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3583, call3584, sum3587, var_suggestion);
        if3575 = call3582;
      }
      setLineNumber(2556);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3588 = selfRequest(this, "next", [0]);
      setLineNumber(2557);    // compilenode call
      if (var_part === undefined) raiseUninitializedVariable("part");
      // call case 6: other requests
      if (var_signature === undefined) raiseUninitializedVariable("signature");
      var call3589 = request(var_signature, "push(1)", [1], var_part);
      return call3589;
    };
    let applyMeth3523 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3523.methodName = "apply";
    applyMeth3523.paramCounts = [0];
    applyMeth3523.paramNames = [];
    applyMeth3523.definitionLine = 2519;
    applyMeth3523.definitionModule = "parser";
    block3523.methods["apply"] = applyMeth3523;
    // call case 2: outer request
    var call3520 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3521, block3523);
    return call3520;
  };    // end of method methodDecRest(_)
  this.methods["methodDecRest(1)"] = func3518;
  func3518.methodName = "methodDecRest(1)";
  func3518.paramCounts = [1];
  func3518.paramNames = ["tm"];
  func3518.definitionLine = 2512;
  func3518.definitionModule = "parser";
  var func3590 = function(argcv) {    // method optionalTypeAnnotation, line 2561
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("optionalTypeAnnotation", 0, numArgs - 0);
    }
    var if3591 = GraceDone;
    setLineNumber(2564);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3592 = request(var_sym, "isColon", [0]);
    if (Grace_isTrue(call3592)) {
      setLineNumber(2565);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3593 = selfRequest(this, "next", [0]);
      var if3594 = GraceDone;
      setLineNumber(2566);    // compilenode block
      var block3596 = new GraceBlock(this, 2566, 0);
      block3596.guard = jsTrue;
      block3596.real = function block3596() {
        setLineNumber(2566);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3597 = selfRequest(this, "typeexpression", [0]);
        return call3597;
      };
      let applyMeth3596 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3596.methodName = "apply";
      applyMeth3596.paramCounts = [0];
      applyMeth3596.paramNames = [];
      applyMeth3596.definitionLine = 2566;
      applyMeth3596.definitionModule = "parser";
      block3596.methods["apply"] = applyMeth3596;
      // call case 2: outer request
      var call3595 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block3596);
      if (Grace_isTrue(call3595)) {
        setLineNumber(2567);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call3598 = request(var_values, "pop", [0]);
        if3594 = call3598;
      } else {
        setLineNumber(2569);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3599 = selfRequest(this, "checkBadTypeLiteral", [0]);
        setLineNumber(2570);    // compilenode array
        var array3601 = new GraceSequence([]);
        // call case 2: outer request
        var call3600 = selfRequest(var_prelude, "list(1)", [1], array3601);
        var var_suggestions = call3600;
        setLineNumber(2571);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3603 = request(var_errormessages, "suggestion", [0]);
        var call3602 = request(call3603, "new", [0]);
        var var_suggestion = call3602;
        setLineNumber(2572);    // compilenode string
        var string3605 = new GraceString(" \u00abtype name\u00bb");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3604 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3605, var_lastToken);
        setLineNumber(2573);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3606 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(2574);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3608 = request(var_errormessages, "suggestion", [0]);
        var call3607 = request(call3608, "new", [0]);
        var_suggestion = call3607;
        setLineNumber(2575);    // compilenode call
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call3609 = request(var_suggestion, "deleteToken(1)leading(1)trailing(1)", [1, 1, 1], var_lastToken, GraceTrue, GraceFalse);
        setLineNumber(2576);    // compilenode call
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call3610 = request(var_suggestions, "push(1)", [1], var_suggestion);
        setLineNumber(2577);    // compilenode string
        var string3612 = new GraceString("a type name or type expression must follow ':'.");
        setLineNumber(2578);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3613 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3614 = request(var_sym, "linePos", [0]);
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3611 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], string3612, call3613, call3614, var_suggestions);
        if3594 = call3611;
      }
      if3591 = if3594;
    } else {
      if3591 = GraceFalse;
    }
    return if3591;
  };    // end of method optionalTypeAnnotation
  this.methods["optionalTypeAnnotation"] = func3590;
  func3590.methodName = "optionalTypeAnnotation";
  func3590.paramCounts = [0];
  func3590.paramNames = [];
  func3590.definitionLine = 2561;
  func3590.definitionModule = "parser";
  var func3615 = function(argcv) {    // method methodHeader, line 2585
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("methodHeader", 0, numArgs - 0);
    }
    var if3616 = GraceDone;
    setLineNumber(2588);    // compilenode call
    // call case 6: other requests
    var string3619 = new GraceString("prefix");
    // call case 2: outer request
    var call3618 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3619);
    var call3617 = request(call3618, "prefix!", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3621 = request(var_sym, "isIdentifier", [0]);
    var call3620 = request(call3621, "not", [0]);
    var opresult3622 = request(call3617, "&&(1)", [1], call3620);
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3624 = request(var_sym, "isOp", [0]);
    var call3623 = request(call3624, "not", [0]);
    var opresult3625 = request(opresult3622, "&&(1)", [1], call3623);
    if (Grace_isTrue(opresult3625)) {
      setLineNumber(2589);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3627 = request(var_errormessages, "suggestion", [0]);
      var call3626 = request(call3627, "new", [0]);
      var var_suggestion = call3626;
      setLineNumber(2590);    // compilenode string
      var string3629 = new GraceString(" \u00abmethod name\u00bb");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call3628 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3629, var_lastToken);
      setLineNumber(2591);    // compilenode string
      var string3631 = new GraceString("a method name must start with an identifier, or be an operator.");
      setLineNumber(2592);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3632 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3633 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3634 = request(var_lastToken, "size", [0]);
      var sum3635 = request(call3633, "+(1)", [1], call3634);
      var sum3636 = request(sum3635, "+(1)", [1], new GraceNum(1));
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3630 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3631, call3632, sum3636, var_suggestion);
      if3616 = call3630;
    }
    setLineNumber(2595);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_startToken = var_sym;
    setLineNumber(2596);    // compilenode member
    // call case 6: other requests
    var call3638 = request(var_startToken, "value", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call3639 = request(var_ast, "signaturePart", [0]);
    var call3637 = request(call3639, "partName(1)", [1], call3638);
    var var_part = call3637;
    setLineNumber(2597);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3640 = selfRequest(this, "next", [0]);
    setLineNumber(2598);    // compilenode array
    var array3643 = new GraceSequence([var_part]);
    // call case 2: outer request
    var call3642 = selfRequest(var_prelude, "list(1)", [1], array3643);
    var array3645 = new GraceSequence([]);
    // call case 2: outer request
    var call3644 = selfRequest(var_prelude, "list(1)", [1], array3645);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call3646 = request(var_ast, "methodNode", [0]);
    var call3641 = request(call3646, "new(3)", [3], call3642, call3644, GraceFalse);
    var var_result = call3641;
    var if3647 = GraceDone;
    setLineNumber(2599);    // compilenode member
    // call case 6: other requests
    var call3648 = request(var_startToken, "value", [0]);
    var string3649 = new GraceString("[");
    var opresult3650 = request(call3648, "==(1)", [1], string3649);
    var block3651 = new GraceBlock(this, 2599, 0);
    block3651.guard = jsTrue;
    block3651.real = function block3651() {
      setLineNumber(2599);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3652 = request(var_sym, "isRSquare", [0]);
      return call3652;
    };
    let applyMeth3651 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3651.methodName = "apply";
    applyMeth3651.paramCounts = [0];
    applyMeth3651.paramNames = [];
    applyMeth3651.definitionLine = 2599;
    applyMeth3651.definitionModule = "parser";
    block3651.methods["apply"] = applyMeth3651;
    var opresult3653 = request(opresult3650, "&&(1)", [1], block3651);
    if (Grace_isTrue(opresult3653)) {
      setLineNumber(2600);    // compilenode string
      var string3655 = new GraceString("methods named '[]' and '[]:=' are no longer part of Grace.");
      setLineNumber(2601);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3656 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3657 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3658 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3654 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], string3655, call3656, call3657, call3658);
      if3647 = call3654;
    }
    var if3659 = GraceDone;
    setLineNumber(2603);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3660 = request(var_sym, "isLGeneric", [0]);
    if (Grace_isTrue(call3660)) {
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3662 = selfRequest(this, "typeparameters", [0]);
      // call case 6: other requests
      if (var_part === undefined) raiseUninitializedVariable("part");
      var call3661 = request(var_part, "typeParams:=(1)", [1], call3662);
      if3659 = call3661;
    }
    var if3663 = GraceDone;
    setLineNumber(2604);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3664 = request(var_sym, "isBind", [0]);
    if (Grace_isTrue(call3664)) {
      setLineNumber(2605);    // compilenode member
      // call case 6: other requests
      if (var_part === undefined) raiseUninitializedVariable("part");
      var call3666 = request(var_part, "name", [0]);
      var string3667 = new GraceString(":=");
      var opresult3668 = request(call3666, "++(1)", [1], string3667);
      // call case 6: other requests
      if (var_part === undefined) raiseUninitializedVariable("part");
      var call3665 = request(var_part, "name:=(1)", [1], opresult3668);
      setLineNumber(2606);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3669 = selfRequest(this, "next", [0]);
      if3663 = call3669;
    } else {
      var if3670 = GraceDone;
      setLineNumber(2607);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3671 = request(var_sym, "isOp", [0]);
      // call case 6: other requests
      if (var_startToken === undefined) raiseUninitializedVariable("startToken");
      var call3672 = request(var_startToken, "value", [0]);
      var string3673 = new GraceString("prefix");
      var opresult3674 = request(call3672, "==(1)", [1], string3673);
      var opresult3675 = request(call3671, "&&(1)", [1], opresult3674);
      if (Grace_isTrue(opresult3675)) {
        setLineNumber(2608);    // compilenode member
        // call case 6: other requests
        if (var_part === undefined) raiseUninitializedVariable("part");
        var call3677 = request(var_part, "name", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3678 = request(var_sym, "value", [0]);
        var opresult3679 = request(call3677, "++(1)", [1], call3678);
        // call case 6: other requests
        if (var_part === undefined) raiseUninitializedVariable("part");
        var call3676 = request(var_part, "name:=(1)", [1], opresult3679);
        setLineNumber(2609);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3680 = selfRequest(this, "next", [0]);
        if3670 = call3680;
      }
      if3663 = if3670;
    }
    var if3681 = GraceDone;
    setLineNumber(2611);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3682 = request(var_sym, "isLParen", [0]);
    if (Grace_isTrue(call3682)) {
      setLineNumber(2612);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_lparen = var_sym;
      setLineNumber(2613);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3683 = selfRequest(this, "next", [0]);
      setLineNumber(2614);    // compilenode vardec
      var var_id;
      setLineNumber(2615);    // compilenode vardec
      var var_comma = GraceFalse;
      setLineNumber(2616);    // compilenode block
      var block3685 = new GraceBlock(this, 2616, 0);
      block3685.guard = jsTrue;
      block3685.real = function block3685() {
        setLineNumber(2617);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3686 = request(var_sym, "isIdentifier", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3687 = request(var_sym, "isOp", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3688 = request(var_sym, "value", [0]);
        var string3689 = new GraceString("*");
        var opresult3690 = request(call3688, "==(1)", [1], string3689);
        var opresult3691 = request(call3687, "&&(1)", [1], opresult3690);
        var opresult3692 = request(call3686, "||(1)", [1], opresult3691);
        return opresult3692;
      };
      let applyMeth3685 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3685.methodName = "apply";
      applyMeth3685.paramCounts = [0];
      applyMeth3685.paramNames = [];
      applyMeth3685.definitionLine = 2616;
      applyMeth3685.definitionModule = "parser";
      block3685.methods["apply"] = applyMeth3685;
      setLineNumber(2618);    // compilenode block
      var block3693 = new GraceBlock(this, 2618, 0);
      block3693.guard = jsTrue;
      block3693.real = function block3693() {
        var if3694 = GraceDone;
        setLineNumber(2621);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3695 = request(var_sym, "isOp", [0]);
        if (Grace_isTrue(call3695)) {
          setLineNumber(2622);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3696 = selfRequest(this, "next", [0]);
          setLineNumber(2623);    // compilenode string
          var string3698 = new GraceString("variable length parameters (parameters prefixed by '*') are no longer part of Grace.  Consider making ");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3699 = request(var_sym, "value", [0]);
          var opresult3700 = request(string3698, "++(1)", [1], call3699);
          var string3701 = new GraceString(" a sequence.");
          var opresult3702 = request(opresult3700, "++(1)", [1], string3701);
          setLineNumber(2624);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3703 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3704 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call3697 = request(var_errormessages, "syntaxError(1)atPosition(2)", [1, 2], opresult3702, call3703, call3704);
          if3694 = call3697;
        }
        setLineNumber(2626);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3705 = selfRequest(this, "pushIdentifier", [0]);
        setLineNumber(2627);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call3706 = request(var_values, "pop", [0]);
        var_id = call3706;
        setLineNumber(2628);    // compilenode call
        // call case 6: other requests
        if (var_id === undefined) raiseUninitializedVariable("id");
        var call3707 = request(var_id, "isBindingOccurrence:=(1)", [1], GraceTrue);
        setLineNumber(2629);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3709 = selfRequest(this, "optionalTypeAnnotation", [0]);
        // call case 6: other requests
        if (var_id === undefined) raiseUninitializedVariable("id");
        var call3708 = request(var_id, "dtype:=(1)", [1], call3709);
        setLineNumber(2630);    // compilenode call
        if (var_id === undefined) raiseUninitializedVariable("id");
        // call case 6: other requests
        // call case 6: other requests
        if (var_part === undefined) raiseUninitializedVariable("part");
        var call3711 = request(var_part, "params", [0]);
        var call3710 = request(call3711, "push(1)", [1], var_id);
        var if3712 = GraceDone;
        setLineNumber(2631);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3713 = request(var_sym, "isComma", [0]);
        if (Grace_isTrue(call3713)) {
          setLineNumber(2632);    // compilenode bind
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var_comma = var_sym;
          setLineNumber(2633);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3714 = selfRequest(this, "next", [0]);
          if3712 = call3714;
        } else {
          var if3715 = GraceDone;
          setLineNumber(2634);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3717 = request(var_sym, "isRParen", [0]);
          var call3716 = request(call3717, "not", [0]);
          if (Grace_isTrue(call3716)) {
            setLineNumber(2635);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call3719 = request(var_errormessages, "suggestion", [0]);
            var call3718 = request(call3719, "new", [0]);
            var var_suggestion = call3718;
            setLineNumber(2636);    // compilenode string
            var string3721 = new GraceString(")");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call3720 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3721, var_lastToken);
            setLineNumber(2637);    // compilenode string
            var string3723 = new GraceString("a parameter list beginning with a '(' must ");
            setLineNumber(2638);    // compilenode string
            var string3724 = new GraceString("end with a ')'.");
            var opresult3725 = request(string3723, "++(1)", [1], string3724);
            setLineNumber(2639);    // compilenode member
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call3726 = request(var_lastToken, "line", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call3727 = request(var_lastToken, "linePos", [0]);
            // call case 6: other requests
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            var call3728 = request(var_lastToken, "size", [0]);
            var sum3729 = request(call3727, "+(1)", [1], call3728);
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call3722 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], opresult3725, call3726, sum3729, var_suggestion);
            if3715 = call3722;
          }
          if3712 = if3715;
        }
        return if3712;
      };
      let applyMeth3693 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3693.methodName = "apply";
      applyMeth3693.paramCounts = [0];
      applyMeth3693.paramNames = [];
      applyMeth3693.definitionLine = 2618;
      applyMeth3693.definitionModule = "parser";
      block3693.methods["apply"] = applyMeth3693;
      // call case 2: outer request
      var call3684 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3685, block3693);
      var if3730 = GraceDone;
      setLineNumber(2643);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3732 = request(var_sym, "isRParen", [0]);
      var call3731 = request(call3732, "not", [0]);
      if (Grace_isTrue(call3731)) {
        setLineNumber(2644);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3734 = request(var_errormessages, "suggestion", [0]);
        var call3733 = request(call3734, "new", [0]);
        var var_suggestion = call3733;
        setLineNumber(2645);    // compilenode block
        var block3736 = new GraceBlock(this, 2645, 1);
        block3736.guard = jsTrue;
        block3736.real = function block3736(var_t) {
          setLineNumber(2645);    // compilenode member
          // call case 6: other requests
          var call3737 = request(var_t, "isRParen", [0]);
          // call case 6: other requests
          var call3738 = request(var_t, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3739 = request(var_lastToken, "line", [0]);
          var opresult3740 = request(call3738, "==(1)", [1], call3739);
          var opresult3741 = request(call3737, "&&(1)", [1], opresult3740);
          return opresult3741;
        };
        let applyMeth3736 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth3736.methodName = "apply(1)";
        applyMeth3736.paramCounts = [1];
        applyMeth3736.paramNames = ["t"];
        applyMeth3736.definitionLine = 2645;
        applyMeth3736.definitionModule = "parser";
        block3736.methods["apply(1)"] = applyMeth3736;
        let matchesMeth3736 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth3736.methodName = "matches(1)";
        matchesMeth3736.paramCounts = [1];
        matchesMeth3736.paramNames = ["t"];
        matchesMeth3736.definitionLine = 2645;
        matchesMeth3736.definitionModule = "parser";
        block3736.methods["matches(1)"] = matchesMeth3736;
        // call case 2: outer request
        var call3735 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block3736);
        var var_rparen = call3735;
        var if3742 = GraceDone;
        setLineNumber(2646);    // compilenode op
        if (var_rparen === undefined) raiseUninitializedVariable("rparen");
        var opresult3743 = request(GraceFalse, "==(1)", [1], var_rparen);
        if (Grace_isTrue(opresult3743)) {
          setLineNumber(2647);    // compilenode call
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var string3745 = new GraceString(")");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3744 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_lastToken, string3745);
          if3742 = call3744;
        } else {
          setLineNumber(2649);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3746 = request(var_suggestion, "deleteToken(1)", [1], var_sym);
          if3742 = call3746;
        }
        setLineNumber(2651);    // compilenode string
        var string3748 = new GraceString("a parameter list beginning with a '(' must end with a ')'.");
        setLineNumber(2652);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3749 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3750 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3751 = request(var_lastToken, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3747 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string3748, call3749, call3750, call3751, var_suggestion);
        if3730 = call3747;
      }
      var if3752 = GraceDone;
      setLineNumber(2654);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3753 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_part === undefined) raiseUninitializedVariable("part");
      var call3754 = request(var_part, "line", [0]);
      var opresult3755 = request(call3753, "==(1)", [1], call3754);
      if (Grace_isTrue(opresult3755)) {
        setLineNumber(2655);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3757 = request(var_sym, "linePos", [0]);
        // call case 6: other requests
        if (var_part === undefined) raiseUninitializedVariable("part");
        var call3758 = request(var_part, "linePos", [0]);
        var diff3759 = request(call3757, "-(1)", [1], call3758);
        // call case 6: other requests
        if (var_part === undefined) raiseUninitializedVariable("part");
        var call3756 = request(var_part, "lineLength:=(1)", [1], diff3759);
        if3752 = call3756;
      }
      setLineNumber(2657);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3760 = selfRequest(this, "next", [0]);
      var if3761 = GraceDone;
      setLineNumber(2658);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3762 = request(var_sym, "isIdentifier", [0]);
      if (Grace_isTrue(call3762)) {
        setLineNumber(2661);    // compilenode call
        if (var_result === undefined) raiseUninitializedVariable("result");
        // call case 2: outer request
        var call3763 = selfRequest(importedModules["parser"], "methodDecRest(1)", [1], var_result);
        if3761 = call3763;
      }
      if3681 = if3761;
    }
    var if3764 = GraceDone;
    setLineNumber(2664);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3765 = request(var_sym, "isArrow", [0]);
    if (Grace_isTrue(call3765)) {
      setLineNumber(2666);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3766 = selfRequest(this, "next", [0]);
      var if3767 = GraceDone;
      setLineNumber(2667);    // compilenode block
      var block3769 = new GraceBlock(this, 2667, 0);
      block3769.guard = jsTrue;
      block3769.real = function block3769() {
        setLineNumber(2667);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3770 = selfRequest(this, "typeexpression", [0]);
        return call3770;
      };
      let applyMeth3769 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3769.methodName = "apply";
      applyMeth3769.paramCounts = [0];
      applyMeth3769.paramNames = [];
      applyMeth3769.definitionLine = 2667;
      applyMeth3769.definitionModule = "parser";
      block3769.methods["apply"] = applyMeth3769;
      // call case 2: outer request
      var call3768 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block3769);
      if (Grace_isTrue(call3768)) {
        setLineNumber(2668);    // compilenode string
        var string3772 = new GraceString("after an arrow, write the method's return ");
        setLineNumber(2669);    // compilenode string
        var string3773 = new GraceString("type. If you don't want to state the return type, omit the arrow.");
        var opresult3774 = request(string3772, "++(1)", [1], string3773);
        setLineNumber(2670);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3775 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3776 = request(var_sym, "linePos", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3777 = request(var_sym, "endPos", [0]);
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3771 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], opresult3774, call3775, call3776, call3777);
        if3767 = call3771;
      }
      setLineNumber(2672);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3779 = request(var_values, "pop", [0]);
      // call case 6: other requests
      if (var_result === undefined) raiseUninitializedVariable("result");
      var call3778 = request(var_result, "dtype:=(1)", [1], call3779);
      if3764 = call3778;
    }
    return var_result;
  };    // end of method methodHeader
  this.methods["methodHeader"] = func3615;
  func3615.methodName = "methodHeader";
  func3615.paramCounts = [0];
  func3615.paramNames = [];
  func3615.definitionLine = 2585;
  func3615.definitionModule = "parser";
  var func3780 = function(argcv) {    // method typeparameters, line 2677
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("typeparameters", 0, numArgs - 0);
    }
    setLineNumber(2679);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_openBracket = var_sym;
    setLineNumber(2680);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3781 = selfRequest(this, "next", [0]);
    setLineNumber(2681);    // compilenode member
    // call case 6: other requests
    // call case 2: outer request
    var call3783 = selfRequest(var_prelude, "list", [0]);
    var call3782 = request(call3783, "empty", [0]);
    var var_typeIds = call3782;
    setLineNumber(2682);    // compilenode member
    // call case 6: other requests
    // call case 2: outer request
    var call3785 = selfRequest(var_prelude, "list", [0]);
    var call3784 = request(call3785, "empty", [0]);
    var var_whereConditions = call3784;
    var if3786 = GraceDone;
    setLineNumber(2683);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3788 = request(var_sym, "isIdentifier", [0]);
    var call3787 = request(call3788, "not", [0]);
    if (Grace_isTrue(call3787)) {
      setLineNumber(2684);    // compilenode string
      var string3790 = new GraceString("a '\u27e6' must be followed by one or more identifiers naming the type parameters");
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3791 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3792 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3793 = request(var_sym, "endPos", [0]);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3789 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], string3790, call3791, call3792, call3793);
      if3786 = call3789;
    }
    setLineNumber(2686);    // compilenode member
    // call case 6: other requests
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3795 = selfRequest(this, "pushIdentifier", [0]);
    var call3794 = request(call3795, "bindingOccurrence", [0]);
    setLineNumber(2687);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3797 = request(var_values, "pop", [0]);
    // call case 6: other requests
    var call3796 = request(var_typeIds, "add(1)", [1], call3797);
    setLineNumber(2688);    // compilenode block
    var block3799 = new GraceBlock(this, 2688, 0);
    block3799.guard = jsTrue;
    block3799.real = function block3799() {
      setLineNumber(2688);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3800 = request(var_sym, "isComma", [0]);
      return call3800;
    };
    let applyMeth3799 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3799.methodName = "apply";
    applyMeth3799.paramCounts = [0];
    applyMeth3799.paramNames = [];
    applyMeth3799.definitionLine = 2688;
    applyMeth3799.definitionModule = "parser";
    block3799.methods["apply"] = applyMeth3799;
    var block3801 = new GraceBlock(this, 2688, 0);
    block3801.guard = jsTrue;
    block3801.real = function block3801() {
      setLineNumber(2689);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3802 = selfRequest(this, "next", [0]);
      var if3803 = GraceDone;
      setLineNumber(2690);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3805 = request(var_sym, "isIdentifier", [0]);
      var call3804 = request(call3805, "not", [0]);
      if (Grace_isTrue(call3804)) {
        setLineNumber(2691);    // compilenode string
        var string3807 = new GraceString("a comma in a list of type parameters must ");
        setLineNumber(2692);    // compilenode string
        var string3808 = new GraceString("be followed by the name of another type parameter");
        var opresult3809 = request(string3807, "++(1)", [1], string3808);
        setLineNumber(2693);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3810 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3811 = request(var_sym, "linePos", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3812 = request(var_sym, "endPos", [0]);
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3806 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], opresult3809, call3810, call3811, call3812);
        if3803 = call3806;
      }
      setLineNumber(2695);    // compilenode member
      // call case 6: other requests
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3814 = selfRequest(this, "pushIdentifier", [0]);
      var call3813 = request(call3814, "bindingOccurrence", [0]);
      setLineNumber(2696);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3816 = request(var_values, "pop", [0]);
      // call case 6: other requests
      if (var_typeIds === undefined) raiseUninitializedVariable("typeIds");
      var call3815 = request(var_typeIds, "push(1)", [1], call3816);
      return call3815;
    };
    let applyMeth3801 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3801.methodName = "apply";
    applyMeth3801.paramCounts = [0];
    applyMeth3801.paramNames = [];
    applyMeth3801.definitionLine = 2688;
    applyMeth3801.definitionModule = "parser";
    block3801.methods["apply"] = applyMeth3801;
    // call case 2: outer request
    var call3798 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3799, block3801);
    var if3817 = GraceDone;
    setLineNumber(2698);    // compilenode string
    var string3819 = new GraceString("where");
    // call case 2: outer request
    var call3818 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3819);
    if (Grace_isTrue(call3818)) {
      setLineNumber(2699);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3820 = selfRequest(this, "next", [0]);
      setLineNumber(2700);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_conditionStart = var_sym;
      var if3821 = GraceDone;
      setLineNumber(2701);    // compilenode block
      var block3823 = new GraceBlock(this, 2701, 0);
      block3823.guard = jsTrue;
      block3823.real = function block3823() {
        setLineNumber(2701);    // compilenode call
        if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
        // call case 2: outer request
        var call3824 = selfRequest(importedModules["parser"], "expression(1)", [1], var_noBlocks);
        return call3824;
      };
      let applyMeth3823 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3823.methodName = "apply";
      applyMeth3823.paramCounts = [0];
      applyMeth3823.paramNames = [];
      applyMeth3823.definitionLine = 2701;
      applyMeth3823.definitionModule = "parser";
      block3823.methods["apply"] = applyMeth3823;
      // call case 2: outer request
      var call3822 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block3823);
      if (Grace_isTrue(call3822)) {
        setLineNumber(2702);    // compilenode string
        var string3826 = new GraceString("`where` must be followed by a condition on one of the type parameters");
        setLineNumber(2703);    // compilenode member
        // call case 6: other requests
        if (var_conditionStart === undefined) raiseUninitializedVariable("conditionStart");
        var call3827 = request(var_conditionStart, "line", [0]);
        // call case 6: other requests
        if (var_conditionStart === undefined) raiseUninitializedVariable("conditionStart");
        var call3828 = request(var_conditionStart, "linePos", [0]);
        // call case 6: other requests
        if (var_conditionStart === undefined) raiseUninitializedVariable("conditionStart");
        var call3829 = request(var_conditionStart, "endPos", [0]);
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3825 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], string3826, call3827, call3828, call3829);
        if3821 = call3825;
      }
      setLineNumber(2705);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3831 = selfRequest(this, "checkWhereCondition", [0]);
      // call case 6: other requests
      if (var_whereConditions === undefined) raiseUninitializedVariable("whereConditions");
      var call3830 = request(var_whereConditions, "add(1)", [1], call3831);
      setLineNumber(2706);    // compilenode block
      var block3833 = new GraceBlock(this, 2706, 0);
      block3833.guard = jsTrue;
      block3833.real = function block3833() {
        setLineNumber(2706);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3834 = request(var_sym, "isComma", [0]);
        return call3834;
      };
      let applyMeth3833 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3833.methodName = "apply";
      applyMeth3833.paramCounts = [0];
      applyMeth3833.paramNames = [];
      applyMeth3833.definitionLine = 2706;
      applyMeth3833.definitionModule = "parser";
      block3833.methods["apply"] = applyMeth3833;
      var block3835 = new GraceBlock(this, 2706, 0);
      block3835.guard = jsTrue;
      block3835.real = function block3835() {
        setLineNumber(2707);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3836 = selfRequest(this, "next", [0]);
        var if3837 = GraceDone;
        setLineNumber(2708);    // compilenode block
        var block3839 = new GraceBlock(this, 2708, 0);
        block3839.guard = jsTrue;
        block3839.real = function block3839() {
          setLineNumber(2708);    // compilenode call
          if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
          // call case 2: outer request
          var call3840 = selfRequest(importedModules["parser"], "expression(1)", [1], var_noBlocks);
          return call3840;
        };
        let applyMeth3839 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth3839.methodName = "apply";
        applyMeth3839.paramCounts = [0];
        applyMeth3839.paramNames = [];
        applyMeth3839.definitionLine = 2708;
        applyMeth3839.definitionModule = "parser";
        block3839.methods["apply"] = applyMeth3839;
        // call case 2: outer request
        var call3838 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block3839);
        if (Grace_isTrue(call3838)) {
          setLineNumber(2709);    // compilenode string
          var string3842 = new GraceString("`where` must be followed by list of conditions on the type parameters");
          setLineNumber(2710);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3843 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3844 = request(var_sym, "linePos", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3845 = request(var_sym, "endPos", [0]);
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call3841 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], string3842, call3843, call3844, call3845);
          if3837 = call3841;
        }
        setLineNumber(2712);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call3847 = selfRequest(this, "checkWhereCondition", [0]);
        // call case 6: other requests
        if (var_whereConditions === undefined) raiseUninitializedVariable("whereConditions");
        var call3846 = request(var_whereConditions, "add(1)", [1], call3847);
        return call3846;
      };
      let applyMeth3835 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth3835.methodName = "apply";
      applyMeth3835.paramCounts = [0];
      applyMeth3835.paramNames = [];
      applyMeth3835.definitionLine = 2706;
      applyMeth3835.definitionModule = "parser";
      block3835.methods["apply"] = applyMeth3835;
      // call case 2: outer request
      var call3832 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block3833, block3835);
      if3817 = call3832;
    }
    var if3848 = GraceDone;
    setLineNumber(2715);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call3850 = request(var_sym, "isRGeneric", [0]);
    var call3849 = request(call3850, "not", [0]);
    if (Grace_isTrue(call3849)) {
      setLineNumber(2716);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3852 = request(var_errormessages, "suggestion", [0]);
      var call3851 = request(call3852, "new", [0]);
      var var_suggestion = call3851;
      setLineNumber(2717);    // compilenode string
      var string3854 = new GraceString("\u27e7");
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      // call case 6: other requests
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      var call3853 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3854, var_lastToken);
      setLineNumber(2718);    // compilenode string
      var string3856 = new GraceString("a list of type parameters starting with '\u27e6' must end with '\u27e7'");
      setLineNumber(2719);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3857 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3858 = request(var_lastToken, "linePos", [0]);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call3859 = request(var_lastToken, "endPos", [0]);
      if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3855 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string3856, call3857, call3858, call3859, var_suggestion);
      if3848 = call3855;
    }
    setLineNumber(2721);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call3860 = selfRequest(this, "next", [0]);
    setLineNumber(2722);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call3862 = request(var_ast, "typeParametersNode(1)whereClauses(1)", [1, 1], var_typeIds, var_whereConditions);
    var call3861 = request(call3862, "setPositionFrom(1)", [1], var_openBracket);
    return call3861;
  };    // end of method typeparameters
  this.methods["typeparameters"] = func3780;
  func3780.methodName = "typeparameters";
  func3780.paramCounts = [0];
  func3780.paramNames = [];
  func3780.definitionLine = 2677;
  func3780.definitionModule = "parser";
  var func3863 = function(argcv) {    // method checkWhereCondition, line 2727
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("checkWhereCondition", 0, numArgs - 0);
    }
    setLineNumber(2730);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call3864 = request(var_values, "pop", [0]);
    var var_cond = call3864;
    var if3865 = GraceDone;
    setLineNumber(2731);    // compilenode member
    // call case 6: other requests
    var call3866 = request(var_cond, "kind", [0]);
    var string3867 = new GraceString("op");
    var opresult3868 = request(call3866, "\u2260(1)", [1], string3867);
    var block3869 = new GraceBlock(this, 2731, 0);
    block3869.guard = jsTrue;
    block3869.real = function block3869() {
      setLineNumber(2731);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_cond === undefined) raiseUninitializedVariable("cond");
      var call3872 = request(var_cond, "value", [0]);
      // call case 6: other requests
      if (var_typeRelations === undefined) raiseUninitializedVariable("typeRelations");
      var call3871 = request(var_typeRelations, "contains(1)", [1], call3872);
      var call3870 = request(call3871, "not", [0]);
      return call3870;
    };
    let applyMeth3869 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth3869.methodName = "apply";
    applyMeth3869.paramCounts = [0];
    applyMeth3869.paramNames = [];
    applyMeth3869.definitionLine = 2731;
    applyMeth3869.definitionModule = "parser";
    block3869.methods["apply"] = applyMeth3869;
    var opresult3873 = request(opresult3868, "||(1)", [1], block3869);
    if (Grace_isTrue(opresult3873)) {
      setLineNumber(2732);    // compilenode string
      var string3875 = new GraceString("a where condition must be a relation using ");
      setLineNumber(2733);    // compilenode string
      var string3876 = new GraceString("one of the operators ");
      if (var_typeRelations === undefined) raiseUninitializedVariable("typeRelations");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3877 = request(var_errormessages, "readableStringFrom(1)", [1], var_typeRelations);
      var opresult3878 = request(string3876, "++(1)", [1], call3877);
      var string3879 = new GraceString("");
      var opresult3880 = request(opresult3878, "++(1)", [1], string3879);
      var opresult3881 = request(string3875, "++(1)", [1], opresult3880);
      if (var_cond === undefined) raiseUninitializedVariable("cond");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call3874 = request(var_errormessages, "syntaxError(1)atRange(1)", [1, 1], opresult3881, var_cond);
      if3865 = call3874;
    }
    return var_cond;
  };    // end of method checkWhereCondition
  this.methods["checkWhereCondition"] = func3863;
  func3863.methodName = "checkWhereCondition";
  func3863.paramCounts = [0];
  func3863.paramNames = [];
  func3863.definitionLine = 2727;
  func3863.definitionModule = "parser";
  var func3882 = function(argcv) {    // method doimport, line 2739
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("doimport", 0, numArgs - 0);
    }
    var if3883 = GraceDone;
    setLineNumber(2742);    // compilenode string
    var string3885 = new GraceString("import");
    // call case 2: outer request
    var call3884 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3885);
    if (Grace_isTrue(call3884)) {
      setLineNumber(2743);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_importSym = var_sym;
      setLineNumber(2744);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3886 = selfRequest(this, "next", [0]);
      var if3887 = GraceDone;
      setLineNumber(2745);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3888 = request(var_sym, "kind", [0]);
      var string3889 = new GraceString("string");
      var opresult3890 = request(call3888, "\u2260(1)", [1], string3889);
      if (Grace_isTrue(opresult3890)) {
        setLineNumber(2746);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3892 = request(var_errormessages, "suggestion", [0]);
        var call3891 = request(call3892, "new", [0]);
        var var_suggestion = call3891;
        setLineNumber(2747);    // compilenode vardec
        var var_errorPos;
        var if3893 = GraceDone;
        setLineNumber(2748);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3894 = request(var_sym, "isIdentifier", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3895 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3896 = request(var_lastToken, "line", [0]);
        var opresult3897 = request(call3895, "==(1)", [1], call3896);
        var opresult3898 = request(call3894, "&&(1)", [1], opresult3897);
        if (Grace_isTrue(opresult3898)) {
          setLineNumber(2749);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var string3900 = new GraceString("\"");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3901 = request(var_sym, "value", [0]);
          var opresult3902 = request(string3900, "++(1)", [1], call3901);
          var string3903 = new GraceString("\"");
          var opresult3904 = request(opresult3902, "++(1)", [1], string3903);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3899 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, opresult3904);
          setLineNumber(2750);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3905 = request(var_sym, "linePos", [0]);
          var_errorPos = call3905;
          if3893 = GraceDone;
        } else {
          setLineNumber(2752);    // compilenode string
          var string3907 = new GraceString(" \"\u00abmodule name\u00bb\"");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3906 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3907, var_lastToken);
          setLineNumber(2753);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3908 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3909 = request(var_lastToken, "size", [0]);
          var sum3910 = request(call3908, "+(1)", [1], call3909);
          var sum3911 = request(sum3910, "+(1)", [1], new GraceNum(1));
          var_errorPos = sum3911;
          if3893 = GraceDone;
        }
        setLineNumber(2755);    // compilenode string
        var string3913 = new GraceString("an import statement must have the name of the module to be imported (in quotes), 'as', and an identifier after 'import'.");
        setLineNumber(2756);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3914 = request(var_lastToken, "line", [0]);
        if (var_errorPos === undefined) raiseUninitializedVariable("errorPos");
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3912 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3913, call3914, var_errorPos, var_suggestion);
        if3887 = call3912;
      }
      setLineNumber(2758);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3915 = selfRequest(this, "pushString", [0]);
      setLineNumber(2759);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3916 = request(var_values, "pop", [0]);
      var var_p = call3916;
      var if3917 = GraceDone;
      setLineNumber(2760);    // compilenode call
      // call case 6: other requests
      var string3920 = new GraceString("as");
      // call case 2: outer request
      var call3919 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3920);
      var call3918 = request(call3919, "prefix!", [0]);
      if (Grace_isTrue(call3918)) {
        setLineNumber(2761);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3922 = request(var_errormessages, "suggestion", [0]);
        var call3921 = request(call3922, "new", [0]);
        var var_suggestion = call3921;
        var if3923 = GraceDone;
        setLineNumber(2762);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3924 = request(var_sym, "isIdentifier", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3925 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3926 = request(var_lastToken, "line", [0]);
        var opresult3927 = request(call3925, "==(1)", [1], call3926);
        var opresult3928 = request(call3924, "&&(1)", [1], opresult3927);
        if (Grace_isTrue(opresult3928)) {
          setLineNumber(2763);    // compilenode string
          var string3930 = new GraceString(" as");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3929 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string3930, var_lastToken);
          if3923 = call3929;
        } else {
          setLineNumber(2765);    // compilenode string
          var string3932 = new GraceString(" as ");
          // call case 6: other requests
          if (var_p === undefined) raiseUninitializedVariable("p");
          var call3933 = request(var_p, "value", [0]);
          var opresult3934 = request(string3932, "++(1)", [1], call3933);
          var string3935 = new GraceString("");
          var opresult3936 = request(opresult3934, "++(1)", [1], string3935);
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3931 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult3936, var_lastToken);
          if3923 = call3931;
        }
        setLineNumber(2767);    // compilenode string
        var string3938 = new GraceString("an import statement must have 'as', followed by an identifier, after the name of the module in quotes.");
        setLineNumber(2768);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3939 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3940 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3941 = request(var_lastToken, "size", [0]);
        var sum3942 = request(call3940, "+(1)", [1], call3941);
        var sum3943 = request(sum3942, "+(1)", [1], new GraceNum(1));
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3937 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3938, call3939, sum3943, var_suggestion);
        if3917 = call3937;
      }
      setLineNumber(2770);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3944 = selfRequest(this, "next", [0]);
      var if3945 = GraceDone;
      setLineNumber(2771);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3946 = request(var_sym, "kind", [0]);
      var string3947 = new GraceString("identifier");
      var opresult3948 = request(call3946, "\u2260(1)", [1], string3947);
      if (Grace_isTrue(opresult3948)) {
        setLineNumber(2772);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3950 = request(var_errormessages, "suggestion", [0]);
        var call3949 = request(call3950, "new", [0]);
        var var_suggestion = call3949;
        setLineNumber(2773);    // compilenode vardec
        var var_errorPos;
        var if3951 = GraceDone;
        setLineNumber(2774);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3952 = request(var_sym, "isString", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call3953 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3954 = request(var_lastToken, "line", [0]);
        var opresult3955 = request(call3953, "==(1)", [1], call3954);
        var opresult3956 = request(call3952, "&&(1)", [1], opresult3955);
        if (Grace_isTrue(opresult3956)) {
          setLineNumber(2775);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var string3958 = new GraceString("");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3959 = request(var_sym, "value", [0]);
          var opresult3960 = request(string3958, "++(1)", [1], call3959);
          var string3961 = new GraceString("");
          var opresult3962 = request(opresult3960, "++(1)", [1], string3961);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3957 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, opresult3962);
          setLineNumber(2776);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call3963 = request(var_sym, "linePos", [0]);
          var_errorPos = call3963;
          if3951 = GraceDone;
        } else {
          setLineNumber(2778);    // compilenode string
          var string3965 = new GraceString(" ");
          // call case 6: other requests
          if (var_p === undefined) raiseUninitializedVariable("p");
          var call3966 = request(var_p, "value", [0]);
          var opresult3967 = request(string3965, "++(1)", [1], call3966);
          var string3968 = new GraceString("");
          var opresult3969 = request(opresult3967, "++(1)", [1], string3968);
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call3964 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], opresult3969, var_lastToken);
          setLineNumber(2779);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3970 = request(var_lastToken, "linePos", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call3971 = request(var_lastToken, "size", [0]);
          var sum3972 = request(call3970, "+(1)", [1], call3971);
          var sum3973 = request(sum3972, "+(1)", [1], new GraceNum(1));
          var_errorPos = sum3973;
          if3951 = GraceDone;
        }
        setLineNumber(2781);    // compilenode string
        var string3975 = new GraceString("an import statement must have an identifier after 'as'.");
        setLineNumber(2782);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call3976 = request(var_lastToken, "line", [0]);
        if (var_errorPos === undefined) raiseUninitializedVariable("errorPos");
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call3974 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string3975, call3976, var_errorPos, var_suggestion);
        if3945 = call3974;
      }
      setLineNumber(2784);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3977 = selfRequest(this, "pushIdentifier", [0]);
      setLineNumber(2785);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3978 = request(var_values, "pop", [0]);
      var var_name = call3978;
      setLineNumber(2786);    // compilenode call
      // call case 6: other requests
      if (var_name === undefined) raiseUninitializedVariable("name");
      var call3979 = request(var_name, "isBindingOccurrence:=(1)", [1], GraceTrue);
      setLineNumber(2787);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3980 = selfRequest(this, "optionalTypeAnnotation", [0]);
      var var_dtype = call3980;
      setLineNumber(2788);    // compilenode call
      if (var_importSym === undefined) raiseUninitializedVariable("importSym");
      // call case 6: other requests
      // call case 6: other requests
      if (var_p === undefined) raiseUninitializedVariable("p");
      var call3983 = request(var_p, "value", [0]);
      if (var_name === undefined) raiseUninitializedVariable("name");
      if (var_dtype === undefined) raiseUninitializedVariable("dtype");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call3984 = request(var_ast, "importNode", [0]);
      var call3982 = request(call3984, "new(3)", [3], call3983, var_name, var_dtype);
      var call3981 = request(call3982, "setPositionFrom(1)", [1], var_importSym);
      var var_o = call3981;
      setLineNumber(2789);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3985 = selfRequest(this, "doannotation", [0]);
      var var_anns = call3985;
      var if3986 = GraceDone;
      setLineNumber(2790);    // compilenode op
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      var opresult3987 = request(GraceFalse, "\u2260(1)", [1], var_anns);
      if (Grace_isTrue(opresult3987)) {
        if (var_anns === undefined) raiseUninitializedVariable("anns");
        // call case 6: other requests
        // call case 6: other requests
        if (var_o === undefined) raiseUninitializedVariable("o");
        var call3989 = request(var_o, "annotations", [0]);
        var call3988 = request(call3989, "addAll(1)", [1], var_anns);
        if3986 = call3988;
      }
      setLineNumber(2791);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call3990 = request(var_values, "push(1)", [1], var_o);
      setLineNumber(2792);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3991 = selfRequest(this, "reconcileComments", [0]);
      if3883 = call3991;
    }
    return if3883;
  };    // end of method doimport
  this.methods["doimport"] = func3882;
  func3882.methodName = "doimport";
  func3882.paramCounts = [0];
  func3882.paramNames = [];
  func3882.definitionLine = 2739;
  func3882.definitionModule = "parser";
  var func3992 = function(argcv) {    // method doreturn, line 2796
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("doreturn", 0, numArgs - 0);
    }
    var if3993 = GraceDone;
    setLineNumber(2798);    // compilenode string
    var string3995 = new GraceString("return");
    // call case 2: outer request
    var call3994 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string3995);
    if (Grace_isTrue(call3994)) {
      setLineNumber(2799);    // compilenode defdec
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var var_retTok = var_sym;
      setLineNumber(2800);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call3996 = selfRequest(this, "next", [0]);
      setLineNumber(2801);    // compilenode vardec
      var var_retval;
      var if3997 = GraceDone;
      setLineNumber(2802);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call3999 = request(var_sym, "isRBrace", [0]);
      var call3998 = request(call3999, "not", [0]);
      if (Grace_isTrue(call3998)) {
        var if4000 = GraceDone;
        setLineNumber(2803);    // compilenode block
        var block4002 = new GraceBlock(this, 2803, 0);
        block4002.guard = jsTrue;
        block4002.real = function block4002() {
          setLineNumber(2803);    // compilenode call
          if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
          // call case 2: outer request
          var call4003 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
          return call4003;
        };
        let applyMeth4002 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth4002.methodName = "apply";
        applyMeth4002.paramCounts = [0];
        applyMeth4002.paramNames = [];
        applyMeth4002.definitionLine = 2803;
        applyMeth4002.definitionModule = "parser";
        block4002.methods["apply"] = applyMeth4002;
        // call case 2: outer request
        var call4001 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block4002);
        if (Grace_isTrue(call4001)) {
          setLineNumber(2804);    // compilenode array
          var array4005 = new GraceSequence([]);
          // call case 2: outer request
          var call4004 = selfRequest(var_prelude, "list(1)", [1], array4005);
          var var_suggestions = call4004;
          setLineNumber(2805);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4007 = request(var_errormessages, "suggestion", [0]);
          var call4006 = request(call4007, "new", [0]);
          var var_suggestion = call4006;
          setLineNumber(2806);    // compilenode string
          var string4010 = new GraceString("rbrace");
          var string4011 = new GraceString("separator");
          var array4009 = new GraceSequence([string4010, string4011]);
          // call case 2: outer request
          var call4008 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array4009);
          var var_nextTok = call4008;
          var if4012 = GraceDone;
          setLineNumber(2807);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult4013 = request(var_nextTok, "==(1)", [1], var_sym);
          if (Grace_isTrue(opresult4013)) {
            setLineNumber(2808);    // compilenode string
            var string4015 = new GraceString(" \u00abexpression\u00bb");
            if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call4014 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string4015, var_lastToken);
            setLineNumber(2809);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call4016 = request(var_suggestions, "push(1)", [1], var_suggestion);
            var if4017 = GraceDone;
            setLineNumber(2810);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call4019 = request(var_sym, "isSeparator", [0]);
            var call4018 = request(call4019, "not", [0]);
            if (Grace_isTrue(call4018)) {
              setLineNumber(2811);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call4021 = request(var_errormessages, "suggestion", [0]);
              var call4020 = request(call4021, "new", [0]);
              var_suggestion = call4020;
              setLineNumber(2812);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call4022 = request(var_suggestion, "deleteToken(1)leading(1)trailing(1)", [1, 1, 1], var_sym, GraceTrue, GraceFalse);
              setLineNumber(2813);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call4023 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if4017 = call4023;
            }
            if4012 = if4017;
          } else {
            setLineNumber(2816);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call4025 = request(var_nextTok, "prev", [0]);
            var string4026 = new GraceString(" \u00abexpression\u00bb");
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call4024 = request(var_suggestion, "replaceTokenRange(2)leading(1)trailing(1)with(1)", [2, 1, 1, 1], var_sym, call4025, GraceTrue, GraceFalse, string4026);
            setLineNumber(2817);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call4027 = request(var_suggestions, "push(1)", [1], var_suggestion);
            setLineNumber(2818);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call4029 = request(var_errormessages, "suggestion", [0]);
            var call4028 = request(call4029, "new", [0]);
            var_suggestion = call4028;
            setLineNumber(2819);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            // call case 6: other requests
            if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
            var call4031 = request(var_nextTok, "prev", [0]);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call4030 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_sym, call4031, GraceTrue, GraceFalse);
            setLineNumber(2820);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call4032 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if4012 = call4032;
          }
          setLineNumber(2822);    // compilenode string
          var string4034 = new GraceString("a `return` statement must be followed ");
          setLineNumber(2823);    // compilenode string
          var string4035 = new GraceString("by an expression, or by the end of the block.");
          var opresult4036 = request(string4034, "++(1)", [1], string4035);
          setLineNumber(2824);    // compilenode member
          // call case 6: other requests
          if (var_retTok === undefined) raiseUninitializedVariable("retTok");
          var call4037 = request(var_retTok, "line", [0]);
          // call case 6: other requests
          if (var_retTok === undefined) raiseUninitializedVariable("retTok");
          var call4038 = request(var_retTok, "linePos", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4039 = request(var_sym, "linePos", [0]);
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4033 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestions(1)", [1, 3, 1], opresult4036, call4037, call4038, call4039, var_suggestions);
          if4000 = call4033;
        }
        setLineNumber(2827);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call4040 = request(var_values, "pop", [0]);
        var_retval = call4040;
        if3997 = GraceDone;
      } else {
        setLineNumber(2829);    // compilenode member
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call4042 = request(var_ast, "noPosition", [0]);
        // call case 6: other requests
        var string4044 = new GraceString("done");
        // call case 6: other requests
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call4045 = request(var_ast, "identifierNode", [0]);
        var call4043 = request(call4045, "new(2)", [2], string4044, GraceFalse);
        var call4041 = request(call4043, "setStart(1)", [1], call4042);
        var_retval = call4041;
        setLineNumber(2830);    // compilenode member
        // call case 6: other requests
        if (var_ast === undefined) raiseUninitializedVariable("ast");
        var call4047 = request(var_ast, "noPosition", [0]);
        // call case 6: other requests
        if (var_retval === undefined) raiseUninitializedVariable("retval");
        var call4046 = request(var_retval, "end:=(1)", [1], call4047);
        if3997 = call4046;
      }
      setLineNumber(2832);    // compilenode member
      // call case 6: other requests
      if (var_retTok === undefined) raiseUninitializedVariable("retTok");
      var call4049 = request(var_retTok, "line", [0]);
      // call case 6: other requests
      if (var_retTok === undefined) raiseUninitializedVariable("retTok");
      var call4050 = request(var_retTok, "linePos", [0]);
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call4048 = request(var_util, "setPosition(2)", [2], call4049, call4050);
      setLineNumber(2833);    // compilenode call
      if (var_retval === undefined) raiseUninitializedVariable("retval");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call4052 = request(var_ast, "returnNode", [0]);
      var call4051 = request(call4052, "new(1)", [1], var_retval);
      var var_o = call4051;
      setLineNumber(2834);    // compilenode call
      if (var_o === undefined) raiseUninitializedVariable("o");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call4053 = request(var_values, "push(1)", [1], var_o);
      if3993 = call4053;
    }
    return if3993;
  };    // end of method doreturn
  this.methods["doreturn"] = func3992;
  func3992.methodName = "doreturn";
  func3992.paramCounts = [0];
  func3992.paramNames = [];
  func3992.definitionLine = 2796;
  func3992.definitionModule = "parser";
  var func4054 = function(argcv) {    // method methodInInterface, line 2838
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("methodInInterface", 0, numArgs - 0);
    }
    setLineNumber(2841);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call4056 = selfRequest(this, "methodSignature", [0]);
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call4055 = request(var_values, "push(1)", [1], call4056);
    setLineNumber(2842);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call4057 = selfRequest(this, "reconcileComments", [0]);
    return call4057;
  };    // end of method methodInInterface
  this.methods["methodInInterface"] = func4054;
  func4054.methodName = "methodInInterface";
  func4054.paramCounts = [0];
  func4054.paramNames = [];
  func4054.definitionLine = 2838;
  func4054.definitionModule = "parser";
  var func4058 = function(argcv) {    // method methodSignature, line 2845
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("methodSignature", 0, numArgs - 0);
    }
    setLineNumber(2847);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_firstTok = var_sym;
    setLineNumber(2848);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call4059 = selfRequest(this, "methodHeader", [0]);
    var var_m = call4059;
    setLineNumber(2849);    // compilenode member
    // call case 6: other requests
    var call4060 = request(var_m, "dtype", [0]);
    var var_rt = call4060;
    var if4061 = GraceDone;
    setLineNumber(2850);    // compilenode op
    var opresult4062 = request(GraceFalse, "==(1)", [1], var_rt);
    if (Grace_isTrue(opresult4062)) {
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call4063 = request(var_ast, "unknownType", [0]);
      var_rt = call4063;
      if4061 = GraceDone;
    }
    setLineNumber(2851);    // compilenode call
    // call case 6: other requests
    // call case 6: other requests
    var call4066 = request(var_m, "signature", [0]);
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call4065 = request(var_ast, "methodSignatureNode(2)", [2], call4066, var_rt);
    var call4064 = request(call4065, "setPositionFrom(1)", [1], var_firstTok);
    return call4064;
  };    // end of method methodSignature
  this.methods["methodSignature"] = func4058;
  func4058.methodName = "methodSignature";
  func4058.paramCounts = [0];
  func4058.paramNames = [];
  func4058.definitionLine = 2845;
  func4058.definitionModule = "parser";
  var func4067 = function(argcv) {    // method checkForSeparatorInInterface, line 2854
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("checkForSeparatorInInterface", 0, numArgs - 0);
    }
    var if4068 = GraceDone;
    setLineNumber(2855);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4069 = request(var_sym, "isSeparator", [0]);
    if (Grace_isTrue(call4069)) {
      setLineNumber(2856);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4070 = selfRequest(this, "next", [0]);
      if4068 = call4070;
    } else {
      var if4071 = GraceDone;
      setLineNumber(2858);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4073 = request(var_sym, "isRBrace", [0]);
      var call4072 = request(call4073, "not", [0]);
      if (Grace_isTrue(call4072)) {
        var if4074 = GraceDone;
        setLineNumber(2859);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4075 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4076 = request(var_sym, "line", [0]);
        var opresult4077 = request(call4075, "==(1)", [1], call4076);
        if (Grace_isTrue(opresult4077)) {
          setLineNumber(2860);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4079 = request(var_errormessages, "suggestion", [0]);
          var call4078 = request(call4079, "new", [0]);
          var var_suggestion = call4078;
          setLineNumber(2861);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call4081 = request(var_lastToken, "linePos", [0]);
          var diff4082 = request(call4081, "-(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4084 = request(var_sym, "line", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call4085 = request(var_util, "lines", [0]);
          var call4083 = request(call4085, "at(1)", [1], call4084);
          var call4080 = request(call4083, "substringFrom(1)to(1)", [1, 1], new GraceNum(1), diff4082);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4086 = request(var_sym, "value", [0]);
          var opresult4087 = request(call4080, "++(1)", [1], call4086);
          var var_newLine = opresult4087;
          setLineNumber(2862);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4089 = request(var_sym, "line", [0]);
          var sum4090 = request(call4089, "+(1)", [1], new GraceNum(.1));
          if (var_newLine === undefined) raiseUninitializedVariable("newLine");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4088 = request(var_suggestion, "addLine(2)", [2], sum4090, var_newLine);
          setLineNumber(2863);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4091 = request(var_suggestion, "deleteToken(1)leading(1)trailing(1)", [1, 1, 1], var_sym, GraceTrue, GraceTrue);
          setLineNumber(2864);    // compilenode string
          var string4093 = new GraceString("methods and types in an interface literal must be on separate lines (or separated by semicolons)");
          setLineNumber(2865);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4094 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4095 = request(var_sym, "linePos", [0]);
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4092 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string4093, call4094, call4095, var_suggestion);
          if4074 = call4092;
        }
        if4071 = if4074;
      }
      if4068 = if4071;
    }
    return if4068;
  };    // end of method checkForSeparatorInInterface
  this.methods["checkForSeparatorInInterface"] = func4067;
  func4067.methodName = "checkForSeparatorInInterface";
  func4067.paramCounts = [0];
  func4067.paramNames = [];
  func4067.definitionLine = 2854;
  func4067.definitionModule = "parser";
  var func4096 = function(argcv) {    // method interfaceLiteral, line 2872
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("interfaceLiteral", 0, numArgs - 0);
    }
    setLineNumber(2875);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_startToken = var_sym;
    var if4097 = GraceDone;
    setLineNumber(2876);    // compilenode string
    var string4099 = new GraceString("interface");
    // call case 2: outer request
    var call4098 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string4099);
    if (Grace_isTrue(call4098)) {
      setLineNumber(2877);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4100 = selfRequest(this, "next", [0]);
      var if4101 = GraceDone;
      setLineNumber(2878);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4103 = request(var_sym, "isLBrace", [0]);
      var call4102 = request(call4103, "not", [0]);
      if (Grace_isTrue(call4102)) {
        setLineNumber(2879);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4105 = request(var_errormessages, "suggestion", [0]);
        var call4104 = request(call4105, "new", [0]);
        var var_suggestion = call4104;
        setLineNumber(2880);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var string4107 = new GraceString("{");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call4106 = request(var_suggestion, "replaceToken(1)with(1)", [1, 1], var_sym, string4107);
        setLineNumber(2881);    // compilenode string
        var string4109 = new GraceString("interface literals must open with a brace.");
        setLineNumber(2882);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4110 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4111 = request(var_sym, "linePos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4108 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string4109, call4110, call4111, var_suggestion);
        setLineNumber(2883);    // compilenode return
        return var_done;
      }
      if4097 = if4101;
    }
    var if4112 = GraceDone;
    setLineNumber(2886);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4113 = request(var_sym, "isLBrace", [0]);
    if (Grace_isTrue(call4113)) {
      setLineNumber(2887);    // compilenode array
      var array4115 = new GraceSequence([]);
      // call case 2: outer request
      var call4114 = selfRequest(var_prelude, "list(1)", [1], array4115);
      var var_meths = call4114;
      setLineNumber(2888);    // compilenode array
      var array4117 = new GraceSequence([]);
      // call case 2: outer request
      var call4116 = selfRequest(var_prelude, "list(1)", [1], array4117);
      var var_types = call4116;
      setLineNumber(2889);    // compilenode defdec
      if (var_auto__95__count === undefined) raiseUninitializedVariable("auto_count");
      var var_mc = var_auto__95__count;
      setLineNumber(2890);    // compilenode op
      if (var_auto__95__count === undefined) raiseUninitializedVariable("auto_count");
      var sum4118 = request(var_auto__95__count, "+(1)", [1], new GraceNum(1));
      var_auto__95__count = sum4118;
      setLineNumber(2891);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4119 = selfRequest(this, "next", [0]);
      setLineNumber(2892);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4120 = selfRequest(this, "skipSeparators", [0]);
      setLineNumber(2893);    // compilenode block
      var block4122 = new GraceBlock(this, 2893, 0);
      block4122.guard = jsTrue;
      block4122.real = function block4122() {
        setLineNumber(2893);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4124 = request(var_sym, "isRBrace", [0]);
        var call4123 = request(call4124, "not", [0]);
        return call4123;
      };
      let applyMeth4122 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth4122.methodName = "apply";
      applyMeth4122.paramCounts = [0];
      applyMeth4122.paramNames = [];
      applyMeth4122.definitionLine = 2893;
      applyMeth4122.definitionModule = "parser";
      block4122.methods["apply"] = applyMeth4122;
      var block4125 = new GraceBlock(this, 2893, 0);
      block4125.guard = jsTrue;
      block4125.real = function block4125() {
        var if4126 = GraceDone;
        setLineNumber(2894);    // compilenode string
        var string4128 = new GraceString("type");
        // call case 2: outer request
        var call4127 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string4128);
        if (Grace_isTrue(call4127)) {
          setLineNumber(2895);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4129 = selfRequest(this, "typedec", [0]);
          setLineNumber(2896);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4131 = request(var_values, "pop", [0]);
          // call case 6: other requests
          if (var_types === undefined) raiseUninitializedVariable("types");
          var call4130 = request(var_types, "push(1)", [1], call4131);
          if4126 = call4130;
        } else {
          setLineNumber(2898);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4132 = selfRequest(this, "methodInInterface", [0]);
          setLineNumber(2899);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4134 = request(var_values, "pop", [0]);
          // call case 6: other requests
          if (var_meths === undefined) raiseUninitializedVariable("meths");
          var call4133 = request(var_meths, "push(1)", [1], call4134);
          if4126 = call4133;
        }
        setLineNumber(2901);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4135 = selfRequest(this, "checkForSeparatorInInterface", [0]);
        return call4135;
      };
      let applyMeth4125 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth4125.methodName = "apply";
      applyMeth4125.paramCounts = [0];
      applyMeth4125.paramNames = [];
      applyMeth4125.definitionLine = 2893;
      applyMeth4125.definitionModule = "parser";
      block4125.methods["apply"] = applyMeth4125;
      // call case 2: outer request
      var call4121 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block4122, block4125);
      setLineNumber(2903);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4136 = selfRequest(this, "next", [0]);
      setLineNumber(2904);    // compilenode member
      // call case 6: other requests
      if (var_startToken === undefined) raiseUninitializedVariable("startToken");
      var call4138 = request(var_startToken, "line", [0]);
      // call case 6: other requests
      if (var_startToken === undefined) raiseUninitializedVariable("startToken");
      var call4139 = request(var_startToken, "linePos", [0]);
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call4137 = request(var_util, "setPosition(2)", [2], call4138, call4139);
      setLineNumber(2905);    // compilenode call
      if (var_meths === undefined) raiseUninitializedVariable("meths");
      if (var_types === undefined) raiseUninitializedVariable("types");
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call4141 = request(var_ast, "typeLiteralNode", [0]);
      var call4140 = request(call4141, "new(2)", [2], var_meths, var_types);
      var var_t = call4140;
      setLineNumber(2906);    // compilenode call
      if (var_t === undefined) raiseUninitializedVariable("t");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call4142 = request(var_values, "push(1)", [1], var_t);
      if4112 = call4142;
    }
    return if4112;
  };    // end of method interfaceLiteral
  this.methods["interfaceLiteral"] = func4096;
  func4096.methodName = "interfaceLiteral";
  func4096.paramCounts = [0];
  func4096.paramNames = [];
  func4096.definitionLine = 2872;
  func4096.definitionModule = "parser";
  var func4143 = function(argcv) {    // method typedec, line 2910
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("typedec", 0, numArgs - 0);
    }
    var if4144 = GraceDone;
    setLineNumber(2912);    // compilenode string
    var string4146 = new GraceString("type");
    // call case 2: outer request
    var call4145 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string4146);
    if (Grace_isTrue(call4145)) {
      setLineNumber(2913);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4147 = request(var_sym, "line", [0]);
      var var_line = call4147;
      setLineNumber(2914);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4148 = request(var_sym, "linePos", [0]);
      var var_pos = call4148;
      setLineNumber(2915);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4149 = selfRequest(this, "next", [0]);
      var if4150 = GraceDone;
      setLineNumber(2916);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4151 = request(var_sym, "kind", [0]);
      var string4152 = new GraceString("identifier");
      var opresult4153 = request(call4151, "\u2260(1)", [1], string4152);
      if (Grace_isTrue(opresult4153)) {
        setLineNumber(2917);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4155 = request(var_errormessages, "suggestion", [0]);
        var call4154 = request(call4155, "new", [0]);
        var var_suggestion = call4154;
        setLineNumber(2918);    // compilenode string
        var string4157 = new GraceString(" \u00abtype name\u00bb");
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call4156 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string4157, var_lastToken);
        setLineNumber(2919);    // compilenode string
        var string4159 = new GraceString("a type declaration must have a name after the 'type'.");
        setLineNumber(2920);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4160 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4161 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4162 = request(var_lastToken, "size", [0]);
        var sum4163 = request(call4161, "+(1)", [1], call4162);
        var sum4164 = request(sum4163, "+(1)", [1], new GraceNum(1));
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4158 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string4159, call4160, sum4164, var_suggestion);
        if4150 = call4158;
      }
      setLineNumber(2922);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4165 = selfRequest(this, "pushIdentifier", [0]);
      setLineNumber(2923);    // compilenode call
      if (var_line === undefined) raiseUninitializedVariable("line");
      if (var_pos === undefined) raiseUninitializedVariable("pos");
      // call case 6: other requests
      if (var_util === undefined) raiseUninitializedVariable("util");
      var call4166 = request(var_util, "setPosition(2)", [2], var_line, var_pos);
      setLineNumber(2924);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call4168 = request(var_values, "pop", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call4169 = request(var_ast, "typeDecNode", [0]);
      var call4167 = request(call4169, "new(2)", [2], call4168, GraceFalse);
      var var_nt = call4167;
      var if4170 = GraceDone;
      setLineNumber(2925);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4171 = request(var_sym, "isLGeneric", [0]);
      if (Grace_isTrue(call4171)) {
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4173 = selfRequest(this, "typeparameters", [0]);
        // call case 6: other requests
        if (var_nt === undefined) raiseUninitializedVariable("nt");
        var call4172 = request(var_nt, "typeParams:=(1)", [1], call4173);
        if4170 = call4172;
      }
      setLineNumber(2926);    // compilenode call
      // call case 6: other requests
      // call case 6: other requests
      if (var_nt === undefined) raiseUninitializedVariable("nt");
      var call4175 = request(var_nt, "name", [0]);
      var call4174 = request(call4175, "isBindingOccurrence:=(1)", [1], GraceTrue);
      setLineNumber(2927);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4176 = selfRequest(this, "doannotation", [0]);
      var var_anns = call4176;
      var if4177 = GraceDone;
      setLineNumber(2928);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4178 = request(var_sym, "value", [0]);
      var string4179 = new GraceString("=");
      var opresult4180 = request(call4178, "\u2260(1)", [1], string4179);
      if (Grace_isTrue(opresult4180)) {
        setLineNumber(2929);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4182 = request(var_errormessages, "suggestion", [0]);
        var call4181 = request(call4182, "new", [0]);
        var var_suggestion = call4181;
        setLineNumber(2930);    // compilenode block
        var block4184 = new GraceBlock(this, 2930, 1);
        block4184.guard = jsTrue;
        block4184.real = function block4184(var_t) {
          setLineNumber(2931);    // compilenode member
          // call case 6: other requests
          var call4185 = request(var_t, "isLBrace", [0]);
          // call case 6: other requests
          var call4186 = request(var_t, "isKeyword", [0]);
          var opresult4187 = request(call4185, "||(1)", [1], call4186);
          return opresult4187;
        };
        let applyMeth4184 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth4184.methodName = "apply(1)";
        applyMeth4184.paramCounts = [1];
        applyMeth4184.paramNames = ["t"];
        applyMeth4184.definitionLine = 2930;
        applyMeth4184.definitionModule = "parser";
        block4184.methods["apply(1)"] = applyMeth4184;
        let matchesMeth4184 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth4184.methodName = "matches(1)";
        matchesMeth4184.paramCounts = [1];
        matchesMeth4184.paramNames = ["t"];
        matchesMeth4184.definitionLine = 2930;
        matchesMeth4184.definitionModule = "parser";
        block4184.methods["matches(1)"] = matchesMeth4184;
        // call case 2: outer request
        var call4183 = selfRequest(importedModules["parser"], "findNextToken(1)", [1], block4184);
        var var_nextTok = call4183;
        var if4188 = GraceDone;
        setLineNumber(2933);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        var opresult4189 = request(GraceFalse, "==(1)", [1], var_nextTok);
        var block4190 = new GraceBlock(this, 2933, 0);
        block4190.guard = jsTrue;
        block4190.real = function block4190() {
          setLineNumber(2933);    // compilenode op
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var opresult4191 = request(var_nextTok, "==(1)", [1], var_sym);
          return opresult4191;
        };
        let applyMeth4190 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth4190.methodName = "apply";
        applyMeth4190.paramCounts = [0];
        applyMeth4190.paramNames = [];
        applyMeth4190.definitionLine = 2933;
        applyMeth4190.definitionModule = "parser";
        block4190.methods["apply"] = applyMeth4190;
        var opresult4192 = request(opresult4189, "||(1)", [1], block4190);
        if (Grace_isTrue(opresult4192)) {
          setLineNumber(2934);    // compilenode string
          var string4194 = new GraceString(" =");
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4193 = request(var_suggestion, "insert(1)afterToken(1)", [1, 1], string4194, var_lastToken);
          if4188 = call4193;
        } else {
          setLineNumber(2936);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call4196 = request(var_nextTok, "prev", [0]);
          var string4197 = new GraceString("=");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4195 = request(var_suggestion, "replaceTokenRange(2)with(1)", [2, 1], var_sym, call4196, string4197);
          if4188 = call4195;
        }
        setLineNumber(2938);    // compilenode string
        var string4199 = new GraceString("a type declaration must have an '=' after the type name.");
        setLineNumber(2939);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4200 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4201 = request(var_lastToken, "linePos", [0]);
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4202 = request(var_lastToken, "size", [0]);
        var sum4203 = request(call4201, "+(1)", [1], call4202);
        var sum4204 = request(sum4203, "+(1)", [1], new GraceNum(1));
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4198 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestion(1)", [1, 2, 1], string4199, call4200, sum4204, var_suggestion);
        if4177 = call4198;
      }
      setLineNumber(2942);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4205 = selfRequest(this, "next", [0]);
      var if4206 = GraceDone;
      setLineNumber(2944);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4207 = request(var_sym, "isLBrace", [0]);
      if (Grace_isTrue(call4207)) {
        setLineNumber(2945);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4208 = selfRequest(this, "interfaceLiteral", [0]);
        if4206 = call4208;
      } else {
        var if4209 = GraceDone;
        setLineNumber(2946);    // compilenode string
        var string4211 = new GraceString("type");
        // call case 2: outer request
        var call4210 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string4211);
        if (Grace_isTrue(call4210)) {
          setLineNumber(2947);    // compilenode string
          var string4213 = new GraceString("an interface literal must start with 'interface', not 'type'.");
          setLineNumber(2948);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4214 = request(var_sym, "line", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4215 = request(var_sym, "linePos", [0]);
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4216 = request(var_sym, "endPos", [0]);
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4212 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], string4213, call4214, call4215, call4216);
          if4209 = call4212;
        } else {
          setLineNumber(2950);    // compilenode call
          if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
          // call case 2: outer request
          var call4217 = selfRequest(importedModules["parser"], "expression(1)", [1], var_noBlocks);
          if4209 = call4217;
        }
        if4206 = if4209;
      }
      setLineNumber(2952);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call4219 = request(var_values, "pop", [0]);
      // call case 6: other requests
      if (var_nt === undefined) raiseUninitializedVariable("nt");
      var call4218 = request(var_nt, "value:=(1)", [1], call4219);
      var if4220 = GraceDone;
      setLineNumber(2953);    // compilenode op
      if (var_anns === undefined) raiseUninitializedVariable("anns");
      var opresult4221 = request(GraceFalse, "\u2260(1)", [1], var_anns);
      if (Grace_isTrue(opresult4221)) {
        setLineNumber(2954);    // compilenode call
        if (var_anns === undefined) raiseUninitializedVariable("anns");
        // call case 6: other requests
        // call case 6: other requests
        if (var_nt === undefined) raiseUninitializedVariable("nt");
        var call4223 = request(var_nt, "annotations", [0]);
        var call4222 = request(call4223, "addAll(1)", [1], var_anns);
        if4220 = call4222;
      }
      setLineNumber(2956);    // compilenode call
      if (var_nt === undefined) raiseUninitializedVariable("nt");
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call4224 = request(var_values, "push(1)", [1], var_nt);
      setLineNumber(2957);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4225 = selfRequest(this, "reconcileComments", [0]);
      if4144 = call4225;
    }
    return if4144;
  };    // end of method typedec
  this.methods["typedec"] = func4143;
  func4143.methodName = "typedec";
  func4143.paramCounts = [0];
  func4143.paramNames = [];
  func4143.definitionLine = 2910;
  func4143.definitionModule = "parser";
  var func4226 = function(argcv) {    // method statement, line 2961
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("statement", 0, numArgs - 0);
    }
    setLineNumber(2976);    // compilenode bind
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var_statementToken = var_sym;
    setLineNumber(2977);    // compilenode defdec
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var var_btok = var_sym;
    setLineNumber(2978);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call4227 = selfRequest(this, "pushComments", [0]);
    var if4228 = GraceDone;
    setLineNumber(2979);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4229 = request(var_sym, "isKeyword", [0]);
    if (Grace_isTrue(call4229)) {
      setLineNumber(2980);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4230 = request(var_sym, "value", [0]);
      var var_symValue = call4230;
      var if4231 = GraceDone;
      setLineNumber(2981);    // compilenode op
      if (var_symValue === undefined) raiseUninitializedVariable("symValue");
      var string4232 = new GraceString("var");
      var opresult4233 = request(var_symValue, "==(1)", [1], string4232);
      if (Grace_isTrue(opresult4233)) {
        setLineNumber(2982);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4234 = selfRequest(this, "vardec", [0]);
        if4231 = call4234;
      } else {
        var if4235 = GraceDone;
        setLineNumber(2983);    // compilenode op
        if (var_symValue === undefined) raiseUninitializedVariable("symValue");
        var string4236 = new GraceString("def");
        var opresult4237 = request(var_symValue, "==(1)", [1], string4236);
        if (Grace_isTrue(opresult4237)) {
          setLineNumber(2984);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4238 = selfRequest(this, "defdec", [0]);
          if4235 = call4238;
        } else {
          var if4239 = GraceDone;
          setLineNumber(2985);    // compilenode op
          if (var_symValue === undefined) raiseUninitializedVariable("symValue");
          var string4240 = new GraceString("import");
          var opresult4241 = request(var_symValue, "==(1)", [1], string4240);
          if (Grace_isTrue(opresult4241)) {
            setLineNumber(2986);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4242 = selfRequest(this, "doimport", [0]);
            if4239 = call4242;
          } else {
            var if4243 = GraceDone;
            setLineNumber(2987);    // compilenode op
            if (var_symValue === undefined) raiseUninitializedVariable("symValue");
            var string4244 = new GraceString("dialect");
            var opresult4245 = request(var_symValue, "==(1)", [1], string4244);
            if (Grace_isTrue(opresult4245)) {
              setLineNumber(2988);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4246 = selfRequest(this, "dodialect", [0]);
              if4243 = call4246;
            } else {
              var if4247 = GraceDone;
              setLineNumber(2989);    // compilenode op
              if (var_symValue === undefined) raiseUninitializedVariable("symValue");
              var string4248 = new GraceString("type");
              var opresult4249 = request(var_symValue, "==(1)", [1], string4248);
              if (Grace_isTrue(opresult4249)) {
                setLineNumber(2990);    // compilenode member
                // call case 4: self request with 0 args and 0 typeArgs 
                var call4250 = selfRequest(this, "typedec", [0]);
                if4247 = call4250;
              } else {
                var if4251 = GraceDone;
                setLineNumber(2991);    // compilenode op
                if (var_symValue === undefined) raiseUninitializedVariable("symValue");
                var string4252 = new GraceString("return");
                var opresult4253 = request(var_symValue, "==(1)", [1], string4252);
                if (Grace_isTrue(opresult4253)) {
                  setLineNumber(2992);    // compilenode member
                  // call case 4: self request with 0 args and 0 typeArgs 
                  var call4254 = selfRequest(this, "doreturn", [0]);
                  if4251 = call4254;
                } else {
                  var if4255 = GraceDone;
                  setLineNumber(2993);    // compilenode string
                  var string4257 = new GraceString("object");
                  // call case 2: outer request
                  var call4256 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string4257);
                  if (Grace_isTrue(call4256)) {
                    setLineNumber(2994);    // compilenode member
                    // call case 4: self request with 0 args and 0 typeArgs 
                    var call4258 = selfRequest(this, "doobject", [0]);
                    if4255 = call4258;
                  } else {
                    var if4259 = GraceDone;
                    setLineNumber(2995);    // compilenode string
                    var string4261 = new GraceString("interface");
                    // call case 2: outer request
                    var call4260 = selfRequest(importedModules["parser"], "acceptKeyword(1)", [1], string4261);
                    if (Grace_isTrue(call4260)) {
                      setLineNumber(2996);    // compilenode member
                      // call case 4: self request with 0 args and 0 typeArgs 
                      var call4262 = selfRequest(this, "interfaceLiteral", [0]);
                      if4259 = call4262;
                    } else {
                      setLineNumber(2998);    // compilenode member
                      // call case 4: self request with 0 args and 0 typeArgs 
                      var call4263 = selfRequest(this, "methodClassOrTrait", [0]);
                      if4259 = call4263;
                    }
                    if4255 = if4259;
                  }
                  if4251 = if4255;
                }
                if4247 = if4251;
              }
              if4243 = if4247;
            }
            if4239 = if4243;
          }
          if4235 = if4239;
        }
        if4231 = if4235;
      }
      if4228 = if4231;
    } else {
      var if4264 = GraceDone;
      setLineNumber(3001);    // compilenode block
      var block4266 = new GraceBlock(this, 3001, 0);
      block4266.guard = jsTrue;
      block4266.real = function block4266() {
        setLineNumber(3001);    // compilenode call
        if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
        // call case 2: outer request
        var call4267 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
        return call4267;
      };
      let applyMeth4266 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth4266.methodName = "apply";
      applyMeth4266.paramCounts = [0];
      applyMeth4266.paramNames = [];
      applyMeth4266.definitionLine = 3001;
      applyMeth4266.definitionModule = "parser";
      block4266.methods["apply"] = applyMeth4266;
      // call case 2: outer request
      var call4265 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block4266);
      if (Grace_isTrue(call4265)) {
        var if4268 = GraceDone;
        setLineNumber(3002);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call4270 = request(var_values, "last", [0]);
        var call4269 = request(call4270, "isIdentifier", [0]);
        // call case 6: other requests
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call4272 = request(var_values, "last", [0]);
        var call4271 = request(call4272, "isMember", [0]);
        var opresult4273 = request(call4269, "||(1)", [1], call4271);
        var block4274 = new GraceBlock(this, 3002, 0);
        block4274.guard = jsTrue;
        block4274.real = function block4274() {
          setLineNumber(3002);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4275 = request(var_sym, "isBind", [0]);
          return call4275;
        };
        let applyMeth4274 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth4274.methodName = "apply";
        applyMeth4274.paramCounts = [0];
        applyMeth4274.paramNames = [];
        applyMeth4274.definitionLine = 3002;
        applyMeth4274.definitionModule = "parser";
        block4274.methods["apply"] = applyMeth4274;
        var opresult4276 = request(opresult4273, "&&(1)", [1], block4274);
        if (Grace_isTrue(opresult4276)) {
          setLineNumber(3003);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4277 = request(var_values, "pop", [0]);
          var var_dest = call4277;
          var if4278 = GraceDone;
          setLineNumber(3004);    // compilenode member
          // call case 6: other requests
          if (var_dest === undefined) raiseUninitializedVariable("dest");
          var call4279 = request(var_dest, "kind", [0]);
          var string4280 = new GraceString("lbrace");
          var opresult4281 = request(call4279, "==(1)", [1], string4280);
          if (Grace_isTrue(opresult4281)) {
            setLineNumber(3005);    // compilenode string
            var string4282 = new GraceString("sym = ");
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var opresult4283 = request(string4282, "++(1)", [1], var_sym);
            var string4284 = new GraceString(", sym.line = ");
            var opresult4285 = request(opresult4283, "++(1)", [1], string4284);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call4286 = request(var_sym, "line", [0]);
            var opresult4287 = request(opresult4285, "++(1)", [1], call4286);
            var string4288 = new GraceString("");
            var opresult4289 = request(opresult4287, "++(1)", [1], string4288);
            Grace_print(opresult4289);
            setLineNumber(3006);    // compilenode string
            var string4291 = new GraceString("popped lbrace token while parsing statement");
            // call case 6: other requests
            // call case 2: outer request
            var call4292 = selfRequest(var_prelude, "ProgrammingError", [0]);
            var call4290 = request(call4292, "raise(1)", [1], string4291);
            if4278 = call4290;
          }
          setLineNumber(3008);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4293 = selfRequest(this, "next", [0]);
          var if4294 = GraceDone;
          setLineNumber(3009);    // compilenode block
          var block4296 = new GraceBlock(this, 3009, 0);
          block4296.guard = jsTrue;
          block4296.real = function block4296() {
            setLineNumber(3009);    // compilenode call
            if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
            // call case 2: outer request
            var call4297 = selfRequest(importedModules["parser"], "expression(1)", [1], var_blocksOK);
            return call4297;
          };
          let applyMeth4296 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4296.methodName = "apply";
          applyMeth4296.paramCounts = [0];
          applyMeth4296.paramNames = [];
          applyMeth4296.definitionLine = 3009;
          applyMeth4296.definitionModule = "parser";
          block4296.methods["apply"] = applyMeth4296;
          // call case 2: outer request
          var call4295 = selfRequest(importedModules["parser"], "unsuccessfulParse(1)", [1], block4296);
          if (Grace_isTrue(call4295)) {
            setLineNumber(3010);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4298 = selfRequest(this, "reportBadRhs", [0]);
            if4294 = call4298;
          }
          setLineNumber(3012);    // compilenode member
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4299 = request(var_values, "pop", [0]);
          var var_val = call4299;
          setLineNumber(3013);    // compilenode member
          // call case 6: other requests
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          var call4301 = request(var_btok, "line", [0]);
          // call case 6: other requests
          if (var_btok === undefined) raiseUninitializedVariable("btok");
          var call4302 = request(var_btok, "linePos", [0]);
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call4300 = request(var_util, "setPosition(2)", [2], call4301, call4302);
          setLineNumber(3014);    // compilenode call
          if (var_dest === undefined) raiseUninitializedVariable("dest");
          if (var_val === undefined) raiseUninitializedVariable("val");
          // call case 6: other requests
          // call case 6: other requests
          if (var_ast === undefined) raiseUninitializedVariable("ast");
          var call4304 = request(var_ast, "bindNode", [0]);
          var call4303 = request(call4304, "new(2)", [2], var_dest, var_val);
          var var_o = call4303;
          setLineNumber(3015);    // compilenode call
          if (var_o === undefined) raiseUninitializedVariable("o");
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4305 = request(var_values, "push(1)", [1], var_o);
          if4268 = call4305;
        }
        if4264 = if4268;
      }
      if4228 = if4264;
    }
    setLineNumber(3019);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call4306 = selfRequest(this, "reconcileComments", [0]);
    var if4307 = GraceDone;
    setLineNumber(3020);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4308 = request(var_sym, "isEof", [0]);
    if (Grace_isTrue(call4308)) {
      setLineNumber(3021);    // compilenode return
      return GraceTrue;
    }
    return if4307;
  };    // end of method statement
  this.methods["statement"] = func4226;
  func4226.methodName = "statement";
  func4226.paramCounts = [0];
  func4226.paramNames = [];
  func4226.definitionLine = 2961;
  func4226.definitionModule = "parser";
  var func4309 = function(argcv) {    // method pushComments, line 3025
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("pushComments", 0, numArgs - 0);
    }
    var if4310 = GraceDone;
    setLineNumber(3031);    // compilenode member
    // call case 6: other requests
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4312 = request(var_sym, "isComment", [0]);
    var call4311 = request(call4312, "not", [0]);
    if (Grace_isTrue(call4311)) {
      return var_done;
    }
    setLineNumber(3032);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4314 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4315 = request(var_sym, "linePos", [0]);
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call4313 = request(var_util, "setPosition(2)", [2], call4314, call4315);
    setLineNumber(3033);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4317 = request(var_sym, "value", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call4318 = request(var_ast, "commentNode", [0]);
    var call4316 = request(call4318, "new(1)", [1], call4317);
    var var_o = call4316;
    var if4319 = GraceDone;
    setLineNumber(3034);    // compilenode member
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call4320 = request(var_lastToken, "line", [0]);
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4321 = request(var_sym, "line", [0]);
    var opresult4322 = request(call4320, "==(1)", [1], call4321);
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call4323 = request(var_lastToken, "kind", [0]);
    var string4324 = new GraceString("comment");
    var opresult4325 = request(call4323, "\u2260(1)", [1], string4324);
    var opresult4326 = request(opresult4322, "&&(1)", [1], opresult4325);
    if (Grace_isTrue(opresult4326)) {
      setLineNumber(3035);    // compilenode call
      // call case 6: other requests
      if (var_o === undefined) raiseUninitializedVariable("o");
      var call4327 = request(var_o, "isPartialLine:=(1)", [1], GraceTrue);
      if4319 = call4327;
    } else {
      var if4328 = GraceDone;
      setLineNumber(3036);    // compilenode member
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call4329 = request(var_lastToken, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4330 = request(var_sym, "line", [0]);
      var diff4331 = request(call4330, "-(1)", [1], new GraceNum(1));
      var opresult4332 = request(call4329, "<(1)", [1], diff4331);
      if (Grace_isTrue(opresult4332)) {
        setLineNumber(3037);    // compilenode call
        // call case 6: other requests
        if (var_o === undefined) raiseUninitializedVariable("o");
        var call4333 = request(var_o, "isPreceededByBlankLine:=(1)", [1], GraceTrue);
        if4328 = call4333;
      }
      if4319 = if4328;
    }
    setLineNumber(3039);    // compilenode call
    // call case 6: other requests
    if (var_comments === undefined) raiseUninitializedVariable("comments");
    var call4334 = request(var_comments, "push(1)", [1], var_o);
    setLineNumber(3040);    // compilenode block
    var block4336 = new GraceBlock(this, 3040, 0);
    block4336.guard = jsTrue;
    block4336.real = function block4336() {
      setLineNumber(3041);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4337 = selfRequest(this, "nextToken", [0]);
      setLineNumber(3042);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4338 = request(var_sym, "isComment", [0]);
      return call4338;
    };
    let applyMeth4336 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4336.methodName = "apply";
    applyMeth4336.paramCounts = [0];
    applyMeth4336.paramNames = [];
    applyMeth4336.definitionLine = 3040;
    applyMeth4336.definitionModule = "parser";
    block4336.methods["apply"] = applyMeth4336;
    setLineNumber(3043);    // compilenode block
    var block4339 = new GraceBlock(this, 3043, 0);
    block4339.guard = jsTrue;
    block4339.real = function block4339() {
      setLineNumber(3044);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4341 = request(var_sym, "value", [0]);
      // call case 6: other requests
      // call case 6: other requests
      if (var_ast === undefined) raiseUninitializedVariable("ast");
      var call4342 = request(var_ast, "commentNode", [0]);
      var call4340 = request(call4342, "new(1)", [1], call4341);
      var_o = call4340;
      var if4343 = GraceDone;
      setLineNumber(3045);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_comments === undefined) raiseUninitializedVariable("comments");
      var call4345 = request(var_comments, "last", [0]);
      var call4344 = request(call4345, "endLine", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4346 = request(var_sym, "line", [0]);
      var diff4347 = request(call4346, "-(1)", [1], new GraceNum(1));
      var opresult4348 = request(call4344, "==(1)", [1], diff4347);
      if (Grace_isTrue(opresult4348)) {
        setLineNumber(3046);    // compilenode call
        if (var_o === undefined) raiseUninitializedVariable("o");
        // call case 6: other requests
        // call case 6: other requests
        if (var_comments === undefined) raiseUninitializedVariable("comments");
        var call4350 = request(var_comments, "last", [0]);
        var call4349 = request(call4350, "extendCommentUsing(1)", [1], var_o);
        if4343 = call4349;
      } else {
        setLineNumber(3048);    // compilenode call
        if (var_o === undefined) raiseUninitializedVariable("o");
        // call case 6: other requests
        if (var_comments === undefined) raiseUninitializedVariable("comments");
        var call4351 = request(var_comments, "push(1)", [1], var_o);
        var if4352 = GraceDone;
        setLineNumber(3049);    // compilenode member
        // call case 6: other requests
        if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
        var call4353 = request(var_lastToken, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4354 = request(var_sym, "line", [0]);
        var diff4355 = request(call4354, "-(1)", [1], new GraceNum(1));
        var opresult4356 = request(call4353, "<(1)", [1], diff4355);
        if (Grace_isTrue(opresult4356)) {
          setLineNumber(3050);    // compilenode call
          // call case 6: other requests
          if (var_o === undefined) raiseUninitializedVariable("o");
          var call4357 = request(var_o, "isPreceededByBlankLine:=(1)", [1], GraceTrue);
          if4352 = call4357;
        }
        if4343 = if4352;
      }
      return if4343;
    };
    let applyMeth4339 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4339.methodName = "apply";
    applyMeth4339.paramCounts = [0];
    applyMeth4339.paramNames = [];
    applyMeth4339.definitionLine = 3043;
    applyMeth4339.definitionModule = "parser";
    block4339.methods["apply"] = applyMeth4339;
    // call case 2: outer request
    var call4335 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block4336, block4339);
    return call4335;
  };    // end of method pushComments
  this.methods["pushComments"] = func4309;
  func4309.methodName = "pushComments";
  func4309.paramCounts = [0];
  func4309.paramNames = [];
  func4309.definitionLine = 3025;
  func4309.definitionModule = "parser";
  var func4358 = function(argcv) {    // method reconcileComments, line 3056
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("reconcileComments", 0, numArgs - 0);
    }
    setLineNumber(3062);    // compilenode member
    // call case 4: self request with 0 args and 0 typeArgs 
    var call4359 = selfRequest(this, "pushComments", [0]);
    var if4360 = GraceDone;
    setLineNumber(3063);    // compilenode member
    // call case 6: other requests
    if (var_values === undefined) raiseUninitializedVariable("values");
    var call4361 = request(var_values, "isEmpty", [0]);
    if (Grace_isTrue(call4361)) {
      if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
      if4360 = var_moduleObject;
    } else {
      setLineNumber(3066);    // compilenode member
      // call case 6: other requests
      if (var_values === undefined) raiseUninitializedVariable("values");
      var call4362 = request(var_values, "last", [0]);
      if4360 = call4362;
    }
    var var_node = if4360;
    var if4363 = GraceDone;
    setLineNumber(3068);    // compilenode member
    // call case 6: other requests
    var call4364 = request(var_node, "kind", [0]);
    var string4365 = new GraceString("lbrace");
    var opresult4366 = request(call4364, "==(1)", [1], string4365);
    if (Grace_isTrue(opresult4366)) {
      setLineNumber(3071);    // compilenode return
      return var_done;
    }
    setLineNumber(3073);    // compilenode member
    // call case 6: other requests
    var call4367 = request(var_node, "line", [0]);
    var var_oLine = call4367;
    setLineNumber(3074);    // compilenode member
    // call case 6: other requests
    // call case 2: outer request
    var call4369 = selfRequest(var_prelude, "list", [0]);
    var call4368 = request(call4369, "empty", [0]);
    var var_preComments = call4368;
    setLineNumber(3075);    // compilenode member
    // call case 6: other requests
    // call case 2: outer request
    var call4371 = selfRequest(var_prelude, "list", [0]);
    var call4370 = request(call4371, "empty", [0]);
    var var_postComments = call4370;
    setLineNumber(3077);    // compilenode member
    // call case 6: other requests
    if (var_comments === undefined) raiseUninitializedVariable("comments");
    var call4372 = request(var_comments, "size", [0]);
    var var_ix = call4372;
    setLineNumber(3078);    // compilenode block
    var block4374 = new GraceBlock(this, 3078, 0);
    block4374.guard = jsTrue;
    block4374.real = function block4374() {
      setLineNumber(3078);    // compilenode op
      if (var_ix === undefined) raiseUninitializedVariable("ix");
      var opresult4375 = request(var_ix, ">(1)", [1], new GraceNum(0));
      return opresult4375;
    };
    let applyMeth4374 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4374.methodName = "apply";
    applyMeth4374.paramCounts = [0];
    applyMeth4374.paramNames = [];
    applyMeth4374.definitionLine = 3078;
    applyMeth4374.definitionModule = "parser";
    block4374.methods["apply"] = applyMeth4374;
    var block4376 = new GraceBlock(this, 3078, 0);
    block4376.guard = jsTrue;
    block4376.real = function block4376() {
      setLineNumber(3079);    // compilenode call
      if (var_ix === undefined) raiseUninitializedVariable("ix");
      // call case 6: other requests
      if (var_comments === undefined) raiseUninitializedVariable("comments");
      var call4377 = request(var_comments, "at(1)", [1], var_ix);
      var var_each = call4377;
      setLineNumber(3080);    // compilenode member
      // call case 6: other requests
      if (var_each === undefined) raiseUninitializedVariable("each");
      var call4378 = request(var_each, "line", [0]);
      if (var_oLine === undefined) raiseUninitializedVariable("oLine");
      var opresult4379 = request(call4378, "==(1)", [1], var_oLine);
      // call case 6: other requests
      if (var_each === undefined) raiseUninitializedVariable("each");
      var call4380 = request(var_each, "line", [0]);
      if (var_oLine === undefined) raiseUninitializedVariable("oLine");
      var sum4381 = request(var_oLine, "+(1)", [1], new GraceNum(1));
      var opresult4382 = request(call4380, "==(1)", [1], sum4381);
      var opresult4383 = request(opresult4379, "||(1)", [1], opresult4382);
      var var_isPostComment = opresult4383;
      setLineNumber(3081);    // compilenode member
      // call case 6: other requests
      if (var_each === undefined) raiseUninitializedVariable("each");
      var call4384 = request(var_each, "isPreceededByBlankLine", [0]);
      // call case 6: other requests
      if (var_each === undefined) raiseUninitializedVariable("each");
      var call4385 = request(var_each, "endLine", [0]);
      if (var_oLine === undefined) raiseUninitializedVariable("oLine");
      var diff4386 = request(var_oLine, "-(1)", [1], new GraceNum(1));
      var opresult4387 = request(call4385, "==(1)", [1], diff4386);
      var opresult4388 = request(call4384, "&&(1)", [1], opresult4387);
      var var_isPreComment = opresult4388;
      var if4389 = GraceDone;
      setLineNumber(3082);    // compilenode if
      if (var_isPostComment === undefined) raiseUninitializedVariable("isPostComment");
      if (Grace_isTrue(var_isPostComment)) {
        setLineNumber(3083);    // compilenode call
        if (var_ix === undefined) raiseUninitializedVariable("ix");
        // call case 6: other requests
        if (var_comments === undefined) raiseUninitializedVariable("comments");
        var call4391 = request(var_comments, "removeAt(1)", [1], var_ix);
        // call case 6: other requests
        if (var_postComments === undefined) raiseUninitializedVariable("postComments");
        var call4390 = request(var_postComments, "push(1)", [1], call4391);
        if4389 = call4390;
      } else {
        var if4392 = GraceDone;
        setLineNumber(3086);    // compilenode if
        if (var_isPreComment === undefined) raiseUninitializedVariable("isPreComment");
        if (Grace_isTrue(var_isPreComment)) {
          setLineNumber(3085);    // compilenode call
          if (var_ix === undefined) raiseUninitializedVariable("ix");
          // call case 6: other requests
          if (var_comments === undefined) raiseUninitializedVariable("comments");
          var call4394 = request(var_comments, "removeAt(1)", [1], var_ix);
          // call case 6: other requests
          if (var_preComments === undefined) raiseUninitializedVariable("preComments");
          var call4393 = request(var_preComments, "addFirst(1)", [1], call4394);
          if4392 = call4393;
        } else {
          var if4395 = GraceDone;
          setLineNumber(3086);    // compilenode member
          // call case 6: other requests
          if (var_each === undefined) raiseUninitializedVariable("each");
          var call4396 = request(var_each, "endLine", [0]);
          if (var_oLine === undefined) raiseUninitializedVariable("oLine");
          var diff4397 = request(var_oLine, "-(1)", [1], new GraceNum(1));
          var opresult4398 = request(call4396, "<(1)", [1], diff4397);
          if (Grace_isTrue(opresult4398)) {
            setLineNumber(3087);    // compilenode num
            var_ix = new GraceNum(0);
            if4395 = GraceDone;
          }
          if4392 = if4395;
        }
        if4389 = if4392;
      }
      setLineNumber(3089);    // compilenode op
      if (var_ix === undefined) raiseUninitializedVariable("ix");
      var diff4399 = request(var_ix, "-(1)", [1], new GraceNum(1));
      var_ix = diff4399;
      return GraceDone;
    };
    let applyMeth4376 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4376.methodName = "apply";
    applyMeth4376.paramCounts = [0];
    applyMeth4376.paramNames = [];
    applyMeth4376.definitionLine = 3078;
    applyMeth4376.definitionModule = "parser";
    block4376.methods["apply"] = applyMeth4376;
    // call case 2: outer request
    var call4373 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block4374, block4376);
    setLineNumber(3092);    // compilenode member
    // call case 6: other requests
    var call4400 = request(var_postComments, "size", [0]);
    var var_postSz = call4400;
    setLineNumber(3093);    // compilenode member
    // call case 6: other requests
    var call4401 = request(var_preComments, "size", [0]);
    var var_preSz = call4401;
    var if4402 = GraceDone;
    setLineNumber(3095);    // compilenode num
    var opresult4403 = request(var_postSz, ">(1)", [1], new GraceNum(1));
    var opresult4404 = request(var_preSz, ">(1)", [1], new GraceNum(1));
    var opresult4405 = request(opresult4403, "&&(1)", [1], opresult4404);
    if (Grace_isTrue(opresult4405)) {
      setLineNumber(3096);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_preComments === undefined) raiseUninitializedVariable("preComments");
      var call4408 = request(var_preComments, "last", [0]);
      var call4407 = request(call4408, "value", [0]);
      var string4409 = new GraceString("\n");
      var opresult4410 = request(call4407, "++(1)", [1], string4409);
      // call case 6: other requests
      // call case 6: other requests
      if (var_preComments === undefined) raiseUninitializedVariable("preComments");
      var call4411 = request(var_preComments, "last", [0]);
      var call4406 = request(call4411, "value:=(1)", [1], opresult4410);
      if4402 = call4406;
    }
    setLineNumber(3098);    // compilenode call
    // call case 6: other requests
    var call4412 = request(var_node, "addComments(1)", [1], var_preComments);
    setLineNumber(3099);    // compilenode call
    // call case 6: other requests
    var call4413 = request(var_node, "addComments(1)", [1], var_postComments);
    return call4413;
  };    // end of method reconcileComments
  this.methods["reconcileComments"] = func4358;
  func4358.methodName = "reconcileComments";
  func4358.paramCounts = [0];
  func4358.paramNames = [];
  func4358.definitionLine = 3056;
  func4358.definitionModule = "parser";
  var func4414 = function(argcv) {    // method checkBadOperators, line 3102
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("checkBadOperators", 0, numArgs - 0);
    }
    var if4415 = GraceDone;
    setLineNumber(3103);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4416 = request(var_sym, "value", [0]);
    var string4417 = new GraceString("=");
    var opresult4418 = request(call4416, "==(1)", [1], string4417);
    if (Grace_isTrue(opresult4418)) {
      setLineNumber(3104);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call4420 = request(var_errormessages, "suggestion", [0]);
      var call4419 = request(call4420, "new", [0]);
      var var_sugg = call4419;
      setLineNumber(3105);    // compilenode string
      var string4422 = new GraceString("=");
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      if (var_sugg === undefined) raiseUninitializedVariable("sugg");
      var call4421 = request(var_sugg, "insert(1)afterToken(1)", [1, 1], string4422, var_sym);
      setLineNumber(3106);    // compilenode string
      var string4424 = new GraceString("use '==' to test equality, not '='.");
      setLineNumber(3107);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4425 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4426 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4427 = request(var_sym, "linePos", [0]);
      if (var_sugg === undefined) raiseUninitializedVariable("sugg");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call4423 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string4424, call4425, call4426, call4427, var_sugg);
      if4415 = call4423;
    }
    return if4415;
  };    // end of method checkBadOperators
  this.methods["checkBadOperators"] = func4414;
  func4414.methodName = "checkBadOperators";
  func4414.paramCounts = [0];
  func4414.paramNames = [];
  func4414.definitionLine = 3102;
  func4414.definitionModule = "parser";
  var func4428 = function(argcv) {    // method checkBadTypeLiteral, line 3112
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("checkBadTypeLiteral", 0, numArgs - 0);
    }
    var if4429 = GraceDone;
    setLineNumber(3113);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4430 = request(var_sym, "isLBrace", [0]);
    if (Grace_isTrue(call4430)) {
      setLineNumber(3114);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call4432 = request(var_errormessages, "suggestion", [0]);
      var call4431 = request(call4432, "new", [0]);
      var var_sugg = call4431;
      setLineNumber(3115);    // compilenode string
      var string4434 = new GraceString("type ");
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      // call case 6: other requests
      if (var_sugg === undefined) raiseUninitializedVariable("sugg");
      var call4433 = request(var_sugg, "insert(1)beforeToken(1)", [1, 1], string4434, var_sym);
      setLineNumber(3116);    // compilenode string
      var string4436 = new GraceString("type literals must start with the keyword 'type'.");
      setLineNumber(3117);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4437 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4438 = request(var_sym, "linePos", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4439 = request(var_sym, "linePos", [0]);
      if (var_sugg === undefined) raiseUninitializedVariable("sugg");
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call4435 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], string4436, call4437, call4438, call4439, var_sugg);
      if4429 = call4435;
    }
    return if4429;
  };    // end of method checkBadTypeLiteral
  this.methods["checkBadTypeLiteral"] = func4428;
  func4428.methodName = "checkBadTypeLiteral";
  func4428.paramCounts = [0];
  func4428.paramNames = [];
  func4428.definitionLine = 3112;
  func4428.definitionModule = "parser";
  var func4440 = function(argcv) {    // method checkUnexpectedTokenAfterStatement, line 3122
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("checkUnexpectedTokenAfterStatement", 0, numArgs - 0);
    }
    var if4441 = GraceDone;
    setLineNumber(3123);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4442 = request(var_sym, "line", [0]);
    // call case 6: other requests
    if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
    var call4443 = request(var_lastToken, "line", [0]);
    var opresult4444 = request(call4442, "==(1)", [1], call4443);
    if (Grace_isTrue(opresult4444)) {
      var if4445 = GraceDone;
      setLineNumber(3124);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4446 = request(var_sym, "isOp", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4447 = request(var_sym, "value", [0]);
      var string4448 = new GraceString("=");
      var opresult4449 = request(call4447, "==(1)", [1], string4448);
      var opresult4450 = request(call4446, "&&(1)", [1], opresult4449);
      // call case 6: other requests
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      var call4451 = request(var_lastToken, "isIdentifier", [0]);
      var opresult4452 = request(opresult4450, "&&(1)", [1], call4451);
      if (Grace_isTrue(opresult4452)) {
        setLineNumber(3125);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4454 = request(var_errormessages, "suggestion", [0]);
        var call4453 = request(call4454, "new", [0]);
        var var_sugg = call4453;
        setLineNumber(3126);    // compilenode array
        var array4456 = new GraceSequence([]);
        // call case 2: outer request
        var call4455 = selfRequest(var_prelude, "list(1)", [1], array4456);
        var var_suggestions = call4455;
        setLineNumber(3127);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var string4458 = new GraceString(":=");
        // call case 6: other requests
        if (var_sugg === undefined) raiseUninitializedVariable("sugg");
        var call4457 = request(var_sugg, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceFalse, GraceFalse, string4458);
        setLineNumber(3128);    // compilenode call
        if (var_sugg === undefined) raiseUninitializedVariable("sugg");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call4459 = request(var_suggestions, "push(1)", [1], var_sugg);
        setLineNumber(3129);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4461 = request(var_errormessages, "suggestion", [0]);
        var call4460 = request(call4461, "new", [0]);
        var var_sugg2 = call4460;
        setLineNumber(3130);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var string4463 = new GraceString("==");
        // call case 6: other requests
        if (var_sugg2 === undefined) raiseUninitializedVariable("sugg2");
        var call4462 = request(var_sugg2, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceFalse, GraceFalse, string4463);
        setLineNumber(3131);    // compilenode call
        if (var_sugg2 === undefined) raiseUninitializedVariable("sugg2");
        // call case 6: other requests
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        var call4464 = request(var_suggestions, "push(1)", [1], var_sugg2);
        setLineNumber(3132);    // compilenode string
        var string4466 = new GraceString("assignment uses ':=', not '='.");
        setLineNumber(3133);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4467 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4468 = request(var_sym, "linePos", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4469 = request(var_sym, "linePos", [0]);
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4465 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestions(1)", [1, 3, 1], string4466, call4467, call4468, call4469, var_suggestions);
        if4445 = call4465;
      }
      var if4470 = GraceDone;
      setLineNumber(3136);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4471 = request(var_sym, "kind", [0]);
      var string4472 = new GraceString("rbrace");
      var opresult4473 = request(call4471, "\u2260(1)", [1], string4472);
      if (Grace_isTrue(opresult4473)) {
        setLineNumber(3137);    // compilenode array
        var array4475 = new GraceSequence([]);
        // call case 2: outer request
        var call4474 = selfRequest(var_prelude, "list(1)", [1], array4475);
        var var_suggestions = call4474;
        setLineNumber(3138);    // compilenode vardec
        var var_suggestion;
        var if4476 = GraceDone;
        setLineNumber(3139);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call4477 = request(var_values, "size", [0]);
        var opresult4478 = request(call4477, ">(1)", [1], new GraceNum(0));
        var block4479 = new GraceBlock(this, 3139, 0);
        block4479.guard = jsTrue;
        block4479.real = function block4479() {
          setLineNumber(3139);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4481 = request(var_values, "last", [0]);
          var call4480 = request(call4481, "isIdentifier", [0]);
          var block4482 = new GraceBlock(this, 3139, 0);
          block4482.guard = jsTrue;
          block4482.real = function block4482() {
            setLineNumber(3139);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_values === undefined) raiseUninitializedVariable("values");
            var call4484 = request(var_values, "last", [0]);
            var call4483 = request(call4484, "isMember", [0]);
            return call4483;
          };
          let applyMeth4482 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4482.methodName = "apply";
          applyMeth4482.paramCounts = [0];
          applyMeth4482.paramNames = [];
          applyMeth4482.definitionLine = 3139;
          applyMeth4482.definitionModule = "parser";
          block4482.methods["apply"] = applyMeth4482;
          var opresult4485 = request(call4480, "||(1)", [1], block4482);
          return opresult4485;
        };
        let applyMeth4479 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth4479.methodName = "apply";
        applyMeth4479.paramCounts = [0];
        applyMeth4479.paramNames = [];
        applyMeth4479.definitionLine = 3139;
        applyMeth4479.definitionModule = "parser";
        block4479.methods["apply"] = applyMeth4479;
        var opresult4486 = request(opresult4478, "&&(1)", [1], block4479);
        var block4487 = new GraceBlock(this, 3139, 0);
        block4487.guard = jsTrue;
        block4487.real = function block4487() {
          setLineNumber(3139);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4488 = request(var_sym, "isIdentifier", [0]);
          return call4488;
        };
        let applyMeth4487 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth4487.methodName = "apply";
        applyMeth4487.paramCounts = [0];
        applyMeth4487.paramNames = [];
        applyMeth4487.definitionLine = 3139;
        applyMeth4487.definitionModule = "parser";
        block4487.methods["apply"] = applyMeth4487;
        var opresult4489 = request(opresult4486, "&&(1)", [1], block4487);
        if (Grace_isTrue(opresult4489)) {
          setLineNumber(3140);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4491 = request(var_errormessages, "suggestion", [0]);
          var call4490 = request(call4491, "new", [0]);
          var_suggestion = call4490;
          setLineNumber(3141);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var string4493 = new GraceString("(");
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4494 = request(var_sym, "value", [0]);
          var opresult4495 = request(string4493, "++(1)", [1], call4494);
          var string4496 = new GraceString(")");
          var opresult4497 = request(opresult4495, "++(1)", [1], string4496);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4492 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, opresult4497);
          setLineNumber(3142);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call4498 = request(var_suggestions, "push(1)", [1], var_suggestion);
          var if4499 = GraceDone;
          setLineNumber(3143);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4500 = request(var_sym, "next", [0]);
          var opresult4501 = request(GraceFalse, "\u2260(1)", [1], call4500);
          if (Grace_isTrue(opresult4501)) {
            setLineNumber(3144);    // compilenode member
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call4502 = request(var_sym, "next", [0]);
            var var_n = call4502;
            var if4503 = GraceDone;
            setLineNumber(3145);    // compilenode member
            // call case 6: other requests
            if (var_n === undefined) raiseUninitializedVariable("n");
            var call4504 = request(var_n, "line", [0]);
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call4505 = request(var_sym, "line", [0]);
            var opresult4506 = request(call4504, "==(1)", [1], call4505);
            if (Grace_isTrue(opresult4506)) {
              setLineNumber(3146);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
              var call4508 = request(var_errormessages, "suggestion", [0]);
              var call4507 = request(call4508, "new", [0]);
              var_suggestion = call4507;
              setLineNumber(3147);    // compilenode call
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var string4510 = new GraceString("(");
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call4511 = request(var_sym, "value", [0]);
              var opresult4512 = request(string4510, "++(1)", [1], call4511);
              var string4513 = new GraceString("");
              var opresult4514 = request(opresult4512, "++(1)", [1], string4513);
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call4509 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceTrue, GraceFalse, opresult4514);
              setLineNumber(3148);    // compilenode string
              var string4516 = new GraceString(")");
              // call case 6: other requests
              if (var_sym === undefined) raiseUninitializedVariable("sym");
              var call4517 = request(var_sym, "line", [0]);
              // call case 6: other requests
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              var call4515 = request(var_suggestion, "append(1)onLine(1)", [1, 1], string4516, call4517);
              setLineNumber(3149);    // compilenode call
              if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
              // call case 6: other requests
              if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
              var call4518 = request(var_suggestions, "push(1)", [1], var_suggestion);
              if4503 = call4518;
            }
            if4499 = if4503;
          }
          var if4519 = GraceDone;
          setLineNumber(3152);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_values === undefined) raiseUninitializedVariable("values");
          var call4521 = request(var_values, "last", [0]);
          var call4520 = request(call4521, "isIdentifier", [0]);
          if (Grace_isTrue(call4520)) {
            setLineNumber(3153);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call4523 = request(var_errormessages, "suggestion", [0]);
            var call4522 = request(call4523, "new", [0]);
            var_suggestion = call4522;
            setLineNumber(3154);    // compilenode call
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var string4525 = new GraceString("\"");
            // call case 6: other requests
            if (var_sym === undefined) raiseUninitializedVariable("sym");
            var call4526 = request(var_sym, "value", [0]);
            var opresult4527 = request(string4525, "++(1)", [1], call4526);
            var string4528 = new GraceString("\"");
            var opresult4529 = request(opresult4527, "++(1)", [1], string4528);
            // call case 6: other requests
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            var call4524 = request(var_suggestion, "replaceToken(1)leading(1)trailing(1)with(1)", [1, 1, 1, 1], var_sym, GraceFalse, GraceFalse, opresult4529);
            setLineNumber(3155);    // compilenode call
            if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
            // call case 6: other requests
            if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
            var call4530 = request(var_suggestions, "push(1)", [1], var_suggestion);
            if4519 = call4530;
          }
          if4476 = if4519;
        }
        setLineNumber(3158);    // compilenode string
        var string4533 = new GraceString("rbrace");
        var array4532 = new GraceSequence([string4533]);
        // call case 2: outer request
        var call4531 = selfRequest(importedModules["parser"], "findNextValidToken(1)", [1], array4532);
        var var_nextTok = call4531;
        var if4534 = GraceDone;
        setLineNumber(3159);    // compilenode op
        if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var opresult4535 = request(var_nextTok, "==(1)", [1], var_sym);
        if (Grace_isTrue(opresult4535)) {
          setLineNumber(3160);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4537 = request(var_errormessages, "suggestion", [0]);
          var call4536 = request(call4537, "new", [0]);
          var_suggestion = call4536;
          setLineNumber(3161);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call4539 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call4541 = request(var_lastToken, "endPos", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call4543 = request(var_lastToken, "line", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call4544 = request(var_util, "lines", [0]);
          var call4542 = request(call4544, "at(1)", [1], call4543);
          var call4540 = request(call4542, "substringFrom(1)to(1)", [1, 1], new GraceNum(1), call4541);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4538 = request(var_suggestion, "addLine(2)", [2], call4539, call4540);
          setLineNumber(3162);    // compilenode member
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4546 = request(var_sym, "linePos", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4549 = request(var_sym, "line", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call4550 = request(var_util, "lines", [0]);
          var call4548 = request(call4550, "at(1)", [1], call4549);
          var call4547 = request(call4548, "size", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          var call4552 = request(var_sym, "line", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call4553 = request(var_util, "lines", [0]);
          var call4551 = request(call4553, "at(1)", [1], call4552);
          var call4545 = request(call4551, "substringFrom(1)to(1)", [1, 1], call4546, call4547);
          var var_newLine = call4545;
          setLineNumber(3163);    // compilenode member
          // call case 6: other requests
          if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
          var call4555 = request(var_lastToken, "line", [0]);
          var sum4556 = request(call4555, "+(1)", [1], new GraceNum(.1));
          if (var_newLine === undefined) raiseUninitializedVariable("newLine");
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4554 = request(var_suggestion, "addLine(2)", [2], sum4556, var_newLine);
          setLineNumber(3164);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call4557 = request(var_suggestions, "push(1)", [1], var_suggestion);
          if4534 = call4557;
        } else {
          setLineNumber(3166);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
          var call4559 = request(var_errormessages, "suggestion", [0]);
          var call4558 = request(call4559, "new", [0]);
          var_suggestion = call4558;
          setLineNumber(3167);    // compilenode call
          if (var_sym === undefined) raiseUninitializedVariable("sym");
          // call case 6: other requests
          if (var_nextTok === undefined) raiseUninitializedVariable("nextTok");
          var call4561 = request(var_nextTok, "prev", [0]);
          // call case 6: other requests
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          var call4560 = request(var_suggestion, "deleteTokenRange(2)leading(1)trailing(1)", [2, 1, 1], var_sym, call4561, GraceTrue, GraceFalse);
          setLineNumber(3168);    // compilenode call
          if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
          // call case 6: other requests
          if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
          var call4562 = request(var_suggestions, "push(1)", [1], var_suggestion);
          if4534 = call4562;
        }
        setLineNumber(3171);    // compilenode string
        var string4564 = new GraceString("multiple statements must be separated by a newline or a semicolon. ");
        setLineNumber(3172);    // compilenode string
        var string4565 = new GraceString("This error is often caused by unbalanced parentheses, ");
        var opresult4566 = request(string4564, "++(1)", [1], string4565);
        setLineNumber(3173);    // compilenode string
        var string4567 = new GraceString("or by omitting a part of a method name.\nsym = ");
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var opresult4568 = request(string4567, "++(1)", [1], var_sym);
        var string4569 = new GraceString("");
        var opresult4570 = request(opresult4568, "++(1)", [1], string4569);
        var opresult4571 = request(opresult4566, "++(1)", [1], opresult4570);
        setLineNumber(3174);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4572 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4573 = request(var_sym, "linePos", [0]);
        if (var_suggestions === undefined) raiseUninitializedVariable("suggestions");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4563 = request(var_errormessages, "syntaxError(1)atPosition(2)withSuggestions(1)", [1, 2, 1], opresult4571, call4572, call4573, var_suggestions);
        if4470 = call4563;
      }
      if4441 = if4470;
    }
    return if4441;
  };    // end of method checkUnexpectedTokenAfterStatement
  this.methods["checkUnexpectedTokenAfterStatement"] = func4440;
  func4440.methodName = "checkUnexpectedTokenAfterStatement";
  func4440.paramCounts = [0];
  func4440.paramNames = [];
  func4440.definitionLine = 3122;
  func4440.definitionModule = "parser";
  var func4574 = function(argcv, var_toks) {    // method parse(_), line 3180
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("parse(_)", 0, numArgs - 1);
    }
    setLineNumber(3184);    // compilenode string
    var string4576 = new GraceString("parsing.");
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call4575 = request(var_util, "log_verbose(1)", [1], string4576);
    setLineNumber(3185);    // compilenode call
    if (var_values === undefined) raiseUninitializedVariable("values");
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call4578 = request(var_util, "modname", [0]);
    // call case 6: other requests
    // call case 6: other requests
    if (var_ast === undefined) raiseUninitializedVariable("ast");
    var call4579 = request(var_ast, "moduleNode", [0]);
    var call4577 = request(call4579, "body(1)named(1)", [1, 1], var_values, call4578);
    var_moduleObject = call4577;
    var if4580 = GraceDone;
    setLineNumber(3187);    // compilenode member
    // call case 6: other requests
    var call4581 = request(var_toks, "size", [0]);
    var opresult4582 = request(call4581, "==(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult4582)) {
      setLineNumber(3188);    // compilenode return
      if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
      return var_moduleObject;
    }
    setLineNumber(3190);    // compilenode bind
    var_tokens = var_toks;
    setLineNumber(3191);    // compilenode block
    var block4584 = new GraceBlock(this, 3191, 0);
    block4584.guard = jsTrue;
    block4584.real = function block4584() {
      setLineNumber(3191);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4585 = selfRequest(this, "next", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4586 = request(var_sym, "isSeparator", [0]);
      return call4586;
    };
    let applyMeth4584 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4584.methodName = "apply";
    applyMeth4584.paramCounts = [0];
    applyMeth4584.paramNames = [];
    applyMeth4584.definitionLine = 3191;
    applyMeth4584.definitionModule = "parser";
    block4584.methods["apply"] = applyMeth4584;
    var block4587 = new GraceBlock(this, 3191, 0);
    block4587.guard = jsTrue;
    block4587.real = function block4587() {
      setLineNumber(3191);    // compileBlock
      return GraceDone;
    };
    let applyMeth4587 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4587.methodName = "apply";
    applyMeth4587.paramCounts = [0];
    applyMeth4587.paramNames = [];
    applyMeth4587.definitionLine = 3191;
    applyMeth4587.definitionModule = "parser";
    block4587.methods["apply"] = applyMeth4587;
    // call case 2: outer request
    var call4583 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block4584, block4587);
    var if4588 = GraceDone;
    setLineNumber(3193);    // compilenode member
    // call case 6: other requests
    if (var_sym === undefined) raiseUninitializedVariable("sym");
    var call4589 = request(var_sym, "indent", [0]);
    var opresult4590 = request(call4589, "\u2260(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult4590)) {
      setLineNumber(3194);    // compilenode string
      var string4591 = new GraceString("the first line must not be indented");
      var var_msg = string4591;
      setLineNumber(3195);    // compilenode call
      if (var_msg === undefined) raiseUninitializedVariable("msg");
      setLineNumber(3196);    // compilenode member
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4593 = request(var_sym, "line", [0]);
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4594 = request(var_sym, "indent", [0]);
      // call case 6: other requests
      if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
      var call4592 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], var_msg, call4593, new GraceNum(1), call4594);
      if4588 = call4592;
    }
    setLineNumber(3199);    // compilenode block
    var block4596 = new GraceBlock(this, 3199, 0);
    block4596.guard = jsTrue;
    block4596.real = function block4596() {
      setLineNumber(3199);    // compilenode member
      // call case 6: other requests
      // call case 6: other requests
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      var call4598 = request(var_sym, "isEof", [0]);
      var call4597 = request(call4598, "not", [0]);
      return call4597;
    };
    let applyMeth4596 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4596.methodName = "apply";
    applyMeth4596.paramCounts = [0];
    applyMeth4596.paramNames = [];
    applyMeth4596.definitionLine = 3199;
    applyMeth4596.definitionModule = "parser";
    block4596.methods["apply"] = applyMeth4596;
    var block4599 = new GraceBlock(this, 3199, 0);
    block4599.guard = jsTrue;
    block4599.real = function block4599() {
      setLineNumber(3200);    // compilenode member
      // call case 6: other requests
      if (var_tokens === undefined) raiseUninitializedVariable("tokens");
      var call4600 = request(var_tokens, "size", [0]);
      var var_oldlength = call4600;
      setLineNumber(3201);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4601 = selfRequest(this, "pushComments", [0]);
      setLineNumber(3202);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4602 = selfRequest(this, "methodClassOrTrait", [0]);
      setLineNumber(3203);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4603 = selfRequest(this, "pushComments", [0]);
      var if4604 = GraceDone;
      setLineNumber(3204);    // compilenode block
      var block4606 = new GraceBlock(this, 3204, 0);
      block4606.guard = jsTrue;
      block4606.real = function block4606() {
        setLineNumber(3204);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4607 = selfRequest(this, "inheritOrUse", [0]);
        return call4607;
      };
      let applyMeth4606 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth4606.methodName = "apply";
      applyMeth4606.paramCounts = [0];
      applyMeth4606.paramNames = [];
      applyMeth4606.definitionLine = 3204;
      applyMeth4606.definitionModule = "parser";
      block4606.methods["apply"] = applyMeth4606;
      // call case 2: outer request
      var call4605 = selfRequest(importedModules["parser"], "successfulParse(1)", [1], block4606);
      if (Grace_isTrue(call4605)) {
        setLineNumber(3205);    // compilenode member
        // call case 6: other requests
        if (var_values === undefined) raiseUninitializedVariable("values");
        var call4608 = request(var_values, "pop", [0]);
        var var_parentNode = call4608;
        var if4609 = GraceDone;
        setLineNumber(3206);    // compilenode member
        // call case 6: other requests
        if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
        var call4610 = request(var_parentNode, "isUse", [0]);
        if (Grace_isTrue(call4610)) {
          setLineNumber(3207);    // compilenode call
          if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
          // call case 6: other requests
          // call case 6: other requests
          if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
          var call4612 = request(var_moduleObject, "usedTraits", [0]);
          var call4611 = request(call4612, "add(1)", [1], var_parentNode);
          if4609 = call4611;
        } else {
          var if4613 = GraceDone;
          setLineNumber(3208);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
          var call4615 = request(var_moduleObject, "usedTraits", [0]);
          var call4614 = request(call4615, "isEmpty", [0]);
          if (Grace_isTrue(call4614)) {
            setLineNumber(3209);    // compilenode call
            if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
            // call case 6: other requests
            if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
            var call4616 = request(var_moduleObject, "superclass:=(1)", [1], var_parentNode);
            if4613 = call4616;
          } else {
            setLineNumber(3211);    // compilenode string
            var string4618 = new GraceString("'inherit' must come ");
            setLineNumber(3212);    // compilenode string
            var string4619 = new GraceString("before 'use' in a module.");
            var opresult4620 = request(string4618, "++(1)", [1], string4619);
            setLineNumber(3213);    // compilenode member
            // call case 6: other requests
            if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
            var call4621 = request(var_parentNode, "line", [0]);
            // call case 6: other requests
            if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
            var call4622 = request(var_parentNode, "linePos", [0]);
            setLineNumber(3214);    // compilenode member
            // call case 6: other requests
            if (var_parentNode === undefined) raiseUninitializedVariable("parentNode");
            var call4623 = request(var_parentNode, "linePos", [0]);
            var sum4624 = request(call4623, "+(1)", [1], new GraceNum(6));
            // call case 6: other requests
            if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
            var call4617 = request(var_errormessages, "syntaxError(1)atRange(3)", [1, 3], opresult4620, call4621, call4622, sum4624);
            if4613 = call4617;
          }
          if4609 = if4613;
        }
        if4604 = if4609;
      }
      setLineNumber(3217);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4625 = selfRequest(this, "pushComments", [0]);
      setLineNumber(3218);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4626 = selfRequest(this, "statement", [0]);
      setLineNumber(3219);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4627 = selfRequest(this, "pushComments", [0]);
      var if4628 = GraceDone;
      setLineNumber(3220);    // compilenode member
      // call case 6: other requests
      if (var_tokens === undefined) raiseUninitializedVariable("tokens");
      var call4629 = request(var_tokens, "size", [0]);
      if (var_oldlength === undefined) raiseUninitializedVariable("oldlength");
      var opresult4630 = request(call4629, "==(1)", [1], var_oldlength);
      if (Grace_isTrue(opresult4630)) {
        setLineNumber(3221);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4632 = request(var_errormessages, "suggestion", [0]);
        var call4631 = request(call4632, "new", [0]);
        var var_suggestion = call4631;
        setLineNumber(3222);    // compilenode call
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        // call case 6: other requests
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        var call4633 = request(var_suggestion, "deleteToken(1)", [1], var_sym);
        setLineNumber(3223);    // compilenode string
        var string4635 = new GraceString("invalid statement. This is often ");
        setLineNumber(3224);    // compilenode string
        var string4636 = new GraceString("caused by an extra '}', ')', or ']'.");
        var opresult4637 = request(string4635, "++(1)", [1], string4636);
        setLineNumber(3225);    // compilenode member
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4638 = request(var_sym, "line", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4639 = request(var_sym, "linePos", [0]);
        // call case 6: other requests
        if (var_sym === undefined) raiseUninitializedVariable("sym");
        var call4640 = request(var_sym, "endPos", [0]);
        if (var_suggestion === undefined) raiseUninitializedVariable("suggestion");
        // call case 6: other requests
        if (var_errormessages === undefined) raiseUninitializedVariable("errormessages");
        var call4634 = request(var_errormessages, "syntaxError(1)atRange(3)withSuggestion(1)", [1, 3, 1], opresult4637, call4638, call4639, call4640, var_suggestion);
        if4628 = call4634;
      }
      setLineNumber(3228);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4641 = selfRequest(this, "separator", [0]);
      return call4641;
    };
    let applyMeth4599 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth4599.methodName = "apply";
    applyMeth4599.paramCounts = [0];
    applyMeth4599.paramNames = [];
    applyMeth4599.definitionLine = 3199;
    applyMeth4599.definitionModule = "parser";
    block4599.methods["apply"] = applyMeth4599;
    // call case 2: outer request
    var call4595 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block4596, block4599);
    setLineNumber(3230);    // compilenode return
    if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
    return var_moduleObject;
  };    // end of method parse(_)
  this.methods["parse(1)"] = func4574;
  func4574.methodName = "parse(1)";
  func4574.paramCounts = [1];
  func4574.paramNames = ["toks"];
  func4574.definitionLine = 3180;
  func4574.definitionModule = "parser";
  setLineNumber(6);    // compilenode vardec
  var var_tokens = GraceFalse;
  var reader4642_tokens = function() {  // reader method tokens
      if (var_tokens === undefined) raiseUninitializedVariable("tokens");
      return var_tokens;
  };
  reader4642_tokens.isVar = true;
  reader4642_tokens.confidential = true;
  this.methods["tokens"] = reader4642_tokens;
  var writer4643_tokens = function(argcv, n) {   // writer method tokens:=(_)
    var_tokens = n;
    return GraceDone;
  };
  writer4643_tokens.confidential = true;
  this.methods["tokens:=(1)"] = writer4643_tokens;
  setLineNumber(7);    // compilenode vardec
  var var_moduleObject;
  var reader4644_moduleObject = function() {  // reader method moduleObject
      if (var_moduleObject === undefined) raiseUninitializedVariable("moduleObject");
      return var_moduleObject;
  };
  reader4644_moduleObject.isVar = true;
  reader4644_moduleObject.confidential = true;
  this.methods["moduleObject"] = reader4644_moduleObject;
  var writer4645_moduleObject = function(argcv, n) {   // writer method moduleObject:=(_)
    var_moduleObject = n;
    return GraceDone;
  };
  writer4645_moduleObject.confidential = true;
  this.methods["moduleObject:=(1)"] = writer4645_moduleObject;
  setLineNumber(8);    // compilenode member
  // call case 6: other requests
  // call case 2: outer request
  var call4647 = selfRequest(var_prelude, "list", [0]);
  var call4646 = request(call4647, "empty", [0]);
  var var_comments = call4646;
  var reader4648_comments = function() {  // reader method comments
      if (var_comments === undefined) raiseUninitializedVariable("comments");
      return var_comments;
  };
  reader4648_comments.isVar = true;
  reader4648_comments.confidential = true;
  this.methods["comments"] = reader4648_comments;
  var writer4649_comments = function(argcv, n) {   // writer method comments:=(_)
    var_comments = n;
    return GraceDone;
  };
  writer4649_comments.confidential = true;
  this.methods["comments:=(1)"] = writer4649_comments;
  setLineNumber(10);    // compilenode num
  var var_auto__95__count = new GraceNum(0);
  var reader4650_auto__95__count = function() {  // reader method auto_count
      if (var_auto__95__count === undefined) raiseUninitializedVariable("auto_count");
      return var_auto__95__count;
  };
  reader4650_auto__95__count.isVar = true;
  reader4650_auto__95__count.confidential = true;
  this.methods["auto_count"] = reader4650_auto__95__count;
  var writer4651_auto__95__count = function(argcv, n) {   // writer method auto_count:=(_)
    var_auto__95__count = n;
    return GraceDone;
  };
  writer4651_auto__95__count.confidential = true;
  this.methods["auto_count:=(1)"] = writer4651_auto__95__count;
  setLineNumber(11);    // compilenode defdec
  var var_noBlocks = GraceFalse;
  var reader4652_noBlocks = function() {  // reader method noBlocks
      if (var_noBlocks === undefined) raiseUninitializedVariable("noBlocks");
      return var_noBlocks;
  };
  reader4652_noBlocks.isDef = true;
  reader4652_noBlocks.confidential = true;
  this.methods["noBlocks"] = reader4652_noBlocks;
  setLineNumber(12);    // compilenode defdec
  var var_blocksOK = GraceTrue;
  var reader4653_blocksOK = function() {  // reader method blocksOK
      if (var_blocksOK === undefined) raiseUninitializedVariable("blocksOK");
      return var_blocksOK;
  };
  reader4653_blocksOK.isDef = true;
  reader4653_blocksOK.confidential = true;
  this.methods["blocksOK"] = reader4653_blocksOK;
  setLineNumber(15);    // compilenode array
  var array4655 = new GraceSequence([]);
  // call case 2: outer request
  var call4654 = selfRequest(var_prelude, "list(1)", [1], array4655);
  var var_values = call4654;
  var reader4656_values = function() {  // reader method values
      if (var_values === undefined) raiseUninitializedVariable("values");
      return var_values;
  };
  reader4656_values.isVar = true;
  reader4656_values.confidential = true;
  this.methods["values"] = reader4656_values;
  var writer4657_values = function(argcv, n) {   // writer method values:=(_)
    var_values = n;
    return GraceDone;
  };
  writer4657_values.confidential = true;
  this.methods["values:=(1)"] = writer4657_values;
  setLineNumber(43);    // compilenode object
  var obj4658_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_parser_43");
    this.outer_parser_43 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    this.data.kind = undefined;
    var reader4659_kind = function() {  // reader method kind
        if (this.data.kind === undefined) raiseUninitializedVariable("kind");
        return this.data.kind;
    };
    reader4659_kind.isDef = true;
    this.methods["kind"] = reader4659_kind;
    this.data.line = undefined;
    var reader4660_line = function() {  // reader method line
        if (this.data.line === undefined) raiseUninitializedVariable("line");
        return this.data.line;
    };
    reader4660_line.isDef = true;
    this.methods["line"] = reader4660_line;
    this.data.linePos = undefined;
    var reader4661_linePos = function() {  // reader method linePos
        if (this.data.linePos === undefined) raiseUninitializedVariable("linePos");
        return this.data.linePos;
    };
    reader4661_linePos.isDef = true;
    this.methods["linePos"] = reader4661_linePos;
    this.data.indent = undefined;
    var reader4662_indent = function() {  // reader method indent
        if (this.data.indent === undefined) raiseUninitializedVariable("indent");
        return this.data.indent;
    };
    reader4662_indent.isDef = true;
    this.methods["indent"] = reader4662_indent;
    this.data.value = undefined;
    var reader4663_value = function() {  // reader method value
        if (this.data.value === undefined) raiseUninitializedVariable("value");
        return this.data.value;
    };
    reader4663_value.isDef = true;
    this.methods["value"] = reader4663_value;
    this.data.size = undefined;
    var reader4664_size = function() {  // reader method size
        if (this.data.size === undefined) raiseUninitializedVariable("size");
        return this.data.size;
    };
    reader4664_size.isDef = true;
    this.methods["size"] = reader4664_size;
    var func4665 = function(argcv, var_other) {    // method ==(_), line 50
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("==(_)", 0, numArgs - 1);
      }
      var if4666 = GraceDone;
      setLineNumber(51);    // compilenode op
      var opresult4667 = request(var_other, "==(1)", [1], GraceFalse);
      if (Grace_isTrue(opresult4667)) {
        if4666 = GraceFalse;
      } else {
        setLineNumber(54);    // compilenode member
        // call case 6: other requests
        var call4668 = request(var_other, "line", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4669 = selfRequest(this, "line", [0]);
        var opresult4670 = request(call4668, "==(1)", [1], call4669);
        // call case 6: other requests
        var call4671 = request(var_other, "linePos", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call4672 = selfRequest(this, "linePos", [0]);
        var opresult4673 = request(call4671, "==(1)", [1], call4672);
        var opresult4674 = request(opresult4670, "&&(1)", [1], opresult4673);
        if4666 = opresult4674;
      }
      return if4666;
    };    // end of method ==(_)
    this.methods["==(1)"] = func4665;
    func4665.methodName = "==(1)";
    func4665.paramCounts = [1];
    func4665.paramNames = ["other"];
    func4665.definitionLine = 50;
    func4665.definitionModule = "parser";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 43;
        m.definitionModule = "parser";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4658_init = function() {    // init of object on line 43
      setLineNumber(44);    // compilenode string
      var string4675 = new GraceString("start");
      this.data.kind = string4675;
      setLineNumber(45);    // compilenode num
      this.data.line = new GraceNum(0);
      setLineNumber(46);    // compilenode num
      this.data.linePos = new GraceNum(0);
      setLineNumber(47);    // compilenode num
      this.data.indent = new GraceNum(0);
      setLineNumber(48);    // compilenode string
      var string4676 = new GraceString("");
      this.data.value = string4676;
      setLineNumber(49);    // compilenode num
      this.data.size = new GraceNum(0);
    };
    return obj4658_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4658 = emptyGraceObject("object", "parser", 43);
  var obj4658_init = obj4658_build.call(obj4658, null, this, [], []);
  obj4658_init.call(obj4658);  // end of compileobject
  var var_sym = obj4658;
  var reader4677_sym = function() {  // reader method sym
      if (var_sym === undefined) raiseUninitializedVariable("sym");
      return var_sym;
  };
  reader4677_sym.isVar = true;
  reader4677_sym.confidential = true;
  this.methods["sym"] = reader4677_sym;
  var writer4678_sym = function(argcv, n) {   // writer method sym:=(_)
    var_sym = n;
    return GraceDone;
  };
  writer4678_sym.confidential = true;
  this.methods["sym:=(1)"] = writer4678_sym;
  setLineNumber(59);    // compilenode vardec
  var var_lastToken = var_sym;
  var reader4679_lastToken = function() {  // reader method lastToken
      if (var_lastToken === undefined) raiseUninitializedVariable("lastToken");
      return var_lastToken;
  };
  reader4679_lastToken.isVar = true;
  reader4679_lastToken.confidential = true;
  this.methods["lastToken"] = reader4679_lastToken;
  var writer4680_lastToken = function(argcv, n) {   // writer method lastToken:=(_)
    var_lastToken = n;
    return GraceDone;
  };
  writer4680_lastToken.confidential = true;
  this.methods["lastToken:=(1)"] = writer4680_lastToken;
  setLineNumber(60);    // compilenode vardec
  var var_statementToken = var_lastToken;
  var reader4681_statementToken = function() {  // reader method statementToken
      if (var_statementToken === undefined) raiseUninitializedVariable("statementToken");
      return var_statementToken;
  };
  reader4681_statementToken.isVar = true;
  reader4681_statementToken.confidential = true;
  this.methods["statementToken"] = reader4681_statementToken;
  var writer4682_statementToken = function(argcv, n) {   // writer method statementToken:=(_)
    var_statementToken = n;
    return GraceDone;
  };
  writer4682_statementToken.confidential = true;
  this.methods["statementToken:=(1)"] = writer4682_statementToken;
  setLineNumber(61);    // compilenode vardec
  var var_comment = GraceFalse;
  var reader4683_comment = function() {  // reader method comment
      if (var_comment === undefined) raiseUninitializedVariable("comment");
      return var_comment;
  };
  reader4683_comment.isVar = true;
  reader4683_comment.confidential = true;
  this.methods["comment"] = reader4683_comment;
  var writer4684_comment = function(argcv, n) {   // writer method comment:=(_)
    var_comment = n;
    return GraceDone;
  };
  writer4684_comment.confidential = true;
  this.methods["comment:=(1)"] = writer4684_comment;
  setLineNumber(2725);    // compilenode string
  var string4686 = new GraceString("<:");
  var string4687 = new GraceString("<*");
  var string4688 = new GraceString(":>");
  var string4689 = new GraceString("*>");
  var array4685 = new GraceSequence([string4686, string4687, string4688, string4689]);
  var var_typeRelations = array4685;
  var reader4690_typeRelations = function() {  // reader method typeRelations
      if (var_typeRelations === undefined) raiseUninitializedVariable("typeRelations");
      return var_typeRelations;
  };
  reader4690_typeRelations.isDef = true;
  reader4690_typeRelations.confidential = true;
  this.methods["typeRelations"] = reader4690_typeRelations;
  return this;
}
if (typeof global !== "undefined")
  global.gracecode_parser = gracecode_parser;
if (typeof window !== "undefined")
  window.gracecode_parser = gracecode_parser;
gracecode_parser.imports = ["ast", "errormessages", "io", "standardGrace", "util"];
gracecode_parser.definitionModule = "parser";
gracecode_parser.definitionLine = 1;
