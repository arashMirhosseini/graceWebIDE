var___95__prelude = do_import("standardGrace", gracecode_standardGrace);
if (typeof gctCache !== "undefined")
  gctCache["ast"] = "classes:\nconfidential:\n emptySeq\n listMap(2)ancestors(1)\n maybeListMap(2)ancestors(1)\n maybeMap(2)ancestors(1)\n patternMarkVisitor\n uninitialized\ndialect:\n standardGrace\nfresh-methods:\n aliasNew(1)old(1)\n baseNode\n baseVisitor\n fakeSymbolTable\n line(1)column(1)\n methodSignatureNode(2)\n outerNode(1)\n pluggableVisitor(1)\n start(1)end(1)\n typeParametersNode(1)whereClauses(1)\nfresh:aliasNew(1)old(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basePretty(1)\n canInherit\n column\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n end\n hasScope\n hash\n inClass\n inTrait\n isAppliedOccurrence\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isConstant\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isNull\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isReturn\n isSelf\n isSelfOrOuter\n isSequenceConstructor\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n myIdentityHash\n nameString\n newName\n newSignature\n oldName\n oldSignature\n postCopy(1)\n pretty(1)\n prettyPrefix(1)\n range\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n setScope(1)\n setStart(1)\n shallowCopyFieldsFrom(1)\n start\n statementName\n symbolTable\n usesAsType(1)\n \u2260(1)\nfresh:baseNode:\n ::(1)\n ==(1)\n accept(1)\n addComment(1)\n addComments(1)\n asString\n basePretty(1)\n canInherit\n column\n comments\n comments:=(_)\n decType\n deepCopy\n description\n enclosingObject\n end\n hasScope\n hash\n inClass\n inTrait\n isAppliedOccurrence\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isConstant\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMember\n isMethod\n isNull\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isReturn\n isSelf\n isSelfOrOuter\n isSequenceConstructor\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n line:=(_)\n linePos\n linePos:=(_)\n nameString\n postCopy(1)\n pretty(1)\n prettyPrefix(1)\n range\n register\n register:=(_)\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n setScope(1)\n setStart(1)\n shallowCopyFieldsFrom(1)\n start\n statementName\n symbolTable\n symbolTable:=(_)\n usesAsType(1)\n \u2260(1)\nfresh:baseVisitor:\n asString\n visitAlias(1)\n visitAlias(1)up(1)\n visitArray(1)\n visitArray(1)up(1)\n visitBind(1)\n visitBind(1)up(1)\n visitBlock(1)\n visitBlock(1)up(1)\n visitCall(1)\n visitCall(1)up(1)\n visitComment(1)\n visitComment(1)up(1)\n visitDefDec(1)\n visitDefDec(1)up(1)\n visitDialect(1)\n visitDialect(1)up(1)\n visitGeneric(1)\n visitGeneric(1)up(1)\n visitIdentifier(1)\n visitIdentifier(1)up(1)\n visitIf(1)\n visitIf(1)up(1)\n visitImplicit(1)\n visitImplicit(1)up(1)\n visitImport(1)\n visitImport(1)up(1)\n visitInherits(1)\n visitInherits(1)up(1)\n visitMatchCase(1)\n visitMatchCase(1)up(1)\n visitMember(1)\n visitMember(1)up(1)\n visitMethod(1)\n visitMethod(1)up(1)\n visitMethodType(1)\n visitMethodType(1)up(1)\n visitModule(1)\n visitModule(1)up(1)\n visitNum(1)\n visitNum(1)up(1)\n visitObject(1)\n visitObject(1)up(1)\n visitOp(1)\n visitOp(1)up(1)\n visitOuter(1)\n visitOuter(1)up(1)\n visitReturn(1)\n visitReturn(1)up(1)\n visitSignaturePart(1)\n visitSignaturePart(1)up(1)\n visitString(1)\n visitString(1)up(1)\n visitTryCatch(1)\n visitTryCatch(1)up(1)\n visitTypeDec(1)\n visitTypeDec(1)up(1)\n visitTypeLiteral(1)\n visitTypeLiteral(1)up(1)\n visitTypeParameters(1)\n visitTypeParameters(1)up(1)\n visitVarDec(1)\n visitVarDec(1)up(1)\nfresh:fakeSymbolTable:\n ::(1)\n ==(1)\n addNode(1)ac(1)\n asString\n elementScopesAsString\n enclosingObjectScope\n hash\n node\n node:=(_)\n thatDefines(1)\n thatDefines(1)ifNone(1)\n variety\n \u2260(1)\nfresh:line(1)column(1):\n ::(1)\n <(1)\n ==(1)\n >(1)\n asString\n column\n hash\n line\n \u2260(1)\n \u2264(1)\n \u2265(1)\nfresh:methodSignatureNode(2):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n appliedOccurrence\n asDebugString\n asIdentifier\n asString\n basePretty(1)\n cachedIdentifier\n cachedIdentifier:=(_)\n canInherit\n canonicalName\n column\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n enclosingObject\n end\n hasParams\n hasScope\n hasTypeParams\n hash\n inClass\n inTrait\n isAppliedOccurrence\n isBind\n isBindingOccurrence\n isBindingOccurrence:=(_)\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isConstant\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isNull\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isReturn\n isSelf\n isSelfOrOuter\n isSequenceConstructor\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n myIdentityHash\n nameString\n numParams\n numTypeParams\n parameterCounts\n parameterNames\n parametersDo(1)\n postCopy(1)\n pretty(1)\n prettyPrefix(1)\n range\n register\n returnsObject\n rtype\n rtype:=(_)\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n setScope(1)\n setStart(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n signature\n signature:=(_)\n start\n statementName\n symbolTable\n toGrace(1)\n typeParameterNames\n typeParams\n usesAsType(1)\n withTypeParams(1)\n \u2260(1)\nfresh:outerNode(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basePretty(1)\n canInherit\n column\n comments\n decType\n deepCopy\n description\n enclosingObject\n end\n hasScope\n hash\n inClass\n inTrait\n isAppliedOccurrence\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isConstant\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isNull\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isReturn\n isSelf\n isSelfOrOuter\n isSequenceConstructor\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n line\n linePos\n map(1)ancestors(1)\n myIdentityHash\n nameString\n numberOfLevels\n postCopy(1)\n pretty(1)\n prettyPrefix(1)\n range\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n setScope(1)\n setStart(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n start\n statementName\n symbolTable\n theObjects\n toGrace(1)\n usesAsType(1)\n \u2260(1)\nfresh:pluggableVisitor(1):\n asString\n visitAlias(1)up(1)\n visitArray(1)up(1)\n visitBind(1)up(1)\n visitBlock(1)up(1)\n visitCall(1)up(1)\n visitComment(1)up(1)\n visitDefDec(1)up(1)\n visitDialect(1)up(1)\n visitGeneric(1)up(1)\n visitIdentifier(1)up(1)\n visitIf(1)up(1)\n visitImplicit(1)up(1)\n visitImport(1)up(1)\n visitInherits(1)up(1)\n visitMatchCase(1)up(1)\n visitMember(1)up(1)\n visitMethod(1)up(1)\n visitMethodType(1)up(1)\n visitModule(1)up(1)\n visitNum(1)up(1)\n visitObject(1)up(1)\n visitOp(1)up(1)\n visitOuter(1)up(1)\n visitReturn(1)up(1)\n visitSignaturePart(1)up(1)\n visitString(1)up(1)\n visitTryCatch(1)up(1)\n visitTypeDec(1)up(1)\n visitTypeLiteral(1)up(1)\n visitVarDec(1)up(1)\nfresh:start(1)end(1):\n ::(1)\n ==(1)\n asString\n end\n hash\n start\n \u2260(1)\nfresh:typeParametersNode(1)whereClauses(1):\n ::(1)\n ==(1)\n accept(1)\n accept(1)from(1)\n addComment(1)\n addComments(1)\n asDebugString\n asString\n basePretty(1)\n canInherit\n column\n comments\n decType\n declarationKindWithAncestors(1)\n deepCopy\n description\n do(1)\n do(1)separatedBy(1)\n enclosingObject\n end\n hasScope\n hash\n inClass\n inTrait\n isAppliedOccurrence\n isBind\n isBlock\n isCall\n isClass\n isComment\n isConfidential\n isConstant\n isDelimited\n isDialect\n isExecutable\n isExternal\n isFieldDec\n isFresh\n isIdentifier\n isImplicit\n isImport\n isInherits\n isLegalInTrait\n isMatchingBlock\n isMe(1)\n isMember\n isMethod\n isNull\n isObject\n isOuter\n isPrelude\n isPublic\n isReadable\n isReturn\n isSelf\n isSelfOrOuter\n isSequenceConstructor\n isSimple\n isSuper\n isTrait\n isTypeDec\n isWritable\n kind\n last\n line\n linePos\n map(1)ancestors(1)\n myIdentityHash\n nameString\n params\n params:=(_)\n postCopy(1)\n pretty(1)\n prettyPrefix(1)\n range\n register\n returnsObject\n scope\n scope:=(1)\n setLine(1)col(1)\n setPositionFrom(1)\n setScope(1)\n setStart(1)\n shallowCopy\n shallowCopyFieldsFrom(1)\n size\n start\n statementName\n symbolTable\n toGrace(1)\n usesAsType(1)\n whereClauses\n whereClauses:=(_)\n \u2260(1)\nmethodtypes-of:AliasPair:\n 1 newName \u2192 Unknown:Type\n 1 newSignature \u2192 Unknown:Type\n 1 oldName \u2192 Unknown:Type\n 1 oldSignature \u2192 Unknown:Type\nmethodtypes-of:AstNode:\n 1 column \u2192 Number\n 1 comments \u2192 AstNode\n 1 end \u2192 Position\n 1 kind \u2192 String\n 1 line \u2192 Number\n 1 line:=(ln:Number) \u2192 Unknown:Type\n 1 linePos \u2192 Number\n 1 linePos:=(lp:Number) \u2192 Unknown:Type\n 1 pretty(n:Number) \u2192 String\n 1 range \u2192 Range\n 1 register \u2192 String\n 1 scope \u2192 SymbolTable\n 1 start \u2192 Position\nmethodtypes-of:AstVisitor:\n 1 visitArray(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitBind(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitBlock(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitCall(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitComment(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitDefDec(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitDialect(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitGeneric(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitIdentifier(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitIf(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitImplicit(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitImport(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitInherits(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitMatchCase(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitMember(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitMethod(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitMethodType(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitModule(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitNum(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitObject(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitOp(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitOuter(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitReturn(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitSignaturePart(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitString(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitTryCatch(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitTypeDec(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitTypeLiteral(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitTypeParameters(o:Unknown)up(ac:Unknown) \u2192 Boolean\n 1 visitVarDec(o:Unknown)up(ac:Unknown) \u2192 Boolean\nmethodtypes-of:Position:\n 1 <(other:Unknown) \u2192 Boolean\n 1 ==(other:Unknown) \u2192 Boolean\n 1 >(other:Unknown) \u2192 Boolean\n 1 column \u2192 Number\n 1 line \u2192 Number\n 1 \u2264(other:Unknown) \u2192 Boolean\n 1 \u2265(other:Unknown) \u2192 Boolean\nmethodtypes-of:Range:\n 1 end \u2192 Position\n 1 start \u2192 Position\nmethodtypes-of:SymbolTable:\nmodules:\n collectionsPrelude\n fastDict\n identifierKinds\n io\n standardGrace\n sys\n unixFilePath\n util\npath:\n /Users/black/Development/mg/gracelang/minigrace/ast.grace\npublic:\n AliasPair\n AstNode\n AstVisitor\n Position\n Range\n SymbolTable\n aliasNew(1)old(1)\n ancestorChain\n arrayNode\n baseNode\n baseVisitor\n bindNode\n blockNode\n callNode\n commentNode\n defDecNode\n dialectNode\n emptyRange\n fakeSymbolTable\n findAnnotation(2)\n genericNode\n identifierNode\n ifNode\n implicit\n importNode\n inheritNode\n line(1)column(1)\n lineLength\n matchCaseNode\n memberNode\n methodNode\n methodSignatureNode(2)\n moduleNode\n noPosition\n nullNode\n numNode\n objectNode\n opNode\n outerNode(1)\n pluggableVisitor(1)\n positionOfNext(1)after(1)\n positionOfNext(1)or(1)after(1)\n requestPart\n returnNode\n signaturePart\n start(1)end(1)\n stringNode\n tryCatchNode\n typeDecNode\n typeLiteralNode\n typeParametersNode(1)whereClauses(1)\n typeType\n unknownType\n varDecNode\n wrap(1)to(1)prefixedBy(1)\npublicMethodTypes:\n aliasNew(n)old(o)\n ancestorChain \u2192 Unknown\n arrayNode \u2192 Unknown\n baseNode\n baseVisitor \u2192 AstVisitor\n bindNode \u2192 Unknown\n blockNode \u2192 Unknown\n callNode \u2192 Unknown\n commentNode \u2192 Unknown\n defDecNode \u2192 Unknown\n dialectNode \u2192 Unknown\n emptyRange \u2192 Unknown\n fakeSymbolTable\n findAnnotation(node, annName)\n genericNode \u2192 Unknown\n identifierNode \u2192 Unknown\n ifNode \u2192 Unknown\n implicit \u2192 Unknown\n importNode \u2192 Unknown\n inheritNode \u2192 Unknown\n line(l:Number)column(c:Number) \u2192 Position\n lineLength \u2192 Unknown\n matchCaseNode \u2192 Unknown\n memberNode \u2192 Unknown\n methodNode \u2192 Unknown\n methodSignatureNode(parts', rtype')\n moduleNode \u2192 Unknown\n noPosition \u2192 Unknown\n nullNode \u2192 Unknown\n numNode \u2192 Unknown\n objectNode \u2192 Unknown\n opNode \u2192 Unknown\n outerNode(nodes)\n pluggableVisitor(visitation:Predicate2\u27e6AstNode, Object\u27e7) \u2192 AstVisitor\n positionOfNext(needle1:String)or(needle2:String)after(pos:Position) \u2192 Position\n positionOfNext(needle:String)after(pos:Position) \u2192 Position\n requestPart \u2192 Unknown\n returnNode \u2192 Unknown\n signaturePart \u2192 Unknown\n start(s:Position)end(e:Position) \u2192 Range\n stringNode \u2192 Unknown\n tryCatchNode \u2192 Unknown\n typeDecNode \u2192 Unknown\n typeLiteralNode \u2192 Unknown\n typeParametersNode(params')whereClauses(conditions)\n typeType \u2192 Unknown\n unknownType \u2192 Unknown\n varDecNode \u2192 Unknown\n wrap(str)to(l:Number)prefixedBy(margin)\ntypes:\n AliasPair\n AstNode\n AstVisitor\n Position\n Range\n SymbolTable\n";
if (typeof originalSourceLines !== "undefined") {
  originalSourceLines["ast"] = [
    "#pragma noTypeChecks",
    "import \"util\" as util",
    "import \"identifierKinds\" as k",
    "",
    "// This module contains classes and pseudo-classes for all the AST nodes used",
    "// in the parser. Because of the limitations of the class syntax, classes that",
    "// need more than one method are written as object literals containing methods.",
    "// Each node has a different signature according to its function, but the",
    "// common interface is given by type ASTNode",
    "//",
    "// Most nodes also contain a \"value\" field, with varied type, holding the `main value`",
    "// in the node.  This field is confusing and should be appropriately re-named in",
    "// each case. Some nodes contain other fields for their specific use: while has",
    "// both a value (the condition) and a body, for example.",
    "",
    "type Position = interface {",
    "    line -> Number",
    "    column -> Number",
    "    > (other) -> Boolean",
    "    ≥ (other) -> Boolean",
    "    == (other) -> Boolean",
    "    < (other) -> Boolean",
    "    ≤ (other) -> Boolean",
    "}",
    "type Range = interface {",
    "    start -> Position",
    "    end -> Position",
    "}",
    "class line (l:Number) column (c:Number) -> Position {",
    "    use equality",
    "    def line is public = l",
    "    def column is public = c",
    "    method > (other:Position) -> Boolean {",
    "        if (line > other.line) then { return true }",
    "        if (line < other.line) then { return false }",
    "        (column > other.column)",
    "    }",
    "    method ≥ (other:Position) -> Boolean {",
    "        if (line > other.line) then { return true }",
    "        if (line < other.line) then { return false }",
    "        (column ≥ other.column)",
    "    }",
    "    method == (other:Position) -> Boolean {",
    "        (line == other.line) && (column == other.column)",
    "    }",
    "    method hash -> Number {",
    "        hashCombine(line.hash, column.hash)",
    "    }",
    "    method ≤ (other:Position) -> Boolean {",
    "        (other > self).not",
    "    }",
    "    method < (other:Position) -> Boolean {",
    "        (other ≥ self).not",
    "    }",
    "    method asString { \"{line}:{column}\" }",
    "}",
    "class start (s:Position) end (e:Position) -> Range {",
    "    use equality",
    "    def start is public = s",
    "    def end is public = e",
    "    method asString {",
    "        if (start.line == end.line) then {",
    "            \"{start}-{end.column}\"",
    "        } elseif { end.line == noPosition } then {",
    "            start.asString",
    "        } else {",
    "            \"{start}-{end}\"",
    "        }",
    "    }",
    "    method == (other) {",
    "        (start == other.start) && (end == other.end)",
    "    }",
    "    method hash -> Number {",
    "        hashCombine(start.hash, end.hash)",
    "    }",
    "}",
    "def noPosition is public = line 0 column 0",
    "def emptyRange is public = start (noPosition) end (noPosition)",
    "",
    "method positionOfNext (needle:String) after (pos:Position) -> Position {",
    "    // returns the Position of the end of needle in the source",
    "",
    "    if (needle == \"⟦\") then {",
    "        return positionOfNext \"[[\" or \"⟦\" after (pos)",
    "    }",
    "    if (needle == \"⟧\") then {",
    "        return positionOfNext \"]]\" or \"⟧\" after (pos)",
    "    }",
    "    def sourceLines = util.lines",
    "    var lineNr := pos.line",
    "    if (lineNr == 0) then { return noPosition }",
    "    var found := sourceLines.at(lineNr).indexOf (needle) startingAt (pos.column + 1)",
    "    while { found == 0 } do {",
    "        lineNr := lineNr + 1",
    "        if (lineNr > sourceLines.size) then { return noPosition }",
    "        found := sourceLines.at(lineNr).indexOf (needle)",
    "    }",
    "    line (lineNr) column (found + needle.size - 1)",
    "}",
    "",
    "method positionOfNext (needle1:String) or (needle2:String)",
    "          after (pos:Position) -> Position {",
    "    def sourceLines = util.lines",
    "    def startLine = pos.line",
    "    if (startLine == 0) then { return noPosition }",
    "    var found := sourceLines.at(startLine).indexOf (needle1) startingAt (pos.column + 1)",
    "    if (found ≠ 0) then {",
    "        return line (startLine) column (found + needle1.size - 1)",
    "    }",
    "    found := sourceLines.at(startLine).indexOf (needle2) startingAt (pos.column + 1)",
    "    if (found ≠ 0) then {",
    "        return line (startLine) column (found + needle2.size - 1)",
    "    }",
    "    for (startLine..sourceLines.size) do { ln ->",
    "        if (ln > sourceLines.size) then { return noPosition }",
    "        found := sourceLines.at(ln).indexOf (needle1)",
    "        if (found ≠ 0) then {",
    "            return line (ln) column (found + needle1.size - 1)",
    "        }",
    "        found := sourceLines.at(ln).indexOf (needle2)",
    "        if (found ≠ 0) then {",
    "            return line (ln) column (found + needle2.size - 1)",
    "        }",
    "    }",
    "}",
    "",
    "def lineLength is public = 80",
    "def uninitialized = Singleton.named \"uninitialized\"",
    "method listMap(l, b) ancestors(ac) is confidential {",
    "    def newList = list [ ]",
    "    l.do { nd -> newList.addLast(nd.map(b) ancestors(ac)) }",
    "    newList",
    "}",
    "method maybeMap(n, b) ancestors(ac) is confidential {",
    "    if (false != n) then {",
    "        n.map(b) ancestors(ac)",
    "    } else {",
    "        n",
    "    }",
    "}",
    "method maybeListMap(n, b) ancestors(ac) is confidential {",
    "    if (false != n) then {",
    "        listMap(n, b) ancestors(ac)",
    "    } else {",
    "        n",
    "    }",
    "}",
    "",
    "def ancestorChain is public = object {",
    "    class empty {",
    "        method isEmpty { true }",
    "        method asString { \"ancestorChain ▫\" }",
    "        method extend(n) { cons(n) onto(self) }",
    "    }",
    "    method with(n) { empty.extend(n) }",
    "    class cons(p) onto(ac) is confidential {",
    "        method forebears { ac }",
    "        method isEmpty { false }",
    "        method parent { p }",
    "        method grandparent { forebears.parent }",
    "",
    "        method asString {",
    "            var a := self",
    "            var s := \"ancestorChain \"",
    "            while { a.isEmpty.not } do {",
    "                s := s ++ a.parent ++ \"➤\"",
    "                a := a.forebears",
    "            }",
    "            s ++ \"▫\"",
    "        }",
    "        method suchThat(cond) ifAbsent (action) {",
    "            var a := self",
    "            while { a.isEmpty.not } do {",
    "                if (cond.apply(a.parent)) then { return a.parent }",
    "                a := a.forebears",
    "            }",
    "            action.apply",
    "        }",
    "        method extend(n) { cons(n) onto(self) }",
    "    }",
    "}",
    "",
    "def emptySeq = emptySequence",
    "",
    "type AstNode = interface {",
    "    kind -> String",
    "        // Used for pseudo-instanceof tests, and for printing",
    "    register -> String",
    "        // Used in the code generator to name the resulting object",
    "    line -> Number",
    "        // The source line the node came from; the first line is 1",
    "    line:=(ln:Number)",
    "    column -> Number",
    "    linePos -> Number",
    "        // linePos and column are aliases; the first column is 1",
    "    linePos:=(lp:Number)",
    "    scope -> SymbolTable",
    "        // The symbolTable for names defined in this node and its sub-nodes",
    "    pretty(n:Number) -> String",
    "        // Pretty-print-string of node at depth n",
    "    comments -> AstNode",
    "        // Comments associated with this node",
    "    range -> Range",
    "        // The source range represented by this node",
    "    start -> Position",
    "        // The start of the source range represented by this node",
    "    end -> Position",
    "        // The end of the source range represented by this node",
    "}",
    "",
    "type SymbolTable = Unknown",
    "",
    "class baseNode {",
    "    // the superclass of all AST nodes",
    "    use identityEquality",
    "    var register is public := \"\"",
    "    var line is public := util.linenum",
    "    var linePos is public := util.linepos",
    "    var symbolTable := fakeSymbolTable",
    "    symbolTable.node := self",
    "    var comments is public := false",
    "",
    "    method setLine (l) col (c) {",
    "        line := l",
    "        linePos := c",
    "        self",
    "    }",
    "    method setPositionFrom (tokenOrNode) {",
    "        line := tokenOrNode.line",
    "        linePos := tokenOrNode.linePos",
    "        self",
    "    }",
    "    method setStart(p: Position) {",
    "        line := p.line",
    "        linePos := p.column",
    "        self",
    "    }",
    "    method column { linePos }   // so that AstNode conforms to Position",
    "    method start { line (line) column (linePos) }",
    "    method end -> Position { line (line) column (linePos + self.value.size - 1) }",
    "    method range { start (start) end (end) }",
    "    method kind { abstract }",
    "    method isNull { false }",
    "    method isAppliedOccurrence { false }",
    "    method isMatchingBlock { false }",
    "    method isFieldDec { false }",
    "    method isInherits { false }",
    "    method isLegalInTrait { false }",
    "    method isMember { false }",
    "    method isMethod { false }",
    "    method isExecutable { true }",
    "    method isCall { false }",
    "    method isComment { false }",
    "    method isClass { false }    // is a method that returns a fresh object",
    "    method inClass { false }    // object in a syntactic class definiton",
    "    method isTrait { false }    // is a method that returns a trait object",
    "    method inTrait { false }    // object in a syntactic trait definition",
    "    method isBind { false }",
    "    method isReturn { false }",
    "    method isSelf { false }",
    "    method isSuper { false }",
    "    method isPrelude { false }",
    "    method isOuter { false }",
    "    method isSelfOrOuter { false }",
    "    method isBlock { false }",
    "    method isObject { false }",
    "    method isIdentifier { false }",
    "    method isDialect { false }",
    "    method isImport { false }",
    "    method isTypeDec { false }",
    "    method isExternal { false }",
    "    method isFresh { false }",
    "    method isConstant { false }",
    "    method isSequenceConstructor { false }",
    "    method canInherit { false }",
    "    method returnsObject { false }",
    "    method isImplicit { false }",
    "    method usesAsType(aNode) { false }",
    "    method hash { line.hash * linePos.hash }",
    "    method asString { \"{kind} {nameString}\" }",
    "    method nameString { \"?\" }",
    "    method isWritable { true }",
    "    method isReadable { true }",
    "    method isPublic { true }",
    "    method isConfidential { isPublic.not }",
    "    method decType {",
    "        if (false == self.dtype) then {",
    "            return unknownType",
    "        }",
    "        return self.dtype",
    "    }",
    "    method isSimple { true }  // needs no parens when used ac receiver",
    "    method isDelimited { false }  // needs no parens when used ac argument",
    "    method description { kind }",
    "    method accept(visitor) {",
    "        self.accept(visitor) from (ancestorChain.empty)",
    "    }",
    "    method hasScope { fakeSymbolTable ≠ symbolTable }",
    "    method scope {",
    "        if (hasScope) then {",
    "            symbolTable",
    "        } else {",
    "            ProgrammingError.raise \"accessing unset symbol table\"",
    "        }",
    "    }",
    "",
    "    method scope:=(st) {",
    "        // override this method in subobjects that open a new scope. In such",
    "        // subobjects, and only in such subobjects, there should be a 2-way",
    "        // conection between the node and the symbol table that defines its scope.",
    "        symbolTable := st",
    "    }",
    "    method setScope(st) {",
    "        // sets the symboltable, and answers self, for chaining.",
    "        scope := st",
    "        self",
    "    }",
    "    method shallowCopyFieldsFrom(other) {",
    "        register := other.register",
    "        line := other.line",
    "        linePos := other.linePos",
    "        scope := other.scope",
    "        postCopy(other)",
    "        self",
    "    }",
    "    method postCopy(other) {",
    "        // hook method, to be overridden by sub-objects if desired",
    "    }",
    "",
    "    method prettyPrefix(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        if ((scope.node == self) && {util.target == \"symbols\"}) then {",
    "            \"{range} {description}\\n{spc}Symbols({scope.variety}): {scope}{scope.elementScopesAsString}\"",
    "        } elseif {scope.variety == \"fake\"} then {",
    "            \"{range} {description}\"",
    "        } else {",
    "            \"{range} {description} {scope.asDebugString}\"",
    "        }",
    "    }",
    "    method basePretty(depth) { prettyPrefix(depth) }",
    "    method pretty(depth) { basePretty(depth) }",
    "    method deepCopy {",
    "        self.map { each -> each } ancestors(ancestorChain.empty)",
    "    }",
    "    method enclosingObject {",
    "        def obj = scope.enclosingObjectScope.node",
    "        obj",
    "    }",
    "    method addComment(cmtNode) {",
    "        if (false == comments) then {",
    "            comments := cmtNode",
    "        } else {",
    "            comments.extendCommentUsing(cmtNode)",
    "        }",
    "    }",
    "    method addComments(cmtNodeList) {",
    "        cmtNodeList.do { each -> addComment(each) }",
    "    }",
    "    method statementName { kind }",
    "}",
    "",
    "def implicit is public = object {",
    "    inherit baseNode",
    "    line := 0",
    "    linePos := 0",
    "    def kind is public = \"implicit\"",
    "    def nameString is public = \"implicit\"",
    "    method range { emptyRange }",
    "    method isImplicit { true }",
    "    method toGrace(depth) { \"implicit\" }",
    "    method asString { \"the implicit receiver\" }",
    "    method map(blk) ancestors(ac) { self }",
    "    method accept(visitor) from (ac) {",
    "        visitor.visitImplicit(self) up (ac)",
    "    }",
    "    method pretty(depth) { \"implicit\" }",
    "}",
    "",
    "def nullNode is public = object {",
    "    inherit baseNode",
    "    def kind is public = \"null\"",
    "    method toGrace(depth) {",
    "        \"// null\"",
    "    }",
    "    method range { emptyRange }",
    "    method asString { \"the nullNode\" }",
    "    method isNull { true }",
    "}",
    "",
    "class fakeSymbolTable is public {",
    "    use identityEquality",
    "    var node is public    // will be initialized when this node",
    "      // is placed in an AstNode using scope:=(_).",
    "      // Can't make it nullNode now, because nullNode",
    "      // inherits from baseNode, which uses fakeSymbolTable",
    "    method asString { \"the fakeSymbolTable\" }",
    "    method addNode (n) ac (kind) {",
    "        ProgrammingError.raise \"fakeSymbolTable(on node {node}).addNode({n}) ac \\\"{kind}\\\"\"",
    "    }",
    "    method thatDefines (name) ifNone (action) {",
    "        action.apply",
    "    }",
    "    method thatDefines (name) {",
    "        ProgrammingError.raise \"fakeSymbolTable(on node {node}).thatDefines({name}).\"",
    "    }",
    "    method enclosingObjectScope {",
    "        ProgrammingError.raise \"fakeSymbolTable(on node {node}).enclosingObjectScope\"",
    "    }",
    "    method variety { \"fake\" }",
    "    method elementScopesAsString { \"[fake]\" }",
    "}",
    "",
    "def ifNode is public = object {",
    "  class new(cond, thenblock', elseblock') {",
    "    inherit baseNode",
    "    def kind is public = \"if\"",
    "    var value is public := cond",
    "    var thenblock is public := thenblock'",
    "    var elseblock is public := elseblock'",
    "    var handledIdentifiers is public := false",
    "    method isSimple { false }  // needs parens when used ac receiver",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitIf(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            value.accept(visitor) from(newChain)",
    "            thenblock.accept(visitor) from(newChain)",
    "            elseblock.accept(visitor) from(newChain)",
    "        }",
    "    }",
    "    method end -> Position { elseblock.end }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.thenblock := thenblock.map(blk) ancestors(newChain)",
    "        n.elseblock := elseblock.map(blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ self.value.pretty(depth+1)",
    "        s := s ++ \"\\n\"",
    "        if (util.target == \"symbols\") then {",
    "            s := s ++ spc ++ \"Then: {thenblock.pretty(depth+2)}\\n\"",
    "            s := s ++ spc ++ \"Else: {elseblock.pretty(depth+2)}\"",
    "        } else {",
    "            s := s ++ spc ++ \"Then:\"",
    "            for (self.thenblock.body) do { ix ->",
    "                s := s ++ \"\\n  \"++ spc ++ ix.pretty(depth+2)",
    "            }",
    "            s := s ++ \"\\n\"",
    "            s := s ++ spc ++ \"Else:\"",
    "            for (self.elseblock.body) do { ix ->",
    "                s := s ++ \"\\n  \"++ spc ++ ix.pretty(depth+2)",
    "            }",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"if ({self.value.toGrace(0)}) then \\{\"",
    "        for (self.thenblock.body) do { ix ->",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ ix.toGrace(depth + 1)",
    "        }",
    "        if (self.elseblock.isntEmpty) then {",
    "            s := s ++ \"\\n\" ++ spc ++ \"\\} else \\{\"",
    "            for (self.elseblock.body) do { ix ->",
    "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ ix.toGrace(depth + 1)",
    "            }",
    "        }",
    "        s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        ifNode.new(nullNode, nullNode, nullNode).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        handledIdentifiers := other.handledIdentifiers",
    "        self",
    "    }",
    "  }",
    "}",
    "def blockNode is public = object {",
    "  class new(params', body') {",
    "    inherit baseNode",
    "    def kind is public = \"block\"",
    "    def value is public = \"block\"",
    "    var params is public := params'",
    "    var body is public := body'",
    "    def selfclosure is public = true",
    "    var matchingPattern is public := false",
    "    var extraRuntimeData is public := false",
    "    for (params') do {p->",
    "        p.accept(patternMarkVisitor) from(ancestorChain.with(self))",
    "    }",
    "    method isBlock { true }",
    "    method isDelimited { true }",
    "    method isEmpty { body.size == 0 }",
    "    method isntEmpty { body.size > 0 }",
    "    method scope:=(st) {",
    "        // sets up the 2-way conection between this node",
    "        // and the synmol table that defines the scope that I open.",
    "        symbolTable := st",
    "        st.node := self",
    "    }",
    "    method declarationKindWithAncestors(ac) { k.parameter }",
    "    method isMatchingBlock { params.size == 1 }",
    "    method returnsObject {",
    "        (body.size > 0) && { body.last.returnsObject }",
    "    }",
    "    method returnedObjectScope {",
    "        // precondition: returnsObject",
    "        body.last.returnedObjectScope",
    "    }",
    "    method parametersDo(b) {",
    "        params.do(b)",
    "    }",
    "    method parameterCounts { [ params.size ] }",
    "    method parameterNames {",
    "        list.withAll(params.map { each -> each.nameString })",
    "    }",
    "    method typeParameterNames { list.empty }",
    "    method hasTypeParams { false }",
    "    method aParametersHasATypeAnnotation {",
    "        params.do { p -> if (false ≠ p.dtype) then { return true } }",
    "        return false",
    "    }",
    "    method end -> Position {",
    "        if (body.size > 0) then { return body.last.end }",
    "        if (params.isEmpty) then {",
    "            positionOfNext \"}\" after (start)",
    "        } else {",
    "            positionOfNext \"}\" after (params.last.end)",
    "        }",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitBlock(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            for (self.params) do { mx ->",
    "                mx.accept(visitor) from(newChain)",
    "            }",
    "            for (self.body) do { mx ->",
    "                mx.accept(visitor) from(newChain)",
    "            }",
    "            if (false != self.matchingPattern) then {",
    "                self.matchingPattern.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.params := listMap(params, blk) ancestors(newChain)",
    "        n.body := listMap(body, blk) ancestors(newChain)",
    "        n.matchingPattern := maybeMap(matchingPattern, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ \"Parameters:\"",
    "        for (self.params) do { mx ->",
    "            s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+1)",
    "        }",
    "        s := s ++ \"\\n\"",
    "        s := s ++ spc ++ \"Body:\"",
    "        for (self.body) do { mx ->",
    "            s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+1)",
    "        }",
    "        if (false != self.matchingPattern) then {",
    "            s := s ++ \"\\n\"",
    "            s := s ++ spc ++ \"Pattern:\"",
    "            s := s ++ \"\\n  \"++ spc ++ self.matchingPattern.pretty(depth+1)",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"\\{\"",
    "        if (self.params.size > 0) then {",
    "            s := s ++ \" \"",
    "            for (self.params.indices) do { i ->",
    "                var p := self.params.at(i)",
    "                if (false != self.matchingPattern) then {",
    "                    s := s ++ \"(\" ++ p.toGrace(0) ++ \")\"",
    "                } else {",
    "                    s := s ++ p.toGrace(0)",
    "                }",
    "                if (i < self.params.size) then {",
    "                    s := s ++ \", \"",
    "                } else {",
    "                    s := s ++ \" →\"",
    "                }",
    "            }",
    "        }",
    "        for (self.body) do { mx ->",
    "            s := s ++ \"\\n\" ++ spc ++ mx.toGrace(depth + 1)",
    "        }",
    "        s := s ++ \"\\n\"",
    "        repeat (depth - 1) times { s := s ++ \"    \" }",
    "        s ++ \"\\}\"",
    "    }",
    "    method shallowCopy {",
    "        blockNode.new(params, body).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        matchingPattern := other.matchingPattern",
    "        extraRuntimeData := other.extraRuntimeData",
    "        self",
    "    }",
    "  }",
    "}",
    "def tryCatchNode is public = object {",
    "  class new(block, cases', finally') {",
    "    inherit baseNode",
    "    def kind is public = \"trycatch\"",
    "    var value is public := block",
    "    var cases is public := cases'",
    "    var finally is public := finally'",
    "    method isSimple { false }  // needs parens when used ac receiver",
    "    method end -> Position {",
    "        if (false ≠ finally) then { return finally.end }",
    "        if (cases.isEmpty.not) then { return cases.last.end }",
    "        return value.end",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitTryCatch(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.value.accept(visitor) from(newChain)",
    "            for (self.cases) do { mx ->",
    "                mx.accept(visitor) from(newChain)",
    "            }",
    "            if (false != self.finally) then {",
    "                self.finally.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.cases := listMap(cases, blk) ancestors(newChain)",
    "        n.finally := maybeMap(finally, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := \"{basePretty(depth)}\\n\"",
    "        s := s ++ spc ++ value.pretty(depth + 2)",
    "        for (self.cases) do { mx ->",
    "            s := s ++ \"\\n{spc}Case:\\n{spc}  {mx.pretty(depth+2)}\"",
    "        }",
    "        if (false != self.finally) then {",
    "            s := s ++ \"\\n{spc}Finally:\\n{spc}  {self.finally.pretty(depth+2)}\"",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"try \" ++ self.value.toGrace(depth + 1) ++ \" \"",
    "        for (self.cases) do { case ->",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"catch \" ++ case.toGrace(depth + 1)",
    "        }",
    "        if (false != self.finally) then {",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"finally \" ++ self.finally.toGrace(depth + 1)",
    "        }",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        tryCatchNode.new(nullNode, emptySeq, false).shallowCopyFieldsFrom(self)",
    "    }",
    "  }",
    "}",
    "def matchCaseNode is public = object {",
    "  class new(matchee', cases', elsecase') {",
    "    inherit baseNode",
    "    def kind is public = \"matchcase\"",
    "    var value is public := matchee'",
    "    var cases is public := cases'",
    "    var elsecase is public := elsecase'",
    "    method isSimple { false }  // needs parens when used as receiver",
    "    method end -> Position {",
    "        if (false ≠ elsecase) then { return elsecase.end }",
    "        if (cases.isEmpty.not) then { return cases.last.end }",
    "        return value.end",
    "    }",
    "    method matchee { value }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitMatchCase(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.value.accept(visitor) from(newChain)",
    "            for (self.cases) do { mx ->",
    "                mx.accept(visitor) from(newChain)",
    "            }",
    "            if (false != self.elsecase) then {",
    "                self.elsecase.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.cases := listMap(cases, blk) ancestors(newChain)",
    "        n.elsecase := maybeMap(elsecase, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ matchee.pretty(depth + 2)",
    "        for (self.cases) do { mx ->",
    "            s := s ++ \"\\n{spc}Case:\\n{spc}  {mx.pretty(depth+2)}\"",
    "        }",
    "        if (false != self.elsecase) then {",
    "            s := s ++ \"\\n{spc}Else:\\n{spc}  {self.elsecase.pretty(depth+2)}\"",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"match(\" ++ self.value.toGrace(0) ++ \")\"",
    "        for (self.cases) do { case ->",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"case \" ++ case.toGrace(depth + 2)",
    "        }",
    "        if (false != self.elsecase) then {",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ \"else \" ++ self.elsecase.toGrace(depth + 2)",
    "        }",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        matchCaseNode.new(nullNode, emptySeq, false).shallowCopyFieldsFrom(self)",
    "    }",
    "  }",
    "}",
    "",
    "class methodSignatureNode(parts', rtype') {",
    "    // Represents a method signature in a type literal, or in an inheritance modifier.",
    "    // parts' is a collection of signaturePart objects, which",
    "    // contain the parts of this method's name and the parameter lists;",
    "    // rtype' is the return type of this method, or false if not specified.",
    "",
    "    inherit baseNode",
    "    def kind is public = \"methodtype\"",
    "    var signature is public := parts'",
    "    var rtype is public := rtype'",
    "    var cachedIdentifier := uninitialized",
    "    var isBindingOccurrence := true",
    "",
    "    method appliedOccurrence {",
    "        isBindingOccurrence := false",
    "        if (uninitialized ≠ cachedIdentifier) then {",
    "            cachedIdentifier.isBindingOccurrence := false",
    "        }",
    "        self",
    "    }",
    "",
    "    method hasParams { signature.first.params.isEmpty.not }",
    "    method numParams {",
    "        signature.fold { acc, p -> acc + p.numParams } startingWith 0",
    "    }",
    "    method parametersDo(b) {",
    "        signature.do { part ->",
    "            part.params.do { each -> b.apply(each) }",
    "        }",
    "    }",
    "    method parameterCounts {",
    "        def result = list [ ]",
    "        signature.do { part ->",
    "            result.push(part.params.size)",
    "        }",
    "        result",
    "    }",
    "    method parameterNames {",
    "        def result = list [ ]",
    "        signature.do { part ->",
    "            part.params.do { param ->",
    "                result.push(param.nameString)",
    "            }",
    "        }",
    "        result",
    "    }",
    "    method typeParameterNames {",
    "        if (hasTypeParams.not) then { return list [ ] }",
    "        def result = list [ ]",
    "        signature.first.typeParams.do { each ->",
    "            result.push(each.nameString)",
    "        }",
    "        result",
    "    }",
    "    method numTypeParams { signature.first.numTypeParams }",
    "    method hasTypeParams { false ≠ signature.first.typeParams }",
    "    method typeParams { signature.first.typeParams }",
    "    method withTypeParams(tp) {",
    "        signature.first.typeParams := tp",
    "        self",
    "    }",
    "",
    "    method end -> Position {",
    "        if ((false ≠ rtype) && {rtype.line ≠ 0}) then { return rtype.end }",
    "        signature.last.end",
    "    }",
    "",
    "    method nameString {",
    "        // the name of the method being defined, in numeric form",
    "        signature.fold { acc, each -> acc ++ each.nameString }",
    "            startingWith \"\"",
    "    }",
    "",
    "    method canonicalName {",
    "        // the name of the method being defined, in underscore form",
    "        signature.fold { acc, each -> acc ++ each.canonicalName }",
    "            startingWith \"\"",
    "    }",
    "",
    "    method asIdentifier {",
    "        if (uninitialized == cachedIdentifier) then {",
    "            cachedIdentifier := identifierNode.new(nameString, false)",
    "            cachedIdentifier.line := signature.first.line",
    "            cachedIdentifier.linePos := signature.first.linePos",
    "            cachedIdentifier.end := signature.last.end",
    "            cachedIdentifier.canonicalName := canonicalName",
    "            cachedIdentifier.isBindingOccurrence := isBindingOccurrence",
    "        }",
    "        cachedIdentifier",
    "    }",
    "    method isExecutable { false }",
    "",
    "    method scope:=(st) {",
    "        // sets up the 2-way conection between this node",
    "        // and the symbol table that defines the scope that I open.",
    "        symbolTable := st",
    "        st.node := self",
    "    }",
    "    method declarationKindWithAncestors(ac) {",
    "        ac.parent.declarationKindWithAncestors(ac)",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitMethodType(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            for (signature) do { part ->",
    "                part.accept(visitor) from(newChain)",
    "            }",
    "            if (false != rtype) then {",
    "                rtype.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.rtype := maybeMap(rtype, blk) ancestors(newChain)",
    "        n.signature := listMap(signature, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := \"{s}{spc}Name: {nameString}\\n\"",
    "        if (false != rtype) then {",
    "            s := \"{s}{spc}Returns:\\n  {spc}{rtype.pretty(depth + 2)}\"",
    "        }",
    "        s := \"{s}\\n{spc}Signature Parts:\"",
    "        for (signature) do { part ->",
    "            s := \"{s}\\n  {spc}{part.pretty(depth + 2)}\"",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        var s := \"\"",
    "        signature.do { part -> s:= s ++ part.toGrace(depth + 2) }",
    "        if (false != rtype) then {",
    "            s := \"{s} → {rtype.toGrace(depth + 2)}\"",
    "        }",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        methodSignatureNode(signature, rtype).shallowCopyFieldsFrom(self)",
    "    }",
    "}",
    "def typeLiteralNode is public = object {",
    "  class new(methods', types') {",
    "    inherit baseNode",
    "    def kind is public = \"typeliteral\"",
    "    var methods is public := methods'",
    "    var types is public := types'",
    "    var nominal is public := false",
    "    var anonymous is public := true",
    "    var value is public := \"‹anon›\"",
    "",
    "    method name { value }",
    "    method name:=(n) {",
    "        value := n",
    "        anonymous := false",
    "    }",
    "    method asString {",
    "        \"typeliteral: methods = {methods}, types = {types}\"",
    "    }",
    "    method declarationKindWithAncestors(ac) { k.typedec }",
    "    method isExecutable { false }",
    "",
    "    method end -> Position {",
    "        def tEnd = if (types.isEmpty) then {noPosition} else {types.last.end}",
    "        def mEnd = if (methods.isEmpty) then {noPosition} else {methods.last.end}",
    "        positionOfNext \"}\" after (max(tEnd, mEnd))",
    "    }",
    "",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitTypeLiteral(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            for (self.methods) do { each ->",
    "                each.accept(visitor) from(newChain)",
    "            }",
    "            for (self.types) do { each ->",
    "                each.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.methods := listMap(methods, blk) ancestors (ac)",
    "        n.types := listMap(types, blk) ancestors (ac)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ \"Types:\"",
    "        for (types) do { each ->",
    "            s := s ++ \"\\n  \"++ spc ++ each.pretty(depth+2)",
    "        }",
    "        s := s ++ \"\\n\" ++ spc ++ \"Methods:\"",
    "        for (methods) do { each ->",
    "            s := s ++ \"\\n  \"++ spc ++ each.pretty(depth+2)",
    "        }",
    "        s := s ++ \"\\n\"",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"interface \\{\"",
    "        for (self.methods) do { each ->",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ each.toGrace(depth + 1)",
    "        }",
    "        for (self.types) do { each ->",
    "            s := s ++ \"\\n\" ++ spc ++ \"    \" ++ each.toGrace(depth + 1)",
    "        }",
    "        s ++ \"\\}\"",
    "    }",
    "    method shallowCopy {",
    "        typeLiteralNode.new(emptySeq, emptySeq).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        nominal := other.nominal",
    "        anonymous := other.anonymous",
    "        value := other.value",
    "        self",
    "    }",
    "  }",
    "}",
    "",
    "def typeDecNode is public = object {",
    "  class new(name', typeValue) {",
    "    inherit baseNode",
    "    def kind is public = \"typedec\"",
    "    var name is public := name'",
    "    var value is public := typeValue",
    "    var parentKind is public := \"unset\"",
    "    var annotations is public := list [ ]",
    "    var typeParams is public := false",
    "",
    "    method nameString → String { name.value }",
    "    method end -> Position { value.end }",
    "    method isLegalInTrait { true }",
    "    method isTypeDec { true }",
    "    method scope:=(st) {",
    "        // sets up the 2-way conection between this node",
    "        // and the synmol table that defines the scope that I open.",
    "        symbolTable := st",
    "        st.node := self",
    "    }",
    "",
    "    method isExecutable { false }",
    "    method declarationKindWithAncestors(ac) { k.typeparam }",
    "    method isConfidential { findAnnotation(self, \"confidential\") }",
    "    method isPublic { isConfidential.not }",
    "    method isWritable { false }",
    "    method isReadable { isPublic }",
    "    method numTypeParams {",
    "        if (false == typeParams) then {0} else {typeParams.size}",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitTypeDec(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            name.accept(visitor) from(newChain)",
    "            if (false != typeParams) then {",
    "                typeParams.accept(visitor) from(newChain)",
    "            }",
    "            annotations.do { each -> each.accept(visitor) from(newChain) }",
    "            value.accept(visitor) from(newChain)",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.name := name.map(blk) ancestors(newChain)",
    "        n.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ self.name.pretty(depth + 1) ++ \"\\n\"",
    "        if (false != typeParams) then {",
    "            s := \"{s}{spc}Type parameters:\\n{typeParams.pretty(depth + 2)}\\n\"",
    "        }",
    "        s := s ++ spc ++ \"Value:\"",
    "        s := s ++ value.pretty(depth+2)",
    "        s := s ++ \"\\n\"",
    "        if (false != comments) then {",
    "            s := s ++ comments.pretty(depth+2)",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"\"",
    "        s := \"type {self.name}\"",
    "        if (false != typeParams) then {",
    "            typeParams.toGrace(0)",
    "        }",
    "        s ++ \" = \" ++ value.toGrace(depth + 2)",
    "    }",
    "    method shallowCopy {",
    "        typeDecNode.new(name, nullNode).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        parentKind := other.parentKind",
    "        self",
    "    }",
    "  }",
    "}",
    "",
    "def methodNode is public = object {",
    "    method new(signature, body, dtype) scope(s) {",
    "        def result = new(signature, body, dtype)",
    "        result.scope := s",
    "        result",
    "    }",
    "",
    "    class new(signature', body', dtype') {",
    "        // Represents a method declaration",
    "        // The name of the method is constructed from signature',",
    "        // which is a sequence of signatureParts;",
    "        // body is a sequence of statements and declarations.",
    "        // dtype is the declared return type of the method, or false.",
    "",
    "        inherit baseNode",
    "        def kind is public = \"method\"",
    "        var description is public := kind   // changed to \"class\" or \"trait\" by parser",
    "        var signature is public := signature'",
    "        var hasBody is public := true",
    "        var body is public := body'",
    "        if (false == body') then {",
    "            body := sequence.empty",
    "            hasBody := false",
    "        }",
    "        var dtype is public := dtype'",
    "        var selfclosure is public := false",
    "        var annotations is public := list [ ]",
    "        var isFresh is public := false      // a method is 'fresh' if it answers a new object",
    "        var isOnceMethod is public := false",
    "        method usesClassSyntax { \"class\" == description }",
    "        method usesTraitSyntax { \"trait\" == description }",
    "        var cachedIdentifier := uninitialized",
    "        var isBindingOccurrence is readable := true",
    "            // the only exceptions are the oldMethodName in an alias clause,",
    "            // and an excluded name",
    "        method isAppliedOccurrence { isBindingOccurrence.not }",
    "",
    "        method end -> Position {",
    "            if (body.isEmpty.not) then {",
    "                if (usesClassSyntax) then { return body.last.end }",
    "                return positionOfNext \"}\" after (body.last.end)",
    "            }",
    "            if (false ≠ dtype) then {",
    "                return positionOfNext \"}\" after (dtype.end)",
    "            }",
    "            return positionOfNext \"}\" after (signature.last.end)",
    "        }",
    "        method ilkName {",
    "            // a string describing the ilk of the objects returned by this method",
    "            if (isFresh && {body.last.isObject}) then {",
    "                body.last.name",
    "            } else {",
    "                canonicalName",
    "            }",
    "        }",
    "        method appliedOccurrence {",
    "            isBindingOccurrence := false",
    "            if (uninitialized ≠ cachedIdentifier) then {",
    "                cachedIdentifier.isBindingOccurrence := false",
    "            }",
    "            self",
    "        }",
    "        method numParams {",
    "            signature.fold { acc, p -> acc + p.numParams } startingWith 0",
    "        }",
    "        method parametersDo(b) {",
    "            signature.do { part ->",
    "                part.params.do { each -> b.apply(each) }",
    "            }",
    "        }",
    "        method parameterCounts {",
    "            def result = list [ ]",
    "            signature.do { part ->",
    "                result.push(part.params.size)",
    "            }",
    "            result",
    "        }",
    "        method parameterNames {",
    "            def result = list [ ]",
    "            signature.do { part ->",
    "                part.params.do { param ->",
    "                    result.push(param.nameString)",
    "                }",
    "            }",
    "            result",
    "        }",
    "        method typeParameterNames {",
    "            if (hasTypeParams.not) then { return list [ ] }",
    "            def result = list [ ]",
    "            signature.first.typeParams.do { each ->",
    "                result.push(each.nameString)",
    "            }",
    "            result",
    "        }",
    "        method numTypeParams { signature.first.numTypeParams }",
    "        method endPos {",
    "            def lastPart = signature.last",
    "            lastPart.linePos + lastPart.name.size - 1",
    "        }",
    "        method headerRange {",
    "            start ( self.start ) end ( signature.last.end )",
    "        }",
    "",
    "        method nameString {",
    "            signature.fold { acc, each -> acc ++ each.nameString }",
    "                startingWith \"\"",
    "        }",
    "        method asIdentifier {",
    "            if (uninitialized == cachedIdentifier) then {",
    "                cachedIdentifier := identifierNode.new(nameString, false)",
    "                cachedIdentifier.line := signature.first.line",
    "                cachedIdentifier.linePos := signature.first.linePos",
    "                cachedIdentifier.isBindingOccurrence := isBindingOccurrence",
    "                cachedIdentifier.end := signature.last.end",
    "                cachedIdentifier.canonicalName := canonicalName",
    "            }",
    "            cachedIdentifier",
    "        }",
    "        method value { asIdentifier }",
    "        method canonicalName {",
    "            signature.fold { acc, each -> acc ++ each.canonicalName }",
    "                startingWith \"\"",
    "        }",
    "        method hasParams { signature.first.params.isEmpty.not }",
    "        method numParamLists {",
    "            // the number of my parameter lists.  If I have a single",
    "            // part to my name, there may be 0 or 1",
    "            def sigSz = signature.size",
    "            if (sigSz > 1) then { return sigSz }",
    "            if {signature.first.params.isEmpty} then { return 0 }",
    "            return 1",
    "        }",
    "        method hasTypeParams { false ≠ signature.first.typeParams }",
    "        method typeParams { signature.first.typeParams }",
    "        method withTypeParams(tp) {",
    "            signature.first.typeParams := tp",
    "            self",
    "        }",
    "        method isMethod { true }",
    "        method isExecutable { false }",
    "        method isLegalInTrait { true }",
    "        method isClass { usesClassSyntax || isFresh }",
    "        method isTrait { usesTraitSyntax || (isFresh && { body.last.isTrait } ) }",
    "        method needsArgChecks {",
    "            signature.do { part ->",
    "                part.params.do { p ->",
    "                    if ((false != p.dtype) &&",
    "                          { p.dtype.nameString != \"Unknown\" }) then {",
    "                        return true",
    "                    }",
    "                }",
    "            }",
    "            return false",
    "        }",
    "        method scope:=(st) {",
    "            // sets up the 2-way conection between this node",
    "            // and the synmol table that defines the scope that I open.",
    "            symbolTable := st",
    "            st.node := self",
    "        }",
    "        method declarationKindWithAncestors(ac) { k.parameter }",
    "        method isConfidential { findAnnotation(self, \"confidential\") }",
    "        method isPublic { isConfidential.not }",
    "        method isWritable { false }",
    "        method isReadable { isPublic }",
    "        method isAbstract { findAnnotation(self, \"abstract\") }",
    "        method isRequired { findAnnotation(self, \"required\") }",
    "        method isAnnotationDecl { findAnnotation(self, \"annotation\") }",
    "        method usesAsType(aNode) {",
    "            aNode == dtype",
    "        }",
    "        method returnsObject {",
    "            body.isEmpty.not && {body.last.returnsObject}",
    "        }",
    "        method returnedObjectScope {",
    "            // precondition: returnsObject",
    "            body.last.returnedObjectScope",
    "        }",
    "        method resultExpression {   // precondition: body is not empty",
    "            if (body.isEmpty) then { ProgrammingError.raise \"method has no body\" }",
    "            var last := body.last",
    "            if (last.isReturn) then { last := last.value }",
    "            last",
    "        }",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitMethod(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                self.value.accept(visitor) from(newChain)",
    "                for (self.signature) do { part ->",
    "                    part.accept(visitor) from(newChain)",
    "                }",
    "                if (false != dtype) then {",
    "                    dtype.accept(visitor) from(newChain)",
    "                }",
    "                for (self.annotations) do { ann ->",
    "                    ann.accept(visitor) from(newChain)",
    "                }",
    "                for (self.body) do { mx ->",
    "                    mx.accept(visitor) from(newChain)",
    "                }",
    "            }",
    "        }",
    "        method map(blk) ancestors(ac){",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.body := listMap(body, blk) ancestors(newChain)",
    "            n.signature := listMap(signature, blk) ancestors(newChain)",
    "            n.annotations := listMap(annotations, blk) ancestors(newChain)",
    "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth) ++",
    "                  if (isOnceMethod) then { \" (once)\\n\" } else { \"\\n\" }",
    "            s := s ++ spc ++ \"Name: \" ++ value.pretty(depth+1) ++ \"\\n\"",
    "            if (false != self.dtype) then {",
    "                s := s ++ spc ++ \"Returns:\\n\" ++ spc ++ \"  \"",
    "                s := s ++ self.dtype.pretty(depth + 2) ++ \"\\n\"",
    "            }",
    "            if (isBindingOccurrence.not) then { s := s ++ spc ++ \"Applied\\n\" }",
    "            if (isFresh) then { s := s ++ spc ++ \"Fresh\\n\" }",
    "            s := \"{s}{spc}Signature:\"",
    "            for (signature) do { part ->",
    "                s := \"{s}\\n  {spc}Part: {part.name}\"",
    "                if (part.hasTypeParams) then {",
    "                    s := \"{s}\\n    {spc}Type Parameters:\"",
    "                    for (part.typeParams) do { p ->",
    "                        s := \"{s}\\n      {spc}{p.pretty(depth + 4)}\"",
    "                    }",
    "                }",
    "                if (hasParams) then {",
    "                    s := \"{s}\\n    {spc}Parameters:\"",
    "                    for (part.params) do { p ->",
    "                        s := \"{s}\\n      {spc}{p.pretty(depth + 4)}\"",
    "                    }",
    "                }",
    "            }",
    "            s := s ++ \"\\n\"",
    "            if (annotations.size > 0) then {",
    "                s := \"{s}{spc}Annotations:\"",
    "                for (annotations) do {an->",
    "                    s := \"{s}\\n{spc}  {an.pretty(depth + 2)}\"",
    "                }",
    "                s := s ++ \"\\n\"",
    "            }",
    "            s := s ++ spc ++ \"Body:\"",
    "            for (self.body) do { mx ->",
    "                s := s ++ \"\\n  \"++ spc ++ mx.pretty(depth+2)",
    "            }",
    "            if (false != comments) then {",
    "                s := s ++ comments.pretty(depth+2)",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            def spc = \"    \" * depth",
    "            var s := if (isOnceMethod) then { \"once \"} else { \"\" }",
    "            s := s ++ description ++ \" \"",
    "            for (self.signature) do { part -> s := s ++ part.toGrace(depth) }",
    "            if (false != self.dtype) then {",
    "                s := s ++ \" -> {self.dtype.toGrace(0)}\"",
    "            }",
    "            if (self.annotations.size > 0) then {",
    "                s := s ++ \" is \"",
    "                s := s ++ self.annotations.fold{ a,b ->",
    "                    if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0)",
    "                } startingWith \"\"",
    "            }",
    "            if (self.hasBody) then {",
    "                s := s ++ \" \\{\"",
    "                if (false != comments) then {",
    "                    s := s ++ comments.toGrace(depth + 1)",
    "                }",
    "                for (self.body) do { mx ->",
    "                    s := s ++ \"\\n\" ++ spc ++ \"    \" ++ mx.toGrace(depth + 1)",
    "                }",
    "                s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
    "            }",
    "            s",
    "        }",
    "        method shallowCopy {",
    "            methodNode.new(signature, body, dtype).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            isFresh := other.isFresh",
    "            isOnceMethod := other.isOnceMethod",
    "            description := other.description",
    "            hasBody := other.hasBody",
    "            selfclosure := other.selfclosure",
    "            if (other.isAppliedOccurrence) then {",
    "                self.appliedOccurrence",
    "            }",
    "            self",
    "        }",
    "    }",
    "}",
    "def callNode is public = object {",
    "    method new(receiver, parts) scope(s) {",
    "        def result = new(receiver, parts)",
    "        result.scope := s",
    "        result",
    "    }",
    "    class new(receiver', parts') {",
    "        // requested as callNode.new(receiver':AstNode, parts:Sequence⟦RequestPart⟧)",
    "        // Represents a method request with arguments.",
    "",
    "        inherit baseNode",
    "        def kind is public = \"call\"",
    "        var parts is public := parts'            // [ requestPart ]",
    "        var generics is public := false",
    "        var isPattern is public := false",
    "        var receiver is public := receiver'    // formerly `value`",
    "        var isSelfRequest is public := false",
    "        var isTailCall is public := false      // is possibly the result of a method",
    "        var isFresh is public := false         // calls a fresh method",
    "        var cachedIdentifier := uninitialized",
    "        var endPos is public := noPosition",
    "",
    "        method end -> Position {",
    "            if (endPos == noPosition) then {",
    "                if (isRequestOfPrefixOperator) then {",
    "                    receiver.end",
    "                } else {",
    "                    parts.last.end",
    "                }",
    "            } else {",
    "                endPos",
    "            }",
    "        }",
    "        method end:=(newPos) { endPos := newPos }",
    "        method isRequestOfPrefixOperator { parts.first.name.startsWith \"prefix\" }",
    "        method onSelf {",
    "            // mark as a self-request.  Answers self for chaining.",
    "            isSelfRequest := true",
    "            self",
    "        }",
    "",
    "        method nameString {",
    "            // the name of the method being requested, in numeric form",
    "            parts.fold { acc, each -> acc ++ each.nameString } startingWith \"\"",
    "        }",
    "",
    "        method canonicalName {",
    "            // the name of the method being requested, in underscore form",
    "            parts.fold { acc, each -> acc ++ each.canonicalName }",
    "                startingWith \"\"",
    "        }",
    "",
    "        method isCall { true }",
    "        method returnsObject {",
    "            // we recognize two special calls ac returning a fresh object",
    "            // self.copy, and prelude.clone(_)",
    "            if (isCopy) then { return true }",
    "            if (isClone) then { return true }",
    "            isFresh",
    "        }",
    "        method isCopy {",
    "            ((receiver.isImplicit || receiver.isSelf) &&",
    "                (nameString == \"copy\"))",
    "        }",
    "        method isClone {",
    "            ((receiver.isImplicit || receiver.isPrelude) &&",
    "                  (nameString == \"clone(1)\"))",
    "        }",
    "        method returnedObjectScope {",
    "            // precondition: returnsObject",
    "            self.scope",
    "        }",
    "        method arguments {",
    "            def result = list [ ]",
    "            for (parts) do { part ->",
    "                for (part.args) do { arg -> result.push(arg) }",
    "            }",
    "            result",
    "        }",
    "",
    "        method argumentsDo(action) {",
    "            for (parts) do { part ->",
    "                for (part.args) do { arg -> action.apply(arg) }",
    "            }",
    "        }",
    "",
    "        method numArgs {",
    "            parts.fold { acc, part -> acc + part.args.size } startingWith 0",
    "        }",
    "",
    "        method numTypeArgs {",
    "            if (false == generics) then { 0 } else { generics.size }",
    "        }",
    "",
    "        method hasTypeArgs { false ≠ generics }",
    "",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitCall(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                self.receiver.accept(visitor) from(newChain)",
    "                for (self.parts) do { part ->",
    "                    for (part.args) do { arg ->",
    "                        arg.accept(visitor) from(newChain)",
    "                    }",
    "                }",
    "                if (false != generics) then {",
    "                    generics.do { each ->",
    "                        each.accept(visitor) from(newChain)",
    "                    }",
    "                }",
    "            }",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.receiver := receiver.map(blk) ancestors(newChain)",
    "            n.parts := listMap(parts, blk) ancestors(newChain)",
    "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth)",
    "            s := s ++ if (isSelfRequest) then { \" on self\\n\" } else { \"\\n\" }",
    "            s := s ++ spc ++ \"Receiver: {receiver.pretty(depth + 1)}\\n\"",
    "            s := s ++ spc ++ \"Method Name: {nameString}\\n\"",
    "            if (false != generics) then {",
    "                s := s ++ spc ++ \"  Generics:\\n\"",
    "                for (generics) do {g->",
    "                    s := s ++ spc ++ \"    \" ++ g.pretty(depth + 2) ++ \"\\n\"",
    "                }",
    "            }",
    "            s := s ++ spc ++ \"Parts:\"",
    "            for (self.parts) do { part ->",
    "                s := s ++ \"\\n  \" ++ spc ++ part.pretty(depth + 2)",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            if (isRequestOfPrefixOperator) then {",
    "                def opSymbol = parts.first.name.substringFrom 7",
    "                return \"{opSymbol} {self.receiver.toGrace 0}\"",
    "            }",
    "            var s := \"\"",
    "            if ((receiver.isImplicit || receiver.isSelfOrOuter).not) then {",
    "                if (receiver.isSimple) then {",
    "                    s := \"{receiver.toGrace (depth + 1)}.\"",
    "                } else {",
    "                    s := \"({receiver.toGrace (depth + 1)}).\"",
    "                }",
    "            }",
    "            parts.do { part -> s := s ++ part.toGrace(depth + 1) }",
    "                separatedBy { s := s ++ \" \" }",
    "            s",
    "        }",
    "        method asIdentifier {",
    "            // make and return an identifiderNode for my request",
    "",
    "            if (uninitialized == cachedIdentifier) then {",
    "                if (scope.variety == \"fake\") then {",
    "                    ProgrammingError.raise",
    "                        \"asIdentifier requested on {pretty 0} when scope was fake\"",
    "                }",
    "                cachedIdentifier := identifierNode.new(nameString, false) scope (scope)",
    "                cachedIdentifier.inRequest := true",
    "                cachedIdentifier.line := parts.first.line",
    "                cachedIdentifier.linePos := parts.first.linePos",
    "                cachedIdentifier.canonicalName := canonicalName",
    "                cachedIdentifier.end := end",
    "            }",
    "            cachedIdentifier",
    "        }",
    "        method asString { \"call {toGrace 0}\" }",
    "        method shallowCopy {",
    "            callNode.new(receiver, parts).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            isPattern := other.isPattern",
    "            isSelfRequest := other.isSelfRequest",
    "            isTailCall := other.isTailCall",
    "            isFresh := other.isFresh",
    "            endPos := other.endPos",
    "            self",
    "        }",
    "        method statementName { \"request\" }",
    "    }",
    "}",
    "def moduleNode is public = object {",
    "    method body(b) named(n) scope(s) {",
    "        def result = body(b)",
    "        result.name := n",
    "        result.scope := s",
    "        result",
    "    }",
    "    method body(b) named(n) {",
    "        def result = body(b)",
    "        result.name := n",
    "        result",
    "    }",
    "    class body(b) {",
    "        inherit objectNode.new(b, false)",
    "            alias oNPostCopy(_) = postCopy(_)",
    "        def kind is public = \"module\"",
    "        def sourceLines = util.lines",
    "        var theDialect is public := dialectNode.new \"standardGrace\"",
    "        theDialect.setStart(noPosition)     // dialect is implicit",
    "        setStart(line 1 column 1)           // always starts at the start of the puput",
    "        var imports is public := list.empty",
    "        var directImports is public := list.empty",
    "",
    "        method end -> Position {",
    "            line (util.lines.size) column (util.lines.last.size)",
    "        }",
    "        method isModule { true }",
    "        method isTrait { false }",
    "        method returnsObject { false }",
    "        method importsDo(action) {",
    "            value.do { o ->",
    "                if (o.isExternal) then { action.apply(o) }",
    "            }",
    "        }",
    "        method externalsDo(action) {",
    "            if (theDialect.value ≠ \"none\") then {",
    "                action.apply(theDialect)",
    "            }",
    "            value.do { o ->",
    "                if (o.isExternal) then { action.apply(o) }",
    "            }",
    "        }",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitModule(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                theDialect.accept(visitor) from (newChain)",
    "                if (false != self.superclass) then {",
    "                    self.superclass.accept(visitor) from(newChain)",
    "                }",
    "                for (self.value) do { x ->",
    "                    x.accept(visitor) from(newChain)",
    "                }",
    "            }",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.theDialect := theDialect.map(blk) ancestors(newChain)",
    "            n.value := listMap(value, blk) ancestors(newChain)",
    "            n.superclass := maybeMap(superclass, blk) ancestors(newChain)",
    "            n.usedTraits := listMap(usedTraits, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method basePretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            prettyPrefix(depth) ++ \"\\n\" ++",
    "                \"{spc}{theDialect.pretty 0}\"",
    "        }",
    "        method shallowCopy {",
    "            moduleNode.body(emptySeq).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            imports := other.imports",
    "            directImports := other.directImports",
    "            theDialect := other.theDialect",
    "            // copy the fields of moduleNode",
    "",
    "            oNPostCopy(other)",
    "            self",
    "        }",
    "    }",
    "}",
    "def objectNode is public = object {",
    "    method body(b) named(n) scope(s) {",
    "        def result = new(b, false)",
    "        result.name := n",
    "        result.scope := s",
    "        result",
    "    }",
    "    method body(b) named(n) {",
    "        body(b) named(n) scope(fakeSymbolTable)",
    "    }",
    "    class new(b, superclass') {",
    "        inherit baseNode",
    "        def kind is public = \"object\"",
    "        var value is public := b",
    "        var superclass is public := superclass'",
    "        var usedTraits is public := list [ ]",
    "        var name is public := \"object\"",
    "        var inClass is public := false",
    "        var inTrait is public := false",
    "        var myLocalNames := false",
    "        var annotations is public := list [ ]",
    "",
    "        method end -> Position {",
    "            if (value.isEmpty.not) then {",
    "                return positionOfNext \"}\" after (value.last.end)",
    "            }",
    "            def iEnd = if (false == superclass) then { noPosition } else { superclass.end }",
    "            def tEnd = if (usedTraits.isEmpty) then { noPosition } else { usedTraits.last.end }",
    "            if (iEnd ≠ tEnd) then {",
    "                positionOfNext \"}\" after (max(iEnd, tEnd))",
    "            } else {",
    "                positionOfNext \"}\" after (start)",
    "            }",
    "        }",
    "        method description -> String {",
    "            if (isTrait) then {",
    "                \"{kind} (is trait)\"",
    "            } elseif { inClass } then {",
    "                \"{kind} (in class)\"",
    "            } else {",
    "                kind",
    "            }",
    "        }",
    "        method isFresh { true }     // the epitome of freshness!",
    "        method isTrait {",
    "            // answers true if this object qualifies to be a trait, whether",
    "            // or not it was declared with the trait syntax",
    "",
    "            if (inTrait) then { return true }",
    "            if (false != superclass) then { return false }",
    "            value.do { each ->",
    "                if (each.isLegalInTrait.not) then { return false }",
    "            }",
    "            return true",
    "        }",
    "",
    "        method localNames -> Set⟦String⟧ {",
    "            // answers the names of all of the methods defined directly in",
    "            // this object.  Inherited names are _not_ included.",
    "            if (false == myLocalNames) then {",
    "                myLocalNames := emptySet",
    "                value.do { node ->",
    "                    if (node.isFieldDec || node.isMethod) then {",
    "                        myLocalNames.add(node.nameString)",
    "                    }",
    "                }",
    "            }",
    "            myLocalNames",
    "        }",
    "",
    "        method parentsDo(action) {",
    "            // iterate over my superclass and my used traits",
    "",
    "            if (false != superclass) then { action.apply(superclass) }",
    "            usedTraits.do { t -> action.apply(t) }",
    "        }",
    "",
    "        method methodsDo(action) {",
    "            // iterate over my method declarations",
    "",
    "            value.do { o ->",
    "                if (o.isMethod) then { action.apply(o) }",
    "            }",
    "        }",
    "",
    "        method methodsAndTypesDo(action) {",
    "            // iterate over my method and type declarations",
    "            value.do { o ->",
    "                if (o.isMethod || o.isTypeDec) then { action.apply(o) }",
    "            }",
    "        }",
    "",
    "        method executableComponentsDo(action) {",
    "            // iterate over my executable code, including",
    "            // field declarations (since they may have initializers)",
    "            value.do { o ->",
    "                if (o.isExecutable) then { action.apply(o) }",
    "            }",
    "        }",
    "",
    "        method scope:=(st) {",
    "            // sets up the 2-way conection between this node",
    "            // and the symbol table that defines the scope that I open.",
    "            symbolTable := st",
    "            st.node := self",
    "        }",
    "        method body { value }",
    "        method returnsObject { true }",
    "        method returnedObjectScope { scope }",
    "        method canInherit { inTrait.not }   // an object can inherit if not in a trait",
    "        method canUse { true }",
    "        method isObject { true }",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitObject(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                if (false != superclass) then {",
    "                    superclass.accept(visitor) from(newChain)",
    "                }",
    "                usedTraits.do { t -> t.accept(visitor) from(newChain) }",
    "                value.do { x -> x.accept(visitor) from(newChain) }",
    "            }",
    "        }",
    "        method nameString {",
    "            if (name == \"object\") then {",
    "                \"object_on_line_{line}\"",
    "            } else {",
    "                name",
    "            }",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.value := listMap(value, blk) ancestors(newChain)",
    "            n.superclass := maybeMap(superclass, blk) ancestors(newChain)",
    "            n.usedTraits := listMap(usedTraits, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth') {",
    "            var depth := depth'",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth)",
    "            s := \"{s}\\n{spc}Name: {self.name}\"",
    "            if (false != self.superclass) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"Superclass: \" ++",
    "                        self.superclass.pretty(depth + 1)",
    "            }",
    "            if (usedTraits.isEmpty.not) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"Traits:\"",
    "                usedTraits.do { t ->",
    "                    s := \"{s}\\n{spc}  {t.pretty(depth + 1)}\"",
    "                }",
    "            }",
    "            value.do { x ->",
    "                s := s ++ \"\\n\"++ spc ++ x.pretty(depth + 1)",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            def spc = \"    \" * depth",
    "            var s := \"object \\{\"",
    "            if (inTrait) then { s := s ++ \"   // trait\" }",
    "            if (inClass) then { s := s ++ \"   // class\" }",
    "            if (false != superclass) then {",
    "                s := s ++ \"\\n\" ++ superclass.toGrace(depth + 1)",
    "            }",
    "            usedTraits.do { t -> s := s ++ \"\\n\" ++ t.toGrace(depth + 1) }",
    "            value.do { x ->",
    "                s := s ++ \"\\n\" ++ spc ++ \"    \" ++ x.toGrace(depth + 1)",
    "            }",
    "            s := s ++ \"\\n\" ++ spc ++ \"\\}\"",
    "            s",
    "        }",
    "        method shallowCopy {",
    "            objectNode.new(emptySeq, false).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            name := other.name",
    "            value := other.value",
    "            superclass := other.superclass",
    "            usedTraits := other.usedTraits",
    "            inClass := other.inClass",
    "            inTrait := other.inTrait",
    "            annotations := other.annotations",
    "            self",
    "        }",
    "        method asString {",
    "            kind ++ \" \" ++ nameString",
    "        }",
    "    }",
    "}",
    "def arrayNode is public = object {",
    "  class new(values) {",
    "    inherit baseNode",
    "    def kind is public = \"array\"",
    "    var value is public := values",
    "    method isSequenceConstructor { true }",
    "    method end -> Position {",
    "        if (value.isEmpty) then {",
    "            positionOfNext \"]\" after (start)",
    "        } else {",
    "            positionOfNext \"]\" after (value.last.end)",
    "        }",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitArray(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            for (self.value) do { ax ->",
    "                ax.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := listMap(value, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth)",
    "        for (self.value) do { ax ->",
    "            s := s ++ \"\\n\"++ spc ++ ax.pretty(depth+1)",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        var s := \"[\"",
    "        for (self.value.indices) do { i ->",
    "            s := s ++ self.value.at(i).toGrace(0)",
    "            if (i < self.value.size) then {",
    "                s := s ++ \", \"",
    "            }",
    "        }",
    "        s := s ++ \"]\"",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        arrayNode.new(emptySeq).shallowCopyFieldsFrom(self)",
    "    }",
    "  }",
    "}",
    "class outerNode(nodes) {",
    "    // references an object outside the current object.",
    "    // nodes, a sequence of objectNodes, tells us which one.",
    "    // The object that we refer to is the one OUTSIDE nodes.last",
    "    inherit baseNode",
    "    def kind is public = \"outer\"",
    "    def theObjects is public = nodes",
    "    method numberOfLevels { theObjects.size }",
    "    method asString { \"‹object outside that at line {theObjects.last.line}›\" }",
    "    method pretty(depth) { basePretty(depth) ++ asString }",
    "    method accept(visitor) from (ac) {",
    "        visitor.visitOuter(self) up (ac)",
    "        // don't visit theObject, since this would introduce a cycle",
    "    }",
    "    method toGrace(depth) {",
    "        \"outer\" ++ (\".outer\" * (theObjects.size - 1))",
    "    }",
    "    method isOuter { true }",
    "    method isSelfOrOuter { true }",
    "    method shallowCopy {",
    "        outerNode(theObjects).shallowCopyFieldsFrom(self)",
    "    }",
    "    method map (blk) ancestors (ac) {",
    "        var nd := shallowCopy",
    "        blk.apply(nd, ac)",
    "    }",
    "    def end is public = if (line == 0) then { noPosition } else {",
    "        line (line) column (linePos + 4)",
    "    }",
    "}",
    "def memberNode is public = object {",
    "    method new(request, receiver) scope(s) {",
    "        // Represents a dotted request ‹receiver›.‹request› with no arguments.",
    "        def result = new(request, receiver)",
    "        result.scope := s",
    "        result",
    "    }",
    "    class new(request, receiver') {",
    "        // Represents a dotted request ‹receiver›.‹request› with no arguments.",
    "        inherit baseNode",
    "        def kind is public = \"member\"",
    "        var value:String is public := request",
    "        var receiver is public := receiver'",
    "        var generics is public := false",
    "        var isSelfRequest is public := false",
    "        var isTailCall is public := false      // is possibly the result of a method",
    "        var isFresh is public := false         // calls a fresh method",
    "        method end -> Position {",
    "            if (receiver.isImplicit) then {",
    "                positionOfNext (request) after (start)",
    "            } else {",
    "                positionOfNext (request) after (receiver.end)",
    "            }",
    "        }",
    "        method onSelf {",
    "            isSelfRequest := true",
    "            self",
    "        }",
    "        method withGenericArgs(gens) {",
    "            generics := gens",
    "            self",
    "        }",
    "        method reqStart is confidential {",
    "            // the position of the start of the ‹request› in this ‹receiver›.‹request›",
    "            if (receiver.isImplicit) then {",
    "                start",
    "            } else {",
    "                def reqEnd = positionOfNext (request) after (receiver.end)",
    "                line (reqEnd.line) column (reqEnd.column - request.size + 1)",
    "            }",
    "        }",
    "        method nameString { value }",
    "        method canonicalName { value }",
    "        method isMember { true }",
    "        method isCall { true }",
    "",
    "        method parts { list.with(requestPart.request(nameString).setStart(reqStart)) }",
    "        method arguments { emptySeq }",
    "        method argumentsDo(action) { }",
    "        method numArgs { 0 }",
    "        method numTypeArgs {",
    "            if (false == generics) then { 0 } else { generics.size }",
    "        }",
    "        method hasTypeArgs { false ≠ generics }",
    "",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitMember(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                if (false != generics) then {",
    "                    generics.do { each -> each.accept(visitor) from(newChain) }",
    "                }",
    "                receiver.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "        method isSelfOrOuter {",
    "            receiver.isSelfOrOuter",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.receiver := receiver.map(blk) ancestors(newChain)",
    "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth)",
    "            s := s ++ if (isSelfRequest) then { \" on self\\n\" } else { \"\\n\" }",
    "            s := s ++ spc ++ \"Receiver: \" ++ receiver.pretty(depth) ++ \"\\n\"",
    "            s := s ++ spc ++ \"Method Name: \" ++ parts.first.pretty(depth)",
    "            if (false != generics) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"Generics:\"",
    "                for (generics) do {g->",
    "                    s := s ++ \"\\n\" ++ spc ++ \"  \" ++ g.pretty(depth+1)",
    "                }",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            var s := \"\"",
    "            if ((receiver.isImplicit || receiver.isSelfOrOuter).not) then {",
    "                s := receiver.toGrace(depth) ++ \".\"",
    "            }",
    "            s := s ++ self.value",
    "            if (false != generics) then {",
    "                s := s ++ \"⟦\"",
    "                for (1..(generics.size - 1)) do {ix ->",
    "                    s := s ++ generics.at(ix).toGrace(depth + 1) ++ \", \"",
    "                }",
    "                s := s ++ generics.last.toGrace(depth + 1) ++ \"⟧\"",
    "            }",
    "            s",
    "        }",
    "        method asString { toGrace 0 }",
    "        method asIdentifier {",
    "            // make and return an identifiderNode for my request",
    "            if (scope.variety == \"fake\") then {",
    "                ProgrammingError.raise \"asIdentifier requested on {pretty 0} when scope was fake\"",
    "            }",
    "            def resultNode = identifierNode.new (nameString, false) scope (scope)",
    "            resultNode.inRequest := true",
    "            resultNode.line := line",
    "            resultNode.linePos := linePos",
    "            return resultNode",
    "        }",
    "        method shallowCopy {",
    "            memberNode.new(nameString, receiver).shallowCopyFieldsFrom(self)",
    "        }",
    "        method statementName { \"expression\" }",
    "        method postCopy(other) {",
    "            generics := other.generics",
    "            isSelfRequest := other.isSelfRequest",
    "            isTailCall := other.isTailCall",
    "            self",
    "        }",
    "    }",
    "}",
    "def genericNode is public = object {",
    "  class new(base, arguments) {",
    "    // represents an application of a parameterized type to some arguments.",
    "    inherit baseNode",
    "    def kind is public = \"generic\"",
    "    var value is public := base",
    "        // in a generic application, `value` is the applied type",
    "        // e.g. in List⟦Number⟧, value is Identifier‹List›",
    "    var args is public := arguments",
    "    method end -> Position { positionOfNext \"⟧\" after (args.last.end) }",
    "    method nameString { value.nameString }",
    "    method asString { toGrace 0 }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitGeneric(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.value.accept(visitor) from(newChain)",
    "            for (self.args) do { p ->",
    "                p.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.args := listMap(args, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        var s := \"{basePretty(depth)}({value.pretty(depth)})⟦\"",
    "        args.do { each -> s := s ++ each.pretty(depth+2) }",
    "            separatedBy { s := s ++ \", \" }",
    "        s ++ \"⟧\"",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        var s := nameString ++ \"⟦\"",
    "        args.do { each -> s := s ++ each.toGrace(0) }",
    "            separatedBy { s := s ++ \", \" }",
    "        s ++ \"⟧\"",
    "    }",
    "    method shallowCopy {",
    "        genericNode.new(value, args).shallowCopyFieldsFrom(self)",
    "    }",
    "  }",
    "}",
    "",
    "class typeParametersNode(params') whereClauses (conditions) {",
    "    inherit baseNode",
    "    def kind is public = \"typeparams\"",
    "    var params is public := params'",
    "    var whereClauses is public := conditions",
    "    method asString { toGrace 0 }",
    "    method declarationKindWithAncestors(ac) { k.typeparam }",
    "    once method end -> Position {",
    "        if (whereClauses.isEmpty) then {",
    "            positionOfNext \"⟧\" after (params.last.end)",
    "        } else {",
    "            positionOfNext \"⟧\" after (whereClauses.last.end)",
    "        }",
    "    }",
    "",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitTypeParameters(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            params.do { p ->",
    "                p.accept(visitor) from(newChain)",
    "            }",
    "            whereClauses.do { w ->",
    "                w.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method do(blk) {",
    "        params.do(blk)",
    "    }",
    "    method do(blk) separatedBy (sepBlk) {",
    "        params.do(blk) separatedBy (sepBlk)",
    "    }",
    "    method size { params.size }",
    "    method last { params.last }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.params := listMap(params, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := spc ++ basePretty(depth) ++ \"⟦\"",
    "        params.do { each -> s := s ++ each.pretty(depth+2) }",
    "            separatedBy { s := s ++ \", \" }",
    "        s ++ \"⟧\"",
    "    }",
    "    method toGrace(depth:Number) -> String {",
    "        var s := \"⟦\"",
    "        params.do { each -> s := \"{s}{each.toGrace(depth)}\" }",
    "            separatedBy { s := s ++ \", \" }",
    "        s ++ \"⟧\"",
    "    }",
    "    method postCopy(other) {",
    "        params := other.params",
    "        whereClauses := other.whereClauses",
    "        self",
    "    }",
    "    method shallowCopy {",
    "        typeParametersNode(emptySeq) whereClauses(emptySeq).shallowCopyFieldsFrom(self)",
    "    }",
    "}",
    "def identifierNode is public = object {",
    "",
    "    method new(name, dtype) scope(s) {",
    "        def result = new(name, dtype)",
    "        result.scope := s",
    "        result",
    "    }",
    "",
    "    var wildcardCount := 0",
    "    method wildcard(dtype) {",
    "        wildcardCount := wildcardCount + 1",
    "        def idNode = new(\"__{wildcardCount}\", dtype)",
    "        idNode.wildcard := true",
    "        idNode.end := line (idNode.line) column (idNode.linePos)",
    "        idNode",
    "    }",
    "",
    "    class new(name', dtype') {",
    "        inherit baseNode",
    "        def kind is public = \"identifier\"",
    "        var value is public := name'",
    "        var wildcard is public := false",
    "        var dtype is public := dtype'",
    "        var isBindingOccurrence is public := false",
    "        var isAssigned is public := false",
    "        var inRequest is public := false",
    "        var generics is public := false",
    "        var isDeclaredByParent is public := false",
    "        var end:Position is public := if (line ≠ 0) then {",
    "            line (line) column (linePos + value.size - 1)",
    "        } else {",
    "            line (line) column (linePos-1)",
    "        }",
    "",
    "        method bindingOccurrence { isBindingOccurrence := true }",
    "        method appliedOccurrence { isBindingOccurrence := false }",
    "",
    "        method name { value }",
    "        method name:=(nu) {",
    "            value := nu",
    "            end := line (line) column (linePos + nu.size - 1)",
    "        }",
    "        method nameString { value }",
    "        var canonicalName is public := value",
    "        method quoted { value.quoted }",
    "        method isIdentifier { true }",
    "",
    "        method isSelf { \"self\" == value }",
    "        method isSuper { \"super\" == value }",
    "        method isPrelude { \"prelude\" == value }",
    "        method isOuter {",
    "            if (\"outer\" == value) then { return true }",
    "            if (\"prelude\" == value) then { return true }",
    "            if (\"module()object\" == value) then { return true }",
    "            return false",
    "        }",
    "        method isSelfOrOuter {",
    "            if (isSelf) then { return true }",
    "            if (isOuter) then { return true }",
    "            return false",
    "        }",
    "        method isAppliedOccurrence {",
    "            if (wildcard) then {",
    "                false",
    "            } else {",
    "                isBindingOccurrence.not",
    "            }",
    "        }",
    "        method declarationKindWithAncestors(ac) {",
    "            ac.parent.declarationKindWithAncestors(ac)",
    "        }",
    "        method inTypePositionWithAncestors(ac) {",
    "            // am I used by my parent node as a type?",
    "            // This is a hack, used as a subsitute for having information in the .gct",
    "            // telling us which identifiers represent types",
    "            if (ac.isEmpty) then { return false }",
    "            ac.parent.usesAsType(self)",
    "        }",
    "        method usesAsType(aNode) {",
    "            aNode == dtype",
    "        }",
    "        method numTypeArgs {",
    "            if (false == generics) then { 0 } else { generics.size }",
    "        }",
    "        method hasTypeArgs { false ≠ generics }",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitIdentifier(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                if (false != self.dtype) then {",
    "                    self.dtype.accept(visitor) from(newChain)",
    "                }",
    "                if (false != generics) then {",
    "                    generics.do { each -> each.accept(visitor) from(newChain) }",
    "                }",
    "            }",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
    "            n.generics := maybeListMap(generics, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth)",
    "            if ( wildcard ) then {",
    "                s := s ++ \" Wildcard\"",
    "            } elseif { isBindingOccurrence } then {",
    "                s := s ++ \"Binding‹{value}›\"",
    "            } else {",
    "                s := s ++ \"‹{value}›\"",
    "            }",
    "            if (false != self.dtype) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"  Type: \"",
    "                s := s ++ self.dtype.pretty(depth + 2)",
    "            }",
    "            if (false != generics) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"Generics:\"",
    "                for (generics) do {g->",
    "                    s := s ++ \"\\n\" ++ spc ++ \"  \" ++ g.pretty(depth + 2)",
    "                }",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            var s",
    "            if(self.wildcard) then {",
    "                s := \"_\"",
    "            } else {",
    "                s := self.value",
    "            }",
    "            if (false != self.dtype) then {",
    "                s := s ++ \":\" ++ self.dtype.toGrace(depth + 1)",
    "            }",
    "            if (false != generics) then {",
    "                s := s ++ \"⟦\"",
    "                for (1..(generics.size - 1)) do {ix ->",
    "                    s := s ++ generics.at(ix).toGrace(depth + 1) ++ \", \"",
    "                }",
    "                s := s ++ generics.last.toGrace(depth + 1) ++ \"⟧\"",
    "            }",
    "            s",
    "        }",
    "",
    "        method asString {",
    "            if (isBindingOccurrence) then {",
    "                \"identifierBinding‹{value}›\"",
    "            } else {",
    "                \"identifier‹{value}›\"",
    "            }",
    "        }",
    "        method shallowCopy {",
    "            identifierNode.new(value, dtype).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            wildcard := other.wildcard",
    "            isBindingOccurrence := other.isBindingOccurrence",
    "            isDeclaredByParent := other.isDeclaredByParent",
    "            isAssigned := other.isAssigned",
    "            inRequest := other.inRequest",
    "            isDeclaredByParent := other.isDeclaredByParent",
    "            generics := other.generics",
    "            end := other.end",
    "            canonicalName := other.canonicalName",
    "            self",
    "        }",
    "        method statementName { \"expression\" }",
    "    }",
    "}",
    "",
    "def typeType is public = identifierNode.new(\"Type\", false)",
    "def unknownType is public = identifierNode.new(\"Unknown\", typeType)",
    "",
    "def stringNode is public = object {",
    "    method new(v) scope(s) {",
    "        def result = new(v)",
    "        result.scope := s",
    "        result",
    "    }",
    "",
    "    class new(v) {",
    "        inherit baseNode",
    "        def kind is public = \"string\"",
    "        var value is public := v",
    "        var end is public := line (line) column (linePos + v.size + 1)",
    "            // +1 to allow for quotes",
    "",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            visitor.visitString(self) up(ac)",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            \"{basePretty(depth)}({self.value})\"",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            def q = \"\\\"\"",
    "            q ++ value.quoted ++ q",
    "        }",
    "        method asString { \"string {toGrace 0}\" }",
    "        method shallowCopy {",
    "            stringNode.new(value).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            end := other.end",
    "            self",
    "        }",
    "        method statementName { \"expression\" }",
    "        method isDelimited { true }",
    "        method isConstant { true }",
    "    }",
    "}",
    "def numNode is public = object {",
    "    class new(val) {",
    "        inherit baseNode",
    "        def kind is public = \"num\"",
    "        var value is public := val",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            visitor.visitNum(self) up(ac)",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            \"{basePretty(depth)}({self.value})\"",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            self.value.asString",
    "        }",
    "        method asString { \"num {value}\" }",
    "        method shallowCopy {",
    "            numNode.new(value).shallowCopyFieldsFrom(self)",
    "        }",
    "        method statementName { \"expression\" }",
    "        method isDelimited { true }",
    "        method isConstant { true }",
    "    }",
    "}",
    "def opNode is public = object {",
    "  class new(op, l, r) {",
    "    inherit baseNode",
    "    def kind is public = \"op\"",
    "    def value is public = op     // a String",
    "    var left is public := l",
    "    var right is public := r",
    "    var generics is public := false",
    "    var isTailCall is public := false      // is possibly the result of a method",
    "    var isSelfRequest is public := false",
    "",
    "    method start -> Position { left.start }",
    "    method end -> Position { right.end }",
    "    method onSelf {",
    "        isSelfRequest := true",
    "        self",
    "    }",
    "    method opPos is confidential {",
    "        // the position of the start of the ‹op› in this ‹left› ‹op› ‹right›",
    "        positionOfNext (value) after (left.end)",
    "    }",
    "    method isSimple { false }    // needs parens when used as receiver",
    "    method nameString { value ++ \"(1)\" }",
    "    method canonicalName { value ++ \"(_)\" }",
    "    method receiver { left }",
    "    method isCall { true }",
    "",
    "    method parts {",
    "        list.with(requestPart.request (value) withArgs [right] .setStart(opPos))",
    "    }",
    "    method arguments { [ right ] }",
    "    method argumentsDo(action) { action.apply(right) }",
    "    method numArgs { 1 }",
    "    method numTypeArgs { 0 }",
    "",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitOp(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.left.accept(visitor) from(newChain)",
    "            self.right.accept(visitor) from(newChain)",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.left := left.map(blk) ancestors(newChain)",
    "        n.right := right.map(blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := \"{basePretty(depth)}‹{self.nameString}›\"",
    "        s := s ++ \"\\n\"",
    "        s := s ++ spc ++ self.left.pretty(depth + 1)",
    "        s := s ++ \"\\n\"",
    "        s := s ++ spc ++ self.right.pretty(depth + 1)",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        var s := \"\"",
    "        if ((self.left.kind == \"op\") && {self.left.value != self.value}) then {",
    "            s := \"(\" ++ self.left.toGrace(0) ++ \")\"",
    "        } else {",
    "            s := self.left.toGrace(0)",
    "        }",
    "        if (self.value == \"..\") then {",
    "            s := s ++ self.value",
    "        } else {",
    "            s := s ++ \" \" ++ self.value ++ \" \"",
    "        }",
    "        if ((self.right.kind == \"op\") && {self.right.value != self.value}) then {",
    "            s := s ++ \"(\" ++ self.right.toGrace(0) ++ \")\"",
    "        } else {",
    "            s := s ++ self.right.toGrace(0)",
    "        }",
    "        s",
    "    }",
    "    method asIdentifier {",
    "        // make an identifiderNode with the same properties ac me",
    "        def resultNode = identifierNode.new (nameString, false) scope (scope)",
    "        resultNode.inRequest := true",
    "        resultNode.line := line",
    "        resultNode.linePos := linePos",
    "        resultNode.canonicalName := canonicalName",
    "        return resultNode",
    "    }",
    "    method shallowCopy {",
    "        opNode.new(value, nullNode, nullNode).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        isTailCall := other.isTailCall",
    "        isSelfRequest := other.isSelfRequest",
    "        self",
    "    }",
    "  }",
    "}",
    "def bindNode is public = object {",
    "  class new(dest', val') {",
    "    // an assignment, or a request of a setter-method",
    "    inherit baseNode",
    "    def kind is public = \"bind\"",
    "    var dest is public := dest'",
    "    var value is public := val'",
    "",
    "    method end -> Position { value.end }",
    "    method nameString { dest.nameString ++ \":=(1)\" }",
    "    method canonicalName { dest.nameString ++ \":=(_)\" }",
    "    method isBind { true }",
    "    method asString { \"bind {value}\" }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitBind(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.dest.accept(visitor) from(newChain)",
    "            self.value.accept(visitor) from(newChain)",
    "        }",
    "    }",
    "    method generics { false }   // an assignable variable can't have type params.",
    "                                // But perhaps a writer method can?",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.dest := dest.map(blk) ancestors(newChain)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ self.dest.pretty(depth + 1)",
    "        s := s ++ \"\\n\"",
    "        s := s ++ spc ++ self.value.pretty(depth + 1)",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := self.dest.toGrace(depth + 1)",
    "        s := s ++ \" := \" ++ self.value.toGrace(depth + 1)",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        bindNode.new(dest, value).shallowCopyFieldsFrom(self)",
    "    }",
    "    method statementName { \"assignment or assigment request\" }",
    "  }",
    "}",
    "def defDecNode is public = object {",
    "    method new(name', val, dtype') scope(s) {",
    "        def result = new(name', val, dtype')",
    "        result.scope := s",
    "        result",
    "    }",
    "",
    "    class new(name', val, dtype') {",
    "        inherit baseNode",
    "        def kind is public = \"defdec\"",
    "        var name is public := name'",
    "        var value is public := val",
    "        var dtype is public := dtype'",
    "        var parentKind is public := \"unset\"",
    "        def nameString is public = name.nameString",
    "        var annotations is public := list [ ]",
    "        var startToken is public := false",
    "",
    "        method end -> Position { value.end }",
    "        method isPublic {",
    "            // defs are confidential by default",
    "            if (findAnnotation(self, \"public\")) then { return true }",
    "            findAnnotation(self, \"readable\")",
    "        }",
    "        method isFieldDec { true }",
    "        method isWritable { false }",
    "        method isReadable { isPublic }",
    "        method isAnnotationDecl { findAnnotation(self, \"annotation\") }",
    "        method usesAsType(aNode) {",
    "            aNode == dtype",
    "        }",
    "        method declarationKindWithAncestors(ac) { k.defdec }",
    "",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitDefDec(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                self.name.accept(visitor) from(newChain)",
    "                if (false != self.dtype) then {",
    "                    self.dtype.accept(visitor) from(newChain)",
    "                }",
    "                for (self.annotations) do { ann ->",
    "                    ann.accept(visitor) from(newChain)",
    "                }",
    "                value.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.name := name.map(blk) ancestors(newChain)",
    "            n.value := value.map(blk) ancestors(newChain)",
    "            n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
    "            n.annotations := listMap(annotations, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth) ++ \"\\n\"",
    "            s := s ++ spc ++ self.name.pretty(depth)",
    "            if (false != dtype) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"Type: \" ++ self.dtype.pretty(depth + 2)",
    "            }",
    "            if (false != value) then {",
    "                s := s ++ \"\\n\" ++ spc ++ \"Value: \" ++ value.pretty(depth + 2)",
    "            }",
    "            if (annotations.isEmpty.not) then {",
    "                s := s ++ \"\\n{spc}Annotations:\"",
    "                annotations.do { ann ->",
    "                    s := \"{s} {ann.pretty(depth + 2)}\"",
    "                }",
    "            }",
    "            if (false != comments) then {",
    "                s := s ++ comments.pretty(depth+2)",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            def spc = \"    \" * depth",
    "            var s := \"def {self.name.toGrace(0)}\"",
    "            if ((false != self.dtype) && { self.dtype.value != \"Unknown\" }) then {",
    "                s := s ++ \" : \" ++ self.dtype.toGrace(0)",
    "            }",
    "            if (self.annotations.size > 0) then {",
    "                s := s ++ \" is \"",
    "                s := s ++ self.annotations.fold { a,b ->",
    "                    if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0)",
    "                } startingWith \"\"",
    "            }",
    "            if (false != self.value) then {",
    "                s := s ++ \" = \" ++ self.value.toGrace(depth)",
    "            }",
    "            s",
    "        }",
    "        method shallowCopy {",
    "            defDecNode.new(name, value, dtype).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            startToken := other.startToken",
    "            parentKind := other.parentKind",
    "            self",
    "        }",
    "        method statementName { \"definition\" }",
    "    }",
    "}",
    "def varDecNode is public = object {",
    "  class new(name', val', dtype') {",
    "    inherit baseNode",
    "    def kind is public = \"vardec\"",
    "    var name is public := name'",
    "    var value is public := val'",
    "    var dtype is public := dtype'",
    "    var parentKind is public := \"unset\"",
    "    def nameString is public = name.value",
    "    var annotations is public := list [ ]",
    "",
    "    method end -> Position {",
    "        if (false ≠ value) then { return value.end }",
    "        if (annotations.isEmpty.not) then { return annotations.last.end }",
    "        if (false ≠ dtype) then { return dtype.end }",
    "        return name.end",
    "    }",
    "    method isPublic {",
    "        // vars are confidential by default",
    "        findAnnotation(self, \"public\")",
    "    }",
    "    method isWritable {",
    "        if (findAnnotation(self, \"public\")) then { return true }",
    "        if (findAnnotation(self, \"writable\")) then { return true }",
    "        false",
    "    }",
    "    method isReadable {",
    "        if (findAnnotation(self, \"public\")) then { return true }",
    "        if (findAnnotation(self, \"readable\")) then { return true }",
    "        false",
    "    }",
    "    method isFieldDec { true }",
    "",
    "    method usesAsType(aNode) {",
    "        aNode == dtype",
    "    }",
    "",
    "    method declarationKindWithAncestors(ac) { k.vardec }",
    "",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitVarDec(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.name.accept(visitor) from(newChain)",
    "            if (false != self.dtype) then {",
    "                self.dtype.accept(visitor) from(newChain)",
    "            }",
    "            for (self.annotations) do { ann ->",
    "                ann.accept(visitor) from(newChain)",
    "            }",
    "            if (false != self.value) then {",
    "                self.value.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.name := name.map(blk) ancestors(newChain)",
    "        n.value := maybeMap(value, blk) ancestors(newChain)",
    "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
    "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ self.name.pretty(depth + 1)",
    "        if (false != self.dtype) then {",
    "            s := s ++ \"\\n\" ++ spc ++ \"Type: \"",
    "            s := s ++ self.dtype.pretty(depth + 2)",
    "        }",
    "        if (false != self.value) then {",
    "            s := s ++ \"\\n\" ++ spc ++ \"Value: \"",
    "            s := s ++ self.value.pretty(depth + 2)",
    "        }",
    "        if (false != comments) then {",
    "            s := s ++ comments.pretty(depth+2)",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        def spc = \"    \" * depth",
    "        var s := \"var {self.name.toGrace(0)}\"",
    "        if ((false != self.dtype) && {",
    "                self.dtype.value != \"Unknown\"",
    "        }) then {",
    "            s := s ++ \" : \" ++ self.dtype.toGrace(0)",
    "        }",
    "        if (self.annotations.size > 0) then {",
    "            s := s ++ \" is \"",
    "            s := s ++ self.annotations.fold { a,b ->",
    "                if (a != \"\") then { a ++ \", \" } else { \"\" } ++ b.toGrace(0)",
    "            } startingWith \"\"",
    "        }",
    "        if (false != self.value) then {",
    "            s := s ++ \" := \" ++ self.value.toGrace(depth)",
    "        }",
    "        s",
    "    }",
    "    method shallowCopy {",
    "        varDecNode.new(name, value, dtype).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        parentKind := other.parentKind",
    "        self",
    "    }",
    "    method statementName { \"variable declaration\" }",
    "",
    "  }",
    "}",
    "def importNode is public = object {",
    "  class new(path', name', dtype') {",
    "    inherit baseNode",
    "    def kind is public = \"import\"",
    "    var value is public := name'",
    "    var path is public := path'",
    "    var annotations is public := list [ ]",
    "    var dtype is public := dtype'",
    "    method end -> Position { value.end }",
    "    method isImport { true }",
    "    method isExternal { true }",
    "    method isExecutable { false }",
    "    method name { value }",
    "    method nameString { value.nameString }",
    "    method isPublic {",
    "        // imports, like defs, are confidential by default",
    "        if (findAnnotation(self, \"public\")) then { return true }",
    "        findAnnotation(self, \"readable\")",
    "    }",
    "    method moduleName {",
    "        var bnm := \"\"",
    "        for (path) do {c->",
    "            if (c == \"/\") then {",
    "                bnm := \"\"",
    "            } else {",
    "                bnm := bnm ++ c",
    "            }",
    "        }",
    "        bnm",
    "    }",
    "    method isWritable { false }",
    "    method isReadable { isPublic }",
    "    method declarationKindWithAncestors(ac) { k.defdec }",
    "    method usesAsType(aNode) {",
    "        aNode == dtype",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitImport(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            for (self.annotations) do { ann ->",
    "                ann.accept(visitor) from(newChain)",
    "            }",
    "            self.value.accept(visitor) from(newChain)",
    "            if (false != self.dtype) then {",
    "                self.dtype.accept(visitor) from(newChain)",
    "            }",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
    "        n.annotations := listMap(annotations, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ \"{spc}Path: {path}\\n\"",
    "        s := s ++ \"{spc}Identifier: {value}\\n\"",
    "        if (annotations.size > 0) then {",
    "            s := s ++ \"{spc}Anotations: {annotations}\\n\"",
    "        }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        \"import \\\"{self.path}\\\" ac {nameString}\"",
    "    }",
    "    method shallowCopy {",
    "        importNode.new(path, nullNode, false).shallowCopyFieldsFrom(self)",
    "    }",
    "  }",
    "}",
    "def dialectNode is public = object {",
    "  method fromToken(stringTok) {",
    "    def result = new(stringTok.value)",
    "    result.end := line (stringTok.line) column (stringTok.linePos + stringTok.size - 1)",
    "    result",
    "  }",
    "  class new(pathString) {",
    "    inherit baseNode",
    "    def kind is public = \"dialect\"",
    "    var value is public := pathString",
    "    var end is public := noPosition",
    "",
    "    method isDialect { true }",
    "    method isExternal { true }",
    "    method isExecutable { false }",
    "    method moduleName {",
    "        var bnm := \"\"",
    "        for (value) do {c->",
    "            if (c == \"/\") then {",
    "                bnm := \"\"",
    "            } else {",
    "                bnm := bnm ++ c",
    "            }",
    "        }",
    "        bnm",
    "    }",
    "    method path {",
    "        value",
    "    }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        visitor.visitDialect(self) up(ac)",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ \"{spc}    Path: {self.value}\"",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        \"dialect \\\"{self.value}\\\"\"",
    "    }",
    "    method shallowCopy {",
    "        dialectNode.new(value).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        end := other.end",
    "        self",
    "    }",
    "  }",
    "}",
    "def returnNode is public = object {",
    "  class new(expr) {",
    "    inherit baseNode",
    "    def kind is public = \"return\"",
    "    var value is public := expr",
    "    var dtype is public := false  // the enclosing method's declared return type",
    "",
    "    method end -> Position {",
    "        if (noPosition ≠ value.end) then {",
    "            value.end",
    "        } else {",
    "            line (line) column (linePos + 5)",
    "        }",
    "    }",
    "    method isReturn { true }",
    "    method accept(visitor : AstVisitor) from(ac) {",
    "        if (visitor.visitReturn(self) up(ac)) then {",
    "            def newChain = ac.extend(self)",
    "            self.value.accept(visitor) from(newChain)",
    "        }",
    "    }",
    "    method map(blk) ancestors(ac) {",
    "        var n := shallowCopy",
    "        def newChain = ac.extend(n)",
    "        n.value := value.map(blk) ancestors(newChain)",
    "        n.dtype := maybeMap(dtype, blk) ancestors(newChain)",
    "        blk.apply(n, ac)",
    "    }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        var s := basePretty(depth) ++ \"\\n\"",
    "        s := s ++ spc ++ self.value.pretty(depth + 1)",
    "        if (false ≠ dtype) then { s := \"{s} (type {dtype.toGrace 0})\" }",
    "        s",
    "    }",
    "    method toGrace(depth : Number) -> String {",
    "        \"return \" ++ self.value.toGrace(depth)",
    "    }",
    "    method shallowCopy {",
    "        returnNode.new(value).shallowCopyFieldsFrom(self)",
    "    }",
    "    method postCopy(other) {",
    "        dtype := other.dtype",
    "        self",
    "    }",
    "    method returnsObject { value.returnsObject }",
    "    method returnedObjectScope {",
    "        // precondition: returns object",
    "        value.returnedObjectScope",
    "    }",
    "    method resultExpression { value }",
    "  }",
    "}",
    "def inheritNode is public = object {",
    "    method new(expr) scope(s) {",
    "        def result = new(expr)",
    "        result.scope := s",
    "        result",
    "    }",
    "    class new(expr) {",
    "        inherit baseNode",
    "        def kind is public = \"inherit\"",
    "        var value is public := expr",
    "        var providedNames is public := emptySet",
    "        var aliases is public := list [ ]",
    "        var exclusions is public := list [ ]",
    "        var isUse is public := false  // this is a `use trait` clause, not an inherit",
    "",
    "        method end -> Position { value.end }",
    "        method isLegalInTrait { isUse }",
    "        method isInherits { true }",
    "        method inheritFromMember { value.isMember }",
    "        method inheritFromCall { value.isCall }",
    "        method isExecutable { false }",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitInherits(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                value.accept(visitor) from(newChain)",
    "                aliases.do { a -> a.accept(visitor) from(newChain) }",
    "                exclusions.do { e -> e.accept(visitor) from(newChain) }",
    "            }",
    "        }",
    "        method declarationKindWithAncestors(ac) {",
    "            // identifiers declared in an inherit statement are aliases for",
    "            // methods.  We treat them ac methods, because (unlike inherited names)",
    "            // they can't be overridden by local methods.",
    "            k.methdec",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.value := value.map(blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := basePretty(depth)",
    "            if (isUse) then { s := \"{s} (use)\" }",
    "            s := s ++ \"\\n\" ++ spc ++ self.value.pretty(depth + 1)",
    "            aliases.do { a ->",
    "                s := \"{s}\\n{a.pretty(depth + 1)}\"",
    "            }",
    "            if (exclusions.isEmpty.not) then { s := \"{s}\\n{spc}\" }",
    "            exclusions.do { e ->",
    "                s := \"{s}  exclude {e}\"",
    "            }",
    "            if (providedNames.isEmpty.not) then {",
    "                s := s ++ \"\\n{spc}Provided names: {list.withAll(providedNames).sort}\"",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth : Number) -> String {",
    "            var s := \"\"",
    "            repeat (depth) times {",
    "                s := s ++ \"    \"",
    "            }",
    "            s := s ++ if (isUse) then { \"use \" } else { \"inherit \" }",
    "            s := s ++ self.value.toGrace(0)",
    "            aliases.do { a ->",
    "                s := \"{s} {a} \"",
    "            }",
    "            exclusions.do { e ->",
    "                s := \"{s} exclude {e.nameString} \"",
    "            }",
    "            s",
    "        }",
    "        method asString {",
    "            if (isUse) then { \"use \" } else { \"inherit \" } ++ value.toGrace 0",
    "        }",
    "        method nameString { value.toGrace(0) }",
    "        method addAlias (newSig) for (oldSig) {",
    "            aliases.push(aliasNew(newSig) old(oldSig))",
    "        }",
    "        method addExclusion(meth) {",
    "            exclusions.push(meth)",
    "        }",
    "        method shallowCopy {",
    "            inheritNode.new(nullNode).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            providedNames := other.providedNames",
    "            aliases := other.aliases",
    "            exclusions := other.exclusions",
    "            isUse := other.isUse",
    "            self",
    "        }",
    "        method statementName {",
    "            if (isUse) then { \"use\" } else { \"inherit\" }",
    "        }",
    "    }",
    "}",
    "type AliasPair = {",
    "    newName",
    "    oldName",
    "    newSignature",
    "    oldSignature",
    "}",
    "",
    "class aliasNew(n) old(o) {",
    "    inherit baseNode",
    "    use equality",
    "",
    "    def newSignature is public = n",
    "    def oldSignature is public = o",
    "    def kind is public = \"alias\"",
    "    method newName {newSignature.asIdentifier}",
    "    method oldName {oldSignature.asIdentifier}",
    "    method asString { \"alias {newSignature.nameString} = {oldSignature.nameString}\" }",
    "    method pretty(depth) {",
    "        def spc = \"  \" * (depth+1)",
    "        \"{spc}alias\\n{spc}  {newSignature.pretty(depth+2)}\\n{spc}  =\\n{spc}  {oldSignature.pretty(depth+2)}\"",
    "    }",
    "    method accept(visitor) from (ac) {",
    "        if (visitor.visitAlias(self) up (ac)) then {",
    "            def newChain = ac.extend(self)",
    "            newSignature.accept(visitor) from (newChain)",
    "            oldSignature.accept(visitor) from (newChain)",
    "        }",
    "    }",
    "    method declarationKindWithAncestors(ac) {",
    "        k.aliasdec",
    "    }",
    "    method hash { (newSignature.hash * 1171) + oldSignature.hash }",
    "    method isExecutable { false }",
    "    method == (other) {",
    "        match (other) case { that:AliasPair ->",
    "            (newSignature == that.newSignature) && (oldSignature == that.oldSignature)",
    "        } else {",
    "            false",
    "        }",
    "    }",
    "}",
    "def signaturePart is public = object {",
    "    method new {",
    "        partName \"\" params (list [])",
    "    }",
    "    method partName(n) scope(s) {",
    "        def result = partName(n) params (list [])",
    "        result.scope := s",
    "        result",
    "    }",
    "    method partName(n) params(ps) scope(s) {",
    "        def result = partName(n) params(ps)",
    "        result.scope := s",
    "        result",
    "    }",
    "    method partName(n) {",
    "        partName(n) params (list [])",
    "    }",
    "    class partName(n) params(ps) {",
    "        inherit baseNode",
    "        def kind is public = \"signaturepart\"",
    "        var name is public := n",
    "        var params is public := ps",
    "        var typeParams is public := false",
    "        var lineLength is public := 0",
    "",
    "        method end -> Position {",
    "            if (params.isEmpty.not) then {",
    "                return positionOfNext \")\" after (params.last.end)",
    "            }",
    "            if (false ≠ typeParams) then {",
    "                return positionOfNext \"⟧\" after (typeParams.last.end)",
    "            }",
    "            return line (line) column (linePos + name.size - 1)",
    "        }",
    "        method hasTypeParams { false ≠ typeParams }",
    "        method numTypeParams { if (hasTypeParams) then {typeParams.size} else {0} }",
    "        method numParams { params.size }",
    "        method nameString {",
    "            if (params.isEmpty) then {return name}",
    "            name ++ \"(\" ++ params.size ++ \")\"",
    "        }",
    "        method canonicalName {",
    "            if (params.isEmpty) then {return name}",
    "            var underScores := \"\"",
    "            params.do { _ -> underScores := underScores ++ \"_\" }",
    "                separatedBy { underScores := underScores ++ \",\" }",
    "            name ++ \"(\" ++ underScores ++ \")\"",
    "        }",
    "",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            if (visitor.visitSignaturePart(self) up(ac)) then {",
    "                def newChain = ac.extend(self)",
    "                if (false != typeParams) then {",
    "                    typeParams.accept(visitor) from(newChain)",
    "                }",
    "                params.do { p -> p.accept(visitor) from(newChain) }",
    "",
    "            }",
    "        }",
    "        method declarationKindWithAncestors(ac) { k.parameter }",
    "        method map(blk) ancestors(ac) {",
    "            var nd := shallowCopy",
    "            def newChain = ac.extend(nd)",
    "            nd.params := listMap(params, blk) ancestors(newChain)",
    "            nd.typeParams := maybeMap(typeParams, blk) ancestors(newChain)",
    "            blk.apply(nd, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := \"{basePretty(depth)}: {name}\"",
    "            if (hasTypeParams) then {",
    "                s := \"{s}\\n{spc}Type Parameters:\"",
    "                typeParams.do { tp ->",
    "                    s := \"{s}\\n  {spc}{tp.pretty(depth + 2)}\"",
    "                }",
    "            }",
    "            if (params.isEmpty.not) then { s := \"{s}\\n{spc}Parameters:\" }",
    "            for (params) do { p ->",
    "                s := \"{s}\\n  {spc}{p.pretty(depth + 2)}\"",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth) {",
    "            var s := name",
    "            if (false ≠ typeParams) then {",
    "                s := s ++ typeParams.toGrace(depth + 1)",
    "            }",
    "            if (params.isEmpty.not) then {",
    "                s := s ++ \"(\"",
    "                params.do { each -> s := s ++ each.toGrace(depth + 1) }",
    "                    separatedBy { s := s ++ \", \" }",
    "                s := s ++ \")\"",
    "            }",
    "            s",
    "        }",
    "        method shallowCopy {",
    "            signaturePart.partName(name) params(params)",
    "                .shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            typeParams := other.typeParams",
    "            lineLength := other.lineLength",
    "            self",
    "        }",
    "        method asString {",
    "            \"part: {nameString}\"",
    "        }",
    "    }",
    "}",
    "",
    "def requestPart is public = object {",
    "    method new { request \"\" withArgs [] }",
    "    method request(name) { request(name) withArgs [] }",
    "    method request(name) withArgs(argList) scope (s) {",
    "        def result = request(name) withArgs(argList)",
    "        result.scope := s",
    "        result",
    "    }",
    "    class request(rPart) withArgs(xs) {",
    "        inherit baseNode",
    "        def kind is public = \"callwithpart\"",
    "        var name is public := rPart",
    "        var args is public := xs",
    "        var typeArgs := emptySeq",
    "        var lineLength is public := 0",
    "",
    "        method end -> Position {",
    "            if (args.isEmpty.not) then {",
    "                return args.last.end  // there may or may not be a following `)`",
    "            }",
    "            if (typeArgs.isEmpty.not) then {",
    "                return positionOfNext \"⟧\" after (typeArgs.last.end)",
    "            }",
    "            return line (line) column (linePos + name.size - 1)",
    "        }",
    "        method nameString {",
    "            if (args.size == 0) then {return name}",
    "            name ++ \"(\" ++ args.size ++ \")\"",
    "        }",
    "",
    "        method canonicalName {",
    "            if (args.size == 0) then {return name}",
    "            var underScores := \"\"",
    "            args.do { _ -> underScores := underScores ++ \"_\" }",
    "                separatedBy { underScores := underScores ++ \",\" }",
    "            name ++ \"(\" ++ underScores ++ \")\"",
    "        }",
    "",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            n.args := listMap(args, blk) ancestors(newChain)",
    "            blk.apply(n, ac)",
    "        }",
    "        method pretty(depth) {",
    "            def spc = \"  \" * (depth+1)",
    "            var s := \"{basePretty(depth)}: {name}\"",
    "            s := \"{s}\\n{spc}Args:\"",
    "            for (args) do { a ->",
    "                s := \"{s}\\n  {spc}{a.pretty(depth + 3)}\"",
    "            }",
    "            s",
    "        }",
    "        method toGrace(depth) {",
    "            var s := name",
    "            if (typeArgs.size > 0) then {",
    "                s := s ++ \"⟦\"",
    "                typeArgs.do { tArg ->",
    "                    s := s ++ tArg.toGrace(depth + 1)",
    "                } separatedBy { s := s ++ \", \" }",
    "                s := s ++ \"⟧\"",
    "            }",
    "            if (args.size > 0) then {",
    "                def needsParens = (args.size > 1) || (args.first.isDelimited.not)",
    "                s := s ++ if (needsParens) then { \"(\" } else { \" \" }",
    "                args.do { arg ->",
    "                    s := s ++ arg.toGrace(depth)",
    "                } separatedBy {",
    "                    s := s ++ \", \"",
    "                }",
    "                if (needsParens) then { s := s ++ \")\" }",
    "            }",
    "            s",
    "        }",
    "",
    "        method shallowCopy {",
    "            requestPart.request(name) withArgs(args).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            lineLength := other.lineLength",
    "            self",
    "        }",
    "        method statementName { \"request\" }",
    "    }",
    "}",
    "",
    "def commentNode is public = object {",
    "    class new(val') {",
    "        inherit baseNode",
    "        def kind is public = \"comment\"",
    "        var value is public := val'",
    "        var isPartialLine:Boolean is public := false",
    "        var isPreceededByBlankLine is public := false",
    "        var endLine is public := util.linenum",
    "",
    "        method end -> Position { line (endLine) column (util.lines.at(endLine).size) }",
    "        method isComment { true }",
    "        method isLegalInTrait { true }",
    "        method isExecutable { false }",
    "        method asString { \"comment ({line}–{endLine}): {value}\" }",
    "        method extendCommentUsing(cmtNode) {",
    "            value := value ++ \" \" ++ cmtNode.value",
    "            endLine := cmtNode.endLine",
    "        }",
    "        method map(blk) ancestors(ac) {",
    "            var n := shallowCopy",
    "            def newChain = ac.extend(n)",
    "            blk.apply(n, ac)",
    "        }",
    "        method accept(visitor : AstVisitor) from(ac) {",
    "            visitor.visitComment(self) up(ac)",
    "        }",
    "        method pretty(depth) {",
    "            var s := \"\\n\"",
    "            repeat (depth-1) times {",
    "                s := s ++ \"  \"",
    "            }",
    "            def pb = if (isPreceededByBlankLine) then { \" > blank\" } else { \"\" }",
    "            \"{s}Comment{pb}({line}–{endLine}): ‹{value}›\"",
    "        }",
    "        method toGrace(depth) {",
    "            // Partial line comments don't start with a newline, whereas",
    "            // full-line comments do.  No newline at end in either case.",
    "            if (isPartialLine) then {",
    "                \"// (partial) {value}\"",
    "            } else {",
    "                def spc = \"    \" * depth",
    "                wrap(value) to (lineLength) prefixedBy (spc ++ \"// \")",
    "            }",
    "        }",
    "        method shallowCopy {",
    "            commentNode.new(nullNode).shallowCopyFieldsFrom(self)",
    "        }",
    "        method postCopy(other) {",
    "            value := other.value",
    "            isPartialLine := other.isPartialLine",
    "            isPreceededByBlankLine := other.isPreceededByBlankLine",
    "            endLine := other.endLine",
    "            self",
    "        }",
    "    }",
    "}",
    "",
    "method wrap(str) to (l:Number) prefixedBy (margin) {",
    "    def ind = margin.size",
    "    def len = max(ind + 4, l)",
    "    if ((ind + str.size) <= len) then {",
    "        return \"\\n\" ++ margin ++ str",
    "    }",
    "    var currBreak",
    "    var trimmedLine",
    "",
    "    try {",
    "        currBreak := str.lastIndexOf \" \" startingAt (len - ind)",
    "            ifAbsent {len - ind}",
    "        trimmedLine := str.substringFrom (1) to (currBreak).trim",
    "    } catch { ex:NoSuchMethod ->  // C string libraries lack methods",
    "        currBreak := min(len - ind, str.size)",
    "        (1..currBreak).do { ix ->",
    "            if (str.at(ix) == \" \") then { currBreak := ix }",
    "        }",
    "        var end := currBreak",
    "        while {(end >= 1) && {str.at(end) == \" \"}} do {",
    "            end := end - 1",
    "        }",
    "        var start := 1",
    "        while {(start <= str.size) && {str.at(start) == \" \"}} do {",
    "            start := start + 1",
    "        }",
    "        trimmedLine := str.substringFrom (start) to (end)",
    "    }",
    "    \"\\n\" ++ margin ++ trimmedLine ++",
    "        wrap(str.substringFrom (currBreak+1) to (str.size))",
    "            to (l) prefixedBy (margin)",
    "}",
    "",
    "",
    "type AstVisitor = {",
    "    visitIf(o) up(ac) -> Boolean",
    "    visitBlock(o) up(ac) -> Boolean",
    "    visitMatchCase(o) up(ac) -> Boolean",
    "    visitTryCatch(o) up(ac) -> Boolean",
    "    visitMethodType(o) up(ac) -> Boolean",
    "    visitSignaturePart(o) up(ac) -> Boolean",
    "    visitTypeLiteral(o) up(ac) -> Boolean",
    "    visitTypeParameters(o) up(ac) -> Boolean",
    "    visitTypeDec(o) up(ac) -> Boolean",
    "    visitMethod(o) up(ac) -> Boolean",
    "    visitCall(o) up(ac) -> Boolean",
    "    visitObject(o) up(ac) -> Boolean",
    "    visitModule(o) up(ac) -> Boolean",
    "    visitArray(o) up(ac) -> Boolean",
    "    visitMember(o) up(ac) -> Boolean",
    "    visitGeneric(o) up(ac) -> Boolean",
    "    visitIdentifier(o) up(ac) -> Boolean",
    "    visitString(o) up(ac) -> Boolean",
    "    visitNum(o) up(ac) -> Boolean",
    "    visitOp(o) up(ac) -> Boolean",
    "    visitBind(o) up(ac) -> Boolean",
    "    visitDefDec(o) up(ac) -> Boolean",
    "    visitVarDec(o) up(ac) -> Boolean",
    "    visitImport(o) up(ac) -> Boolean",
    "    visitReturn(o) up(ac) -> Boolean",
    "    visitInherits(o) up(ac) -> Boolean",
    "    visitDialect(o) up(ac) -> Boolean",
    "    visitComment(o) up(ac) -> Boolean",
    "    visitImplicit(o) up(ac) -> Boolean",
    "    visitOuter(o) up(ac) -> Boolean",
    "}",
    "",
    "class baseVisitor -> AstVisitor {",
    "    method visitIf(o) up(ac) { visitIf(o) }",
    "    method visitBlock(o) up(ac) { visitBlock(o) }",
    "    method visitMatchCase(o) up(ac) { visitMatchCase(o) }",
    "    method visitTryCatch(o) up(ac) { visitTryCatch(o) }",
    "    method visitMethodType(o) up(ac) { visitMethodType(o) }",
    "    method visitSignaturePart(o) up(ac) { visitSignaturePart(o) }",
    "    method visitTypeDec(o) up(ac) { visitTypeDec(o) }",
    "    method visitTypeLiteral(o) up(ac) { visitTypeLiteral(o) }",
    "    method visitTypeParameters(o) up(ac) { visitTypeParameters(o) }",
    "    method visitMethod(o) up(ac) { visitMethod(o) }",
    "    method visitCall(o) up(ac) { visitCall(o) }",
    "    method visitObject(o) up(ac) { visitObject(o) }",
    "    method visitModule(o) up(ac) { visitModule(o) }",
    "    method visitArray(o) up(ac) { visitArray(o) }",
    "    method visitMember(o) up(ac) { visitMember(o) }",
    "    method visitGeneric(o) up(ac) { visitGeneric(o) }",
    "    method visitIdentifier(o) up(ac) { visitIdentifier(o) }",
    "    method visitString(o) up(ac) { visitString(o) }",
    "    method visitNum(o) up(ac) { visitNum(o) }",
    "    method visitOp(o) up(ac) { visitOp(o) }",
    "    method visitBind(o) up(ac) { visitBind(o) }",
    "    method visitDefDec(o) up(ac) { visitDefDec(o) }",
    "    method visitVarDec(o) up(ac) { visitVarDec(o) }",
    "    method visitImport(o) up(ac) { visitImport(o) }",
    "    method visitReturn(o) up(ac) { visitReturn(o) }",
    "    method visitInherits(o) up(ac) { visitInherits(o) }",
    "    method visitDialect(o) up(ac) { visitDialect(o) }",
    "    method visitComment(o) up(ac) { visitComment(o) }",
    "    method visitImplicit(o) up(ac) { visitImplicit(o) }",
    "    method visitOuter(o) up(ac) -> Boolean { visitOuter(o) }",
    "    method visitAlias(o) up(ac) -> Boolean { visitAlias(o) }",
    "",
    "    method visitIf(o) -> Boolean { true }",
    "    method visitBlock(o) -> Boolean { true }",
    "    method visitMatchCase(o) -> Boolean { true }",
    "    method visitTryCatch(o) -> Boolean { true }",
    "    method visitMethodType(o) -> Boolean { true }",
    "    method visitSignaturePart(o) -> Boolean { true }",
    "    method visitTypeDec(o) -> Boolean { true }",
    "    method visitTypeLiteral(o) -> Boolean { true }",
    "    method visitTypeParameters(o) -> Boolean { true }",
    "    method visitMethod(o) -> Boolean { true }",
    "    method visitCall(o) -> Boolean { true }",
    "    method visitObject(o) -> Boolean { true }",
    "    method visitModule(o) -> Boolean { true }",
    "    method visitArray(o) -> Boolean { true }",
    "    method visitMember(o) -> Boolean { true }",
    "    method visitGeneric(o) -> Boolean { true }",
    "    method visitIdentifier(o) -> Boolean { true }",
    "    method visitString(o) -> Boolean { true }",
    "    method visitNum(o) -> Boolean { true }",
    "    method visitOp(o) -> Boolean { true }",
    "    method visitBind(o) -> Boolean { true }",
    "    method visitDefDec(o) -> Boolean { true }",
    "    method visitVarDec(o) -> Boolean { true }",
    "    method visitImport(o) -> Boolean { true }",
    "    method visitReturn(o) -> Boolean { true }",
    "    method visitInherits(o) -> Boolean { true }",
    "    method visitDialect(o) -> Boolean { true }",
    "    method visitComment(o) -> Boolean { true }",
    "    method visitImplicit(o) -> Boolean { true }",
    "    method visitOuter(o) -> Boolean { true }",
    "    method visitAlias(o) -> Boolean { true }",
    "",
    "    method asString { \"an AST visitor\" }",
    "}",
    "",
    "class pluggableVisitor(visitation:Predicate2⟦AstNode, Object⟧) -> AstVisitor {",
    "    // Manufactures a default visitor, given a 2-parameter block.",
    "    // Typically, some of the methods will be overridden.",
    "    // The visitation predicate will be applied with the AST node ac the first argument",
    "    // and the ancestor chain ac the second, and should answer true if",
    "    // the visitation is to continue and false if it is to go no deeper.",
    "",
    "    method visitIf(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitBlock(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitMatchCase(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitTryCatch(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitMethodType(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitSignaturePart(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitTypeDec(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitTypeLiteral(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitMethod(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitCall(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitObject(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitModule(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitArray(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitMember(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitGeneric(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitIdentifier(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitString(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitNum(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitOp(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitBind(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitDefDec(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitVarDec(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitImport(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitReturn(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitInherits(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitDialect(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitComment(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitImplicit(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitOuter(o) up(ac) { visitation.apply (o, ac) }",
    "    method visitAlias(o) up(ac) { visitation.apply (o, ac) }",
    "",
    "    method asString { \"a pluggable AST visitor\" }",
    "}",
    "",
    "",
    "def patternMarkVisitor = object {",
    "    inherit baseVisitor",
    "    method visitCall(c) up(ac) {",
    "        c.isPattern := true",
    "        true",
    "    }",
    "}",
    "",
    "method findAnnotation(node, annName) {",
    "    node.annotations.do { ann ->",
    "        if (ann.nameString == annName) then {",
    "            return object {",
    "                inherit true",
    "                def value is public = ann",
    "            }",
    "        }",
    "    }",
    "    false",
    "}" ];
}
function gracecode_ast() {
  importedModules["ast"] = this;
  var module$ast = this;
  this.definitionModule = "ast";
  this.definitionLine = 1;
  var var_prelude = var___95__prelude;
  this.closureKeys = this.closureKeys || [];
  this.closureKeys.push("outer_ast_1");
  this.outer_ast_1 = var_prelude;
  // Dialect "standardGrace"
  var_prelude = do_import("standardGrace", gracecode_standardGrace);
  this.outer = var_prelude;
  setLineNumber(2);    // compilenode import
  // Import of "util" as util
  if (typeof gracecode_util == "undefined")
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString("could not find module util"));
  var var_util = do_import("util", gracecode_util);
  var func0 = function(argcv) {     // accessor method util
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("util", 0, numArgs - 0);
    if (var_util === undefined) raiseUninitializedVariable("util");
    return var_util;
  };    // end of method util
  this.methods["util"] = func0;
  func0.methodName = "util";
  func0.paramCounts = [0];
  func0.paramNames = [];
  func0.definitionLine = 2;
  func0.definitionModule = "ast";
  func0.debug = "import";
  func0.confidential = true;
  setLineNumber(3);    // compilenode import
  // Import of "identifierKinds" as k
  if (typeof gracecode_identifierKinds == "undefined")
    throw new GraceExceptionPacket(EnvironmentExceptionObject, 
      new GraceString("could not find module identifierKinds"));
  var var_k = do_import("identifierKinds", gracecode_identifierKinds);
  var func1 = function(argcv) {     // accessor method k
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("k", 0, numArgs - 0);
    if (var_k === undefined) raiseUninitializedVariable("k");
    return var_k;
  };    // end of method k
  this.methods["k"] = func1;
  func1.methodName = "k";
  func1.paramCounts = [0];
  func1.paramNames = [];
  func1.definitionLine = 3;
  func1.definitionModule = "ast";
  func1.debug = "import";
  func1.confidential = true;
  setLineNumber(16);    // compilenode typedec
  // Type decl Position
  var func3 = function(argcv) {    // method Position, line 1
    var returnTarget = invocationCount;
    invocationCount++;
    setLineNumber(16);    // compilenode typeliteral
    //   Type literal 
    var typeLit4 = new GraceType("Position");
    typeLit4.typeMethods.push("line");
    typeLit4.typeMethods.push("column");
    typeLit4.typeMethods.push(">(1)");
    typeLit4.typeMethods.push("\u2265(1)");
    typeLit4.typeMethods.push("==(1)");
    typeLit4.typeMethods.push("<(1)");
    typeLit4.typeMethods.push("\u2264(1)");
    return typeLit4;
  };    // end of method Position
  function memofunc3(argcv) {
      if (! this.data["memo$Position"])    // parameterless memo function
          this.data["memo$Position"] = func3.call(this, argcv);
      return this.data["memo$Position"];
  };
  this.methods["Position"] = memofunc3;
  memofunc3.methodName = "Position";
  memofunc3.paramCounts = [0];
  memofunc3.paramNames = [];
  memofunc3.definitionLine = 1;
  memofunc3.definitionModule = "ast";
  func3.methodName = "Position";
  func3.paramCounts = [0];
  func3.paramNames = [];
  func3.definitionLine = 1;
  func3.definitionModule = "ast";
  setLineNumber(25);    // compilenode typedec
  // Type decl Range
  var func6 = function(argcv) {    // method Range, line 1
    var returnTarget = invocationCount;
    invocationCount++;
    setLineNumber(25);    // compilenode typeliteral
    //   Type literal 
    var typeLit7 = new GraceType("Range");
    typeLit7.typeMethods.push("start");
    typeLit7.typeMethods.push("end");
    return typeLit7;
  };    // end of method Range
  function memofunc6(argcv) {
      if (! this.data["memo$Range"])    // parameterless memo function
          this.data["memo$Range"] = func6.call(this, argcv);
      return this.data["memo$Range"];
  };
  this.methods["Range"] = memofunc6;
  memofunc6.methodName = "Range";
  memofunc6.paramCounts = [0];
  memofunc6.paramNames = [];
  memofunc6.definitionLine = 1;
  memofunc6.definitionModule = "ast";
  func6.methodName = "Range";
  func6.paramCounts = [0];
  func6.paramNames = [];
  func6.definitionLine = 1;
  func6.definitionModule = "ast";
  var func8 = function(argcv, var_l, var_c) {    // method line(_)column(_), line 29
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("line(_)column(_)", 0, numArgs - 2);
    }
    var ouc = emptyGraceObject("line(_)column(_)", "ast", 29);
    var ouc_init = this.methods["line(1)column(1)$build(3)"].call(this, null, var_l, var_c, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method line(_)column(_)
  func8.paramTypes = [];
  func8.paramTypes.push([type_Number, "l"]);
  func8.paramTypes.push([type_Number, "c"]);
  this.methods["line(1)column(1)"] = func8;
  func8.methodName = "line(1)column(1)";
  func8.paramCounts = [1, 1];
  func8.paramNames = ["l", "c"];
  func8.definitionLine = 29;
  func8.definitionModule = "ast";
  var func9 = function(argcv, var_l, var_c, inheritingObject, aliases, exclusions) {    // method line(_)column(_)$build(_,_,_), line 29
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("line(_)column(_)", 0, numArgs - 2);
    }
    var obj10_build = function(ignore, var_l, var_c, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_29");
      this.outer_ast_29 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(30);    // reuse call
      var initFun11 = selfRequest(var_prelude, "equality$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.line = undefined;
      var reader12_line = function() {  // reader method line
          if (this.data.line === undefined) raiseUninitializedVariable("line");
          return this.data.line;
      };
      reader12_line.isDef = true;
      this.methods["line"] = reader12_line;
      this.data.column = undefined;
      var reader13_column = function() {  // reader method column
          if (this.data.column === undefined) raiseUninitializedVariable("column");
          return this.data.column;
      };
      reader13_column.isDef = true;
      this.methods["column"] = reader13_column;
      var func14 = function(argcv, var_other) {    // method >(_), line 33
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError(">(_)", 0, numArgs - 1);
        }
        var if15 = GraceDone;
        setLineNumber(34);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call16 = selfRequest(this, "line", [0]);
        // call case 6: other requests
        var call17 = request(var_other, "line", [0]);
        var opresult18 = request(call16, ">(1)", [1], call17);
        if (Grace_isTrue(opresult18)) {
          return GraceTrue;
        }
        var if19 = GraceDone;
        setLineNumber(35);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call20 = selfRequest(this, "line", [0]);
        // call case 6: other requests
        var call21 = request(var_other, "line", [0]);
        var opresult22 = request(call20, "<(1)", [1], call21);
        if (Grace_isTrue(opresult22)) {
          return GraceFalse;
        }
        setLineNumber(36);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call23 = selfRequest(this, "column", [0]);
        // call case 6: other requests
        var call24 = request(var_other, "column", [0]);
        var opresult25 = request(call23, ">(1)", [1], call24);
        return opresult25;
      };    // end of method >(_)
      this.methods[">(1)"] = func14;
      func14.methodName = ">(1)";
      func14.paramCounts = [1];
      func14.paramNames = ["other"];
      func14.definitionLine = 33;
      func14.definitionModule = "ast";
      var func26 = function(argcv, var_other) {    // method ≥(_), line 38
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("≥(_)", 0, numArgs - 1);
        }
        var if27 = GraceDone;
        setLineNumber(39);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call28 = selfRequest(this, "line", [0]);
        // call case 6: other requests
        var call29 = request(var_other, "line", [0]);
        var opresult30 = request(call28, ">(1)", [1], call29);
        if (Grace_isTrue(opresult30)) {
          return GraceTrue;
        }
        var if31 = GraceDone;
        setLineNumber(40);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call32 = selfRequest(this, "line", [0]);
        // call case 6: other requests
        var call33 = request(var_other, "line", [0]);
        var opresult34 = request(call32, "<(1)", [1], call33);
        if (Grace_isTrue(opresult34)) {
          return GraceFalse;
        }
        setLineNumber(41);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call35 = selfRequest(this, "column", [0]);
        // call case 6: other requests
        var call36 = request(var_other, "column", [0]);
        var opresult37 = request(call35, "\u2265(1)", [1], call36);
        return opresult37;
      };    // end of method ≥(_)
      this.methods["\u2265(1)"] = func26;
      func26.methodName = "\u2265(1)";
      func26.paramCounts = [1];
      func26.paramNames = ["other"];
      func26.definitionLine = 38;
      func26.definitionModule = "ast";
      var func38 = function(argcv, var_other) {    // method ==(_), line 43
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("==(_)", 0, numArgs - 1);
        }
        setLineNumber(44);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call39 = selfRequest(this, "line", [0]);
        // call case 6: other requests
        var call40 = request(var_other, "line", [0]);
        var opresult41 = request(call39, "==(1)", [1], call40);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call42 = selfRequest(this, "column", [0]);
        // call case 6: other requests
        var call43 = request(var_other, "column", [0]);
        var opresult44 = request(call42, "==(1)", [1], call43);
        var opresult45 = request(opresult41, "&&(1)", [1], opresult44);
        return opresult45;
      };    // end of method ==(_)
      this.methods["==(1)"] = func38;
      func38.methodName = "==(1)";
      func38.paramCounts = [1];
      func38.paramNames = ["other"];
      func38.definitionLine = 43;
      func38.definitionModule = "ast";
      var func46 = function(argcv) {    // method hash, line 46
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hash", 0, numArgs - 0);
        }
        setLineNumber(47);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call49 = selfRequest(this, "line", [0]);
        var call48 = request(call49, "hash", [0]);
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call51 = selfRequest(this, "column", [0]);
        var call50 = request(call51, "hash", [0]);
        // call case 2: outer request
        var call47 = selfRequest(var_prelude, "hashCombine(2)", [2], call48, call50);
        return call47;
      };    // end of method hash
      this.methods["hash"] = func46;
      func46.methodName = "hash";
      func46.paramCounts = [0];
      func46.paramNames = [];
      func46.definitionLine = 46;
      func46.definitionModule = "ast";
      var func52 = function(argcv, var_other) {    // method ≤(_), line 49
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("≤(_)", 0, numArgs - 1);
        }
        setLineNumber(50);    // compilenode member
        // call case 6: other requests
        var opresult54 = request(var_other, ">(1)", [1], this);
        var call53 = request(opresult54, "not", [0]);
        return call53;
      };    // end of method ≤(_)
      this.methods["\u2264(1)"] = func52;
      func52.methodName = "\u2264(1)";
      func52.paramCounts = [1];
      func52.paramNames = ["other"];
      func52.definitionLine = 49;
      func52.definitionModule = "ast";
      var func55 = function(argcv, var_other) {    // method <(_), line 52
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("<(_)", 0, numArgs - 1);
        }
        setLineNumber(53);    // compilenode member
        // call case 6: other requests
        var opresult57 = request(var_other, "\u2265(1)", [1], this);
        var call56 = request(opresult57, "not", [0]);
        return call56;
      };    // end of method <(_)
      this.methods["<(1)"] = func55;
      func55.methodName = "<(1)";
      func55.paramCounts = [1];
      func55.paramNames = ["other"];
      func55.definitionLine = 52;
      func55.definitionModule = "ast";
      var func58 = function(argcv) {    // method asString, line 55
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(55);    // compilenode string
        var string59 = new GraceString("");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call60 = selfRequest(this, "line", [0]);
        var opresult61 = request(string59, "++(1)", [1], call60);
        var string62 = new GraceString(":");
        var opresult63 = request(opresult61, "++(1)", [1], string62);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call64 = selfRequest(this, "column", [0]);
        var opresult65 = request(opresult63, "++(1)", [1], call64);
        var string66 = new GraceString("");
        var opresult67 = request(opresult65, "++(1)", [1], string66);
        return opresult67;
      };    // end of method asString
      this.methods["asString"] = func58;
      func58.methodName = "asString";
      func58.paramCounts = [0];
      func58.paramNames = [];
      func58.definitionLine = 55;
      func58.definitionModule = "ast";
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 29;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj10_init = function() {    // init of object on line 29
        this.data.line = var_l;
        this.data.column = var_c;
      };
      return obj10_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj10_init = obj10_build.call(inheritingObject, null, var_l, var_c, this, aliases, exclusions);
    return obj10_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method line(_)column(_)$build(_,_,_)
  func9.paramTypes = [];
  func9.paramTypes.push([type_Number, "l"]);
  func9.paramTypes.push([type_Number, "c"]);
  this.methods["line(1)column(1)$build(3)"] = func9;
  func9.methodName = "line(1)column(1)$build(3)";
  func9.paramCounts = [1, 1];
  func9.paramNames = ["l", "c"];
  func9.definitionLine = 29;
  func9.definitionModule = "ast";
  var func68 = function(argcv, var_s, var_e) {    // method start(_)end(_), line 57
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("start(_)end(_)", 0, numArgs - 2);
    }
    var ouc = emptyGraceObject("start(_)end(_)", "ast", 57);
    var ouc_init = this.methods["start(1)end(1)$build(3)"].call(this, null, var_s, var_e, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method start(_)end(_)
  this.methods["start(1)end(1)"] = func68;
  func68.methodName = "start(1)end(1)";
  func68.paramCounts = [1, 1];
  func68.paramNames = ["s", "e"];
  func68.definitionLine = 57;
  func68.definitionModule = "ast";
  var func69 = function(argcv, var_s, var_e, inheritingObject, aliases, exclusions) {    // method start(_)end(_)$build(_,_,_), line 57
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("start(_)end(_)", 0, numArgs - 2);
    }
    var obj70_build = function(ignore, var_s, var_e, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_57");
      this.outer_ast_57 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(58);    // reuse call
      var initFun71 = selfRequest(var_prelude, "equality$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.start = undefined;
      var reader72_start = function() {  // reader method start
          if (this.data.start === undefined) raiseUninitializedVariable("start");
          return this.data.start;
      };
      reader72_start.isDef = true;
      this.methods["start"] = reader72_start;
      this.data.end = undefined;
      var reader73_end = function() {  // reader method end
          if (this.data.end === undefined) raiseUninitializedVariable("end");
          return this.data.end;
      };
      reader73_end.isDef = true;
      this.methods["end"] = reader73_end;
      var func74 = function(argcv) {    // method asString, line 61
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        var if75 = GraceDone;
        setLineNumber(62);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call77 = selfRequest(this, "start", [0]);
        var call76 = request(call77, "line", [0]);
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call79 = selfRequest(this, "end", [0]);
        var call78 = request(call79, "line", [0]);
        var opresult80 = request(call76, "==(1)", [1], call78);
        if (Grace_isTrue(opresult80)) {
          setLineNumber(63);    // compilenode string
          var string81 = new GraceString("");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call82 = selfRequest(this, "start", [0]);
          var opresult83 = request(string81, "++(1)", [1], call82);
          var string84 = new GraceString("-");
          var opresult85 = request(opresult83, "++(1)", [1], string84);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call87 = selfRequest(this, "end", [0]);
          var call86 = request(call87, "column", [0]);
          var opresult88 = request(opresult85, "++(1)", [1], call86);
          var string89 = new GraceString("");
          var opresult90 = request(opresult88, "++(1)", [1], string89);
          if75 = opresult90;
        } else {
          var if91 = GraceDone;
          setLineNumber(64);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call93 = selfRequest(this, "end", [0]);
          var call92 = request(call93, "line", [0]);
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          var opresult94 = request(call92, "==(1)", [1], var_noPosition);
          if (Grace_isTrue(opresult94)) {
            setLineNumber(65);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call96 = selfRequest(this, "start", [0]);
            var call95 = request(call96, "asString", [0]);
            if91 = call95;
          } else {
            setLineNumber(67);    // compilenode string
            var string97 = new GraceString("");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call98 = selfRequest(this, "start", [0]);
            var opresult99 = request(string97, "++(1)", [1], call98);
            var string100 = new GraceString("-");
            var opresult101 = request(opresult99, "++(1)", [1], string100);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call102 = selfRequest(this, "end", [0]);
            var opresult103 = request(opresult101, "++(1)", [1], call102);
            var string104 = new GraceString("");
            var opresult105 = request(opresult103, "++(1)", [1], string104);
            if91 = opresult105;
          }
          if75 = if91;
        }
        return if75;
      };    // end of method asString
      this.methods["asString"] = func74;
      func74.methodName = "asString";
      func74.paramCounts = [0];
      func74.paramNames = [];
      func74.definitionLine = 61;
      func74.definitionModule = "ast";
      var func106 = function(argcv, var_other) {    // method ==(_), line 70
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("==(_)", 0, numArgs - 1);
        }
        setLineNumber(71);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call107 = selfRequest(this, "start", [0]);
        // call case 6: other requests
        var call108 = request(var_other, "start", [0]);
        var opresult109 = request(call107, "==(1)", [1], call108);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call110 = selfRequest(this, "end", [0]);
        // call case 6: other requests
        var call111 = request(var_other, "end", [0]);
        var opresult112 = request(call110, "==(1)", [1], call111);
        var opresult113 = request(opresult109, "&&(1)", [1], opresult112);
        return opresult113;
      };    // end of method ==(_)
      this.methods["==(1)"] = func106;
      func106.methodName = "==(1)";
      func106.paramCounts = [1];
      func106.paramNames = ["other"];
      func106.definitionLine = 70;
      func106.definitionModule = "ast";
      var func114 = function(argcv) {    // method hash, line 73
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hash", 0, numArgs - 0);
        }
        setLineNumber(74);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call117 = selfRequest(this, "start", [0]);
        var call116 = request(call117, "hash", [0]);
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call119 = selfRequest(this, "end", [0]);
        var call118 = request(call119, "hash", [0]);
        // call case 2: outer request
        var call115 = selfRequest(var_prelude, "hashCombine(2)", [2], call116, call118);
        return call115;
      };    // end of method hash
      this.methods["hash"] = func114;
      func114.methodName = "hash";
      func114.paramCounts = [0];
      func114.paramNames = [];
      func114.definitionLine = 73;
      func114.definitionModule = "ast";
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 57;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj70_init = function() {    // init of object on line 57
        this.data.start = var_s;
        this.data.end = var_e;
      };
      return obj70_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj70_init = obj70_build.call(inheritingObject, null, var_s, var_e, this, aliases, exclusions);
    return obj70_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method start(_)end(_)$build(_,_,_)
  this.methods["start(1)end(1)$build(3)"] = func69;
  func69.methodName = "start(1)end(1)$build(3)";
  func69.paramCounts = [1, 1];
  func69.paramNames = ["s", "e"];
  func69.definitionLine = 57;
  func69.definitionModule = "ast";
  var func120 = function(argcv, var_needle, var_pos) {    // method positionOfNext(_)after(_), line 80
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("positionOfNext(_)after(_)", 0, numArgs - 2);
    }
    var if121 = GraceDone;
    setLineNumber(83);    // compilenode string
    var string122 = new GraceString("\u27e6");
    var opresult123 = request(var_needle, "==(1)", [1], string122);
    if (Grace_isTrue(opresult123)) {
      setLineNumber(84);    // compilenode string
      var string125 = new GraceString("[[");
      var string126 = new GraceString("\u27e6");
      // call case 2: outer request
      var call124 = selfRequest(importedModules["ast"], "positionOfNext(1)or(1)after(1)", [1, 1, 1], string125, string126, var_pos);
      return call124;
    }
    var if127 = GraceDone;
    setLineNumber(86);    // compilenode string
    var string128 = new GraceString("\u27e7");
    var opresult129 = request(var_needle, "==(1)", [1], string128);
    if (Grace_isTrue(opresult129)) {
      setLineNumber(87);    // compilenode string
      var string131 = new GraceString("]]");
      var string132 = new GraceString("\u27e7");
      // call case 2: outer request
      var call130 = selfRequest(importedModules["ast"], "positionOfNext(1)or(1)after(1)", [1, 1, 1], string131, string132, var_pos);
      return call130;
    }
    setLineNumber(89);    // compilenode member
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call133 = request(var_util, "lines", [0]);
    var var_sourceLines = call133;
    setLineNumber(90);    // compilenode member
    // call case 6: other requests
    var call134 = request(var_pos, "line", [0]);
    var var_lineNr = call134;
    var if135 = GraceDone;
    setLineNumber(91);    // compilenode num
    var opresult136 = request(var_lineNr, "==(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult136)) {
      if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
      return var_noPosition;
    }
    setLineNumber(92);    // compilenode member
    // call case 6: other requests
    var call138 = request(var_pos, "column", [0]);
    var sum139 = request(call138, "+(1)", [1], new GraceNum(1));
    // call case 6: other requests
    // call case 6: other requests
    var call140 = request(var_sourceLines, "at(1)", [1], var_lineNr);
    var call137 = request(call140, "indexOf(1)startingAt(1)", [1, 1], var_needle, sum139);
    var var_found = call137;
    setLineNumber(93);    // compilenode block
    var block142 = new GraceBlock(this, 93, 0);
    block142.guard = jsTrue;
    block142.real = function block142() {
      setLineNumber(93);    // compilenode op
      if (var_found === undefined) raiseUninitializedVariable("found");
      var opresult143 = request(var_found, "==(1)", [1], new GraceNum(0));
      return opresult143;
    };
    let applyMeth142 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth142.methodName = "apply";
    applyMeth142.paramCounts = [0];
    applyMeth142.paramNames = [];
    applyMeth142.definitionLine = 93;
    applyMeth142.definitionModule = "ast";
    block142.methods["apply"] = applyMeth142;
    var block144 = new GraceBlock(this, 93, 0);
    block144.guard = jsTrue;
    block144.real = function block144() {
      setLineNumber(94);    // compilenode op
      if (var_lineNr === undefined) raiseUninitializedVariable("lineNr");
      var sum145 = request(var_lineNr, "+(1)", [1], new GraceNum(1));
      var_lineNr = sum145;
      var if146 = GraceDone;
      setLineNumber(95);    // compilenode op
      if (var_lineNr === undefined) raiseUninitializedVariable("lineNr");
      // call case 6: other requests
      if (var_sourceLines === undefined) raiseUninitializedVariable("sourceLines");
      var call147 = request(var_sourceLines, "size", [0]);
      var opresult148 = request(var_lineNr, ">(1)", [1], call147);
      if (Grace_isTrue(opresult148)) {
        if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
        throw new ReturnException(var_noPosition, returnTarget);
      }
      setLineNumber(96);    // compilenode call
      // call case 6: other requests
      if (var_lineNr === undefined) raiseUninitializedVariable("lineNr");
      // call case 6: other requests
      if (var_sourceLines === undefined) raiseUninitializedVariable("sourceLines");
      var call150 = request(var_sourceLines, "at(1)", [1], var_lineNr);
      var call149 = request(call150, "indexOf(1)", [1], var_needle);
      var_found = call149;
      return GraceDone;
    };
    let applyMeth144 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth144.methodName = "apply";
    applyMeth144.paramCounts = [0];
    applyMeth144.paramNames = [];
    applyMeth144.definitionLine = 93;
    applyMeth144.definitionModule = "ast";
    block144.methods["apply"] = applyMeth144;
    // call case 2: outer request
    var call141 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block142, block144);
    setLineNumber(98);    // compilenode member
    // call case 6: other requests
    var call152 = request(var_needle, "size", [0]);
    var sum153 = request(var_found, "+(1)", [1], call152);
    var diff154 = request(sum153, "-(1)", [1], new GraceNum(1));
    // call case 2: outer request
    var call151 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], var_lineNr, diff154);
    return call151;
  };    // end of method positionOfNext(_)after(_)
  func120.paramTypes = [];
  func120.paramTypes.push([type_String, "needle"]);
  func120.paramTypes.push([]);
  this.methods["positionOfNext(1)after(1)"] = func120;
  func120.methodName = "positionOfNext(1)after(1)";
  func120.paramCounts = [1, 1];
  func120.paramNames = ["needle", "pos"];
  func120.definitionLine = 80;
  func120.definitionModule = "ast";
  var func155 = function(argcv, var_needle1, var_needle2, var_pos) {    // method positionOfNext(_)or(_)after(_), line 101
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("positionOfNext(_)or(_)after(_)", 0, numArgs - 3);
    }
    setLineNumber(103);    // compilenode member
    // call case 6: other requests
    if (var_util === undefined) raiseUninitializedVariable("util");
    var call156 = request(var_util, "lines", [0]);
    var var_sourceLines = call156;
    setLineNumber(104);    // compilenode member
    // call case 6: other requests
    var call157 = request(var_pos, "line", [0]);
    var var_startLine = call157;
    var if158 = GraceDone;
    setLineNumber(105);    // compilenode num
    var opresult159 = request(var_startLine, "==(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult159)) {
      if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
      return var_noPosition;
    }
    setLineNumber(106);    // compilenode member
    // call case 6: other requests
    var call161 = request(var_pos, "column", [0]);
    var sum162 = request(call161, "+(1)", [1], new GraceNum(1));
    // call case 6: other requests
    // call case 6: other requests
    var call163 = request(var_sourceLines, "at(1)", [1], var_startLine);
    var call160 = request(call163, "indexOf(1)startingAt(1)", [1, 1], var_needle1, sum162);
    var var_found = call160;
    var if164 = GraceDone;
    setLineNumber(107);    // compilenode num
    var opresult165 = request(var_found, "\u2260(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult165)) {
      setLineNumber(108);    // compilenode call
      if (var_startLine === undefined) raiseUninitializedVariable("startLine");
      if (var_found === undefined) raiseUninitializedVariable("found");
      // call case 6: other requests
      var call167 = request(var_needle1, "size", [0]);
      var sum168 = request(var_found, "+(1)", [1], call167);
      var diff169 = request(sum168, "-(1)", [1], new GraceNum(1));
      // call case 2: outer request
      var call166 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], var_startLine, diff169);
      return call166;
    }
    setLineNumber(110);    // compilenode member
    // call case 6: other requests
    var call171 = request(var_pos, "column", [0]);
    var sum172 = request(call171, "+(1)", [1], new GraceNum(1));
    // call case 6: other requests
    // call case 6: other requests
    var call173 = request(var_sourceLines, "at(1)", [1], var_startLine);
    var call170 = request(call173, "indexOf(1)startingAt(1)", [1, 1], var_needle2, sum172);
    var_found = call170;
    var if174 = GraceDone;
    setLineNumber(111);    // compilenode num
    var opresult175 = request(var_found, "\u2260(1)", [1], new GraceNum(0));
    if (Grace_isTrue(opresult175)) {
      setLineNumber(112);    // compilenode call
      if (var_startLine === undefined) raiseUninitializedVariable("startLine");
      if (var_found === undefined) raiseUninitializedVariable("found");
      // call case 6: other requests
      var call177 = request(var_needle2, "size", [0]);
      var sum178 = request(var_found, "+(1)", [1], call177);
      var diff179 = request(sum178, "-(1)", [1], new GraceNum(1));
      // call case 2: outer request
      var call176 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], var_startLine, diff179);
      return call176;
    }
    setLineNumber(114);    // compilenode member
    // call case 6: other requests
    var call181 = request(var_sourceLines, "size", [0]);
    var opresult182 = request(var_startLine, "..(1)", [1], call181);
    var block183 = new GraceBlock(this, 114, 1);
    block183.guard = jsTrue;
    block183.real = function block183(var_ln) {
      var if184 = GraceDone;
      setLineNumber(115);    // compilenode member
      // call case 6: other requests
      if (var_sourceLines === undefined) raiseUninitializedVariable("sourceLines");
      var call185 = request(var_sourceLines, "size", [0]);
      var opresult186 = request(var_ln, ">(1)", [1], call185);
      if (Grace_isTrue(opresult186)) {
        if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
        throw new ReturnException(var_noPosition, returnTarget);
      }
      setLineNumber(116);    // compilenode call
      // call case 6: other requests
      // call case 6: other requests
      if (var_sourceLines === undefined) raiseUninitializedVariable("sourceLines");
      var call188 = request(var_sourceLines, "at(1)", [1], var_ln);
      var call187 = request(call188, "indexOf(1)", [1], var_needle1);
      var_found = call187;
      var if189 = GraceDone;
      setLineNumber(117);    // compilenode op
      if (var_found === undefined) raiseUninitializedVariable("found");
      var opresult190 = request(var_found, "\u2260(1)", [1], new GraceNum(0));
      if (Grace_isTrue(opresult190)) {
        setLineNumber(118);    // compilenode op
        if (var_found === undefined) raiseUninitializedVariable("found");
        // call case 6: other requests
        var call192 = request(var_needle1, "size", [0]);
        var sum193 = request(var_found, "+(1)", [1], call192);
        var diff194 = request(sum193, "-(1)", [1], new GraceNum(1));
        // call case 2: outer request
        var call191 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], var_ln, diff194);
        throw new ReturnException(call191, returnTarget);
      }
      setLineNumber(120);    // compilenode call
      // call case 6: other requests
      // call case 6: other requests
      if (var_sourceLines === undefined) raiseUninitializedVariable("sourceLines");
      var call196 = request(var_sourceLines, "at(1)", [1], var_ln);
      var call195 = request(call196, "indexOf(1)", [1], var_needle2);
      var_found = call195;
      var if197 = GraceDone;
      setLineNumber(121);    // compilenode op
      if (var_found === undefined) raiseUninitializedVariable("found");
      var opresult198 = request(var_found, "\u2260(1)", [1], new GraceNum(0));
      if (Grace_isTrue(opresult198)) {
        setLineNumber(122);    // compilenode op
        if (var_found === undefined) raiseUninitializedVariable("found");
        // call case 6: other requests
        var call200 = request(var_needle2, "size", [0]);
        var sum201 = request(var_found, "+(1)", [1], call200);
        var diff202 = request(sum201, "-(1)", [1], new GraceNum(1));
        // call case 2: outer request
        var call199 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], var_ln, diff202);
        throw new ReturnException(call199, returnTarget);
      }
      return if197;
    };
    let applyMeth183 = function apply_1 (argcv, ...args) {
        if (this.guard.apply(this.receiver, args))
            return this.real.apply(this.receiver, args);
        badBlockArgs.apply(this, args);
    };
    applyMeth183.methodName = "apply(1)";
    applyMeth183.paramCounts = [1];
    applyMeth183.paramNames = ["ln"];
    applyMeth183.definitionLine = 114;
    applyMeth183.definitionModule = "ast";
    block183.methods["apply(1)"] = applyMeth183;
    let matchesMeth183 = function matches_1 (argcv, ...args) {
        return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
    };
    matchesMeth183.methodName = "matches(1)";
    matchesMeth183.paramCounts = [1];
    matchesMeth183.paramNames = ["ln"];
    matchesMeth183.definitionLine = 114;
    matchesMeth183.definitionModule = "ast";
    block183.methods["matches(1)"] = matchesMeth183;
    // call case 2: outer request
    var call180 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], opresult182, block183);
    return call180;
  };    // end of method positionOfNext(_)or(_)after(_)
  func155.paramTypes = [];
  func155.paramTypes.push([type_String, "needle1"]);
  func155.paramTypes.push([type_String, "needle2"]);
  func155.paramTypes.push([]);
  this.methods["positionOfNext(1)or(1)after(1)"] = func155;
  func155.methodName = "positionOfNext(1)or(1)after(1)";
  func155.paramCounts = [1, 1, 1];
  func155.paramNames = ["needle1", "needle2", "pos"];
  func155.definitionLine = 101;
  func155.definitionModule = "ast";
  var func203 = function(argcv, var_l, var_b, var_ac) {    // method listMap(_,_)ancestors(_), line 129
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("listMap(_,_)ancestors(_)", 0, numArgs - 3);
    }
    setLineNumber(130);    // compilenode array
    var array205 = new GraceSequence([]);
    // call case 2: outer request
    var call204 = selfRequest(var_prelude, "list(1)", [1], array205);
    var var_newList = call204;
    setLineNumber(131);    // compilenode block
    var block207 = new GraceBlock(this, 131, 1);
    block207.guard = jsTrue;
    block207.real = function block207(var_nd) {
      setLineNumber(131);    // compilenode call
      // call case 6: other requests
      var call209 = request(var_nd, "map(1)ancestors(1)", [1, 1], var_b, var_ac);
      // call case 6: other requests
      if (var_newList === undefined) raiseUninitializedVariable("newList");
      var call208 = request(var_newList, "addLast(1)", [1], call209);
      return call208;
    };
    let applyMeth207 = function apply_1 (argcv, ...args) {
        if (this.guard.apply(this.receiver, args))
            return this.real.apply(this.receiver, args);
        badBlockArgs.apply(this, args);
    };
    applyMeth207.methodName = "apply(1)";
    applyMeth207.paramCounts = [1];
    applyMeth207.paramNames = ["nd"];
    applyMeth207.definitionLine = 131;
    applyMeth207.definitionModule = "ast";
    block207.methods["apply(1)"] = applyMeth207;
    let matchesMeth207 = function matches_1 (argcv, ...args) {
        return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
    };
    matchesMeth207.methodName = "matches(1)";
    matchesMeth207.paramCounts = [1];
    matchesMeth207.paramNames = ["nd"];
    matchesMeth207.definitionLine = 131;
    matchesMeth207.definitionModule = "ast";
    block207.methods["matches(1)"] = matchesMeth207;
    // call case 6: other requests
    var call206 = request(var_l, "do(1)", [1], block207);
    return var_newList;
  };    // end of method listMap(_,_)ancestors(_)
  func203.confidential = true;
  this.methods["listMap(2)ancestors(1)"] = func203;
  func203.methodName = "listMap(2)ancestors(1)";
  func203.paramCounts = [2, 1];
  func203.paramNames = ["l", "b", "ac"];
  func203.definitionLine = 129;
  func203.definitionModule = "ast";
  var func210 = function(argcv, var_n, var_b, var_ac) {    // method maybeMap(_,_)ancestors(_), line 134
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("maybeMap(_,_)ancestors(_)", 0, numArgs - 3);
    }
    var if211 = GraceDone;
    setLineNumber(135);    // compilenode op
    var opresult212 = request(GraceFalse, "\u2260(1)", [1], var_n);
    if (Grace_isTrue(opresult212)) {
      setLineNumber(136);    // compilenode call
      // call case 6: other requests
      var call213 = request(var_n, "map(1)ancestors(1)", [1, 1], var_b, var_ac);
      if211 = call213;
    } else {
      if211 = var_n;
    }
    return if211;
  };    // end of method maybeMap(_,_)ancestors(_)
  func210.confidential = true;
  this.methods["maybeMap(2)ancestors(1)"] = func210;
  func210.methodName = "maybeMap(2)ancestors(1)";
  func210.paramCounts = [2, 1];
  func210.paramNames = ["n", "b", "ac"];
  func210.definitionLine = 134;
  func210.definitionModule = "ast";
  var func214 = function(argcv, var_n, var_b, var_ac) {    // method maybeListMap(_,_)ancestors(_), line 141
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("maybeListMap(_,_)ancestors(_)", 0, numArgs - 3);
    }
    var if215 = GraceDone;
    setLineNumber(142);    // compilenode op
    var opresult216 = request(GraceFalse, "\u2260(1)", [1], var_n);
    if (Grace_isTrue(opresult216)) {
      setLineNumber(143);    // compilenode call
      // call case 2: outer request
      var call217 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], var_n, var_b, var_ac);
      if215 = call217;
    } else {
      if215 = var_n;
    }
    return if215;
  };    // end of method maybeListMap(_,_)ancestors(_)
  func214.confidential = true;
  this.methods["maybeListMap(2)ancestors(1)"] = func214;
  func214.methodName = "maybeListMap(2)ancestors(1)";
  func214.paramCounts = [2, 1];
  func214.paramNames = ["n", "b", "ac"];
  func214.definitionLine = 141;
  func214.definitionModule = "ast";
  setLineNumber(185);    // compilenode typedec
  // Type decl AstNode
  var func219 = function(argcv) {    // method AstNode, line 1
    var returnTarget = invocationCount;
    invocationCount++;
    setLineNumber(185);    // compilenode typeliteral
    //   Type literal 
    var typeLit220 = new GraceType("AstNode");
    typeLit220.typeMethods.push("kind");
    typeLit220.typeMethods.push("register");
    typeLit220.typeMethods.push("line");
    typeLit220.typeMethods.push("line:=(1)");
    typeLit220.typeMethods.push("column");
    typeLit220.typeMethods.push("linePos");
    typeLit220.typeMethods.push("linePos:=(1)");
    typeLit220.typeMethods.push("scope");
    typeLit220.typeMethods.push("pretty(1)");
    typeLit220.typeMethods.push("comments");
    typeLit220.typeMethods.push("range");
    typeLit220.typeMethods.push("start");
    typeLit220.typeMethods.push("end");
    return typeLit220;
  };    // end of method AstNode
  function memofunc219(argcv) {
      if (! this.data["memo$AstNode"])    // parameterless memo function
          this.data["memo$AstNode"] = func219.call(this, argcv);
      return this.data["memo$AstNode"];
  };
  this.methods["AstNode"] = memofunc219;
  memofunc219.methodName = "AstNode";
  memofunc219.paramCounts = [0];
  memofunc219.paramNames = [];
  memofunc219.definitionLine = 1;
  memofunc219.definitionModule = "ast";
  func219.methodName = "AstNode";
  func219.paramCounts = [0];
  func219.paramNames = [];
  func219.definitionLine = 1;
  func219.definitionModule = "ast";
  setLineNumber(211);    // compilenode typedec
  // Type decl SymbolTable
  var func222 = function(argcv) {     // accessor method SymbolTable
    const numArgs = arguments.length - 1;
    if (numArgs > 0) raiseTypeArgError("SymbolTable", 0, numArgs - 0);
    return var_Unknown;
  };    // end of method SymbolTable
  this.methods["SymbolTable"] = func222;
  func222.methodName = "SymbolTable";
  func222.paramCounts = [0];
  func222.paramNames = [];
  func222.definitionLine = 1;
  func222.definitionModule = "ast";
  var func223 = function(argcv) {    // method baseNode, line 213
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("baseNode", 0, numArgs - 0);
    }
    var ouc = emptyGraceObject("baseNode", "ast", 213);
    var ouc_init = this.methods["baseNode$build(3)"].call(this, null, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method baseNode
  this.methods["baseNode"] = func223;
  func223.methodName = "baseNode";
  func223.paramCounts = [0];
  func223.paramNames = [];
  func223.definitionLine = 213;
  func223.definitionModule = "ast";
  var func224 = function(argcv, inheritingObject, aliases, exclusions) {    // method baseNode$build(_,_,_), line 213
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("baseNode", 0, numArgs - 0);
    }
    var obj225_build = function(ignore, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_213");
      this.outer_ast_213 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(215);    // reuse call
      var initFun226 = selfRequest(var_prelude, "identityEquality$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.register = undefined;
      var reader227_register = function() {  // reader method register
          if (this.data.register === undefined) raiseUninitializedVariable("register");
          return this.data.register;
      };
      reader227_register.isVar = true;
      this.methods["register"] = reader227_register;
      var writer228_register = function(argcv, n) {   // writer method register:=(_)
        this.data.register = n;
        return GraceDone;
      };
      this.methods["register:=(1)"] = writer228_register;
      this.data.line = undefined;
      var reader229_line = function() {  // reader method line
          if (this.data.line === undefined) raiseUninitializedVariable("line");
          return this.data.line;
      };
      reader229_line.isVar = true;
      this.methods["line"] = reader229_line;
      var writer230_line = function(argcv, n) {   // writer method line:=(_)
        this.data.line = n;
        return GraceDone;
      };
      this.methods["line:=(1)"] = writer230_line;
      this.data.linePos = undefined;
      var reader231_linePos = function() {  // reader method linePos
          if (this.data.linePos === undefined) raiseUninitializedVariable("linePos");
          return this.data.linePos;
      };
      reader231_linePos.isVar = true;
      this.methods["linePos"] = reader231_linePos;
      var writer232_linePos = function(argcv, n) {   // writer method linePos:=(_)
        this.data.linePos = n;
        return GraceDone;
      };
      this.methods["linePos:=(1)"] = writer232_linePos;
      this.data.symbolTable = undefined;
      var reader233_symbolTable = function() {  // reader method symbolTable
          if (this.data.symbolTable === undefined) raiseUninitializedVariable("symbolTable");
          return this.data.symbolTable;
      };
      reader233_symbolTable.isVar = true;
      reader233_symbolTable.confidential = true;
      this.methods["symbolTable"] = reader233_symbolTable;
      var writer234_symbolTable = function(argcv, n) {   // writer method symbolTable:=(_)
        this.data.symbolTable = n;
        return GraceDone;
      };
      writer234_symbolTable.confidential = true;
      this.methods["symbolTable:=(1)"] = writer234_symbolTable;
      this.data.comments = undefined;
      var reader235_comments = function() {  // reader method comments
          if (this.data.comments === undefined) raiseUninitializedVariable("comments");
          return this.data.comments;
      };
      reader235_comments.isVar = true;
      this.methods["comments"] = reader235_comments;
      var writer236_comments = function(argcv, n) {   // writer method comments:=(_)
        this.data.comments = n;
        return GraceDone;
      };
      this.methods["comments:=(1)"] = writer236_comments;
      var func237 = function(argcv, var_l, var_c) {    // method setLine(_)col(_), line 223
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("setLine(_)col(_)", 0, numArgs - 2);
        }
        setLineNumber(224);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call238 = selfRequest(this, "line:=(1)", [1], var_l);
        setLineNumber(225);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call239 = selfRequest(this, "linePos:=(1)", [1], var_c);
        return this;
      };    // end of method setLine(_)col(_)
      this.methods["setLine(1)col(1)"] = func237;
      func237.methodName = "setLine(1)col(1)";
      func237.paramCounts = [1, 1];
      func237.paramNames = ["l", "c"];
      func237.definitionLine = 223;
      func237.definitionModule = "ast";
      var func240 = function(argcv, var_tokenOrNode) {    // method setPositionFrom(_), line 228
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("setPositionFrom(_)", 0, numArgs - 1);
        }
        setLineNumber(229);    // compilenode member
        // call case 6: other requests
        var call242 = request(var_tokenOrNode, "line", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call241 = selfRequest(this, "line:=(1)", [1], call242);
        setLineNumber(230);    // compilenode member
        // call case 6: other requests
        var call244 = request(var_tokenOrNode, "linePos", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call243 = selfRequest(this, "linePos:=(1)", [1], call244);
        return this;
      };    // end of method setPositionFrom(_)
      this.methods["setPositionFrom(1)"] = func240;
      func240.methodName = "setPositionFrom(1)";
      func240.paramCounts = [1];
      func240.paramNames = ["tokenOrNode"];
      func240.definitionLine = 228;
      func240.definitionModule = "ast";
      var func245 = function(argcv, var_p) {    // method setStart(_), line 233
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("setStart(_)", 0, numArgs - 1);
        }
        setLineNumber(234);    // compilenode member
        // call case 6: other requests
        var call247 = request(var_p, "line", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call246 = selfRequest(this, "line:=(1)", [1], call247);
        setLineNumber(235);    // compilenode member
        // call case 6: other requests
        var call249 = request(var_p, "column", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call248 = selfRequest(this, "linePos:=(1)", [1], call249);
        return this;
      };    // end of method setStart(_)
      this.methods["setStart(1)"] = func245;
      func245.methodName = "setStart(1)";
      func245.paramCounts = [1];
      func245.paramNames = ["p"];
      func245.definitionLine = 233;
      func245.definitionModule = "ast";
      var func250 = function(argcv) {    // method column, line 238
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("column", 0, numArgs - 0);
        }
        setLineNumber(238);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call251 = selfRequest(this, "linePos", [0]);
        return call251;
      };    // end of method column
      this.methods["column"] = func250;
      func250.methodName = "column";
      func250.paramCounts = [0];
      func250.paramNames = [];
      func250.definitionLine = 238;
      func250.definitionModule = "ast";
      var func252 = function(argcv) {    // method start, line 239
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("start", 0, numArgs - 0);
        }
        setLineNumber(239);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call254 = selfRequest(this, "line", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call255 = selfRequest(this, "linePos", [0]);
        // call case 2: outer request
        var call253 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call254, call255);
        return call253;
      };    // end of method start
      this.methods["start"] = func252;
      func252.methodName = "start";
      func252.paramCounts = [0];
      func252.paramNames = [];
      func252.definitionLine = 239;
      func252.definitionModule = "ast";
      var func256 = function(argcv) {    // method end, line 240
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("end", 0, numArgs - 0);
        }
        setLineNumber(240);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call258 = selfRequest(this, "line", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call259 = selfRequest(this, "linePos", [0]);
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call261 = selfRequest(this, "value", [0]);
        var call260 = request(call261, "size", [0]);
        var sum262 = request(call259, "+(1)", [1], call260);
        var diff263 = request(sum262, "-(1)", [1], new GraceNum(1));
        // call case 2: outer request
        var call257 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call258, diff263);
        return call257;
      };    // end of method end
      this.methods["end"] = func256;
      func256.methodName = "end";
      func256.paramCounts = [0];
      func256.paramNames = [];
      func256.definitionLine = 240;
      func256.definitionModule = "ast";
      var func264 = function(argcv) {    // method range, line 241
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("range", 0, numArgs - 0);
        }
        setLineNumber(241);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call266 = selfRequest(this, "start", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call267 = selfRequest(this, "end", [0]);
        // call case 2: outer request
        var call265 = selfRequest(importedModules["ast"], "start(1)end(1)", [1, 1], call266, call267);
        return call265;
      };    // end of method range
      this.methods["range"] = func264;
      func264.methodName = "range";
      func264.paramCounts = [0];
      func264.paramNames = [];
      func264.definitionLine = 241;
      func264.definitionModule = "ast";
      var func268 = function(argcv) {    // method kind, line 242
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("kind", 0, numArgs - 0);
        }
        setLineNumber(242);    // compilenode member
        // call case 2: outer request
        var call269 = selfRequest(var_prelude, "abstract", [0]);
        return call269;
      };    // end of method kind
      this.methods["kind"] = func268;
      func268.methodName = "kind";
      func268.paramCounts = [0];
      func268.paramNames = [];
      func268.definitionLine = 242;
      func268.definitionModule = "ast";
      var func270 = function(argcv) {     // accessor method isNull
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isNull", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isNull
      this.methods["isNull"] = func270;
      func270.methodName = "isNull";
      func270.paramCounts = [0];
      func270.paramNames = [];
      func270.definitionLine = 243;
      func270.definitionModule = "ast";
      var func271 = function(argcv) {     // accessor method isAppliedOccurrence
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isAppliedOccurrence", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isAppliedOccurrence
      this.methods["isAppliedOccurrence"] = func271;
      func271.methodName = "isAppliedOccurrence";
      func271.paramCounts = [0];
      func271.paramNames = [];
      func271.definitionLine = 244;
      func271.definitionModule = "ast";
      var func272 = function(argcv) {     // accessor method isMatchingBlock
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isMatchingBlock", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isMatchingBlock
      this.methods["isMatchingBlock"] = func272;
      func272.methodName = "isMatchingBlock";
      func272.paramCounts = [0];
      func272.paramNames = [];
      func272.definitionLine = 245;
      func272.definitionModule = "ast";
      var func273 = function(argcv) {     // accessor method isFieldDec
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isFieldDec", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isFieldDec
      this.methods["isFieldDec"] = func273;
      func273.methodName = "isFieldDec";
      func273.paramCounts = [0];
      func273.paramNames = [];
      func273.definitionLine = 246;
      func273.definitionModule = "ast";
      var func274 = function(argcv) {     // accessor method isInherits
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isInherits", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isInherits
      this.methods["isInherits"] = func274;
      func274.methodName = "isInherits";
      func274.paramCounts = [0];
      func274.paramNames = [];
      func274.definitionLine = 247;
      func274.definitionModule = "ast";
      var func275 = function(argcv) {     // accessor method isLegalInTrait
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isLegalInTrait", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isLegalInTrait
      this.methods["isLegalInTrait"] = func275;
      func275.methodName = "isLegalInTrait";
      func275.paramCounts = [0];
      func275.paramNames = [];
      func275.definitionLine = 248;
      func275.definitionModule = "ast";
      var func276 = function(argcv) {     // accessor method isMember
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isMember", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isMember
      this.methods["isMember"] = func276;
      func276.methodName = "isMember";
      func276.paramCounts = [0];
      func276.paramNames = [];
      func276.definitionLine = 249;
      func276.definitionModule = "ast";
      var func277 = function(argcv) {     // accessor method isMethod
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isMethod", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isMethod
      this.methods["isMethod"] = func277;
      func277.methodName = "isMethod";
      func277.paramCounts = [0];
      func277.paramNames = [];
      func277.definitionLine = 250;
      func277.definitionModule = "ast";
      var func278 = function(argcv) {     // accessor method isExecutable
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isExecutable
      this.methods["isExecutable"] = func278;
      func278.methodName = "isExecutable";
      func278.paramCounts = [0];
      func278.paramNames = [];
      func278.definitionLine = 251;
      func278.definitionModule = "ast";
      var func279 = function(argcv) {     // accessor method isCall
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isCall", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isCall
      this.methods["isCall"] = func279;
      func279.methodName = "isCall";
      func279.paramCounts = [0];
      func279.paramNames = [];
      func279.definitionLine = 252;
      func279.definitionModule = "ast";
      var func280 = function(argcv) {     // accessor method isComment
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isComment", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isComment
      this.methods["isComment"] = func280;
      func280.methodName = "isComment";
      func280.paramCounts = [0];
      func280.paramNames = [];
      func280.definitionLine = 253;
      func280.definitionModule = "ast";
      var func281 = function(argcv) {     // accessor method isClass
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isClass", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isClass
      this.methods["isClass"] = func281;
      func281.methodName = "isClass";
      func281.paramCounts = [0];
      func281.paramNames = [];
      func281.definitionLine = 254;
      func281.definitionModule = "ast";
      var func282 = function(argcv) {     // accessor method inClass
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("inClass", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method inClass
      this.methods["inClass"] = func282;
      func282.methodName = "inClass";
      func282.paramCounts = [0];
      func282.paramNames = [];
      func282.definitionLine = 255;
      func282.definitionModule = "ast";
      var func283 = function(argcv) {     // accessor method isTrait
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isTrait", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isTrait
      this.methods["isTrait"] = func283;
      func283.methodName = "isTrait";
      func283.paramCounts = [0];
      func283.paramNames = [];
      func283.definitionLine = 256;
      func283.definitionModule = "ast";
      var func284 = function(argcv) {     // accessor method inTrait
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("inTrait", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method inTrait
      this.methods["inTrait"] = func284;
      func284.methodName = "inTrait";
      func284.paramCounts = [0];
      func284.paramNames = [];
      func284.definitionLine = 257;
      func284.definitionModule = "ast";
      var func285 = function(argcv) {     // accessor method isBind
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isBind", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isBind
      this.methods["isBind"] = func285;
      func285.methodName = "isBind";
      func285.paramCounts = [0];
      func285.paramNames = [];
      func285.definitionLine = 258;
      func285.definitionModule = "ast";
      var func286 = function(argcv) {     // accessor method isReturn
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isReturn", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isReturn
      this.methods["isReturn"] = func286;
      func286.methodName = "isReturn";
      func286.paramCounts = [0];
      func286.paramNames = [];
      func286.definitionLine = 259;
      func286.definitionModule = "ast";
      var func287 = function(argcv) {     // accessor method isSelf
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isSelf", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isSelf
      this.methods["isSelf"] = func287;
      func287.methodName = "isSelf";
      func287.paramCounts = [0];
      func287.paramNames = [];
      func287.definitionLine = 260;
      func287.definitionModule = "ast";
      var func288 = function(argcv) {     // accessor method isSuper
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isSuper", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isSuper
      this.methods["isSuper"] = func288;
      func288.methodName = "isSuper";
      func288.paramCounts = [0];
      func288.paramNames = [];
      func288.definitionLine = 261;
      func288.definitionModule = "ast";
      var func289 = function(argcv) {     // accessor method isPrelude
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isPrelude", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isPrelude
      this.methods["isPrelude"] = func289;
      func289.methodName = "isPrelude";
      func289.paramCounts = [0];
      func289.paramNames = [];
      func289.definitionLine = 262;
      func289.definitionModule = "ast";
      var func290 = function(argcv) {     // accessor method isOuter
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isOuter", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isOuter
      this.methods["isOuter"] = func290;
      func290.methodName = "isOuter";
      func290.paramCounts = [0];
      func290.paramNames = [];
      func290.definitionLine = 263;
      func290.definitionModule = "ast";
      var func291 = function(argcv) {     // accessor method isSelfOrOuter
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isSelfOrOuter", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isSelfOrOuter
      this.methods["isSelfOrOuter"] = func291;
      func291.methodName = "isSelfOrOuter";
      func291.paramCounts = [0];
      func291.paramNames = [];
      func291.definitionLine = 264;
      func291.definitionModule = "ast";
      var func292 = function(argcv) {     // accessor method isBlock
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isBlock", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isBlock
      this.methods["isBlock"] = func292;
      func292.methodName = "isBlock";
      func292.paramCounts = [0];
      func292.paramNames = [];
      func292.definitionLine = 265;
      func292.definitionModule = "ast";
      var func293 = function(argcv) {     // accessor method isObject
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isObject", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isObject
      this.methods["isObject"] = func293;
      func293.methodName = "isObject";
      func293.paramCounts = [0];
      func293.paramNames = [];
      func293.definitionLine = 266;
      func293.definitionModule = "ast";
      var func294 = function(argcv) {     // accessor method isIdentifier
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isIdentifier", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isIdentifier
      this.methods["isIdentifier"] = func294;
      func294.methodName = "isIdentifier";
      func294.paramCounts = [0];
      func294.paramNames = [];
      func294.definitionLine = 267;
      func294.definitionModule = "ast";
      var func295 = function(argcv) {     // accessor method isDialect
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isDialect", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isDialect
      this.methods["isDialect"] = func295;
      func295.methodName = "isDialect";
      func295.paramCounts = [0];
      func295.paramNames = [];
      func295.definitionLine = 268;
      func295.definitionModule = "ast";
      var func296 = function(argcv) {     // accessor method isImport
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isImport", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isImport
      this.methods["isImport"] = func296;
      func296.methodName = "isImport";
      func296.paramCounts = [0];
      func296.paramNames = [];
      func296.definitionLine = 269;
      func296.definitionModule = "ast";
      var func297 = function(argcv) {     // accessor method isTypeDec
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isTypeDec", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isTypeDec
      this.methods["isTypeDec"] = func297;
      func297.methodName = "isTypeDec";
      func297.paramCounts = [0];
      func297.paramNames = [];
      func297.definitionLine = 270;
      func297.definitionModule = "ast";
      var func298 = function(argcv) {     // accessor method isExternal
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isExternal", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isExternal
      this.methods["isExternal"] = func298;
      func298.methodName = "isExternal";
      func298.paramCounts = [0];
      func298.paramNames = [];
      func298.definitionLine = 271;
      func298.definitionModule = "ast";
      var func299 = function(argcv) {     // accessor method isFresh
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isFresh", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isFresh
      this.methods["isFresh"] = func299;
      func299.methodName = "isFresh";
      func299.paramCounts = [0];
      func299.paramNames = [];
      func299.definitionLine = 272;
      func299.definitionModule = "ast";
      var func300 = function(argcv) {     // accessor method isConstant
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isConstant", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isConstant
      this.methods["isConstant"] = func300;
      func300.methodName = "isConstant";
      func300.paramCounts = [0];
      func300.paramNames = [];
      func300.definitionLine = 273;
      func300.definitionModule = "ast";
      var func301 = function(argcv) {     // accessor method isSequenceConstructor
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isSequenceConstructor", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isSequenceConstructor
      this.methods["isSequenceConstructor"] = func301;
      func301.methodName = "isSequenceConstructor";
      func301.paramCounts = [0];
      func301.paramNames = [];
      func301.definitionLine = 274;
      func301.definitionModule = "ast";
      var func302 = function(argcv) {     // accessor method canInherit
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("canInherit", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method canInherit
      this.methods["canInherit"] = func302;
      func302.methodName = "canInherit";
      func302.paramCounts = [0];
      func302.paramNames = [];
      func302.definitionLine = 275;
      func302.definitionModule = "ast";
      var func303 = function(argcv) {     // accessor method returnsObject
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("returnsObject", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method returnsObject
      this.methods["returnsObject"] = func303;
      func303.methodName = "returnsObject";
      func303.paramCounts = [0];
      func303.paramNames = [];
      func303.definitionLine = 276;
      func303.definitionModule = "ast";
      var func304 = function(argcv) {     // accessor method isImplicit
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isImplicit", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isImplicit
      this.methods["isImplicit"] = func304;
      func304.methodName = "isImplicit";
      func304.paramCounts = [0];
      func304.paramNames = [];
      func304.definitionLine = 277;
      func304.definitionModule = "ast";
      var func305 = function(argcv, var_aNode) {     // accessor method usesAsType(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("usesAsType(_)", 0, numArgs - 1);
        return GraceFalse;
      };    // end of method usesAsType(_)
      this.methods["usesAsType(1)"] = func305;
      func305.methodName = "usesAsType(1)";
      func305.paramCounts = [1];
      func305.paramNames = ["aNode"];
      func305.definitionLine = 278;
      func305.definitionModule = "ast";
      var func306 = function(argcv) {    // method hash, line 279
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hash", 0, numArgs - 0);
        }
        setLineNumber(279);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call308 = selfRequest(this, "line", [0]);
        var call307 = request(call308, "hash", [0]);
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call310 = selfRequest(this, "linePos", [0]);
        var call309 = request(call310, "hash", [0]);
        var prod311 = request(call307, "*(1)", [1], call309);
        return prod311;
      };    // end of method hash
      this.methods["hash"] = func306;
      func306.methodName = "hash";
      func306.paramCounts = [0];
      func306.paramNames = [];
      func306.definitionLine = 279;
      func306.definitionModule = "ast";
      var func312 = function(argcv) {    // method asString, line 280
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(280);    // compilenode string
        var string313 = new GraceString("");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call314 = selfRequest(this, "kind", [0]);
        var opresult315 = request(string313, "++(1)", [1], call314);
        var string316 = new GraceString(" ");
        var opresult317 = request(opresult315, "++(1)", [1], string316);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call318 = selfRequest(this, "nameString", [0]);
        var opresult319 = request(opresult317, "++(1)", [1], call318);
        var string320 = new GraceString("");
        var opresult321 = request(opresult319, "++(1)", [1], string320);
        return opresult321;
      };    // end of method asString
      this.methods["asString"] = func312;
      func312.methodName = "asString";
      func312.paramCounts = [0];
      func312.paramNames = [];
      func312.definitionLine = 280;
      func312.definitionModule = "ast";
      var func322 = function(argcv) {    // method nameString, line 281
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("nameString", 0, numArgs - 0);
        }
        setLineNumber(281);    // compilenode string
        var string323 = new GraceString("?");
        return string323;
      };    // end of method nameString
      this.methods["nameString"] = func322;
      func322.methodName = "nameString";
      func322.paramCounts = [0];
      func322.paramNames = [];
      func322.definitionLine = 281;
      func322.definitionModule = "ast";
      var func324 = function(argcv) {     // accessor method isWritable
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isWritable", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isWritable
      this.methods["isWritable"] = func324;
      func324.methodName = "isWritable";
      func324.paramCounts = [0];
      func324.paramNames = [];
      func324.definitionLine = 282;
      func324.definitionModule = "ast";
      var func325 = function(argcv) {     // accessor method isReadable
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isReadable", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isReadable
      this.methods["isReadable"] = func325;
      func325.methodName = "isReadable";
      func325.paramCounts = [0];
      func325.paramNames = [];
      func325.definitionLine = 283;
      func325.definitionModule = "ast";
      var func326 = function(argcv) {     // accessor method isPublic
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isPublic", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isPublic
      this.methods["isPublic"] = func326;
      func326.methodName = "isPublic";
      func326.paramCounts = [0];
      func326.paramNames = [];
      func326.definitionLine = 284;
      func326.definitionModule = "ast";
      var func327 = function(argcv) {    // method isConfidential, line 285
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("isConfidential", 0, numArgs - 0);
        }
        setLineNumber(285);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call329 = selfRequest(this, "isPublic", [0]);
        var call328 = request(call329, "not", [0]);
        return call328;
      };    // end of method isConfidential
      this.methods["isConfidential"] = func327;
      func327.methodName = "isConfidential";
      func327.paramCounts = [0];
      func327.paramNames = [];
      func327.definitionLine = 285;
      func327.definitionModule = "ast";
      var func330 = function(argcv) {    // method decType, line 286
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("decType", 0, numArgs - 0);
        }
        var if331 = GraceDone;
        setLineNumber(287);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call332 = selfRequest(this, "dtype", [0]);
        var opresult333 = request(GraceFalse, "==(1)", [1], call332);
        if (Grace_isTrue(opresult333)) {
          setLineNumber(288);    // compilenode return
          if (var_unknownType === undefined) raiseUninitializedVariable("unknownType");
          return var_unknownType;
        }
        setLineNumber(290);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call334 = selfRequest(this, "dtype", [0]);
        return call334;
      };    // end of method decType
      this.methods["decType"] = func330;
      func330.methodName = "decType";
      func330.paramCounts = [0];
      func330.paramNames = [];
      func330.definitionLine = 286;
      func330.definitionModule = "ast";
      var func335 = function(argcv) {     // accessor method isSimple
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isSimple", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isSimple
      this.methods["isSimple"] = func335;
      func335.methodName = "isSimple";
      func335.paramCounts = [0];
      func335.paramNames = [];
      func335.definitionLine = 292;
      func335.definitionModule = "ast";
      var func336 = function(argcv) {     // accessor method isDelimited
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isDelimited", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isDelimited
      this.methods["isDelimited"] = func336;
      func336.methodName = "isDelimited";
      func336.paramCounts = [0];
      func336.paramNames = [];
      func336.definitionLine = 293;
      func336.definitionModule = "ast";
      var func337 = function(argcv) {    // method description, line 294
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("description", 0, numArgs - 0);
        }
        setLineNumber(294);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call338 = selfRequest(this, "kind", [0]);
        return call338;
      };    // end of method description
      this.methods["description"] = func337;
      func337.methodName = "description";
      func337.paramCounts = [0];
      func337.paramNames = [];
      func337.definitionLine = 294;
      func337.definitionModule = "ast";
      var func339 = function(argcv, var_visitor) {    // method accept(_), line 295
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("accept(_)", 0, numArgs - 1);
        }
        setLineNumber(296);    // compilenode member
        // call case 6: other requests
        if (var_ancestorChain === undefined) raiseUninitializedVariable("ancestorChain");
        var call341 = request(var_ancestorChain, "empty", [0]);
        // call case 4: self request with 2 args and 0 typeArgs 
        var call340 = selfRequest(this, "accept(1)from(1)", [1, 1], var_visitor, call341);
        return call340;
      };    // end of method accept(_)
      this.methods["accept(1)"] = func339;
      func339.methodName = "accept(1)";
      func339.paramCounts = [1];
      func339.paramNames = ["visitor"];
      func339.definitionLine = 295;
      func339.definitionModule = "ast";
      var func342 = function(argcv) {    // method hasScope, line 298
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hasScope", 0, numArgs - 0);
        }
        setLineNumber(298);    // compilenode member
        // call case 2: outer request
        var call343 = selfRequest(importedModules["ast"], "fakeSymbolTable", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call344 = selfRequest(this, "symbolTable", [0]);
        var opresult345 = request(call343, "\u2260(1)", [1], call344);
        return opresult345;
      };    // end of method hasScope
      this.methods["hasScope"] = func342;
      func342.methodName = "hasScope";
      func342.paramCounts = [0];
      func342.paramNames = [];
      func342.definitionLine = 298;
      func342.definitionModule = "ast";
      var func346 = function(argcv) {    // method scope, line 299
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("scope", 0, numArgs - 0);
        }
        var if347 = GraceDone;
        setLineNumber(300);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call348 = selfRequest(this, "hasScope", [0]);
        if (Grace_isTrue(call348)) {
          setLineNumber(301);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call349 = selfRequest(this, "symbolTable", [0]);
          if347 = call349;
        } else {
          setLineNumber(303);    // compilenode string
          var string351 = new GraceString("accessing unset symbol table");
          // call case 6: other requests
          // call case 2: outer request
          var call352 = selfRequest(var_prelude, "ProgrammingError", [0]);
          var call350 = request(call352, "raise(1)", [1], string351);
          if347 = call350;
        }
        return if347;
      };    // end of method scope
      this.methods["scope"] = func346;
      func346.methodName = "scope";
      func346.paramCounts = [0];
      func346.paramNames = [];
      func346.definitionLine = 299;
      func346.definitionModule = "ast";
      var func353 = function(argcv, var_st) {    // method scope:=(_), line 307
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("scope:=(_)", 0, numArgs - 1);
        }
        setLineNumber(311);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call354 = selfRequest(this, "symbolTable:=(1)", [1], var_st);
        return call354;
      };    // end of method scope:=(_)
      this.methods["scope:=(1)"] = func353;
      func353.methodName = "scope:=(1)";
      func353.paramCounts = [1];
      func353.paramNames = ["st"];
      func353.definitionLine = 307;
      func353.definitionModule = "ast";
      var func355 = function(argcv, var_st) {    // method setScope(_), line 313
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("setScope(_)", 0, numArgs - 1);
        }
        setLineNumber(315);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call356 = selfRequest(this, "scope:=(1)", [1], var_st);
        return this;
      };    // end of method setScope(_)
      this.methods["setScope(1)"] = func355;
      func355.methodName = "setScope(1)";
      func355.paramCounts = [1];
      func355.paramNames = ["st"];
      func355.definitionLine = 313;
      func355.definitionModule = "ast";
      var func357 = function(argcv, var_other) {    // method shallowCopyFieldsFrom(_), line 318
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("shallowCopyFieldsFrom(_)", 0, numArgs - 1);
        }
        setLineNumber(319);    // compilenode member
        // call case 6: other requests
        var call359 = request(var_other, "register", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call358 = selfRequest(this, "register:=(1)", [1], call359);
        setLineNumber(320);    // compilenode member
        // call case 6: other requests
        var call361 = request(var_other, "line", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call360 = selfRequest(this, "line:=(1)", [1], call361);
        setLineNumber(321);    // compilenode member
        // call case 6: other requests
        var call363 = request(var_other, "linePos", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call362 = selfRequest(this, "linePos:=(1)", [1], call363);
        setLineNumber(322);    // compilenode member
        // call case 6: other requests
        var call365 = request(var_other, "scope", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call364 = selfRequest(this, "scope:=(1)", [1], call365);
        setLineNumber(323);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call366 = selfRequest(this, "postCopy(1)", [1], var_other);
        return this;
      };    // end of method shallowCopyFieldsFrom(_)
      this.methods["shallowCopyFieldsFrom(1)"] = func357;
      func357.methodName = "shallowCopyFieldsFrom(1)";
      func357.paramCounts = [1];
      func357.paramNames = ["other"];
      func357.definitionLine = 318;
      func357.definitionModule = "ast";
      var func367 = function(argcv, var_other) {    // method postCopy(_), line 326
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
        }
        return GraceDone;
      };    // end of method postCopy(_)
      this.methods["postCopy(1)"] = func367;
      func367.methodName = "postCopy(1)";
      func367.paramCounts = [1];
      func367.paramNames = ["other"];
      func367.definitionLine = 326;
      func367.definitionModule = "ast";
      var func368 = function(argcv, var_depth) {    // method prettyPrefix(_), line 330
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("prettyPrefix(_)", 0, numArgs - 1);
        }
        setLineNumber(331);    // compilenode string
        var string369 = new GraceString("  ");
        var sum370 = request(var_depth, "+(1)", [1], new GraceNum(1));
        var prod371 = request(string369, "*(1)", [1], sum370);
        var var_spc = prod371;
        var if372 = GraceDone;
        setLineNumber(332);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call374 = selfRequest(this, "scope", [0]);
        var call373 = request(call374, "node", [0]);
        var opresult375 = request(call373, "==(1)", [1], this);
        var block376 = new GraceBlock(this, 332, 0);
        block376.guard = jsTrue;
        block376.real = function block376() {
          setLineNumber(332);    // compilenode member
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call377 = request(var_util, "target", [0]);
          var string378 = new GraceString("symbols");
          var opresult379 = request(call377, "==(1)", [1], string378);
          return opresult379;
        };
        let applyMeth376 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth376.methodName = "apply";
        applyMeth376.paramCounts = [0];
        applyMeth376.paramNames = [];
        applyMeth376.definitionLine = 332;
        applyMeth376.definitionModule = "ast";
        block376.methods["apply"] = applyMeth376;
        var opresult380 = request(opresult375, "&&(1)", [1], block376);
        if (Grace_isTrue(opresult380)) {
          setLineNumber(333);    // compilenode string
          var string381 = new GraceString("");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call382 = selfRequest(this, "range", [0]);
          var opresult383 = request(string381, "++(1)", [1], call382);
          var string384 = new GraceString(" ");
          var opresult385 = request(opresult383, "++(1)", [1], string384);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call386 = selfRequest(this, "description", [0]);
          var opresult387 = request(opresult385, "++(1)", [1], call386);
          var string388 = new GraceString("\n");
          var opresult389 = request(opresult387, "++(1)", [1], string388);
          if (var_spc === undefined) raiseUninitializedVariable("spc");
          var opresult390 = request(opresult389, "++(1)", [1], var_spc);
          var string391 = new GraceString("Symbols(");
          var opresult392 = request(opresult390, "++(1)", [1], string391);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call394 = selfRequest(this, "scope", [0]);
          var call393 = request(call394, "variety", [0]);
          var opresult395 = request(opresult392, "++(1)", [1], call393);
          var string396 = new GraceString("): ");
          var opresult397 = request(opresult395, "++(1)", [1], string396);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call398 = selfRequest(this, "scope", [0]);
          var opresult399 = request(opresult397, "++(1)", [1], call398);
          var string400 = new GraceString("");
          var opresult401 = request(opresult399, "++(1)", [1], string400);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call403 = selfRequest(this, "scope", [0]);
          var call402 = request(call403, "elementScopesAsString", [0]);
          var opresult404 = request(opresult401, "++(1)", [1], call402);
          var string405 = new GraceString("");
          var opresult406 = request(opresult404, "++(1)", [1], string405);
          if372 = opresult406;
        } else {
          var if407 = GraceDone;
          setLineNumber(334);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call409 = selfRequest(this, "scope", [0]);
          var call408 = request(call409, "variety", [0]);
          var string410 = new GraceString("fake");
          var opresult411 = request(call408, "==(1)", [1], string410);
          if (Grace_isTrue(opresult411)) {
            setLineNumber(335);    // compilenode string
            var string412 = new GraceString("");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call413 = selfRequest(this, "range", [0]);
            var opresult414 = request(string412, "++(1)", [1], call413);
            var string415 = new GraceString(" ");
            var opresult416 = request(opresult414, "++(1)", [1], string415);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call417 = selfRequest(this, "description", [0]);
            var opresult418 = request(opresult416, "++(1)", [1], call417);
            var string419 = new GraceString("");
            var opresult420 = request(opresult418, "++(1)", [1], string419);
            if407 = opresult420;
          } else {
            setLineNumber(337);    // compilenode string
            var string421 = new GraceString("");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call422 = selfRequest(this, "range", [0]);
            var opresult423 = request(string421, "++(1)", [1], call422);
            var string424 = new GraceString(" ");
            var opresult425 = request(opresult423, "++(1)", [1], string424);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call426 = selfRequest(this, "description", [0]);
            var opresult427 = request(opresult425, "++(1)", [1], call426);
            var string428 = new GraceString(" ");
            var opresult429 = request(opresult427, "++(1)", [1], string428);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call431 = selfRequest(this, "scope", [0]);
            var call430 = request(call431, "asDebugString", [0]);
            var opresult432 = request(opresult429, "++(1)", [1], call430);
            var string433 = new GraceString("");
            var opresult434 = request(opresult432, "++(1)", [1], string433);
            if407 = opresult434;
          }
          if372 = if407;
        }
        return if372;
      };    // end of method prettyPrefix(_)
      this.methods["prettyPrefix(1)"] = func368;
      func368.methodName = "prettyPrefix(1)";
      func368.paramCounts = [1];
      func368.paramNames = ["depth"];
      func368.definitionLine = 330;
      func368.definitionModule = "ast";
      var func435 = function(argcv, var_depth) {    // method basePretty(_), line 340
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("basePretty(_)", 0, numArgs - 1);
        }
        setLineNumber(340);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call436 = selfRequest(this, "prettyPrefix(1)", [1], var_depth);
        return call436;
      };    // end of method basePretty(_)
      this.methods["basePretty(1)"] = func435;
      func435.methodName = "basePretty(1)";
      func435.paramCounts = [1];
      func435.paramNames = ["depth"];
      func435.definitionLine = 340;
      func435.definitionModule = "ast";
      var func437 = function(argcv, var_depth) {    // method pretty(_), line 341
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("pretty(_)", 0, numArgs - 1);
        }
        setLineNumber(341);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call438 = selfRequest(this, "basePretty(1)", [1], var_depth);
        return call438;
      };    // end of method pretty(_)
      this.methods["pretty(1)"] = func437;
      func437.methodName = "pretty(1)";
      func437.paramCounts = [1];
      func437.paramNames = ["depth"];
      func437.definitionLine = 341;
      func437.definitionModule = "ast";
      var func439 = function(argcv) {    // method deepCopy, line 342
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("deepCopy", 0, numArgs - 0);
        }
        setLineNumber(343);    // compilenode block
        var block441 = new GraceBlock(this, 343, 1);
        block441.guard = jsTrue;
        block441.real = function block441(var_each) {
          setLineNumber(343);    // compileBlock
          return var_each;
        };
        let applyMeth441 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth441.methodName = "apply(1)";
        applyMeth441.paramCounts = [1];
        applyMeth441.paramNames = ["each"];
        applyMeth441.definitionLine = 343;
        applyMeth441.definitionModule = "ast";
        block441.methods["apply(1)"] = applyMeth441;
        let matchesMeth441 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth441.methodName = "matches(1)";
        matchesMeth441.paramCounts = [1];
        matchesMeth441.paramNames = ["each"];
        matchesMeth441.definitionLine = 343;
        matchesMeth441.definitionModule = "ast";
        block441.methods["matches(1)"] = matchesMeth441;
        // call case 6: other requests
        if (var_ancestorChain === undefined) raiseUninitializedVariable("ancestorChain");
        var call442 = request(var_ancestorChain, "empty", [0]);
        // call case 4: self request with 2 args and 0 typeArgs 
        var call440 = selfRequest(this, "map(1)ancestors(1)", [1, 1], block441, call442);
        return call440;
      };    // end of method deepCopy
      this.methods["deepCopy"] = func439;
      func439.methodName = "deepCopy";
      func439.paramCounts = [0];
      func439.paramNames = [];
      func439.definitionLine = 342;
      func439.definitionModule = "ast";
      var func443 = function(argcv) {    // method enclosingObject, line 345
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("enclosingObject", 0, numArgs - 0);
        }
        setLineNumber(346);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call446 = selfRequest(this, "scope", [0]);
        var call445 = request(call446, "enclosingObjectScope", [0]);
        var call444 = request(call445, "node", [0]);
        var var_obj = call444;
        return var_obj;
      };    // end of method enclosingObject
      this.methods["enclosingObject"] = func443;
      func443.methodName = "enclosingObject";
      func443.paramCounts = [0];
      func443.paramNames = [];
      func443.definitionLine = 345;
      func443.definitionModule = "ast";
      var func447 = function(argcv, var_cmtNode) {    // method addComment(_), line 349
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("addComment(_)", 0, numArgs - 1);
        }
        var if448 = GraceDone;
        setLineNumber(350);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call449 = selfRequest(this, "comments", [0]);
        var opresult450 = request(GraceFalse, "==(1)", [1], call449);
        if (Grace_isTrue(opresult450)) {
          setLineNumber(351);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call451 = selfRequest(this, "comments:=(1)", [1], var_cmtNode);
          if448 = call451;
        } else {
          setLineNumber(353);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call453 = selfRequest(this, "comments", [0]);
          var call452 = request(call453, "extendCommentUsing(1)", [1], var_cmtNode);
          if448 = call452;
        }
        return if448;
      };    // end of method addComment(_)
      this.methods["addComment(1)"] = func447;
      func447.methodName = "addComment(1)";
      func447.paramCounts = [1];
      func447.paramNames = ["cmtNode"];
      func447.definitionLine = 349;
      func447.definitionModule = "ast";
      var func454 = function(argcv, var_cmtNodeList) {    // method addComments(_), line 356
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("addComments(_)", 0, numArgs - 1);
        }
        setLineNumber(357);    // compilenode block
        var block456 = new GraceBlock(this, 357, 1);
        block456.guard = jsTrue;
        block456.real = function block456(var_each) {
          setLineNumber(357);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call457 = selfRequest(this, "addComment(1)", [1], var_each);
          return call457;
        };
        let applyMeth456 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth456.methodName = "apply(1)";
        applyMeth456.paramCounts = [1];
        applyMeth456.paramNames = ["each"];
        applyMeth456.definitionLine = 357;
        applyMeth456.definitionModule = "ast";
        block456.methods["apply(1)"] = applyMeth456;
        let matchesMeth456 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth456.methodName = "matches(1)";
        matchesMeth456.paramCounts = [1];
        matchesMeth456.paramNames = ["each"];
        matchesMeth456.definitionLine = 357;
        matchesMeth456.definitionModule = "ast";
        block456.methods["matches(1)"] = matchesMeth456;
        // call case 6: other requests
        var call455 = request(var_cmtNodeList, "do(1)", [1], block456);
        return call455;
      };    // end of method addComments(_)
      this.methods["addComments(1)"] = func454;
      func454.methodName = "addComments(1)";
      func454.paramCounts = [1];
      func454.paramNames = ["cmtNodeList"];
      func454.definitionLine = 356;
      func454.definitionModule = "ast";
      var func458 = function(argcv) {    // method statementName, line 359
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("statementName", 0, numArgs - 0);
        }
        setLineNumber(359);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call459 = selfRequest(this, "kind", [0]);
        return call459;
      };    // end of method statementName
      this.methods["statementName"] = func458;
      func458.methodName = "statementName";
      func458.paramCounts = [0];
      func458.paramNames = [];
      func458.definitionLine = 359;
      func458.definitionModule = "ast";
      this.mutable = true;
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 213;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj225_init = function() {    // init of object on line 213
        setLineNumber(216);    // compilenode string
        var string460 = new GraceString("");
        this.data.register = string460;
        setLineNumber(217);    // compilenode member
        // call case 6: other requests
        if (var_util === undefined) raiseUninitializedVariable("util");
        var call461 = request(var_util, "linenum", [0]);
        this.data.line = call461;
        setLineNumber(218);    // compilenode member
        // call case 6: other requests
        if (var_util === undefined) raiseUninitializedVariable("util");
        var call462 = request(var_util, "linepos", [0]);
        this.data.linePos = call462;
        setLineNumber(219);    // compilenode member
        // call case 2: outer request
        var call463 = selfRequest(importedModules["ast"], "fakeSymbolTable", [0]);
        this.data.symbolTable = call463;
        setLineNumber(220);    // compilenode call
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call465 = selfRequest(this, "symbolTable", [0]);
        var call464 = selfRequest(call465, "node:=(1)", [1], this);
        this.data.comments = GraceFalse;
      };
      return obj225_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj225_init = obj225_build.call(inheritingObject, null, this, aliases, exclusions);
    return obj225_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method baseNode$build(_,_,_)
  this.methods["baseNode$build(3)"] = func224;
  func224.methodName = "baseNode$build(3)";
  func224.paramCounts = [0];
  func224.paramNames = [];
  func224.definitionLine = 213;
  func224.definitionModule = "ast";
  var func466 = function(argcv) {    // method fakeSymbolTable, line 390
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("fakeSymbolTable", 0, numArgs - 0);
    }
    var ouc = emptyGraceObject("fakeSymbolTable", "ast", 390);
    var ouc_init = this.methods["fakeSymbolTable$build(3)"].call(this, null, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method fakeSymbolTable
  this.methods["fakeSymbolTable"] = func466;
  func466.methodName = "fakeSymbolTable";
  func466.paramCounts = [0];
  func466.paramNames = [];
  func466.definitionLine = 390;
  func466.definitionModule = "ast";
  var func467 = function(argcv, inheritingObject, aliases, exclusions) {    // method fakeSymbolTable$build(_,_,_), line 390
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("fakeSymbolTable", 0, numArgs - 0);
    }
    var obj468_build = function(ignore, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_390");
      this.outer_ast_390 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(391);    // reuse call
      var initFun469 = selfRequest(var_prelude, "identityEquality$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.node = undefined;
      var reader470_node = function() {  // reader method node
          if (this.data.node === undefined) raiseUninitializedVariable("node");
          return this.data.node;
      };
      reader470_node.isVar = true;
      this.methods["node"] = reader470_node;
      var writer471_node = function(argcv, n) {   // writer method node:=(_)
        this.data.node = n;
        return GraceDone;
      };
      this.methods["node:=(1)"] = writer471_node;
      var func472 = function(argcv) {    // method asString, line 396
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(396);    // compilenode string
        var string473 = new GraceString("the fakeSymbolTable");
        return string473;
      };    // end of method asString
      this.methods["asString"] = func472;
      func472.methodName = "asString";
      func472.paramCounts = [0];
      func472.paramNames = [];
      func472.definitionLine = 396;
      func472.definitionModule = "ast";
      var func474 = function(argcv, var_n, var_kind) {    // method addNode(_)ac(_), line 397
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("addNode(_)ac(_)", 0, numArgs - 2);
        }
        setLineNumber(398);    // compilenode string
        var string476 = new GraceString("fakeSymbolTable(on node ");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call477 = selfRequest(this, "node", [0]);
        var opresult478 = request(string476, "++(1)", [1], call477);
        var string479 = new GraceString(").addNode(");
        var opresult480 = request(opresult478, "++(1)", [1], string479);
        var opresult481 = request(opresult480, "++(1)", [1], var_n);
        var string482 = new GraceString(") ac \"");
        var opresult483 = request(opresult481, "++(1)", [1], string482);
        var opresult484 = request(opresult483, "++(1)", [1], var_kind);
        var string485 = new GraceString("\"");
        var opresult486 = request(opresult484, "++(1)", [1], string485);
        // call case 6: other requests
        // call case 2: outer request
        var call487 = selfRequest(var_prelude, "ProgrammingError", [0]);
        var call475 = request(call487, "raise(1)", [1], opresult486);
        return call475;
      };    // end of method addNode(_)ac(_)
      this.methods["addNode(1)ac(1)"] = func474;
      func474.methodName = "addNode(1)ac(1)";
      func474.paramCounts = [1, 1];
      func474.paramNames = ["n", "kind"];
      func474.definitionLine = 397;
      func474.definitionModule = "ast";
      var func488 = function(argcv, var_name, var_action) {    // method thatDefines(_)ifNone(_), line 400
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("thatDefines(_)ifNone(_)", 0, numArgs - 2);
        }
        setLineNumber(401);    // compilenode member
        // call case 6: other requests
        var call489 = request(var_action, "apply", [0]);
        return call489;
      };    // end of method thatDefines(_)ifNone(_)
      this.methods["thatDefines(1)ifNone(1)"] = func488;
      func488.methodName = "thatDefines(1)ifNone(1)";
      func488.paramCounts = [1, 1];
      func488.paramNames = ["name", "action"];
      func488.definitionLine = 400;
      func488.definitionModule = "ast";
      var func490 = function(argcv, var_name) {    // method thatDefines(_), line 403
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("thatDefines(_)", 0, numArgs - 1);
        }
        setLineNumber(404);    // compilenode string
        var string492 = new GraceString("fakeSymbolTable(on node ");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call493 = selfRequest(this, "node", [0]);
        var opresult494 = request(string492, "++(1)", [1], call493);
        var string495 = new GraceString(").thatDefines(");
        var opresult496 = request(opresult494, "++(1)", [1], string495);
        var opresult497 = request(opresult496, "++(1)", [1], var_name);
        var string498 = new GraceString(").");
        var opresult499 = request(opresult497, "++(1)", [1], string498);
        // call case 6: other requests
        // call case 2: outer request
        var call500 = selfRequest(var_prelude, "ProgrammingError", [0]);
        var call491 = request(call500, "raise(1)", [1], opresult499);
        return call491;
      };    // end of method thatDefines(_)
      this.methods["thatDefines(1)"] = func490;
      func490.methodName = "thatDefines(1)";
      func490.paramCounts = [1];
      func490.paramNames = ["name"];
      func490.definitionLine = 403;
      func490.definitionModule = "ast";
      var func501 = function(argcv) {    // method enclosingObjectScope, line 406
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("enclosingObjectScope", 0, numArgs - 0);
        }
        setLineNumber(407);    // compilenode string
        var string503 = new GraceString("fakeSymbolTable(on node ");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call504 = selfRequest(this, "node", [0]);
        var opresult505 = request(string503, "++(1)", [1], call504);
        var string506 = new GraceString(").enclosingObjectScope");
        var opresult507 = request(opresult505, "++(1)", [1], string506);
        // call case 6: other requests
        // call case 2: outer request
        var call508 = selfRequest(var_prelude, "ProgrammingError", [0]);
        var call502 = request(call508, "raise(1)", [1], opresult507);
        return call502;
      };    // end of method enclosingObjectScope
      this.methods["enclosingObjectScope"] = func501;
      func501.methodName = "enclosingObjectScope";
      func501.paramCounts = [0];
      func501.paramNames = [];
      func501.definitionLine = 406;
      func501.definitionModule = "ast";
      var func509 = function(argcv) {    // method variety, line 409
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("variety", 0, numArgs - 0);
        }
        setLineNumber(409);    // compilenode string
        var string510 = new GraceString("fake");
        return string510;
      };    // end of method variety
      this.methods["variety"] = func509;
      func509.methodName = "variety";
      func509.paramCounts = [0];
      func509.paramNames = [];
      func509.definitionLine = 409;
      func509.definitionModule = "ast";
      var func511 = function(argcv) {    // method elementScopesAsString, line 410
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("elementScopesAsString", 0, numArgs - 0);
        }
        setLineNumber(410);    // compilenode string
        var string512 = new GraceString("[fake]");
        return string512;
      };    // end of method elementScopesAsString
      this.methods["elementScopesAsString"] = func511;
      func511.methodName = "elementScopesAsString";
      func511.paramCounts = [0];
      func511.paramNames = [];
      func511.definitionLine = 410;
      func511.definitionModule = "ast";
      this.mutable = true;
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 390;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj468_init = function() {    // init of object on line 390
        this.data.node = undefined;
      };
      return obj468_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj468_init = obj468_build.call(inheritingObject, null, this, aliases, exclusions);
    return obj468_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method fakeSymbolTable$build(_,_,_)
  this.methods["fakeSymbolTable$build(3)"] = func467;
  func467.methodName = "fakeSymbolTable$build(3)";
  func467.paramCounts = [0];
  func467.paramNames = [];
  func467.definitionLine = 390;
  func467.definitionModule = "ast";
  var func513 = function(argcv, var_parts__39__, var_rtype__39__) {    // method methodSignatureNode(_,_), line 738
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("methodSignatureNode(_,_)", 0, numArgs - 2);
    }
    var ouc = emptyGraceObject("methodSignatureNode(_,_)", "ast", 738);
    var ouc_init = this.methods["methodSignatureNode(2)$build(3)"].call(this, null, var_parts__39__, var_rtype__39__, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method methodSignatureNode(_,_)
  this.methods["methodSignatureNode(2)"] = func513;
  func513.methodName = "methodSignatureNode(2)";
  func513.paramCounts = [2];
  func513.paramNames = ["parts'", "rtype'"];
  func513.definitionLine = 738;
  func513.definitionModule = "ast";
  var func514 = function(argcv, var_parts__39__, var_rtype__39__, inheritingObject, aliases, exclusions) {    // method methodSignatureNode(_,_)$build(_,_,_), line 738
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("methodSignatureNode(_,_)", 0, numArgs - 2);
    }
    var obj515_build = function(ignore, var_parts__39__, var_rtype__39__, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_738");
      this.outer_ast_738 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(744);    // reuse call
      var initFun516 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.kind = undefined;
      var reader517_kind = function() {  // reader method kind
          if (this.data.kind === undefined) raiseUninitializedVariable("kind");
          return this.data.kind;
      };
      reader517_kind.isDef = true;
      this.methods["kind"] = reader517_kind;
      this.data.signature = undefined;
      var reader518_signature = function() {  // reader method signature
          if (this.data.signature === undefined) raiseUninitializedVariable("signature");
          return this.data.signature;
      };
      reader518_signature.isVar = true;
      this.methods["signature"] = reader518_signature;
      var writer519_signature = function(argcv, n) {   // writer method signature:=(_)
        this.data.signature = n;
        return GraceDone;
      };
      this.methods["signature:=(1)"] = writer519_signature;
      this.data.rtype = undefined;
      var reader520_rtype = function() {  // reader method rtype
          if (this.data.rtype === undefined) raiseUninitializedVariable("rtype");
          return this.data.rtype;
      };
      reader520_rtype.isVar = true;
      this.methods["rtype"] = reader520_rtype;
      var writer521_rtype = function(argcv, n) {   // writer method rtype:=(_)
        this.data.rtype = n;
        return GraceDone;
      };
      this.methods["rtype:=(1)"] = writer521_rtype;
      this.data.cachedIdentifier = undefined;
      var reader522_cachedIdentifier = function() {  // reader method cachedIdentifier
          if (this.data.cachedIdentifier === undefined) raiseUninitializedVariable("cachedIdentifier");
          return this.data.cachedIdentifier;
      };
      reader522_cachedIdentifier.isVar = true;
      reader522_cachedIdentifier.confidential = true;
      this.methods["cachedIdentifier"] = reader522_cachedIdentifier;
      var writer523_cachedIdentifier = function(argcv, n) {   // writer method cachedIdentifier:=(_)
        this.data.cachedIdentifier = n;
        return GraceDone;
      };
      writer523_cachedIdentifier.confidential = true;
      this.methods["cachedIdentifier:=(1)"] = writer523_cachedIdentifier;
      this.data.isBindingOccurrence = undefined;
      var reader524_isBindingOccurrence = function() {  // reader method isBindingOccurrence
          if (this.data.isBindingOccurrence === undefined) raiseUninitializedVariable("isBindingOccurrence");
          return this.data.isBindingOccurrence;
      };
      reader524_isBindingOccurrence.isVar = true;
      reader524_isBindingOccurrence.confidential = true;
      this.methods["isBindingOccurrence"] = reader524_isBindingOccurrence;
      var writer525_isBindingOccurrence = function(argcv, n) {   // writer method isBindingOccurrence:=(_)
        this.data.isBindingOccurrence = n;
        return GraceDone;
      };
      writer525_isBindingOccurrence.confidential = true;
      this.methods["isBindingOccurrence:=(1)"] = writer525_isBindingOccurrence;
      var func526 = function(argcv) {    // method appliedOccurrence, line 751
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("appliedOccurrence", 0, numArgs - 0);
        }
        setLineNumber(752);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call527 = selfRequest(this, "isBindingOccurrence:=(1)", [1], GraceFalse);
        var if528 = GraceDone;
        setLineNumber(753);    // compilenode op
        if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call529 = selfRequest(this, "cachedIdentifier", [0]);
        var opresult530 = request(var_uninitialized, "\u2260(1)", [1], call529);
        if (Grace_isTrue(opresult530)) {
          setLineNumber(754);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call532 = selfRequest(this, "cachedIdentifier", [0]);
          var call531 = selfRequest(call532, "isBindingOccurrence:=(1)", [1], GraceFalse);
          if528 = call531;
        }
        return this;
      };    // end of method appliedOccurrence
      this.methods["appliedOccurrence"] = func526;
      func526.methodName = "appliedOccurrence";
      func526.paramCounts = [0];
      func526.paramNames = [];
      func526.definitionLine = 751;
      func526.definitionModule = "ast";
      var func533 = function(argcv) {    // method hasParams, line 759
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hasParams", 0, numArgs - 0);
        }
        setLineNumber(759);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call538 = selfRequest(this, "signature", [0]);
        var call537 = request(call538, "first", [0]);
        var call536 = request(call537, "params", [0]);
        var call535 = request(call536, "isEmpty", [0]);
        var call534 = request(call535, "not", [0]);
        return call534;
      };    // end of method hasParams
      this.methods["hasParams"] = func533;
      func533.methodName = "hasParams";
      func533.paramCounts = [0];
      func533.paramNames = [];
      func533.definitionLine = 759;
      func533.definitionModule = "ast";
      var func539 = function(argcv) {    // method numParams, line 760
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("numParams", 0, numArgs - 0);
        }
        setLineNumber(761);    // compilenode block
        var block541 = new GraceBlock(this, 761, 2);
        block541.guard = jsTrue;
        block541.real = function block541(var_acc, var_p) {
          setLineNumber(761);    // compilenode member
          // call case 6: other requests
          var call542 = request(var_p, "numParams", [0]);
          var sum543 = request(var_acc, "+(1)", [1], call542);
          return sum543;
        };
        let applyMeth541 = function apply_2 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth541.methodName = "apply(2)";
        applyMeth541.paramCounts = [2];
        applyMeth541.paramNames = ["acc", "p"];
        applyMeth541.definitionLine = 761;
        applyMeth541.definitionModule = "ast";
        block541.methods["apply(2)"] = applyMeth541;
        let matchesMeth541 = function matches_2 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth541.methodName = "matches(2)";
        matchesMeth541.paramCounts = [2];
        matchesMeth541.paramNames = ["acc", "p"];
        matchesMeth541.definitionLine = 761;
        matchesMeth541.definitionModule = "ast";
        block541.methods["matches(2)"] = matchesMeth541;
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call544 = selfRequest(this, "signature", [0]);
        var call540 = request(call544, "fold(1)startingWith(1)", [1, 1], block541, new GraceNum(0));
        return call540;
      };    // end of method numParams
      this.methods["numParams"] = func539;
      func539.methodName = "numParams";
      func539.paramCounts = [0];
      func539.paramNames = [];
      func539.definitionLine = 760;
      func539.definitionModule = "ast";
      var func545 = function(argcv, var_b) {    // method parametersDo(_), line 763
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("parametersDo(_)", 0, numArgs - 1);
        }
        setLineNumber(764);    // compilenode block
        var block547 = new GraceBlock(this, 764, 1);
        block547.guard = jsTrue;
        block547.real = function block547(var_part) {
          setLineNumber(765);    // compilenode block
          var block549 = new GraceBlock(this, 765, 1);
          block549.guard = jsTrue;
          block549.real = function block549(var_each) {
            setLineNumber(765);    // compilenode call
            // call case 6: other requests
            var call550 = request(var_b, "apply(1)", [1], var_each);
            return call550;
          };
          let applyMeth549 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth549.methodName = "apply(1)";
          applyMeth549.paramCounts = [1];
          applyMeth549.paramNames = ["each"];
          applyMeth549.definitionLine = 765;
          applyMeth549.definitionModule = "ast";
          block549.methods["apply(1)"] = applyMeth549;
          let matchesMeth549 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth549.methodName = "matches(1)";
          matchesMeth549.paramCounts = [1];
          matchesMeth549.paramNames = ["each"];
          matchesMeth549.definitionLine = 765;
          matchesMeth549.definitionModule = "ast";
          block549.methods["matches(1)"] = matchesMeth549;
          // call case 6: other requests
          // call case 6: other requests
          var call551 = request(var_part, "params", [0]);
          var call548 = request(call551, "do(1)", [1], block549);
          return call548;
        };
        let applyMeth547 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth547.methodName = "apply(1)";
        applyMeth547.paramCounts = [1];
        applyMeth547.paramNames = ["part"];
        applyMeth547.definitionLine = 764;
        applyMeth547.definitionModule = "ast";
        block547.methods["apply(1)"] = applyMeth547;
        let matchesMeth547 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth547.methodName = "matches(1)";
        matchesMeth547.paramCounts = [1];
        matchesMeth547.paramNames = ["part"];
        matchesMeth547.definitionLine = 764;
        matchesMeth547.definitionModule = "ast";
        block547.methods["matches(1)"] = matchesMeth547;
        // call case 6: other requests
        setLineNumber(764);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call552 = selfRequest(this, "signature", [0]);
        var call546 = request(call552, "do(1)", [1], block547);
        return call546;
      };    // end of method parametersDo(_)
      this.methods["parametersDo(1)"] = func545;
      func545.methodName = "parametersDo(1)";
      func545.paramCounts = [1];
      func545.paramNames = ["b"];
      func545.definitionLine = 763;
      func545.definitionModule = "ast";
      var func553 = function(argcv) {    // method parameterCounts, line 768
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("parameterCounts", 0, numArgs - 0);
        }
        setLineNumber(769);    // compilenode array
        var array555 = new GraceSequence([]);
        // call case 2: outer request
        var call554 = selfRequest(var_prelude, "list(1)", [1], array555);
        var var_result = call554;
        setLineNumber(770);    // compilenode block
        var block557 = new GraceBlock(this, 770, 1);
        block557.guard = jsTrue;
        block557.real = function block557(var_part) {
          setLineNumber(771);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          var call560 = request(var_part, "params", [0]);
          var call559 = request(call560, "size", [0]);
          // call case 6: other requests
          if (var_result === undefined) raiseUninitializedVariable("result");
          var call558 = request(var_result, "push(1)", [1], call559);
          return call558;
        };
        let applyMeth557 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth557.methodName = "apply(1)";
        applyMeth557.paramCounts = [1];
        applyMeth557.paramNames = ["part"];
        applyMeth557.definitionLine = 770;
        applyMeth557.definitionModule = "ast";
        block557.methods["apply(1)"] = applyMeth557;
        let matchesMeth557 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth557.methodName = "matches(1)";
        matchesMeth557.paramCounts = [1];
        matchesMeth557.paramNames = ["part"];
        matchesMeth557.definitionLine = 770;
        matchesMeth557.definitionModule = "ast";
        block557.methods["matches(1)"] = matchesMeth557;
        // call case 6: other requests
        setLineNumber(770);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call561 = selfRequest(this, "signature", [0]);
        var call556 = request(call561, "do(1)", [1], block557);
        return var_result;
      };    // end of method parameterCounts
      this.methods["parameterCounts"] = func553;
      func553.methodName = "parameterCounts";
      func553.paramCounts = [0];
      func553.paramNames = [];
      func553.definitionLine = 768;
      func553.definitionModule = "ast";
      var func562 = function(argcv) {    // method parameterNames, line 775
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("parameterNames", 0, numArgs - 0);
        }
        setLineNumber(776);    // compilenode array
        var array564 = new GraceSequence([]);
        // call case 2: outer request
        var call563 = selfRequest(var_prelude, "list(1)", [1], array564);
        var var_result = call563;
        setLineNumber(777);    // compilenode block
        var block566 = new GraceBlock(this, 777, 1);
        block566.guard = jsTrue;
        block566.real = function block566(var_part) {
          setLineNumber(778);    // compilenode block
          var block568 = new GraceBlock(this, 778, 1);
          block568.guard = jsTrue;
          block568.real = function block568(var_param) {
            setLineNumber(779);    // compilenode member
            // call case 6: other requests
            var call570 = request(var_param, "nameString", [0]);
            // call case 6: other requests
            if (var_result === undefined) raiseUninitializedVariable("result");
            var call569 = request(var_result, "push(1)", [1], call570);
            return call569;
          };
          let applyMeth568 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth568.methodName = "apply(1)";
          applyMeth568.paramCounts = [1];
          applyMeth568.paramNames = ["param"];
          applyMeth568.definitionLine = 778;
          applyMeth568.definitionModule = "ast";
          block568.methods["apply(1)"] = applyMeth568;
          let matchesMeth568 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth568.methodName = "matches(1)";
          matchesMeth568.paramCounts = [1];
          matchesMeth568.paramNames = ["param"];
          matchesMeth568.definitionLine = 778;
          matchesMeth568.definitionModule = "ast";
          block568.methods["matches(1)"] = matchesMeth568;
          // call case 6: other requests
          setLineNumber(778);    // compilenode member
          // call case 6: other requests
          var call571 = request(var_part, "params", [0]);
          var call567 = request(call571, "do(1)", [1], block568);
          return call567;
        };
        let applyMeth566 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth566.methodName = "apply(1)";
        applyMeth566.paramCounts = [1];
        applyMeth566.paramNames = ["part"];
        applyMeth566.definitionLine = 777;
        applyMeth566.definitionModule = "ast";
        block566.methods["apply(1)"] = applyMeth566;
        let matchesMeth566 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth566.methodName = "matches(1)";
        matchesMeth566.paramCounts = [1];
        matchesMeth566.paramNames = ["part"];
        matchesMeth566.definitionLine = 777;
        matchesMeth566.definitionModule = "ast";
        block566.methods["matches(1)"] = matchesMeth566;
        // call case 6: other requests
        setLineNumber(777);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call572 = selfRequest(this, "signature", [0]);
        var call565 = request(call572, "do(1)", [1], block566);
        return var_result;
      };    // end of method parameterNames
      this.methods["parameterNames"] = func562;
      func562.methodName = "parameterNames";
      func562.paramCounts = [0];
      func562.paramNames = [];
      func562.definitionLine = 775;
      func562.definitionModule = "ast";
      var func573 = function(argcv) {    // method typeParameterNames, line 784
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("typeParameterNames", 0, numArgs - 0);
        }
        var if574 = GraceDone;
        setLineNumber(785);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call576 = selfRequest(this, "hasTypeParams", [0]);
        var call575 = request(call576, "not", [0]);
        if (Grace_isTrue(call575)) {
          var array578 = new GraceSequence([]);
          // call case 2: outer request
          var call577 = selfRequest(var_prelude, "list(1)", [1], array578);
          return call577;
        }
        setLineNumber(786);    // compilenode array
        var array580 = new GraceSequence([]);
        // call case 2: outer request
        var call579 = selfRequest(var_prelude, "list(1)", [1], array580);
        var var_result = call579;
        setLineNumber(787);    // compilenode block
        var block582 = new GraceBlock(this, 787, 1);
        block582.guard = jsTrue;
        block582.real = function block582(var_each) {
          setLineNumber(788);    // compilenode member
          // call case 6: other requests
          var call584 = request(var_each, "nameString", [0]);
          // call case 6: other requests
          if (var_result === undefined) raiseUninitializedVariable("result");
          var call583 = request(var_result, "push(1)", [1], call584);
          return call583;
        };
        let applyMeth582 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth582.methodName = "apply(1)";
        applyMeth582.paramCounts = [1];
        applyMeth582.paramNames = ["each"];
        applyMeth582.definitionLine = 787;
        applyMeth582.definitionModule = "ast";
        block582.methods["apply(1)"] = applyMeth582;
        let matchesMeth582 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth582.methodName = "matches(1)";
        matchesMeth582.paramCounts = [1];
        matchesMeth582.paramNames = ["each"];
        matchesMeth582.definitionLine = 787;
        matchesMeth582.definitionModule = "ast";
        block582.methods["matches(1)"] = matchesMeth582;
        // call case 6: other requests
        setLineNumber(787);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call587 = selfRequest(this, "signature", [0]);
        var call586 = request(call587, "first", [0]);
        var call585 = request(call586, "typeParams", [0]);
        var call581 = request(call585, "do(1)", [1], block582);
        return var_result;
      };    // end of method typeParameterNames
      this.methods["typeParameterNames"] = func573;
      func573.methodName = "typeParameterNames";
      func573.paramCounts = [0];
      func573.paramNames = [];
      func573.definitionLine = 784;
      func573.definitionModule = "ast";
      var func588 = function(argcv) {    // method numTypeParams, line 792
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("numTypeParams", 0, numArgs - 0);
        }
        setLineNumber(792);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call591 = selfRequest(this, "signature", [0]);
        var call590 = request(call591, "first", [0]);
        var call589 = request(call590, "numTypeParams", [0]);
        return call589;
      };    // end of method numTypeParams
      this.methods["numTypeParams"] = func588;
      func588.methodName = "numTypeParams";
      func588.paramCounts = [0];
      func588.paramNames = [];
      func588.definitionLine = 792;
      func588.definitionModule = "ast";
      var func592 = function(argcv) {    // method hasTypeParams, line 793
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hasTypeParams", 0, numArgs - 0);
        }
        setLineNumber(793);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call595 = selfRequest(this, "signature", [0]);
        var call594 = request(call595, "first", [0]);
        var call593 = request(call594, "typeParams", [0]);
        var opresult596 = request(GraceFalse, "\u2260(1)", [1], call593);
        return opresult596;
      };    // end of method hasTypeParams
      this.methods["hasTypeParams"] = func592;
      func592.methodName = "hasTypeParams";
      func592.paramCounts = [0];
      func592.paramNames = [];
      func592.definitionLine = 793;
      func592.definitionModule = "ast";
      var func597 = function(argcv) {    // method typeParams, line 794
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("typeParams", 0, numArgs - 0);
        }
        setLineNumber(794);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call600 = selfRequest(this, "signature", [0]);
        var call599 = request(call600, "first", [0]);
        var call598 = request(call599, "typeParams", [0]);
        return call598;
      };    // end of method typeParams
      this.methods["typeParams"] = func597;
      func597.methodName = "typeParams";
      func597.paramCounts = [0];
      func597.paramNames = [];
      func597.definitionLine = 794;
      func597.definitionModule = "ast";
      var func601 = function(argcv, var_tp) {    // method withTypeParams(_), line 795
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("withTypeParams(_)", 0, numArgs - 1);
        }
        setLineNumber(796);    // compilenode call
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call604 = selfRequest(this, "signature", [0]);
        var call603 = request(call604, "first", [0]);
        var call602 = selfRequest(call603, "typeParams:=(1)", [1], var_tp);
        return this;
      };    // end of method withTypeParams(_)
      this.methods["withTypeParams(1)"] = func601;
      func601.methodName = "withTypeParams(1)";
      func601.paramCounts = [1];
      func601.paramNames = ["tp"];
      func601.definitionLine = 795;
      func601.definitionModule = "ast";
      var func605 = function(argcv) {    // method end, line 800
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("end", 0, numArgs - 0);
        }
        var if606 = GraceDone;
        setLineNumber(801);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call607 = selfRequest(this, "rtype", [0]);
        var opresult608 = request(GraceFalse, "\u2260(1)", [1], call607);
        var block609 = new GraceBlock(this, 801, 0);
        block609.guard = jsTrue;
        block609.real = function block609() {
          setLineNumber(801);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call611 = selfRequest(this, "rtype", [0]);
          var call610 = request(call611, "line", [0]);
          var opresult612 = request(call610, "\u2260(1)", [1], new GraceNum(0));
          return opresult612;
        };
        let applyMeth609 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth609.methodName = "apply";
        applyMeth609.paramCounts = [0];
        applyMeth609.paramNames = [];
        applyMeth609.definitionLine = 801;
        applyMeth609.definitionModule = "ast";
        block609.methods["apply"] = applyMeth609;
        var opresult613 = request(opresult608, "&&(1)", [1], block609);
        if (Grace_isTrue(opresult613)) {
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call615 = selfRequest(this, "rtype", [0]);
          var call614 = request(call615, "end", [0]);
          return call614;
        }
        setLineNumber(802);    // compilenode member
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call618 = selfRequest(this, "signature", [0]);
        var call617 = request(call618, "last", [0]);
        var call616 = request(call617, "end", [0]);
        return call616;
      };    // end of method end
      this.methods["end"] = func605;
      func605.methodName = "end";
      func605.paramCounts = [0];
      func605.paramNames = [];
      func605.definitionLine = 800;
      func605.definitionModule = "ast";
      var func619 = function(argcv) {    // method nameString, line 805
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("nameString", 0, numArgs - 0);
        }
        setLineNumber(807);    // compilenode block
        var block621 = new GraceBlock(this, 807, 2);
        block621.guard = jsTrue;
        block621.real = function block621(var_acc, var_each) {
          setLineNumber(807);    // compilenode member
          // call case 6: other requests
          var call622 = request(var_each, "nameString", [0]);
          var opresult623 = request(var_acc, "++(1)", [1], call622);
          return opresult623;
        };
        let applyMeth621 = function apply_2 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth621.methodName = "apply(2)";
        applyMeth621.paramCounts = [2];
        applyMeth621.paramNames = ["acc", "each"];
        applyMeth621.definitionLine = 807;
        applyMeth621.definitionModule = "ast";
        block621.methods["apply(2)"] = applyMeth621;
        let matchesMeth621 = function matches_2 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth621.methodName = "matches(2)";
        matchesMeth621.paramCounts = [2];
        matchesMeth621.paramNames = ["acc", "each"];
        matchesMeth621.definitionLine = 807;
        matchesMeth621.definitionModule = "ast";
        block621.methods["matches(2)"] = matchesMeth621;
        setLineNumber(808);    // compilenode string
        var string624 = new GraceString("");
        // call case 6: other requests
        setLineNumber(807);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call625 = selfRequest(this, "signature", [0]);
        var call620 = request(call625, "fold(1)startingWith(1)", [1, 1], block621, string624);
        return call620;
      };    // end of method nameString
      this.methods["nameString"] = func619;
      func619.methodName = "nameString";
      func619.paramCounts = [0];
      func619.paramNames = [];
      func619.definitionLine = 805;
      func619.definitionModule = "ast";
      var func626 = function(argcv) {    // method canonicalName, line 811
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("canonicalName", 0, numArgs - 0);
        }
        setLineNumber(813);    // compilenode block
        var block628 = new GraceBlock(this, 813, 2);
        block628.guard = jsTrue;
        block628.real = function block628(var_acc, var_each) {
          setLineNumber(813);    // compilenode member
          // call case 6: other requests
          var call629 = request(var_each, "canonicalName", [0]);
          var opresult630 = request(var_acc, "++(1)", [1], call629);
          return opresult630;
        };
        let applyMeth628 = function apply_2 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth628.methodName = "apply(2)";
        applyMeth628.paramCounts = [2];
        applyMeth628.paramNames = ["acc", "each"];
        applyMeth628.definitionLine = 813;
        applyMeth628.definitionModule = "ast";
        block628.methods["apply(2)"] = applyMeth628;
        let matchesMeth628 = function matches_2 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth628.methodName = "matches(2)";
        matchesMeth628.paramCounts = [2];
        matchesMeth628.paramNames = ["acc", "each"];
        matchesMeth628.definitionLine = 813;
        matchesMeth628.definitionModule = "ast";
        block628.methods["matches(2)"] = matchesMeth628;
        setLineNumber(814);    // compilenode string
        var string631 = new GraceString("");
        // call case 6: other requests
        setLineNumber(813);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call632 = selfRequest(this, "signature", [0]);
        var call627 = request(call632, "fold(1)startingWith(1)", [1, 1], block628, string631);
        return call627;
      };    // end of method canonicalName
      this.methods["canonicalName"] = func626;
      func626.methodName = "canonicalName";
      func626.paramCounts = [0];
      func626.paramNames = [];
      func626.definitionLine = 811;
      func626.definitionModule = "ast";
      var func633 = function(argcv) {    // method asIdentifier, line 817
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asIdentifier", 0, numArgs - 0);
        }
        var if634 = GraceDone;
        setLineNumber(818);    // compilenode op
        if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
        // call case 4: self request with 0 args and 0 typeArgs 
        var call635 = selfRequest(this, "cachedIdentifier", [0]);
        var opresult636 = request(var_uninitialized, "==(1)", [1], call635);
        if (Grace_isTrue(opresult636)) {
          setLineNumber(819);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call639 = selfRequest(this, "nameString", [0]);
          // call case 6: other requests
          if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
          var call638 = request(var_identifierNode, "new(2)", [2], call639, GraceFalse);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call637 = selfRequest(this, "cachedIdentifier:=(1)", [1], call638);
          setLineNumber(820);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call643 = selfRequest(this, "signature", [0]);
          var call642 = request(call643, "first", [0]);
          var call641 = request(call642, "line", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call644 = selfRequest(this, "cachedIdentifier", [0]);
          var call640 = selfRequest(call644, "line:=(1)", [1], call641);
          setLineNumber(821);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call648 = selfRequest(this, "signature", [0]);
          var call647 = request(call648, "first", [0]);
          var call646 = request(call647, "linePos", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call649 = selfRequest(this, "cachedIdentifier", [0]);
          var call645 = selfRequest(call649, "linePos:=(1)", [1], call646);
          setLineNumber(822);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call653 = selfRequest(this, "signature", [0]);
          var call652 = request(call653, "last", [0]);
          var call651 = request(call652, "end", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call654 = selfRequest(this, "cachedIdentifier", [0]);
          var call650 = selfRequest(call654, "end:=(1)", [1], call651);
          setLineNumber(823);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call656 = selfRequest(this, "canonicalName", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call657 = selfRequest(this, "cachedIdentifier", [0]);
          var call655 = selfRequest(call657, "canonicalName:=(1)", [1], call656);
          setLineNumber(824);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call659 = selfRequest(this, "isBindingOccurrence", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call660 = selfRequest(this, "cachedIdentifier", [0]);
          var call658 = selfRequest(call660, "isBindingOccurrence:=(1)", [1], call659);
          if634 = call658;
        }
        setLineNumber(826);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call661 = selfRequest(this, "cachedIdentifier", [0]);
        return call661;
      };    // end of method asIdentifier
      this.methods["asIdentifier"] = func633;
      func633.methodName = "asIdentifier";
      func633.paramCounts = [0];
      func633.paramNames = [];
      func633.definitionLine = 817;
      func633.definitionModule = "ast";
      var func662 = function(argcv) {     // accessor method isExecutable
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isExecutable
      this.methods["isExecutable"] = func662;
      func662.methodName = "isExecutable";
      func662.paramCounts = [0];
      func662.paramNames = [];
      func662.definitionLine = 828;
      func662.definitionModule = "ast";
      var func663 = function(argcv, var_st) {    // method scope:=(_), line 830
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("scope:=(_)", 0, numArgs - 1);
        }
        setLineNumber(833);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call664 = selfRequest(this, "symbolTable:=(1)", [1], var_st);
        setLineNumber(834);    // compilenode call
        // call case 6: other requests
        var call665 = request(var_st, "node:=(1)", [1], this);
        return call665;
      };    // end of method scope:=(_)
      this.methods["scope:=(1)"] = func663;
      func663.methodName = "scope:=(1)";
      func663.paramCounts = [1];
      func663.paramNames = ["st"];
      func663.definitionLine = 830;
      func663.definitionModule = "ast";
      var func666 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 836
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
        }
        setLineNumber(837);    // compilenode call
        // call case 6: other requests
        // call case 6: other requests
        var call668 = request(var_ac, "parent", [0]);
        var call667 = request(call668, "declarationKindWithAncestors(1)", [1], var_ac);
        return call667;
      };    // end of method declarationKindWithAncestors(_)
      this.methods["declarationKindWithAncestors(1)"] = func666;
      func666.methodName = "declarationKindWithAncestors(1)";
      func666.paramCounts = [1];
      func666.paramNames = ["ac"];
      func666.definitionLine = 836;
      func666.definitionModule = "ast";
      var func669 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 839
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
        }
        var if670 = GraceDone;
        setLineNumber(840);    // compilenode call
        // call case 6: other requests
        var call671 = request(var_visitor, "visitMethodType(1)up(1)", [1, 1], this, var_ac);
        if (Grace_isTrue(call671)) {
          setLineNumber(841);    // compilenode call
          // call case 6: other requests
          var call672 = request(var_ac, "extend(1)", [1], this);
          var var_newChain = call672;
          setLineNumber(842);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call674 = selfRequest(this, "signature", [0]);
          var block675 = new GraceBlock(this, 842, 1);
          block675.guard = jsTrue;
          block675.real = function block675(var_part) {
            setLineNumber(843);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            var call676 = request(var_part, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            return call676;
          };
          let applyMeth675 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth675.methodName = "apply(1)";
          applyMeth675.paramCounts = [1];
          applyMeth675.paramNames = ["part"];
          applyMeth675.definitionLine = 842;
          applyMeth675.definitionModule = "ast";
          block675.methods["apply(1)"] = applyMeth675;
          let matchesMeth675 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth675.methodName = "matches(1)";
          matchesMeth675.paramCounts = [1];
          matchesMeth675.paramNames = ["part"];
          matchesMeth675.definitionLine = 842;
          matchesMeth675.definitionModule = "ast";
          block675.methods["matches(1)"] = matchesMeth675;
          // call case 2: outer request
          var call673 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call674, block675);
          var if677 = GraceDone;
          setLineNumber(845);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call678 = selfRequest(this, "rtype", [0]);
          var opresult679 = request(GraceFalse, "\u2260(1)", [1], call678);
          if (Grace_isTrue(opresult679)) {
            setLineNumber(846);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call681 = selfRequest(this, "rtype", [0]);
            var call680 = request(call681, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if677 = call680;
          }
          if670 = if677;
        }
        return if670;
      };    // end of method accept(_)from(_)
      this.methods["accept(1)from(1)"] = func669;
      func669.methodName = "accept(1)from(1)";
      func669.paramCounts = [1, 1];
      func669.paramNames = ["visitor", "ac"];
      func669.definitionLine = 839;
      func669.definitionModule = "ast";
      var func682 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 850
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
        }
        setLineNumber(851);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call683 = selfRequest(this, "shallowCopy", [0]);
        var var_n = call683;
        setLineNumber(852);    // compilenode call
        // call case 6: other requests
        var call684 = request(var_ac, "extend(1)", [1], var_n);
        var var_newChain = call684;
        setLineNumber(853);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call687 = selfRequest(this, "rtype", [0]);
        // call case 2: outer request
        var call686 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call687, var_blk, var_newChain);
        // call case 6: other requests
        var call685 = request(var_n, "rtype:=(1)", [1], call686);
        setLineNumber(854);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call690 = selfRequest(this, "signature", [0]);
        // call case 2: outer request
        var call689 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call690, var_blk, var_newChain);
        // call case 6: other requests
        var call688 = request(var_n, "signature:=(1)", [1], call689);
        setLineNumber(855);    // compilenode call
        // call case 6: other requests
        var call691 = request(var_blk, "apply(2)", [2], var_n, var_ac);
        return call691;
      };    // end of method map(_)ancestors(_)
      this.methods["map(1)ancestors(1)"] = func682;
      func682.methodName = "map(1)ancestors(1)";
      func682.paramCounts = [1, 1];
      func682.paramNames = ["blk", "ac"];
      func682.definitionLine = 850;
      func682.definitionModule = "ast";
      var func692 = function(argcv, var_depth) {    // method pretty(_), line 857
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("pretty(_)", 0, numArgs - 1);
        }
        setLineNumber(858);    // compilenode string
        var string693 = new GraceString("  ");
        var sum694 = request(var_depth, "+(1)", [1], new GraceNum(1));
        var prod695 = request(string693, "*(1)", [1], sum694);
        var var_spc = prod695;
        setLineNumber(859);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call696 = selfRequest(this, "basePretty(1)", [1], var_depth);
        var string697 = new GraceString("\n");
        var opresult698 = request(call696, "++(1)", [1], string697);
        var var_s = opresult698;
        setLineNumber(860);    // compilenode string
        var string699 = new GraceString("");
        var opresult700 = request(string699, "++(1)", [1], var_s);
        var string701 = new GraceString("");
        var opresult702 = request(opresult700, "++(1)", [1], string701);
        var opresult703 = request(opresult702, "++(1)", [1], var_spc);
        var string704 = new GraceString("Name: ");
        var opresult705 = request(opresult703, "++(1)", [1], string704);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call706 = selfRequest(this, "nameString", [0]);
        var opresult707 = request(opresult705, "++(1)", [1], call706);
        var string708 = new GraceString("\n");
        var opresult709 = request(opresult707, "++(1)", [1], string708);
        var_s = opresult709;
        var if710 = GraceDone;
        setLineNumber(861);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call711 = selfRequest(this, "rtype", [0]);
        var opresult712 = request(GraceFalse, "\u2260(1)", [1], call711);
        if (Grace_isTrue(opresult712)) {
          setLineNumber(862);    // compilenode string
          var string713 = new GraceString("");
          if (var_s === undefined) raiseUninitializedVariable("s");
          var opresult714 = request(string713, "++(1)", [1], var_s);
          var string715 = new GraceString("");
          var opresult716 = request(opresult714, "++(1)", [1], string715);
          if (var_spc === undefined) raiseUninitializedVariable("spc");
          var opresult717 = request(opresult716, "++(1)", [1], var_spc);
          var string718 = new GraceString("Returns:\n  ");
          var opresult719 = request(opresult717, "++(1)", [1], string718);
          if (var_spc === undefined) raiseUninitializedVariable("spc");
          var opresult720 = request(opresult719, "++(1)", [1], var_spc);
          var string721 = new GraceString("");
          var opresult722 = request(opresult720, "++(1)", [1], string721);
          var sum724 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call725 = selfRequest(this, "rtype", [0]);
          var call723 = request(call725, "pretty(1)", [1], sum724);
          var opresult726 = request(opresult722, "++(1)", [1], call723);
          var string727 = new GraceString("");
          var opresult728 = request(opresult726, "++(1)", [1], string727);
          var_s = opresult728;
          if710 = GraceDone;
        }
        setLineNumber(864);    // compilenode string
        var string729 = new GraceString("");
        var opresult730 = request(string729, "++(1)", [1], var_s);
        var string731 = new GraceString("\n");
        var opresult732 = request(opresult730, "++(1)", [1], string731);
        var opresult733 = request(opresult732, "++(1)", [1], var_spc);
        var string734 = new GraceString("Signature Parts:");
        var opresult735 = request(opresult733, "++(1)", [1], string734);
        var_s = opresult735;
        setLineNumber(865);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call737 = selfRequest(this, "signature", [0]);
        var block738 = new GraceBlock(this, 865, 1);
        block738.guard = jsTrue;
        block738.real = function block738(var_part) {
          setLineNumber(866);    // compilenode string
          var string739 = new GraceString("");
          if (var_s === undefined) raiseUninitializedVariable("s");
          var opresult740 = request(string739, "++(1)", [1], var_s);
          var string741 = new GraceString("\n  ");
          var opresult742 = request(opresult740, "++(1)", [1], string741);
          if (var_spc === undefined) raiseUninitializedVariable("spc");
          var opresult743 = request(opresult742, "++(1)", [1], var_spc);
          var string744 = new GraceString("");
          var opresult745 = request(opresult743, "++(1)", [1], string744);
          var sum747 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          var call746 = request(var_part, "pretty(1)", [1], sum747);
          var opresult748 = request(opresult745, "++(1)", [1], call746);
          var string749 = new GraceString("");
          var opresult750 = request(opresult748, "++(1)", [1], string749);
          var_s = opresult750;
          return GraceDone;
        };
        let applyMeth738 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth738.methodName = "apply(1)";
        applyMeth738.paramCounts = [1];
        applyMeth738.paramNames = ["part"];
        applyMeth738.definitionLine = 865;
        applyMeth738.definitionModule = "ast";
        block738.methods["apply(1)"] = applyMeth738;
        let matchesMeth738 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth738.methodName = "matches(1)";
        matchesMeth738.paramCounts = [1];
        matchesMeth738.paramNames = ["part"];
        matchesMeth738.definitionLine = 865;
        matchesMeth738.definitionModule = "ast";
        block738.methods["matches(1)"] = matchesMeth738;
        // call case 2: outer request
        var call736 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call737, block738);
        return var_s;
      };    // end of method pretty(_)
      this.methods["pretty(1)"] = func692;
      func692.methodName = "pretty(1)";
      func692.paramCounts = [1];
      func692.paramNames = ["depth"];
      func692.definitionLine = 857;
      func692.definitionModule = "ast";
      var func751 = function(argcv, var_depth) {    // method toGrace(_), line 870
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
        }
        setLineNumber(871);    // compilenode string
        var string752 = new GraceString("");
        var var_s = string752;
        setLineNumber(872);    // compilenode block
        var block754 = new GraceBlock(this, 872, 1);
        block754.guard = jsTrue;
        block754.real = function block754(var_part) {
          setLineNumber(872);    // compilenode op
          if (var_s === undefined) raiseUninitializedVariable("s");
          var sum756 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          var call755 = request(var_part, "toGrace(1)", [1], sum756);
          var opresult757 = request(var_s, "++(1)", [1], call755);
          var_s = opresult757;
          return GraceDone;
        };
        let applyMeth754 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth754.methodName = "apply(1)";
        applyMeth754.paramCounts = [1];
        applyMeth754.paramNames = ["part"];
        applyMeth754.definitionLine = 872;
        applyMeth754.definitionModule = "ast";
        block754.methods["apply(1)"] = applyMeth754;
        let matchesMeth754 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth754.methodName = "matches(1)";
        matchesMeth754.paramCounts = [1];
        matchesMeth754.paramNames = ["part"];
        matchesMeth754.definitionLine = 872;
        matchesMeth754.definitionModule = "ast";
        block754.methods["matches(1)"] = matchesMeth754;
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call758 = selfRequest(this, "signature", [0]);
        var call753 = request(call758, "do(1)", [1], block754);
        var if759 = GraceDone;
        setLineNumber(873);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call760 = selfRequest(this, "rtype", [0]);
        var opresult761 = request(GraceFalse, "\u2260(1)", [1], call760);
        if (Grace_isTrue(opresult761)) {
          setLineNumber(874);    // compilenode string
          var string762 = new GraceString("");
          if (var_s === undefined) raiseUninitializedVariable("s");
          var opresult763 = request(string762, "++(1)", [1], var_s);
          var string764 = new GraceString(" \u2192 ");
          var opresult765 = request(opresult763, "++(1)", [1], string764);
          var sum767 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call768 = selfRequest(this, "rtype", [0]);
          var call766 = request(call768, "toGrace(1)", [1], sum767);
          var opresult769 = request(opresult765, "++(1)", [1], call766);
          var string770 = new GraceString("");
          var opresult771 = request(opresult769, "++(1)", [1], string770);
          var_s = opresult771;
          if759 = GraceDone;
        }
        return var_s;
      };    // end of method toGrace(_)
      func751.paramTypes = [];
      func751.paramTypes.push([type_Number, "depth"]);
      this.methods["toGrace(1)"] = func751;
      func751.methodName = "toGrace(1)";
      func751.paramCounts = [1];
      func751.paramNames = ["depth"];
      func751.definitionLine = 870;
      func751.definitionModule = "ast";
      var func772 = function(argcv) {    // method shallowCopy, line 878
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("shallowCopy", 0, numArgs - 0);
        }
        setLineNumber(879);    // compilenode call
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call775 = selfRequest(this, "signature", [0]);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call776 = selfRequest(this, "rtype", [0]);
        // call case 2: outer request
        var call774 = selfRequest(importedModules["ast"], "methodSignatureNode(2)", [2], call775, call776);
        var call773 = request(call774, "shallowCopyFieldsFrom(1)", [1], this);
        return call773;
      };    // end of method shallowCopy
      this.methods["shallowCopy"] = func772;
      func772.methodName = "shallowCopy";
      func772.paramCounts = [0];
      func772.paramNames = [];
      func772.definitionLine = 878;
      func772.definitionModule = "ast";
      this.mutable = true;
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 738;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj515_init = function() {    // init of object on line 738
        initFun516.call(this);
        setLineNumber(745);    // compilenode string
        var string777 = new GraceString("methodtype");
        this.data.kind = string777;
        this.data.signature = var_parts__39__;
        this.data.rtype = var_rtype__39__;
        if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
        this.data.cachedIdentifier = var_uninitialized;
        this.data.isBindingOccurrence = GraceTrue;
      };
      return obj515_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj515_init = obj515_build.call(inheritingObject, null, var_parts__39__, var_rtype__39__, this, aliases, exclusions);
    return obj515_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method methodSignatureNode(_,_)$build(_,_,_)
  this.methods["methodSignatureNode(2)$build(3)"] = func514;
  func514.methodName = "methodSignatureNode(2)$build(3)";
  func514.paramCounts = [2];
  func514.paramNames = ["parts'", "rtype'"];
  func514.definitionLine = 738;
  func514.definitionModule = "ast";
  var func778 = function(argcv, var_nodes) {    // method outerNode(_), line 1855
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("outerNode(_)", 0, numArgs - 1);
    }
    var ouc = emptyGraceObject("outerNode(_)", "ast", 1855);
    var ouc_init = this.methods["outerNode(1)$build(3)"].call(this, null, var_nodes, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method outerNode(_)
  this.methods["outerNode(1)"] = func778;
  func778.methodName = "outerNode(1)";
  func778.paramCounts = [1];
  func778.paramNames = ["nodes"];
  func778.definitionLine = 1855;
  func778.definitionModule = "ast";
  var func779 = function(argcv, var_nodes, inheritingObject, aliases, exclusions) {    // method outerNode(_)$build(_,_,_), line 1855
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("outerNode(_)", 0, numArgs - 1);
    }
    var obj780_build = function(ignore, var_nodes, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_1855");
      this.outer_ast_1855 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(1859);    // reuse call
      var initFun781 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.kind = undefined;
      var reader782_kind = function() {  // reader method kind
          if (this.data.kind === undefined) raiseUninitializedVariable("kind");
          return this.data.kind;
      };
      reader782_kind.isDef = true;
      this.methods["kind"] = reader782_kind;
      this.data.theObjects = undefined;
      var reader783_theObjects = function() {  // reader method theObjects
          if (this.data.theObjects === undefined) raiseUninitializedVariable("theObjects");
          return this.data.theObjects;
      };
      reader783_theObjects.isDef = true;
      this.methods["theObjects"] = reader783_theObjects;
      var func784 = function(argcv) {    // method numberOfLevels, line 1862
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("numberOfLevels", 0, numArgs - 0);
        }
        setLineNumber(1862);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call786 = selfRequest(this, "theObjects", [0]);
        var call785 = request(call786, "size", [0]);
        return call785;
      };    // end of method numberOfLevels
      this.methods["numberOfLevels"] = func784;
      func784.methodName = "numberOfLevels";
      func784.paramCounts = [0];
      func784.paramNames = [];
      func784.definitionLine = 1862;
      func784.definitionModule = "ast";
      var func787 = function(argcv) {    // method asString, line 1863
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(1863);    // compilenode string
        var string788 = new GraceString("\u2039object outside that at line ");
        // call case 6: other requests
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call791 = selfRequest(this, "theObjects", [0]);
        var call790 = request(call791, "last", [0]);
        var call789 = request(call790, "line", [0]);
        var opresult792 = request(string788, "++(1)", [1], call789);
        var string793 = new GraceString("\u203a");
        var opresult794 = request(opresult792, "++(1)", [1], string793);
        return opresult794;
      };    // end of method asString
      this.methods["asString"] = func787;
      func787.methodName = "asString";
      func787.paramCounts = [0];
      func787.paramNames = [];
      func787.definitionLine = 1863;
      func787.definitionModule = "ast";
      var func795 = function(argcv, var_depth) {    // method pretty(_), line 1864
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("pretty(_)", 0, numArgs - 1);
        }
        setLineNumber(1864);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call796 = selfRequest(this, "basePretty(1)", [1], var_depth);
        // call case 4: self request with 0 args and 0 typeArgs 
        var call797 = selfRequest(this, "asString", [0]);
        var opresult798 = request(call796, "++(1)", [1], call797);
        return opresult798;
      };    // end of method pretty(_)
      this.methods["pretty(1)"] = func795;
      func795.methodName = "pretty(1)";
      func795.paramCounts = [1];
      func795.paramNames = ["depth"];
      func795.definitionLine = 1864;
      func795.definitionModule = "ast";
      var func799 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1865
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
        }
        setLineNumber(1866);    // compilenode call
        // call case 6: other requests
        var call800 = request(var_visitor, "visitOuter(1)up(1)", [1, 1], this, var_ac);
        return call800;
      };    // end of method accept(_)from(_)
      this.methods["accept(1)from(1)"] = func799;
      func799.methodName = "accept(1)from(1)";
      func799.paramCounts = [1, 1];
      func799.paramNames = ["visitor", "ac"];
      func799.definitionLine = 1865;
      func799.definitionModule = "ast";
      var func801 = function(argcv, var_depth) {    // method toGrace(_), line 1869
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
        }
        setLineNumber(1870);    // compilenode string
        var string802 = new GraceString("outer");
        var string803 = new GraceString(".outer");
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call805 = selfRequest(this, "theObjects", [0]);
        var call804 = request(call805, "size", [0]);
        var diff806 = request(call804, "-(1)", [1], new GraceNum(1));
        var prod807 = request(string803, "*(1)", [1], diff806);
        var opresult808 = request(string802, "++(1)", [1], prod807);
        return opresult808;
      };    // end of method toGrace(_)
      this.methods["toGrace(1)"] = func801;
      func801.methodName = "toGrace(1)";
      func801.paramCounts = [1];
      func801.paramNames = ["depth"];
      func801.definitionLine = 1869;
      func801.definitionModule = "ast";
      var func809 = function(argcv) {     // accessor method isOuter
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isOuter", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isOuter
      this.methods["isOuter"] = func809;
      func809.methodName = "isOuter";
      func809.paramCounts = [0];
      func809.paramNames = [];
      func809.definitionLine = 1872;
      func809.definitionModule = "ast";
      var func810 = function(argcv) {     // accessor method isSelfOrOuter
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isSelfOrOuter", 0, numArgs - 0);
        return GraceTrue;
      };    // end of method isSelfOrOuter
      this.methods["isSelfOrOuter"] = func810;
      func810.methodName = "isSelfOrOuter";
      func810.paramCounts = [0];
      func810.paramNames = [];
      func810.definitionLine = 1873;
      func810.definitionModule = "ast";
      var func811 = function(argcv) {    // method shallowCopy, line 1874
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("shallowCopy", 0, numArgs - 0);
        }
        setLineNumber(1875);    // compilenode call
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call814 = selfRequest(this, "theObjects", [0]);
        // call case 2: outer request
        var call813 = selfRequest(importedModules["ast"], "outerNode(1)", [1], call814);
        var call812 = request(call813, "shallowCopyFieldsFrom(1)", [1], this);
        return call812;
      };    // end of method shallowCopy
      this.methods["shallowCopy"] = func811;
      func811.methodName = "shallowCopy";
      func811.paramCounts = [0];
      func811.paramNames = [];
      func811.definitionLine = 1874;
      func811.definitionModule = "ast";
      var func815 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1877
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
        }
        setLineNumber(1878);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call816 = selfRequest(this, "shallowCopy", [0]);
        var var_nd = call816;
        setLineNumber(1879);    // compilenode call
        // call case 6: other requests
        var call817 = request(var_blk, "apply(2)", [2], var_nd, var_ac);
        return call817;
      };    // end of method map(_)ancestors(_)
      this.methods["map(1)ancestors(1)"] = func815;
      func815.methodName = "map(1)ancestors(1)";
      func815.paramCounts = [1, 1];
      func815.paramNames = ["blk", "ac"];
      func815.definitionLine = 1877;
      func815.definitionModule = "ast";
      this.data.end = undefined;
      var reader818_end = function() {  // reader method end
          if (this.data.end === undefined) raiseUninitializedVariable("end");
          return this.data.end;
      };
      reader818_end.isDef = true;
      this.methods["end"] = reader818_end;
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 1855;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj780_init = function() {    // init of object on line 1855
        initFun781.call(this);
        setLineNumber(1860);    // compilenode string
        var string819 = new GraceString("outer");
        this.data.kind = string819;
        this.data.theObjects = var_nodes;
        var if820 = GraceDone;
        setLineNumber(1881);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call821 = selfRequest(this, "line", [0]);
        var opresult822 = request(call821, "==(1)", [1], new GraceNum(0));
        if (Grace_isTrue(opresult822)) {
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          if820 = var_noPosition;
        } else {
          setLineNumber(1882);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call824 = selfRequest(this, "line", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call825 = selfRequest(this, "linePos", [0]);
          var sum826 = request(call825, "+(1)", [1], new GraceNum(4));
          // call case 2: outer request
          var call823 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call824, sum826);
          if820 = call823;
        }
        this.data.end = if820;
      };
      return obj780_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj780_init = obj780_build.call(inheritingObject, null, var_nodes, this, aliases, exclusions);
    return obj780_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method outerNode(_)$build(_,_,_)
  this.methods["outerNode(1)$build(3)"] = func779;
  func779.methodName = "outerNode(1)$build(3)";
  func779.paramCounts = [1];
  func779.paramNames = ["nodes"];
  func779.definitionLine = 1855;
  func779.definitionModule = "ast";
  var func827 = function(argcv, var_params__39__, var_conditions) {    // method typeParametersNode(_)whereClauses(_), line 2058
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("typeParametersNode(_)whereClauses(_)", 0, numArgs - 2);
    }
    var ouc = emptyGraceObject("typeParametersNode(_)whereClauses(_)", "ast", 2058);
    var ouc_init = this.methods["typeParametersNode(1)whereClauses(1)$build(3)"].call(this, null, var_params__39__, var_conditions, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method typeParametersNode(_)whereClauses(_)
  this.methods["typeParametersNode(1)whereClauses(1)"] = func827;
  func827.methodName = "typeParametersNode(1)whereClauses(1)";
  func827.paramCounts = [1, 1];
  func827.paramNames = ["params'", "conditions"];
  func827.definitionLine = 2058;
  func827.definitionModule = "ast";
  var func828 = function(argcv, var_params__39__, var_conditions, inheritingObject, aliases, exclusions) {    // method typeParametersNode(_)whereClauses(_)$build(_,_,_), line 2058
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("typeParametersNode(_)whereClauses(_)", 0, numArgs - 2);
    }
    var obj829_build = function(ignore, var_params__39__, var_conditions, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_2058");
      this.outer_ast_2058 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(2059);    // reuse call
      var initFun830 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.kind = undefined;
      var reader831_kind = function() {  // reader method kind
          if (this.data.kind === undefined) raiseUninitializedVariable("kind");
          return this.data.kind;
      };
      reader831_kind.isDef = true;
      this.methods["kind"] = reader831_kind;
      this.data.params = undefined;
      var reader832_params = function() {  // reader method params
          if (this.data.params === undefined) raiseUninitializedVariable("params");
          return this.data.params;
      };
      reader832_params.isVar = true;
      this.methods["params"] = reader832_params;
      var writer833_params = function(argcv, n) {   // writer method params:=(_)
        this.data.params = n;
        return GraceDone;
      };
      this.methods["params:=(1)"] = writer833_params;
      this.data.whereClauses = undefined;
      var reader834_whereClauses = function() {  // reader method whereClauses
          if (this.data.whereClauses === undefined) raiseUninitializedVariable("whereClauses");
          return this.data.whereClauses;
      };
      reader834_whereClauses.isVar = true;
      this.methods["whereClauses"] = reader834_whereClauses;
      var writer835_whereClauses = function(argcv, n) {   // writer method whereClauses:=(_)
        this.data.whereClauses = n;
        return GraceDone;
      };
      this.methods["whereClauses:=(1)"] = writer835_whereClauses;
      var func836 = function(argcv) {    // method asString, line 2063
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(2063);    // compilenode num
        // call case 4: self request with 1 args and 0 typeArgs 
        var call837 = selfRequest(this, "toGrace(1)", [1], new GraceNum(0));
        return call837;
      };    // end of method asString
      this.methods["asString"] = func836;
      func836.methodName = "asString";
      func836.paramCounts = [0];
      func836.paramNames = [];
      func836.definitionLine = 2063;
      func836.definitionModule = "ast";
      var func838 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 2064
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
        }
        setLineNumber(2064);    // compilenode member
        // call case 6: other requests
        if (var_k === undefined) raiseUninitializedVariable("k");
        var call839 = request(var_k, "typeparam", [0]);
        return call839;
      };    // end of method declarationKindWithAncestors(_)
      this.methods["declarationKindWithAncestors(1)"] = func838;
      func838.methodName = "declarationKindWithAncestors(1)";
      func838.paramCounts = [1];
      func838.paramNames = ["ac"];
      func838.definitionLine = 2064;
      func838.definitionModule = "ast";
      var func840 = function(argcv) {    // method end, line 2065
        var returnTarget = invocationCount;
        invocationCount++;
        var if841 = GraceDone;
        setLineNumber(2066);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call843 = selfRequest(this, "whereClauses", [0]);
        var call842 = request(call843, "isEmpty", [0]);
        if (Grace_isTrue(call842)) {
          setLineNumber(2067);    // compilenode string
          var string845 = new GraceString("\u27e7");
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call848 = selfRequest(this, "params", [0]);
          var call847 = request(call848, "last", [0]);
          var call846 = request(call847, "end", [0]);
          // call case 2: outer request
          var call844 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string845, call846);
          if841 = call844;
        } else {
          setLineNumber(2069);    // compilenode string
          var string850 = new GraceString("\u27e7");
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call853 = selfRequest(this, "whereClauses", [0]);
          var call852 = request(call853, "last", [0]);
          var call851 = request(call852, "end", [0]);
          // call case 2: outer request
          var call849 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string850, call851);
          if841 = call849;
        }
        return if841;
      };    // end of method end
      function memofunc840(argcv) {
          if (! this.data["memo$end"])    // parameterless memo function
              this.data["memo$end"] = func840.call(this, argcv);
          return this.data["memo$end"];
      };
      this.methods["end"] = memofunc840;
      memofunc840.methodName = "end";
      memofunc840.paramCounts = [0];
      memofunc840.paramNames = [];
      memofunc840.definitionLine = 2065;
      memofunc840.definitionModule = "ast";
      func840.methodName = "end";
      func840.paramCounts = [0];
      func840.paramNames = [];
      func840.definitionLine = 2065;
      func840.definitionModule = "ast";
      var func854 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2073
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
        }
        var if855 = GraceDone;
        setLineNumber(2074);    // compilenode call
        // call case 6: other requests
        var call856 = request(var_visitor, "visitTypeParameters(1)up(1)", [1, 1], this, var_ac);
        if (Grace_isTrue(call856)) {
          setLineNumber(2075);    // compilenode call
          // call case 6: other requests
          var call857 = request(var_ac, "extend(1)", [1], this);
          var var_newChain = call857;
          setLineNumber(2076);    // compilenode block
          var block859 = new GraceBlock(this, 2076, 1);
          block859.guard = jsTrue;
          block859.real = function block859(var_p) {
            setLineNumber(2077);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            var call860 = request(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            return call860;
          };
          let applyMeth859 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth859.methodName = "apply(1)";
          applyMeth859.paramCounts = [1];
          applyMeth859.paramNames = ["p"];
          applyMeth859.definitionLine = 2076;
          applyMeth859.definitionModule = "ast";
          block859.methods["apply(1)"] = applyMeth859;
          let matchesMeth859 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth859.methodName = "matches(1)";
          matchesMeth859.paramCounts = [1];
          matchesMeth859.paramNames = ["p"];
          matchesMeth859.definitionLine = 2076;
          matchesMeth859.definitionModule = "ast";
          block859.methods["matches(1)"] = matchesMeth859;
          // call case 6: other requests
          setLineNumber(2076);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call861 = selfRequest(this, "params", [0]);
          var call858 = request(call861, "do(1)", [1], block859);
          setLineNumber(2079);    // compilenode block
          var block863 = new GraceBlock(this, 2079, 1);
          block863.guard = jsTrue;
          block863.real = function block863(var_w) {
            setLineNumber(2080);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            var call864 = request(var_w, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            return call864;
          };
          let applyMeth863 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth863.methodName = "apply(1)";
          applyMeth863.paramCounts = [1];
          applyMeth863.paramNames = ["w"];
          applyMeth863.definitionLine = 2079;
          applyMeth863.definitionModule = "ast";
          block863.methods["apply(1)"] = applyMeth863;
          let matchesMeth863 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth863.methodName = "matches(1)";
          matchesMeth863.paramCounts = [1];
          matchesMeth863.paramNames = ["w"];
          matchesMeth863.definitionLine = 2079;
          matchesMeth863.definitionModule = "ast";
          block863.methods["matches(1)"] = matchesMeth863;
          // call case 6: other requests
          setLineNumber(2079);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call865 = selfRequest(this, "whereClauses", [0]);
          var call862 = request(call865, "do(1)", [1], block863);
          if855 = call862;
        }
        return if855;
      };    // end of method accept(_)from(_)
      this.methods["accept(1)from(1)"] = func854;
      func854.methodName = "accept(1)from(1)";
      func854.paramCounts = [1, 1];
      func854.paramNames = ["visitor", "ac"];
      func854.definitionLine = 2073;
      func854.definitionModule = "ast";
      var func866 = function(argcv, var_blk) {    // method do(_), line 2084
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("do(_)", 0, numArgs - 1);
        }
        setLineNumber(2085);    // compilenode call
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call868 = selfRequest(this, "params", [0]);
        var call867 = request(call868, "do(1)", [1], var_blk);
        return call867;
      };    // end of method do(_)
      this.methods["do(1)"] = func866;
      func866.methodName = "do(1)";
      func866.paramCounts = [1];
      func866.paramNames = ["blk"];
      func866.definitionLine = 2084;
      func866.definitionModule = "ast";
      var func869 = function(argcv, var_blk, var_sepBlk) {    // method do(_)separatedBy(_), line 2087
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("do(_)separatedBy(_)", 0, numArgs - 2);
        }
        setLineNumber(2088);    // compilenode call
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call871 = selfRequest(this, "params", [0]);
        var call870 = request(call871, "do(1)separatedBy(1)", [1, 1], var_blk, var_sepBlk);
        return call870;
      };    // end of method do(_)separatedBy(_)
      this.methods["do(1)separatedBy(1)"] = func869;
      func869.methodName = "do(1)separatedBy(1)";
      func869.paramCounts = [1, 1];
      func869.paramNames = ["blk", "sepBlk"];
      func869.definitionLine = 2087;
      func869.definitionModule = "ast";
      var func872 = function(argcv) {    // method size, line 2090
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("size", 0, numArgs - 0);
        }
        setLineNumber(2090);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call874 = selfRequest(this, "params", [0]);
        var call873 = request(call874, "size", [0]);
        return call873;
      };    // end of method size
      this.methods["size"] = func872;
      func872.methodName = "size";
      func872.paramCounts = [0];
      func872.paramNames = [];
      func872.definitionLine = 2090;
      func872.definitionModule = "ast";
      var func875 = function(argcv) {    // method last, line 2091
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("last", 0, numArgs - 0);
        }
        setLineNumber(2091);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call877 = selfRequest(this, "params", [0]);
        var call876 = request(call877, "last", [0]);
        return call876;
      };    // end of method last
      this.methods["last"] = func875;
      func875.methodName = "last";
      func875.paramCounts = [0];
      func875.paramNames = [];
      func875.definitionLine = 2091;
      func875.definitionModule = "ast";
      var func878 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2092
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
        }
        setLineNumber(2093);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call879 = selfRequest(this, "shallowCopy", [0]);
        var var_n = call879;
        setLineNumber(2094);    // compilenode call
        // call case 6: other requests
        var call880 = request(var_ac, "extend(1)", [1], var_n);
        var var_newChain = call880;
        setLineNumber(2095);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call883 = selfRequest(this, "params", [0]);
        // call case 2: outer request
        var call882 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call883, var_blk, var_newChain);
        // call case 6: other requests
        var call881 = request(var_n, "params:=(1)", [1], call882);
        setLineNumber(2096);    // compilenode call
        // call case 6: other requests
        var call884 = request(var_blk, "apply(2)", [2], var_n, var_ac);
        return call884;
      };    // end of method map(_)ancestors(_)
      this.methods["map(1)ancestors(1)"] = func878;
      func878.methodName = "map(1)ancestors(1)";
      func878.paramCounts = [1, 1];
      func878.paramNames = ["blk", "ac"];
      func878.definitionLine = 2092;
      func878.definitionModule = "ast";
      var func885 = function(argcv, var_depth) {    // method pretty(_), line 2098
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("pretty(_)", 0, numArgs - 1);
        }
        setLineNumber(2099);    // compilenode string
        var string886 = new GraceString("  ");
        var sum887 = request(var_depth, "+(1)", [1], new GraceNum(1));
        var prod888 = request(string886, "*(1)", [1], sum887);
        var var_spc = prod888;
        setLineNumber(2100);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call889 = selfRequest(this, "basePretty(1)", [1], var_depth);
        var opresult890 = request(var_spc, "++(1)", [1], call889);
        var string891 = new GraceString("\u27e6");
        var opresult892 = request(opresult890, "++(1)", [1], string891);
        var var_s = opresult892;
        setLineNumber(2101);    // compilenode block
        var block894 = new GraceBlock(this, 2101, 1);
        block894.guard = jsTrue;
        block894.real = function block894(var_each) {
          setLineNumber(2101);    // compilenode op
          if (var_s === undefined) raiseUninitializedVariable("s");
          var sum896 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          var call895 = request(var_each, "pretty(1)", [1], sum896);
          var opresult897 = request(var_s, "++(1)", [1], call895);
          var_s = opresult897;
          return GraceDone;
        };
        let applyMeth894 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth894.methodName = "apply(1)";
        applyMeth894.paramCounts = [1];
        applyMeth894.paramNames = ["each"];
        applyMeth894.definitionLine = 2101;
        applyMeth894.definitionModule = "ast";
        block894.methods["apply(1)"] = applyMeth894;
        let matchesMeth894 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth894.methodName = "matches(1)";
        matchesMeth894.paramCounts = [1];
        matchesMeth894.paramNames = ["each"];
        matchesMeth894.definitionLine = 2101;
        matchesMeth894.definitionModule = "ast";
        block894.methods["matches(1)"] = matchesMeth894;
        setLineNumber(2102);    // compilenode block
        var block898 = new GraceBlock(this, 2102, 0);
        block898.guard = jsTrue;
        block898.real = function block898() {
          setLineNumber(2102);    // compilenode op
          if (var_s === undefined) raiseUninitializedVariable("s");
          var string899 = new GraceString(", ");
          var opresult900 = request(var_s, "++(1)", [1], string899);
          var_s = opresult900;
          return GraceDone;
        };
        let applyMeth898 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth898.methodName = "apply";
        applyMeth898.paramCounts = [0];
        applyMeth898.paramNames = [];
        applyMeth898.definitionLine = 2102;
        applyMeth898.definitionModule = "ast";
        block898.methods["apply"] = applyMeth898;
        // call case 6: other requests
        setLineNumber(2101);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call901 = selfRequest(this, "params", [0]);
        var call893 = request(call901, "do(1)separatedBy(1)", [1, 1], block894, block898);
        setLineNumber(2103);    // compilenode string
        var string902 = new GraceString("\u27e7");
        var opresult903 = request(var_s, "++(1)", [1], string902);
        return opresult903;
      };    // end of method pretty(_)
      this.methods["pretty(1)"] = func885;
      func885.methodName = "pretty(1)";
      func885.paramCounts = [1];
      func885.paramNames = ["depth"];
      func885.definitionLine = 2098;
      func885.definitionModule = "ast";
      var func904 = function(argcv, var_depth) {    // method toGrace(_), line 2105
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
        }
        setLineNumber(2106);    // compilenode string
        var string905 = new GraceString("\u27e6");
        var var_s = string905;
        setLineNumber(2107);    // compilenode block
        var block907 = new GraceBlock(this, 2107, 1);
        block907.guard = jsTrue;
        block907.real = function block907(var_each) {
          setLineNumber(2107);    // compilenode string
          var string908 = new GraceString("");
          if (var_s === undefined) raiseUninitializedVariable("s");
          var opresult909 = request(string908, "++(1)", [1], var_s);
          var string910 = new GraceString("");
          var opresult911 = request(opresult909, "++(1)", [1], string910);
          // call case 6: other requests
          var call912 = request(var_each, "toGrace(1)", [1], var_depth);
          var opresult913 = request(opresult911, "++(1)", [1], call912);
          var string914 = new GraceString("");
          var opresult915 = request(opresult913, "++(1)", [1], string914);
          var_s = opresult915;
          return GraceDone;
        };
        let applyMeth907 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth907.methodName = "apply(1)";
        applyMeth907.paramCounts = [1];
        applyMeth907.paramNames = ["each"];
        applyMeth907.definitionLine = 2107;
        applyMeth907.definitionModule = "ast";
        block907.methods["apply(1)"] = applyMeth907;
        let matchesMeth907 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth907.methodName = "matches(1)";
        matchesMeth907.paramCounts = [1];
        matchesMeth907.paramNames = ["each"];
        matchesMeth907.definitionLine = 2107;
        matchesMeth907.definitionModule = "ast";
        block907.methods["matches(1)"] = matchesMeth907;
        setLineNumber(2108);    // compilenode block
        var block916 = new GraceBlock(this, 2108, 0);
        block916.guard = jsTrue;
        block916.real = function block916() {
          setLineNumber(2108);    // compilenode op
          if (var_s === undefined) raiseUninitializedVariable("s");
          var string917 = new GraceString(", ");
          var opresult918 = request(var_s, "++(1)", [1], string917);
          var_s = opresult918;
          return GraceDone;
        };
        let applyMeth916 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth916.methodName = "apply";
        applyMeth916.paramCounts = [0];
        applyMeth916.paramNames = [];
        applyMeth916.definitionLine = 2108;
        applyMeth916.definitionModule = "ast";
        block916.methods["apply"] = applyMeth916;
        // call case 6: other requests
        setLineNumber(2107);    // compilenode member
        // call case 4: self request with 0 args and 0 typeArgs 
        var call919 = selfRequest(this, "params", [0]);
        var call906 = request(call919, "do(1)separatedBy(1)", [1, 1], block907, block916);
        setLineNumber(2109);    // compilenode string
        var string920 = new GraceString("\u27e7");
        var opresult921 = request(var_s, "++(1)", [1], string920);
        return opresult921;
      };    // end of method toGrace(_)
      func904.paramTypes = [];
      func904.paramTypes.push([type_Number, "depth"]);
      this.methods["toGrace(1)"] = func904;
      func904.methodName = "toGrace(1)";
      func904.paramCounts = [1];
      func904.paramNames = ["depth"];
      func904.definitionLine = 2105;
      func904.definitionModule = "ast";
      var func922 = function(argcv, var_other) {    // method postCopy(_), line 2111
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
        }
        setLineNumber(2112);    // compilenode member
        // call case 6: other requests
        var call924 = request(var_other, "params", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call923 = selfRequest(this, "params:=(1)", [1], call924);
        setLineNumber(2113);    // compilenode member
        // call case 6: other requests
        var call926 = request(var_other, "whereClauses", [0]);
        // call case 4: self request with 1 args and 0 typeArgs 
        var call925 = selfRequest(this, "whereClauses:=(1)", [1], call926);
        return this;
      };    // end of method postCopy(_)
      this.methods["postCopy(1)"] = func922;
      func922.methodName = "postCopy(1)";
      func922.paramCounts = [1];
      func922.paramNames = ["other"];
      func922.definitionLine = 2111;
      func922.definitionModule = "ast";
      var func927 = function(argcv) {    // method shallowCopy, line 2116
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("shallowCopy", 0, numArgs - 0);
        }
        setLineNumber(2117);    // compilenode call
        // call case 6: other requests
        if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
        if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
        // call case 2: outer request
        var call929 = selfRequest(importedModules["ast"], "typeParametersNode(1)whereClauses(1)", [1, 1], var_emptySeq, var_emptySeq);
        var call928 = request(call929, "shallowCopyFieldsFrom(1)", [1], this);
        return call928;
      };    // end of method shallowCopy
      this.methods["shallowCopy"] = func927;
      func927.methodName = "shallowCopy";
      func927.paramCounts = [0];
      func927.paramNames = [];
      func927.definitionLine = 2116;
      func927.definitionModule = "ast";
      this.mutable = true;
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 2058;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj829_init = function() {    // init of object on line 2058
        initFun830.call(this);
        setLineNumber(2060);    // compilenode string
        var string930 = new GraceString("typeparams");
        this.data.kind = string930;
        this.data.params = var_params__39__;
        this.data.whereClauses = var_conditions;
      };
      return obj829_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj829_init = obj829_build.call(inheritingObject, null, var_params__39__, var_conditions, this, aliases, exclusions);
    return obj829_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method typeParametersNode(_)whereClauses(_)$build(_,_,_)
  this.methods["typeParametersNode(1)whereClauses(1)$build(3)"] = func828;
  func828.methodName = "typeParametersNode(1)whereClauses(1)$build(3)";
  func828.paramCounts = [1, 1];
  func828.paramNames = ["params'", "conditions"];
  func828.definitionLine = 2058;
  func828.definitionModule = "ast";
  setLineNumber(3003);    // compilenode typedec
  // Type decl AliasPair
  var func932 = function(argcv) {    // method AliasPair, line 1
    var returnTarget = invocationCount;
    invocationCount++;
    setLineNumber(3003);    // compilenode typeliteral
    //   Type literal 
    var typeLit933 = new GraceType("AliasPair");
    typeLit933.typeMethods.push("newName");
    typeLit933.typeMethods.push("oldName");
    typeLit933.typeMethods.push("newSignature");
    typeLit933.typeMethods.push("oldSignature");
    return typeLit933;
  };    // end of method AliasPair
  function memofunc932(argcv) {
      if (! this.data["memo$AliasPair"])    // parameterless memo function
          this.data["memo$AliasPair"] = func932.call(this, argcv);
      return this.data["memo$AliasPair"];
  };
  this.methods["AliasPair"] = memofunc932;
  memofunc932.methodName = "AliasPair";
  memofunc932.paramCounts = [0];
  memofunc932.paramNames = [];
  memofunc932.definitionLine = 1;
  memofunc932.definitionModule = "ast";
  func932.methodName = "AliasPair";
  func932.paramCounts = [0];
  func932.paramNames = [];
  func932.definitionLine = 1;
  func932.definitionModule = "ast";
  var func934 = function(argcv, var_n, var_o) {    // method aliasNew(_)old(_), line 3010
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("aliasNew(_)old(_)", 0, numArgs - 2);
    }
    var ouc = emptyGraceObject("aliasNew(_)old(_)", "ast", 3010);
    var ouc_init = this.methods["aliasNew(1)old(1)$build(3)"].call(this, null, var_n, var_o, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method aliasNew(_)old(_)
  this.methods["aliasNew(1)old(1)"] = func934;
  func934.methodName = "aliasNew(1)old(1)";
  func934.paramCounts = [1, 1];
  func934.paramNames = ["n", "o"];
  func934.definitionLine = 3010;
  func934.definitionModule = "ast";
  var func935 = function(argcv, var_n, var_o, inheritingObject, aliases, exclusions) {    // method aliasNew(_)old(_)$build(_,_,_), line 3010
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("aliasNew(_)old(_)", 0, numArgs - 2);
    }
    var obj936_build = function(ignore, var_n, var_o, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_3010");
      this.outer_ast_3010 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      setLineNumber(3011);    // reuse call
      var initFun937 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
      setLineNumber(3012);    // reuse call
      var initFun938 = selfRequest(var_prelude, "equality$build(3)", [null], this, [], []);  // compileReuseCall
      this.data.newSignature = undefined;
      var reader939_newSignature = function() {  // reader method newSignature
          if (this.data.newSignature === undefined) raiseUninitializedVariable("newSignature");
          return this.data.newSignature;
      };
      reader939_newSignature.isDef = true;
      this.methods["newSignature"] = reader939_newSignature;
      this.data.oldSignature = undefined;
      var reader940_oldSignature = function() {  // reader method oldSignature
          if (this.data.oldSignature === undefined) raiseUninitializedVariable("oldSignature");
          return this.data.oldSignature;
      };
      reader940_oldSignature.isDef = true;
      this.methods["oldSignature"] = reader940_oldSignature;
      this.data.kind = undefined;
      var reader941_kind = function() {  // reader method kind
          if (this.data.kind === undefined) raiseUninitializedVariable("kind");
          return this.data.kind;
      };
      reader941_kind.isDef = true;
      this.methods["kind"] = reader941_kind;
      var func942 = function(argcv) {    // method newName, line 3017
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("newName", 0, numArgs - 0);
        }
        setLineNumber(3017);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call944 = selfRequest(this, "newSignature", [0]);
        var call943 = request(call944, "asIdentifier", [0]);
        return call943;
      };    // end of method newName
      this.methods["newName"] = func942;
      func942.methodName = "newName";
      func942.paramCounts = [0];
      func942.paramNames = [];
      func942.definitionLine = 3017;
      func942.definitionModule = "ast";
      var func945 = function(argcv) {    // method oldName, line 3018
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("oldName", 0, numArgs - 0);
        }
        setLineNumber(3018);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call947 = selfRequest(this, "oldSignature", [0]);
        var call946 = request(call947, "asIdentifier", [0]);
        return call946;
      };    // end of method oldName
      this.methods["oldName"] = func945;
      func945.methodName = "oldName";
      func945.paramCounts = [0];
      func945.paramNames = [];
      func945.definitionLine = 3018;
      func945.definitionModule = "ast";
      var func948 = function(argcv) {    // method asString, line 3019
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(3019);    // compilenode string
        var string949 = new GraceString("alias ");
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call951 = selfRequest(this, "newSignature", [0]);
        var call950 = request(call951, "nameString", [0]);
        var opresult952 = request(string949, "++(1)", [1], call950);
        var string953 = new GraceString(" = ");
        var opresult954 = request(opresult952, "++(1)", [1], string953);
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call956 = selfRequest(this, "oldSignature", [0]);
        var call955 = request(call956, "nameString", [0]);
        var opresult957 = request(opresult954, "++(1)", [1], call955);
        var string958 = new GraceString("");
        var opresult959 = request(opresult957, "++(1)", [1], string958);
        return opresult959;
      };    // end of method asString
      this.methods["asString"] = func948;
      func948.methodName = "asString";
      func948.paramCounts = [0];
      func948.paramNames = [];
      func948.definitionLine = 3019;
      func948.definitionModule = "ast";
      var func960 = function(argcv, var_depth) {    // method pretty(_), line 3020
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("pretty(_)", 0, numArgs - 1);
        }
        setLineNumber(3021);    // compilenode string
        var string961 = new GraceString("  ");
        var sum962 = request(var_depth, "+(1)", [1], new GraceNum(1));
        var prod963 = request(string961, "*(1)", [1], sum962);
        var var_spc = prod963;
        setLineNumber(3022);    // compilenode string
        var string964 = new GraceString("");
        var opresult965 = request(string964, "++(1)", [1], var_spc);
        var string966 = new GraceString("alias\n");
        var opresult967 = request(opresult965, "++(1)", [1], string966);
        var opresult968 = request(opresult967, "++(1)", [1], var_spc);
        var string969 = new GraceString("  ");
        var opresult970 = request(opresult968, "++(1)", [1], string969);
        var sum972 = request(var_depth, "+(1)", [1], new GraceNum(2));
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call973 = selfRequest(this, "newSignature", [0]);
        var call971 = request(call973, "pretty(1)", [1], sum972);
        var opresult974 = request(opresult970, "++(1)", [1], call971);
        var string975 = new GraceString("\n");
        var opresult976 = request(opresult974, "++(1)", [1], string975);
        var opresult977 = request(opresult976, "++(1)", [1], var_spc);
        var string978 = new GraceString("  =\n");
        var opresult979 = request(opresult977, "++(1)", [1], string978);
        var opresult980 = request(opresult979, "++(1)", [1], var_spc);
        var string981 = new GraceString("  ");
        var opresult982 = request(opresult980, "++(1)", [1], string981);
        var sum984 = request(var_depth, "+(1)", [1], new GraceNum(2));
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call985 = selfRequest(this, "oldSignature", [0]);
        var call983 = request(call985, "pretty(1)", [1], sum984);
        var opresult986 = request(opresult982, "++(1)", [1], call983);
        var string987 = new GraceString("");
        var opresult988 = request(opresult986, "++(1)", [1], string987);
        return opresult988;
      };    // end of method pretty(_)
      this.methods["pretty(1)"] = func960;
      func960.methodName = "pretty(1)";
      func960.paramCounts = [1];
      func960.paramNames = ["depth"];
      func960.definitionLine = 3020;
      func960.definitionModule = "ast";
      var func989 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 3024
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
        }
        var if990 = GraceDone;
        setLineNumber(3025);    // compilenode call
        // call case 6: other requests
        var call991 = request(var_visitor, "visitAlias(1)up(1)", [1, 1], this, var_ac);
        if (Grace_isTrue(call991)) {
          setLineNumber(3026);    // compilenode call
          // call case 6: other requests
          var call992 = request(var_ac, "extend(1)", [1], this);
          var var_newChain = call992;
          setLineNumber(3027);    // compilenode call
          if (var_newChain === undefined) raiseUninitializedVariable("newChain");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call994 = selfRequest(this, "newSignature", [0]);
          var call993 = request(call994, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
          setLineNumber(3028);    // compilenode call
          if (var_newChain === undefined) raiseUninitializedVariable("newChain");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call996 = selfRequest(this, "oldSignature", [0]);
          var call995 = request(call996, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
          if990 = call995;
        }
        return if990;
      };    // end of method accept(_)from(_)
      this.methods["accept(1)from(1)"] = func989;
      func989.methodName = "accept(1)from(1)";
      func989.paramCounts = [1, 1];
      func989.paramNames = ["visitor", "ac"];
      func989.definitionLine = 3024;
      func989.definitionModule = "ast";
      var func997 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 3031
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
        }
        setLineNumber(3032);    // compilenode member
        // call case 6: other requests
        if (var_k === undefined) raiseUninitializedVariable("k");
        var call998 = request(var_k, "aliasdec", [0]);
        return call998;
      };    // end of method declarationKindWithAncestors(_)
      this.methods["declarationKindWithAncestors(1)"] = func997;
      func997.methodName = "declarationKindWithAncestors(1)";
      func997.paramCounts = [1];
      func997.paramNames = ["ac"];
      func997.definitionLine = 3031;
      func997.definitionModule = "ast";
      var func999 = function(argcv) {    // method hash, line 3034
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("hash", 0, numArgs - 0);
        }
        setLineNumber(3034);    // compilenode member
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1001 = selfRequest(this, "newSignature", [0]);
        var call1000 = request(call1001, "hash", [0]);
        var prod1002 = request(call1000, "*(1)", [1], new GraceNum(1171));
        // call case 6: other requests
        // call case 4: self request with 0 args and 0 typeArgs 
        var call1004 = selfRequest(this, "oldSignature", [0]);
        var call1003 = request(call1004, "hash", [0]);
        var sum1005 = request(prod1002, "+(1)", [1], call1003);
        return sum1005;
      };    // end of method hash
      this.methods["hash"] = func999;
      func999.methodName = "hash";
      func999.paramCounts = [0];
      func999.paramNames = [];
      func999.definitionLine = 3034;
      func999.definitionModule = "ast";
      var func1006 = function(argcv) {     // accessor method isExecutable
        const numArgs = arguments.length - 1;
        if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
        return GraceFalse;
      };    // end of method isExecutable
      this.methods["isExecutable"] = func1006;
      func1006.methodName = "isExecutable";
      func1006.paramCounts = [0];
      func1006.paramNames = [];
      func1006.definitionLine = 3035;
      func1006.definitionModule = "ast";
      var func1007 = function(argcv, var_other) {    // method ==(_), line 3036
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 1) && (numArgs !== 1)) {
            raiseTypeArgError("==(_)", 0, numArgs - 1);
        }
        setLineNumber(3037);    // compilenode matchcase
        var cases1008 = [];
        var block1009 = new GraceBlock(this, 3037, 1);
        // call case 2: outer request
        var call1010 = selfRequest(importedModules["ast"], "AliasPair", [0]);
        block1009.paramTypes = [call1010];
        var matches1011 = function(var_that) {
          // call case 2: outer request
          var call1012 = selfRequest(importedModules["ast"], "AliasPair", [0]);
          if (!Grace_isTrue(request(call1012, "matches(1)", [1], var_that)))
              return false;
          return true;
        };
        block1009.guard = matches1011;
        block1009.real = function block1009(var_that) {
          setLineNumber(3038);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1013 = selfRequest(this, "newSignature", [0]);
          // call case 6: other requests
          var call1014 = request(var_that, "newSignature", [0]);
          var opresult1015 = request(call1013, "==(1)", [1], call1014);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1016 = selfRequest(this, "oldSignature", [0]);
          // call case 6: other requests
          var call1017 = request(var_that, "oldSignature", [0]);
          var opresult1018 = request(call1016, "==(1)", [1], call1017);
          var opresult1019 = request(opresult1015, "&&(1)", [1], opresult1018);
          return opresult1019;
        };
        let applyMeth1009 = function apply_1 (argcv, ...args) {
            if (this.guard.apply(this.receiver, args))
                return this.real.apply(this.receiver, args);
            badBlockArgs.apply(this, args);
        };
        applyMeth1009.methodName = "apply(1)";
        applyMeth1009.paramCounts = [1];
        applyMeth1009.paramNames = ["that"];
        applyMeth1009.definitionLine = 3037;
        applyMeth1009.definitionModule = "ast";
        block1009.methods["apply(1)"] = applyMeth1009;
        let matchesMeth1009 = function matches_1 (argcv, ...args) {
            return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
        };
        matchesMeth1009.methodName = "matches(1)";
        matchesMeth1009.paramCounts = [1];
        matchesMeth1009.paramNames = ["that"];
        matchesMeth1009.definitionLine = 3037;
        matchesMeth1009.definitionModule = "ast";
        block1009.methods["matches(1)"] = matchesMeth1009;
        cases1008.push(block1009);
        setLineNumber(3039);    // compilenode block
        var block1020 = new GraceBlock(this, 3039, 0);
        block1020.guard = jsTrue;
        block1020.real = function block1020() {
          setLineNumber(3039);    // compileBlock
          return GraceFalse;
        };
        let applyMeth1020 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1020.methodName = "apply";
        applyMeth1020.paramCounts = [0];
        applyMeth1020.paramNames = [];
        applyMeth1020.definitionLine = 3039;
        applyMeth1020.definitionModule = "ast";
        block1020.methods["apply"] = applyMeth1020;
        setLineNumber(3037);    // compilematchcase
        var matchres1008 = matchCase(var_other,cases1008,block1020);
        return matchres1008;
      };    // end of method ==(_)
      this.methods["==(1)"] = func1007;
      func1007.methodName = "==(1)";
      func1007.paramCounts = [1];
      func1007.paramNames = ["other"];
      func1007.definitionLine = 3036;
      func1007.definitionModule = "ast";
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 3010;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj936_init = function() {    // init of object on line 3010
        initFun937.call(this);
        this.data.newSignature = var_n;
        this.data.oldSignature = var_o;
        setLineNumber(3016);    // compilenode string
        var string1021 = new GraceString("alias");
        this.data.kind = string1021;
      };
      return obj936_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj936_init = obj936_build.call(inheritingObject, null, var_n, var_o, this, aliases, exclusions);
    return obj936_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method aliasNew(_)old(_)$build(_,_,_)
  this.methods["aliasNew(1)old(1)$build(3)"] = func935;
  func935.methodName = "aliasNew(1)old(1)$build(3)";
  func935.paramCounts = [1, 1];
  func935.paramNames = ["n", "o"];
  func935.definitionLine = 3010;
  func935.definitionModule = "ast";
  var func1022 = function(argcv, var_str, var_l, var_margin) {    // method wrap(_)to(_)prefixedBy(_), line 3297
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 3) && (numArgs !== 3)) {
        raiseTypeArgError("wrap(_)to(_)prefixedBy(_)", 0, numArgs - 3);
    }
    setLineNumber(3298);    // compilenode member
    // call case 6: other requests
    var call1023 = request(var_margin, "size", [0]);
    var var_ind = call1023;
    setLineNumber(3299);    // compilenode num
    var sum1025 = request(var_ind, "+(1)", [1], new GraceNum(4));
    // call case 2: outer request
    var call1024 = selfRequest(var_prelude, "max(2)", [2], sum1025, var_l);
    var var_len = call1024;
    var if1026 = GraceDone;
    setLineNumber(3300);    // compilenode member
    // call case 6: other requests
    var call1027 = request(var_str, "size", [0]);
    var sum1028 = request(var_ind, "+(1)", [1], call1027);
    var opresult1029 = request(sum1028, "\u2264(1)", [1], var_len);
    if (Grace_isTrue(opresult1029)) {
      setLineNumber(3301);    // compilenode string
      var string1030 = new GraceString("\n");
      var opresult1031 = request(string1030, "++(1)", [1], var_margin);
      var opresult1032 = request(opresult1031, "++(1)", [1], var_str);
      return opresult1032;
    }
    setLineNumber(3303);    // compilenode vardec
    var var_currBreak;
    setLineNumber(3304);    // compilenode vardec
    var var_trimmedLine;
    setLineNumber(3306);    // compilenode block
    var block1034 = new GraceBlock(this, 3306, 0);
    block1034.guard = jsTrue;
    block1034.real = function block1034() {
      setLineNumber(3307);    // compilenode string
      var string1036 = new GraceString(" ");
      if (var_len === undefined) raiseUninitializedVariable("len");
      if (var_ind === undefined) raiseUninitializedVariable("ind");
      var diff1037 = request(var_len, "-(1)", [1], var_ind);
      setLineNumber(3308);    // compilenode block
      var block1038 = new GraceBlock(this, 3308, 0);
      block1038.guard = jsTrue;
      block1038.real = function block1038() {
        setLineNumber(3308);    // compilenode op
        if (var_len === undefined) raiseUninitializedVariable("len");
        if (var_ind === undefined) raiseUninitializedVariable("ind");
        var diff1039 = request(var_len, "-(1)", [1], var_ind);
        return diff1039;
      };
      let applyMeth1038 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1038.methodName = "apply";
      applyMeth1038.paramCounts = [0];
      applyMeth1038.paramNames = [];
      applyMeth1038.definitionLine = 3308;
      applyMeth1038.definitionModule = "ast";
      block1038.methods["apply"] = applyMeth1038;
      // call case 6: other requests
      var call1035 = request(var_str, "lastIndexOf(1)startingAt(1)ifAbsent(1)", [1, 1, 1], string1036, diff1037, block1038);
      var_currBreak = call1035;
      setLineNumber(3309);    // compilenode member
      // call case 6: other requests
      if (var_currBreak === undefined) raiseUninitializedVariable("currBreak");
      // call case 6: other requests
      var call1041 = request(var_str, "substringFrom(1)to(1)", [1, 1], new GraceNum(1), var_currBreak);
      var call1040 = request(call1041, "trim", [0]);
      var_trimmedLine = call1040;
      return GraceDone;
    };
    let applyMeth1034 = function apply (argcv) {
        return this.real.apply(this.receiver);
    };
    applyMeth1034.methodName = "apply";
    applyMeth1034.paramCounts = [0];
    applyMeth1034.paramNames = [];
    applyMeth1034.definitionLine = 3306;
    applyMeth1034.definitionModule = "ast";
    block1034.methods["apply"] = applyMeth1034;
    var cases1033 = [];
    setLineNumber(3310);    // compilenode block
    var block1042 = new GraceBlock(this, 3310, 1);
    // call case 2: outer request
    var call1043 = selfRequest(var_prelude, "NoSuchMethod", [0]);
    block1042.paramTypes = [call1043];
    var matches1044 = function(var_ex) {
      // call case 2: outer request
      var call1045 = selfRequest(var_prelude, "NoSuchMethod", [0]);
      if (!Grace_isTrue(request(call1045, "matches(1)", [1], var_ex)))
          return false;
      return true;
    };
    block1042.guard = matches1044;
    block1042.real = function block1042(var_ex) {
      setLineNumber(3311);    // compilenode op
      if (var_len === undefined) raiseUninitializedVariable("len");
      if (var_ind === undefined) raiseUninitializedVariable("ind");
      var diff1047 = request(var_len, "-(1)", [1], var_ind);
      // call case 6: other requests
      var call1048 = request(var_str, "size", [0]);
      // call case 2: outer request
      var call1046 = selfRequest(var_prelude, "min(2)", [2], diff1047, call1048);
      var_currBreak = call1046;
      setLineNumber(3312);    // compilenode block
      var block1050 = new GraceBlock(this, 3312, 1);
      block1050.guard = jsTrue;
      block1050.real = function block1050(var_ix) {
        var if1051 = GraceDone;
        setLineNumber(3313);    // compilenode call
        // call case 6: other requests
        var call1052 = request(var_str, "at(1)", [1], var_ix);
        var string1053 = new GraceString(" ");
        var opresult1054 = request(call1052, "==(1)", [1], string1053);
        if (Grace_isTrue(opresult1054)) {
          var_currBreak = var_ix;
          if1051 = GraceDone;
        }
        return if1051;
      };
      let applyMeth1050 = function apply_1 (argcv, ...args) {
          if (this.guard.apply(this.receiver, args))
              return this.real.apply(this.receiver, args);
          badBlockArgs.apply(this, args);
      };
      applyMeth1050.methodName = "apply(1)";
      applyMeth1050.paramCounts = [1];
      applyMeth1050.paramNames = ["ix"];
      applyMeth1050.definitionLine = 3312;
      applyMeth1050.definitionModule = "ast";
      block1050.methods["apply(1)"] = applyMeth1050;
      let matchesMeth1050 = function matches_1 (argcv, ...args) {
          return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
      };
      matchesMeth1050.methodName = "matches(1)";
      matchesMeth1050.paramCounts = [1];
      matchesMeth1050.paramNames = ["ix"];
      matchesMeth1050.definitionLine = 3312;
      matchesMeth1050.definitionModule = "ast";
      block1050.methods["matches(1)"] = matchesMeth1050;
      // call case 6: other requests
      setLineNumber(3312);    // compilenode num
      if (var_currBreak === undefined) raiseUninitializedVariable("currBreak");
      var opresult1055 = request(new GraceNum(1), "..(1)", [1], var_currBreak);
      var call1049 = request(opresult1055, "do(1)", [1], block1050);
      setLineNumber(3315);    // compilenode vardec
      if (var_currBreak === undefined) raiseUninitializedVariable("currBreak");
      var var_end = var_currBreak;
      setLineNumber(3316);    // compilenode block
      var block1057 = new GraceBlock(this, 3316, 0);
      block1057.guard = jsTrue;
      block1057.real = function block1057() {
        setLineNumber(3316);    // compilenode op
        if (var_end === undefined) raiseUninitializedVariable("end");
        var opresult1058 = request(var_end, "\u2265(1)", [1], new GraceNum(1));
        var block1059 = new GraceBlock(this, 3316, 0);
        block1059.guard = jsTrue;
        block1059.real = function block1059() {
          setLineNumber(3316);    // compilenode call
          if (var_end === undefined) raiseUninitializedVariable("end");
          // call case 6: other requests
          var call1060 = request(var_str, "at(1)", [1], var_end);
          var string1061 = new GraceString(" ");
          var opresult1062 = request(call1060, "==(1)", [1], string1061);
          return opresult1062;
        };
        let applyMeth1059 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1059.methodName = "apply";
        applyMeth1059.paramCounts = [0];
        applyMeth1059.paramNames = [];
        applyMeth1059.definitionLine = 3316;
        applyMeth1059.definitionModule = "ast";
        block1059.methods["apply"] = applyMeth1059;
        var opresult1063 = request(opresult1058, "&&(1)", [1], block1059);
        return opresult1063;
      };
      let applyMeth1057 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1057.methodName = "apply";
      applyMeth1057.paramCounts = [0];
      applyMeth1057.paramNames = [];
      applyMeth1057.definitionLine = 3316;
      applyMeth1057.definitionModule = "ast";
      block1057.methods["apply"] = applyMeth1057;
      var block1064 = new GraceBlock(this, 3316, 0);
      block1064.guard = jsTrue;
      block1064.real = function block1064() {
        setLineNumber(3317);    // compilenode op
        if (var_end === undefined) raiseUninitializedVariable("end");
        var diff1065 = request(var_end, "-(1)", [1], new GraceNum(1));
        var_end = diff1065;
        return GraceDone;
      };
      let applyMeth1064 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1064.methodName = "apply";
      applyMeth1064.paramCounts = [0];
      applyMeth1064.paramNames = [];
      applyMeth1064.definitionLine = 3316;
      applyMeth1064.definitionModule = "ast";
      block1064.methods["apply"] = applyMeth1064;
      // call case 2: outer request
      var call1056 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1057, block1064);
      setLineNumber(3319);    // compilenode num
      var var_start = new GraceNum(1);
      setLineNumber(3320);    // compilenode block
      var block1067 = new GraceBlock(this, 3320, 0);
      block1067.guard = jsTrue;
      block1067.real = function block1067() {
        setLineNumber(3320);    // compilenode op
        if (var_start === undefined) raiseUninitializedVariable("start");
        // call case 6: other requests
        var call1068 = request(var_str, "size", [0]);
        var opresult1069 = request(var_start, "\u2264(1)", [1], call1068);
        var block1070 = new GraceBlock(this, 3320, 0);
        block1070.guard = jsTrue;
        block1070.real = function block1070() {
          setLineNumber(3320);    // compilenode call
          if (var_start === undefined) raiseUninitializedVariable("start");
          // call case 6: other requests
          var call1071 = request(var_str, "at(1)", [1], var_start);
          var string1072 = new GraceString(" ");
          var opresult1073 = request(call1071, "==(1)", [1], string1072);
          return opresult1073;
        };
        let applyMeth1070 = function apply (argcv) {
            return this.real.apply(this.receiver);
        };
        applyMeth1070.methodName = "apply";
        applyMeth1070.paramCounts = [0];
        applyMeth1070.paramNames = [];
        applyMeth1070.definitionLine = 3320;
        applyMeth1070.definitionModule = "ast";
        block1070.methods["apply"] = applyMeth1070;
        var opresult1074 = request(opresult1069, "&&(1)", [1], block1070);
        return opresult1074;
      };
      let applyMeth1067 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1067.methodName = "apply";
      applyMeth1067.paramCounts = [0];
      applyMeth1067.paramNames = [];
      applyMeth1067.definitionLine = 3320;
      applyMeth1067.definitionModule = "ast";
      block1067.methods["apply"] = applyMeth1067;
      var block1075 = new GraceBlock(this, 3320, 0);
      block1075.guard = jsTrue;
      block1075.real = function block1075() {
        setLineNumber(3321);    // compilenode op
        if (var_start === undefined) raiseUninitializedVariable("start");
        var sum1076 = request(var_start, "+(1)", [1], new GraceNum(1));
        var_start = sum1076;
        return GraceDone;
      };
      let applyMeth1075 = function apply (argcv) {
          return this.real.apply(this.receiver);
      };
      applyMeth1075.methodName = "apply";
      applyMeth1075.paramCounts = [0];
      applyMeth1075.paramNames = [];
      applyMeth1075.definitionLine = 3320;
      applyMeth1075.definitionModule = "ast";
      block1075.methods["apply"] = applyMeth1075;
      // call case 2: outer request
      var call1066 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1067, block1075);
      setLineNumber(3323);    // compilenode call
      if (var_start === undefined) raiseUninitializedVariable("start");
      if (var_end === undefined) raiseUninitializedVariable("end");
      // call case 6: other requests
      var call1077 = request(var_str, "substringFrom(1)to(1)", [1, 1], var_start, var_end);
      var_trimmedLine = call1077;
      return GraceDone;
    };
    let applyMeth1042 = function apply_1 (argcv, ...args) {
        if (this.guard.apply(this.receiver, args))
            return this.real.apply(this.receiver, args);
        badBlockArgs.apply(this, args);
    };
    applyMeth1042.methodName = "apply(1)";
    applyMeth1042.paramCounts = [1];
    applyMeth1042.paramNames = ["ex"];
    applyMeth1042.definitionLine = 3310;
    applyMeth1042.definitionModule = "ast";
    block1042.methods["apply(1)"] = applyMeth1042;
    let matchesMeth1042 = function matches_1 (argcv, ...args) {
        return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
    };
    matchesMeth1042.methodName = "matches(1)";
    matchesMeth1042.paramCounts = [1];
    matchesMeth1042.paramNames = ["ex"];
    matchesMeth1042.definitionLine = 3310;
    matchesMeth1042.definitionModule = "ast";
    block1042.methods["matches(1)"] = matchesMeth1042;
    cases1033.push(block1042);
    setLineNumber(3306);    // compiletrycatch
    var catchres1033 = tryCatch(block1034,cases1033,false);
    setLineNumber(3325);    // compilenode string
    var string1078 = new GraceString("\n");
    var opresult1079 = request(string1078, "++(1)", [1], var_margin);
    if (var_trimmedLine === undefined) raiseUninitializedVariable("trimmedLine");
    var opresult1080 = request(opresult1079, "++(1)", [1], var_trimmedLine);
    setLineNumber(3326);    // compilenode op
    if (var_currBreak === undefined) raiseUninitializedVariable("currBreak");
    var sum1083 = request(var_currBreak, "+(1)", [1], new GraceNum(1));
    // call case 6: other requests
    var call1084 = request(var_str, "size", [0]);
    // call case 6: other requests
    var call1082 = request(var_str, "substringFrom(1)to(1)", [1, 1], sum1083, call1084);
    // call case 2: outer request
    var call1081 = selfRequest(importedModules["ast"], "wrap(1)to(1)prefixedBy(1)", [1, 1, 1], call1082, var_l, var_margin);
    var opresult1085 = request(opresult1080, "++(1)", [1], call1081);
    return opresult1085;
  };    // end of method wrap(_)to(_)prefixedBy(_)
  func1022.paramTypes = [];
  func1022.paramTypes.push([]);
  func1022.paramTypes.push([type_Number, "l"]);
  func1022.paramTypes.push([]);
  this.methods["wrap(1)to(1)prefixedBy(1)"] = func1022;
  func1022.methodName = "wrap(1)to(1)prefixedBy(1)";
  func1022.paramCounts = [1, 1, 1];
  func1022.paramNames = ["str", "l", "margin"];
  func1022.definitionLine = 3297;
  func1022.definitionModule = "ast";
  setLineNumber(3331);    // compilenode typedec
  // Type decl AstVisitor
  var func1087 = function(argcv) {    // method AstVisitor, line 1
    var returnTarget = invocationCount;
    invocationCount++;
    setLineNumber(3331);    // compilenode typeliteral
    //   Type literal 
    var typeLit1088 = new GraceType("AstVisitor");
    typeLit1088.typeMethods.push("visitIf(1)up(1)");
    typeLit1088.typeMethods.push("visitBlock(1)up(1)");
    typeLit1088.typeMethods.push("visitMatchCase(1)up(1)");
    typeLit1088.typeMethods.push("visitTryCatch(1)up(1)");
    typeLit1088.typeMethods.push("visitMethodType(1)up(1)");
    typeLit1088.typeMethods.push("visitSignaturePart(1)up(1)");
    typeLit1088.typeMethods.push("visitTypeLiteral(1)up(1)");
    typeLit1088.typeMethods.push("visitTypeParameters(1)up(1)");
    typeLit1088.typeMethods.push("visitTypeDec(1)up(1)");
    typeLit1088.typeMethods.push("visitMethod(1)up(1)");
    typeLit1088.typeMethods.push("visitCall(1)up(1)");
    typeLit1088.typeMethods.push("visitObject(1)up(1)");
    typeLit1088.typeMethods.push("visitModule(1)up(1)");
    typeLit1088.typeMethods.push("visitArray(1)up(1)");
    typeLit1088.typeMethods.push("visitMember(1)up(1)");
    typeLit1088.typeMethods.push("visitGeneric(1)up(1)");
    typeLit1088.typeMethods.push("visitIdentifier(1)up(1)");
    typeLit1088.typeMethods.push("visitString(1)up(1)");
    typeLit1088.typeMethods.push("visitNum(1)up(1)");
    typeLit1088.typeMethods.push("visitOp(1)up(1)");
    typeLit1088.typeMethods.push("visitBind(1)up(1)");
    typeLit1088.typeMethods.push("visitDefDec(1)up(1)");
    typeLit1088.typeMethods.push("visitVarDec(1)up(1)");
    typeLit1088.typeMethods.push("visitImport(1)up(1)");
    typeLit1088.typeMethods.push("visitReturn(1)up(1)");
    typeLit1088.typeMethods.push("visitInherits(1)up(1)");
    typeLit1088.typeMethods.push("visitDialect(1)up(1)");
    typeLit1088.typeMethods.push("visitComment(1)up(1)");
    typeLit1088.typeMethods.push("visitImplicit(1)up(1)");
    typeLit1088.typeMethods.push("visitOuter(1)up(1)");
    return typeLit1088;
  };    // end of method AstVisitor
  function memofunc1087(argcv) {
      if (! this.data["memo$AstVisitor"])    // parameterless memo function
          this.data["memo$AstVisitor"] = func1087.call(this, argcv);
      return this.data["memo$AstVisitor"];
  };
  this.methods["AstVisitor"] = memofunc1087;
  memofunc1087.methodName = "AstVisitor";
  memofunc1087.paramCounts = [0];
  memofunc1087.paramNames = [];
  memofunc1087.definitionLine = 1;
  memofunc1087.definitionModule = "ast";
  func1087.methodName = "AstVisitor";
  func1087.paramCounts = [0];
  func1087.paramNames = [];
  func1087.definitionLine = 1;
  func1087.definitionModule = "ast";
  var func1089 = function(argcv) {    // method baseVisitor, line 3364
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("baseVisitor", 0, numArgs - 0);
    }
    var ouc = emptyGraceObject("baseVisitor", "ast", 3364);
    var ouc_init = this.methods["baseVisitor$build(3)"].call(this, null, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method baseVisitor
  this.methods["baseVisitor"] = func1089;
  func1089.methodName = "baseVisitor";
  func1089.paramCounts = [0];
  func1089.paramNames = [];
  func1089.definitionLine = 3364;
  func1089.definitionModule = "ast";
  var func1090 = function(argcv, inheritingObject, aliases, exclusions) {    // method baseVisitor$build(_,_,_), line 3364
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 0) && (numArgs !== 0)) {
        raiseTypeArgError("baseVisitor", 0, numArgs - 0);
    }
    var obj1091_build = function(ignore, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_3364");
      this.outer_ast_3364 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      var func1092 = function(argcv, var_o, var_ac) {    // method visitIf(_)up(_), line 3365
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitIf(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3365);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1093 = selfRequest(this, "visitIf(1)", [1], var_o);
        return call1093;
      };    // end of method visitIf(_)up(_)
      this.methods["visitIf(1)up(1)"] = func1092;
      func1092.methodName = "visitIf(1)up(1)";
      func1092.paramCounts = [1, 1];
      func1092.paramNames = ["o", "ac"];
      func1092.definitionLine = 3365;
      func1092.definitionModule = "ast";
      var func1094 = function(argcv, var_o, var_ac) {    // method visitBlock(_)up(_), line 3366
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitBlock(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3366);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1095 = selfRequest(this, "visitBlock(1)", [1], var_o);
        return call1095;
      };    // end of method visitBlock(_)up(_)
      this.methods["visitBlock(1)up(1)"] = func1094;
      func1094.methodName = "visitBlock(1)up(1)";
      func1094.paramCounts = [1, 1];
      func1094.paramNames = ["o", "ac"];
      func1094.definitionLine = 3366;
      func1094.definitionModule = "ast";
      var func1096 = function(argcv, var_o, var_ac) {    // method visitMatchCase(_)up(_), line 3367
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMatchCase(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3367);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1097 = selfRequest(this, "visitMatchCase(1)", [1], var_o);
        return call1097;
      };    // end of method visitMatchCase(_)up(_)
      this.methods["visitMatchCase(1)up(1)"] = func1096;
      func1096.methodName = "visitMatchCase(1)up(1)";
      func1096.paramCounts = [1, 1];
      func1096.paramNames = ["o", "ac"];
      func1096.definitionLine = 3367;
      func1096.definitionModule = "ast";
      var func1098 = function(argcv, var_o, var_ac) {    // method visitTryCatch(_)up(_), line 3368
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTryCatch(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3368);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1099 = selfRequest(this, "visitTryCatch(1)", [1], var_o);
        return call1099;
      };    // end of method visitTryCatch(_)up(_)
      this.methods["visitTryCatch(1)up(1)"] = func1098;
      func1098.methodName = "visitTryCatch(1)up(1)";
      func1098.paramCounts = [1, 1];
      func1098.paramNames = ["o", "ac"];
      func1098.definitionLine = 3368;
      func1098.definitionModule = "ast";
      var func1100 = function(argcv, var_o, var_ac) {    // method visitMethodType(_)up(_), line 3369
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMethodType(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3369);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1101 = selfRequest(this, "visitMethodType(1)", [1], var_o);
        return call1101;
      };    // end of method visitMethodType(_)up(_)
      this.methods["visitMethodType(1)up(1)"] = func1100;
      func1100.methodName = "visitMethodType(1)up(1)";
      func1100.paramCounts = [1, 1];
      func1100.paramNames = ["o", "ac"];
      func1100.definitionLine = 3369;
      func1100.definitionModule = "ast";
      var func1102 = function(argcv, var_o, var_ac) {    // method visitSignaturePart(_)up(_), line 3370
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitSignaturePart(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3370);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1103 = selfRequest(this, "visitSignaturePart(1)", [1], var_o);
        return call1103;
      };    // end of method visitSignaturePart(_)up(_)
      this.methods["visitSignaturePart(1)up(1)"] = func1102;
      func1102.methodName = "visitSignaturePart(1)up(1)";
      func1102.paramCounts = [1, 1];
      func1102.paramNames = ["o", "ac"];
      func1102.definitionLine = 3370;
      func1102.definitionModule = "ast";
      var func1104 = function(argcv, var_o, var_ac) {    // method visitTypeDec(_)up(_), line 3371
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTypeDec(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3371);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1105 = selfRequest(this, "visitTypeDec(1)", [1], var_o);
        return call1105;
      };    // end of method visitTypeDec(_)up(_)
      this.methods["visitTypeDec(1)up(1)"] = func1104;
      func1104.methodName = "visitTypeDec(1)up(1)";
      func1104.paramCounts = [1, 1];
      func1104.paramNames = ["o", "ac"];
      func1104.definitionLine = 3371;
      func1104.definitionModule = "ast";
      var func1106 = function(argcv, var_o, var_ac) {    // method visitTypeLiteral(_)up(_), line 3372
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTypeLiteral(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3372);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1107 = selfRequest(this, "visitTypeLiteral(1)", [1], var_o);
        return call1107;
      };    // end of method visitTypeLiteral(_)up(_)
      this.methods["visitTypeLiteral(1)up(1)"] = func1106;
      func1106.methodName = "visitTypeLiteral(1)up(1)";
      func1106.paramCounts = [1, 1];
      func1106.paramNames = ["o", "ac"];
      func1106.definitionLine = 3372;
      func1106.definitionModule = "ast";
      var func1108 = function(argcv, var_o, var_ac) {    // method visitTypeParameters(_)up(_), line 3373
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTypeParameters(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3373);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1109 = selfRequest(this, "visitTypeParameters(1)", [1], var_o);
        return call1109;
      };    // end of method visitTypeParameters(_)up(_)
      this.methods["visitTypeParameters(1)up(1)"] = func1108;
      func1108.methodName = "visitTypeParameters(1)up(1)";
      func1108.paramCounts = [1, 1];
      func1108.paramNames = ["o", "ac"];
      func1108.definitionLine = 3373;
      func1108.definitionModule = "ast";
      var func1110 = function(argcv, var_o, var_ac) {    // method visitMethod(_)up(_), line 3374
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMethod(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3374);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1111 = selfRequest(this, "visitMethod(1)", [1], var_o);
        return call1111;
      };    // end of method visitMethod(_)up(_)
      this.methods["visitMethod(1)up(1)"] = func1110;
      func1110.methodName = "visitMethod(1)up(1)";
      func1110.paramCounts = [1, 1];
      func1110.paramNames = ["o", "ac"];
      func1110.definitionLine = 3374;
      func1110.definitionModule = "ast";
      var func1112 = function(argcv, var_o, var_ac) {    // method visitCall(_)up(_), line 3375
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitCall(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3375);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1113 = selfRequest(this, "visitCall(1)", [1], var_o);
        return call1113;
      };    // end of method visitCall(_)up(_)
      this.methods["visitCall(1)up(1)"] = func1112;
      func1112.methodName = "visitCall(1)up(1)";
      func1112.paramCounts = [1, 1];
      func1112.paramNames = ["o", "ac"];
      func1112.definitionLine = 3375;
      func1112.definitionModule = "ast";
      var func1114 = function(argcv, var_o, var_ac) {    // method visitObject(_)up(_), line 3376
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitObject(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3376);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1115 = selfRequest(this, "visitObject(1)", [1], var_o);
        return call1115;
      };    // end of method visitObject(_)up(_)
      this.methods["visitObject(1)up(1)"] = func1114;
      func1114.methodName = "visitObject(1)up(1)";
      func1114.paramCounts = [1, 1];
      func1114.paramNames = ["o", "ac"];
      func1114.definitionLine = 3376;
      func1114.definitionModule = "ast";
      var func1116 = function(argcv, var_o, var_ac) {    // method visitModule(_)up(_), line 3377
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitModule(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3377);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1117 = selfRequest(this, "visitModule(1)", [1], var_o);
        return call1117;
      };    // end of method visitModule(_)up(_)
      this.methods["visitModule(1)up(1)"] = func1116;
      func1116.methodName = "visitModule(1)up(1)";
      func1116.paramCounts = [1, 1];
      func1116.paramNames = ["o", "ac"];
      func1116.definitionLine = 3377;
      func1116.definitionModule = "ast";
      var func1118 = function(argcv, var_o, var_ac) {    // method visitArray(_)up(_), line 3378
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitArray(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3378);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1119 = selfRequest(this, "visitArray(1)", [1], var_o);
        return call1119;
      };    // end of method visitArray(_)up(_)
      this.methods["visitArray(1)up(1)"] = func1118;
      func1118.methodName = "visitArray(1)up(1)";
      func1118.paramCounts = [1, 1];
      func1118.paramNames = ["o", "ac"];
      func1118.definitionLine = 3378;
      func1118.definitionModule = "ast";
      var func1120 = function(argcv, var_o, var_ac) {    // method visitMember(_)up(_), line 3379
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMember(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3379);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1121 = selfRequest(this, "visitMember(1)", [1], var_o);
        return call1121;
      };    // end of method visitMember(_)up(_)
      this.methods["visitMember(1)up(1)"] = func1120;
      func1120.methodName = "visitMember(1)up(1)";
      func1120.paramCounts = [1, 1];
      func1120.paramNames = ["o", "ac"];
      func1120.definitionLine = 3379;
      func1120.definitionModule = "ast";
      var func1122 = function(argcv, var_o, var_ac) {    // method visitGeneric(_)up(_), line 3380
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitGeneric(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3380);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1123 = selfRequest(this, "visitGeneric(1)", [1], var_o);
        return call1123;
      };    // end of method visitGeneric(_)up(_)
      this.methods["visitGeneric(1)up(1)"] = func1122;
      func1122.methodName = "visitGeneric(1)up(1)";
      func1122.paramCounts = [1, 1];
      func1122.paramNames = ["o", "ac"];
      func1122.definitionLine = 3380;
      func1122.definitionModule = "ast";
      var func1124 = function(argcv, var_o, var_ac) {    // method visitIdentifier(_)up(_), line 3381
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitIdentifier(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3381);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1125 = selfRequest(this, "visitIdentifier(1)", [1], var_o);
        return call1125;
      };    // end of method visitIdentifier(_)up(_)
      this.methods["visitIdentifier(1)up(1)"] = func1124;
      func1124.methodName = "visitIdentifier(1)up(1)";
      func1124.paramCounts = [1, 1];
      func1124.paramNames = ["o", "ac"];
      func1124.definitionLine = 3381;
      func1124.definitionModule = "ast";
      var func1126 = function(argcv, var_o, var_ac) {    // method visitString(_)up(_), line 3382
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitString(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3382);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1127 = selfRequest(this, "visitString(1)", [1], var_o);
        return call1127;
      };    // end of method visitString(_)up(_)
      this.methods["visitString(1)up(1)"] = func1126;
      func1126.methodName = "visitString(1)up(1)";
      func1126.paramCounts = [1, 1];
      func1126.paramNames = ["o", "ac"];
      func1126.definitionLine = 3382;
      func1126.definitionModule = "ast";
      var func1128 = function(argcv, var_o, var_ac) {    // method visitNum(_)up(_), line 3383
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitNum(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3383);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1129 = selfRequest(this, "visitNum(1)", [1], var_o);
        return call1129;
      };    // end of method visitNum(_)up(_)
      this.methods["visitNum(1)up(1)"] = func1128;
      func1128.methodName = "visitNum(1)up(1)";
      func1128.paramCounts = [1, 1];
      func1128.paramNames = ["o", "ac"];
      func1128.definitionLine = 3383;
      func1128.definitionModule = "ast";
      var func1130 = function(argcv, var_o, var_ac) {    // method visitOp(_)up(_), line 3384
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitOp(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3384);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1131 = selfRequest(this, "visitOp(1)", [1], var_o);
        return call1131;
      };    // end of method visitOp(_)up(_)
      this.methods["visitOp(1)up(1)"] = func1130;
      func1130.methodName = "visitOp(1)up(1)";
      func1130.paramCounts = [1, 1];
      func1130.paramNames = ["o", "ac"];
      func1130.definitionLine = 3384;
      func1130.definitionModule = "ast";
      var func1132 = function(argcv, var_o, var_ac) {    // method visitBind(_)up(_), line 3385
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitBind(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3385);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1133 = selfRequest(this, "visitBind(1)", [1], var_o);
        return call1133;
      };    // end of method visitBind(_)up(_)
      this.methods["visitBind(1)up(1)"] = func1132;
      func1132.methodName = "visitBind(1)up(1)";
      func1132.paramCounts = [1, 1];
      func1132.paramNames = ["o", "ac"];
      func1132.definitionLine = 3385;
      func1132.definitionModule = "ast";
      var func1134 = function(argcv, var_o, var_ac) {    // method visitDefDec(_)up(_), line 3386
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitDefDec(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3386);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1135 = selfRequest(this, "visitDefDec(1)", [1], var_o);
        return call1135;
      };    // end of method visitDefDec(_)up(_)
      this.methods["visitDefDec(1)up(1)"] = func1134;
      func1134.methodName = "visitDefDec(1)up(1)";
      func1134.paramCounts = [1, 1];
      func1134.paramNames = ["o", "ac"];
      func1134.definitionLine = 3386;
      func1134.definitionModule = "ast";
      var func1136 = function(argcv, var_o, var_ac) {    // method visitVarDec(_)up(_), line 3387
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitVarDec(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3387);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1137 = selfRequest(this, "visitVarDec(1)", [1], var_o);
        return call1137;
      };    // end of method visitVarDec(_)up(_)
      this.methods["visitVarDec(1)up(1)"] = func1136;
      func1136.methodName = "visitVarDec(1)up(1)";
      func1136.paramCounts = [1, 1];
      func1136.paramNames = ["o", "ac"];
      func1136.definitionLine = 3387;
      func1136.definitionModule = "ast";
      var func1138 = function(argcv, var_o, var_ac) {    // method visitImport(_)up(_), line 3388
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitImport(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3388);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1139 = selfRequest(this, "visitImport(1)", [1], var_o);
        return call1139;
      };    // end of method visitImport(_)up(_)
      this.methods["visitImport(1)up(1)"] = func1138;
      func1138.methodName = "visitImport(1)up(1)";
      func1138.paramCounts = [1, 1];
      func1138.paramNames = ["o", "ac"];
      func1138.definitionLine = 3388;
      func1138.definitionModule = "ast";
      var func1140 = function(argcv, var_o, var_ac) {    // method visitReturn(_)up(_), line 3389
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitReturn(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3389);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1141 = selfRequest(this, "visitReturn(1)", [1], var_o);
        return call1141;
      };    // end of method visitReturn(_)up(_)
      this.methods["visitReturn(1)up(1)"] = func1140;
      func1140.methodName = "visitReturn(1)up(1)";
      func1140.paramCounts = [1, 1];
      func1140.paramNames = ["o", "ac"];
      func1140.definitionLine = 3389;
      func1140.definitionModule = "ast";
      var func1142 = function(argcv, var_o, var_ac) {    // method visitInherits(_)up(_), line 3390
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitInherits(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3390);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1143 = selfRequest(this, "visitInherits(1)", [1], var_o);
        return call1143;
      };    // end of method visitInherits(_)up(_)
      this.methods["visitInherits(1)up(1)"] = func1142;
      func1142.methodName = "visitInherits(1)up(1)";
      func1142.paramCounts = [1, 1];
      func1142.paramNames = ["o", "ac"];
      func1142.definitionLine = 3390;
      func1142.definitionModule = "ast";
      var func1144 = function(argcv, var_o, var_ac) {    // method visitDialect(_)up(_), line 3391
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitDialect(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3391);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1145 = selfRequest(this, "visitDialect(1)", [1], var_o);
        return call1145;
      };    // end of method visitDialect(_)up(_)
      this.methods["visitDialect(1)up(1)"] = func1144;
      func1144.methodName = "visitDialect(1)up(1)";
      func1144.paramCounts = [1, 1];
      func1144.paramNames = ["o", "ac"];
      func1144.definitionLine = 3391;
      func1144.definitionModule = "ast";
      var func1146 = function(argcv, var_o, var_ac) {    // method visitComment(_)up(_), line 3392
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitComment(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3392);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1147 = selfRequest(this, "visitComment(1)", [1], var_o);
        return call1147;
      };    // end of method visitComment(_)up(_)
      this.methods["visitComment(1)up(1)"] = func1146;
      func1146.methodName = "visitComment(1)up(1)";
      func1146.paramCounts = [1, 1];
      func1146.paramNames = ["o", "ac"];
      func1146.definitionLine = 3392;
      func1146.definitionModule = "ast";
      var func1148 = function(argcv, var_o, var_ac) {    // method visitImplicit(_)up(_), line 3393
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitImplicit(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3393);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1149 = selfRequest(this, "visitImplicit(1)", [1], var_o);
        return call1149;
      };    // end of method visitImplicit(_)up(_)
      this.methods["visitImplicit(1)up(1)"] = func1148;
      func1148.methodName = "visitImplicit(1)up(1)";
      func1148.paramCounts = [1, 1];
      func1148.paramNames = ["o", "ac"];
      func1148.definitionLine = 3393;
      func1148.definitionModule = "ast";
      var func1150 = function(argcv, var_o, var_ac) {    // method visitOuter(_)up(_), line 3394
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitOuter(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3394);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1151 = selfRequest(this, "visitOuter(1)", [1], var_o);
        return call1151;
      };    // end of method visitOuter(_)up(_)
      this.methods["visitOuter(1)up(1)"] = func1150;
      func1150.methodName = "visitOuter(1)up(1)";
      func1150.paramCounts = [1, 1];
      func1150.paramNames = ["o", "ac"];
      func1150.definitionLine = 3394;
      func1150.definitionModule = "ast";
      var func1152 = function(argcv, var_o, var_ac) {    // method visitAlias(_)up(_), line 3395
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitAlias(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3395);    // compilenode call
        // call case 4: self request with 1 args and 0 typeArgs 
        var call1153 = selfRequest(this, "visitAlias(1)", [1], var_o);
        return call1153;
      };    // end of method visitAlias(_)up(_)
      this.methods["visitAlias(1)up(1)"] = func1152;
      func1152.methodName = "visitAlias(1)up(1)";
      func1152.paramCounts = [1, 1];
      func1152.paramNames = ["o", "ac"];
      func1152.definitionLine = 3395;
      func1152.definitionModule = "ast";
      var func1154 = function(argcv, var_o) {     // accessor method visitIf(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitIf(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitIf(_)
      this.methods["visitIf(1)"] = func1154;
      func1154.methodName = "visitIf(1)";
      func1154.paramCounts = [1];
      func1154.paramNames = ["o"];
      func1154.definitionLine = 3397;
      func1154.definitionModule = "ast";
      var func1155 = function(argcv, var_o) {     // accessor method visitBlock(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitBlock(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitBlock(_)
      this.methods["visitBlock(1)"] = func1155;
      func1155.methodName = "visitBlock(1)";
      func1155.paramCounts = [1];
      func1155.paramNames = ["o"];
      func1155.definitionLine = 3398;
      func1155.definitionModule = "ast";
      var func1156 = function(argcv, var_o) {     // accessor method visitMatchCase(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitMatchCase(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitMatchCase(_)
      this.methods["visitMatchCase(1)"] = func1156;
      func1156.methodName = "visitMatchCase(1)";
      func1156.paramCounts = [1];
      func1156.paramNames = ["o"];
      func1156.definitionLine = 3399;
      func1156.definitionModule = "ast";
      var func1157 = function(argcv, var_o) {     // accessor method visitTryCatch(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitTryCatch(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitTryCatch(_)
      this.methods["visitTryCatch(1)"] = func1157;
      func1157.methodName = "visitTryCatch(1)";
      func1157.paramCounts = [1];
      func1157.paramNames = ["o"];
      func1157.definitionLine = 3400;
      func1157.definitionModule = "ast";
      var func1158 = function(argcv, var_o) {     // accessor method visitMethodType(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitMethodType(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitMethodType(_)
      this.methods["visitMethodType(1)"] = func1158;
      func1158.methodName = "visitMethodType(1)";
      func1158.paramCounts = [1];
      func1158.paramNames = ["o"];
      func1158.definitionLine = 3401;
      func1158.definitionModule = "ast";
      var func1159 = function(argcv, var_o) {     // accessor method visitSignaturePart(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitSignaturePart(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitSignaturePart(_)
      this.methods["visitSignaturePart(1)"] = func1159;
      func1159.methodName = "visitSignaturePart(1)";
      func1159.paramCounts = [1];
      func1159.paramNames = ["o"];
      func1159.definitionLine = 3402;
      func1159.definitionModule = "ast";
      var func1160 = function(argcv, var_o) {     // accessor method visitTypeDec(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitTypeDec(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitTypeDec(_)
      this.methods["visitTypeDec(1)"] = func1160;
      func1160.methodName = "visitTypeDec(1)";
      func1160.paramCounts = [1];
      func1160.paramNames = ["o"];
      func1160.definitionLine = 3403;
      func1160.definitionModule = "ast";
      var func1161 = function(argcv, var_o) {     // accessor method visitTypeLiteral(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitTypeLiteral(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitTypeLiteral(_)
      this.methods["visitTypeLiteral(1)"] = func1161;
      func1161.methodName = "visitTypeLiteral(1)";
      func1161.paramCounts = [1];
      func1161.paramNames = ["o"];
      func1161.definitionLine = 3404;
      func1161.definitionModule = "ast";
      var func1162 = function(argcv, var_o) {     // accessor method visitTypeParameters(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitTypeParameters(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitTypeParameters(_)
      this.methods["visitTypeParameters(1)"] = func1162;
      func1162.methodName = "visitTypeParameters(1)";
      func1162.paramCounts = [1];
      func1162.paramNames = ["o"];
      func1162.definitionLine = 3405;
      func1162.definitionModule = "ast";
      var func1163 = function(argcv, var_o) {     // accessor method visitMethod(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitMethod(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitMethod(_)
      this.methods["visitMethod(1)"] = func1163;
      func1163.methodName = "visitMethod(1)";
      func1163.paramCounts = [1];
      func1163.paramNames = ["o"];
      func1163.definitionLine = 3406;
      func1163.definitionModule = "ast";
      var func1164 = function(argcv, var_o) {     // accessor method visitCall(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitCall(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitCall(_)
      this.methods["visitCall(1)"] = func1164;
      func1164.methodName = "visitCall(1)";
      func1164.paramCounts = [1];
      func1164.paramNames = ["o"];
      func1164.definitionLine = 3407;
      func1164.definitionModule = "ast";
      var func1165 = function(argcv, var_o) {     // accessor method visitObject(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitObject(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitObject(_)
      this.methods["visitObject(1)"] = func1165;
      func1165.methodName = "visitObject(1)";
      func1165.paramCounts = [1];
      func1165.paramNames = ["o"];
      func1165.definitionLine = 3408;
      func1165.definitionModule = "ast";
      var func1166 = function(argcv, var_o) {     // accessor method visitModule(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitModule(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitModule(_)
      this.methods["visitModule(1)"] = func1166;
      func1166.methodName = "visitModule(1)";
      func1166.paramCounts = [1];
      func1166.paramNames = ["o"];
      func1166.definitionLine = 3409;
      func1166.definitionModule = "ast";
      var func1167 = function(argcv, var_o) {     // accessor method visitArray(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitArray(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitArray(_)
      this.methods["visitArray(1)"] = func1167;
      func1167.methodName = "visitArray(1)";
      func1167.paramCounts = [1];
      func1167.paramNames = ["o"];
      func1167.definitionLine = 3410;
      func1167.definitionModule = "ast";
      var func1168 = function(argcv, var_o) {     // accessor method visitMember(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitMember(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitMember(_)
      this.methods["visitMember(1)"] = func1168;
      func1168.methodName = "visitMember(1)";
      func1168.paramCounts = [1];
      func1168.paramNames = ["o"];
      func1168.definitionLine = 3411;
      func1168.definitionModule = "ast";
      var func1169 = function(argcv, var_o) {     // accessor method visitGeneric(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitGeneric(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitGeneric(_)
      this.methods["visitGeneric(1)"] = func1169;
      func1169.methodName = "visitGeneric(1)";
      func1169.paramCounts = [1];
      func1169.paramNames = ["o"];
      func1169.definitionLine = 3412;
      func1169.definitionModule = "ast";
      var func1170 = function(argcv, var_o) {     // accessor method visitIdentifier(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitIdentifier(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitIdentifier(_)
      this.methods["visitIdentifier(1)"] = func1170;
      func1170.methodName = "visitIdentifier(1)";
      func1170.paramCounts = [1];
      func1170.paramNames = ["o"];
      func1170.definitionLine = 3413;
      func1170.definitionModule = "ast";
      var func1171 = function(argcv, var_o) {     // accessor method visitString(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitString(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitString(_)
      this.methods["visitString(1)"] = func1171;
      func1171.methodName = "visitString(1)";
      func1171.paramCounts = [1];
      func1171.paramNames = ["o"];
      func1171.definitionLine = 3414;
      func1171.definitionModule = "ast";
      var func1172 = function(argcv, var_o) {     // accessor method visitNum(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitNum(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitNum(_)
      this.methods["visitNum(1)"] = func1172;
      func1172.methodName = "visitNum(1)";
      func1172.paramCounts = [1];
      func1172.paramNames = ["o"];
      func1172.definitionLine = 3415;
      func1172.definitionModule = "ast";
      var func1173 = function(argcv, var_o) {     // accessor method visitOp(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitOp(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitOp(_)
      this.methods["visitOp(1)"] = func1173;
      func1173.methodName = "visitOp(1)";
      func1173.paramCounts = [1];
      func1173.paramNames = ["o"];
      func1173.definitionLine = 3416;
      func1173.definitionModule = "ast";
      var func1174 = function(argcv, var_o) {     // accessor method visitBind(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitBind(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitBind(_)
      this.methods["visitBind(1)"] = func1174;
      func1174.methodName = "visitBind(1)";
      func1174.paramCounts = [1];
      func1174.paramNames = ["o"];
      func1174.definitionLine = 3417;
      func1174.definitionModule = "ast";
      var func1175 = function(argcv, var_o) {     // accessor method visitDefDec(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitDefDec(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitDefDec(_)
      this.methods["visitDefDec(1)"] = func1175;
      func1175.methodName = "visitDefDec(1)";
      func1175.paramCounts = [1];
      func1175.paramNames = ["o"];
      func1175.definitionLine = 3418;
      func1175.definitionModule = "ast";
      var func1176 = function(argcv, var_o) {     // accessor method visitVarDec(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitVarDec(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitVarDec(_)
      this.methods["visitVarDec(1)"] = func1176;
      func1176.methodName = "visitVarDec(1)";
      func1176.paramCounts = [1];
      func1176.paramNames = ["o"];
      func1176.definitionLine = 3419;
      func1176.definitionModule = "ast";
      var func1177 = function(argcv, var_o) {     // accessor method visitImport(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitImport(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitImport(_)
      this.methods["visitImport(1)"] = func1177;
      func1177.methodName = "visitImport(1)";
      func1177.paramCounts = [1];
      func1177.paramNames = ["o"];
      func1177.definitionLine = 3420;
      func1177.definitionModule = "ast";
      var func1178 = function(argcv, var_o) {     // accessor method visitReturn(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitReturn(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitReturn(_)
      this.methods["visitReturn(1)"] = func1178;
      func1178.methodName = "visitReturn(1)";
      func1178.paramCounts = [1];
      func1178.paramNames = ["o"];
      func1178.definitionLine = 3421;
      func1178.definitionModule = "ast";
      var func1179 = function(argcv, var_o) {     // accessor method visitInherits(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitInherits(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitInherits(_)
      this.methods["visitInherits(1)"] = func1179;
      func1179.methodName = "visitInherits(1)";
      func1179.paramCounts = [1];
      func1179.paramNames = ["o"];
      func1179.definitionLine = 3422;
      func1179.definitionModule = "ast";
      var func1180 = function(argcv, var_o) {     // accessor method visitDialect(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitDialect(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitDialect(_)
      this.methods["visitDialect(1)"] = func1180;
      func1180.methodName = "visitDialect(1)";
      func1180.paramCounts = [1];
      func1180.paramNames = ["o"];
      func1180.definitionLine = 3423;
      func1180.definitionModule = "ast";
      var func1181 = function(argcv, var_o) {     // accessor method visitComment(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitComment(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitComment(_)
      this.methods["visitComment(1)"] = func1181;
      func1181.methodName = "visitComment(1)";
      func1181.paramCounts = [1];
      func1181.paramNames = ["o"];
      func1181.definitionLine = 3424;
      func1181.definitionModule = "ast";
      var func1182 = function(argcv, var_o) {     // accessor method visitImplicit(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitImplicit(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitImplicit(_)
      this.methods["visitImplicit(1)"] = func1182;
      func1182.methodName = "visitImplicit(1)";
      func1182.paramCounts = [1];
      func1182.paramNames = ["o"];
      func1182.definitionLine = 3425;
      func1182.definitionModule = "ast";
      var func1183 = function(argcv, var_o) {     // accessor method visitOuter(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitOuter(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitOuter(_)
      this.methods["visitOuter(1)"] = func1183;
      func1183.methodName = "visitOuter(1)";
      func1183.paramCounts = [1];
      func1183.paramNames = ["o"];
      func1183.definitionLine = 3426;
      func1183.definitionModule = "ast";
      var func1184 = function(argcv, var_o) {     // accessor method visitAlias(_)
        const numArgs = arguments.length - 1;
        if (numArgs > 1) raiseTypeArgError("visitAlias(_)", 0, numArgs - 1);
        return GraceTrue;
      };    // end of method visitAlias(_)
      this.methods["visitAlias(1)"] = func1184;
      func1184.methodName = "visitAlias(1)";
      func1184.paramCounts = [1];
      func1184.paramNames = ["o"];
      func1184.definitionLine = 3427;
      func1184.definitionModule = "ast";
      var func1185 = function(argcv) {    // method asString, line 3429
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(3429);    // compilenode string
        var string1186 = new GraceString("an AST visitor");
        return string1186;
      };    // end of method asString
      this.methods["asString"] = func1185;
      func1185.methodName = "asString";
      func1185.paramCounts = [0];
      func1185.paramNames = [];
      func1185.definitionLine = 3429;
      func1185.definitionModule = "ast";
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 3364;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj1091_init = function() {    // init of object on line 3364
      };
      return obj1091_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj1091_init = obj1091_build.call(inheritingObject, null, this, aliases, exclusions);
    return obj1091_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method baseVisitor$build(_,_,_)
  this.methods["baseVisitor$build(3)"] = func1090;
  func1090.methodName = "baseVisitor$build(3)";
  func1090.paramCounts = [0];
  func1090.paramNames = [];
  func1090.definitionLine = 3364;
  func1090.definitionModule = "ast";
  var func1187 = function(argcv, var_visitation) {    // method pluggableVisitor(_), line 3432
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("pluggableVisitor(_)", 0, numArgs - 1);
    }
    var ouc = emptyGraceObject("pluggableVisitor(_)", "ast", 3432);
    var ouc_init = this.methods["pluggableVisitor(1)$build(3)"].call(this, null, var_visitation, ouc, [], []);
    ouc_init.call(ouc);
    return ouc;
  };    // end of method pluggableVisitor(_)
  this.methods["pluggableVisitor(1)"] = func1187;
  func1187.methodName = "pluggableVisitor(1)";
  func1187.paramCounts = [1];
  func1187.paramNames = ["visitation"];
  func1187.definitionLine = 3432;
  func1187.definitionModule = "ast";
  var func1188 = function(argcv, var_visitation, inheritingObject, aliases, exclusions) {    // method pluggableVisitor(_)$build(_,_,_), line 3432
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 4;
    if ((numArgs > 1) && (numArgs !== 1)) {
        raiseTypeArgError("pluggableVisitor(_)", 0, numArgs - 1);
    }
    var obj1189_build = function(ignore, var_visitation, outerObj, aliases, exclusions) {
      this.closureKeys = this.closureKeys || [];
      this.closureKeys.push("outer_ast_3432");
      this.outer_ast_3432 = outerObj;
      const inheritedExclusions = { };
      for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
          const exMeth = exclusions[eix];
          inheritedExclusions[exMeth] = this.methods[exMeth]; };
      var func1190 = function(argcv, var_o, var_ac) {    // method visitIf(_)up(_), line 3439
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitIf(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3439);    // compilenode call
        // call case 6: other requests
        var call1191 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1191;
      };    // end of method visitIf(_)up(_)
      this.methods["visitIf(1)up(1)"] = func1190;
      func1190.methodName = "visitIf(1)up(1)";
      func1190.paramCounts = [1, 1];
      func1190.paramNames = ["o", "ac"];
      func1190.definitionLine = 3439;
      func1190.definitionModule = "ast";
      var func1192 = function(argcv, var_o, var_ac) {    // method visitBlock(_)up(_), line 3440
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitBlock(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3440);    // compilenode call
        // call case 6: other requests
        var call1193 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1193;
      };    // end of method visitBlock(_)up(_)
      this.methods["visitBlock(1)up(1)"] = func1192;
      func1192.methodName = "visitBlock(1)up(1)";
      func1192.paramCounts = [1, 1];
      func1192.paramNames = ["o", "ac"];
      func1192.definitionLine = 3440;
      func1192.definitionModule = "ast";
      var func1194 = function(argcv, var_o, var_ac) {    // method visitMatchCase(_)up(_), line 3441
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMatchCase(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3441);    // compilenode call
        // call case 6: other requests
        var call1195 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1195;
      };    // end of method visitMatchCase(_)up(_)
      this.methods["visitMatchCase(1)up(1)"] = func1194;
      func1194.methodName = "visitMatchCase(1)up(1)";
      func1194.paramCounts = [1, 1];
      func1194.paramNames = ["o", "ac"];
      func1194.definitionLine = 3441;
      func1194.definitionModule = "ast";
      var func1196 = function(argcv, var_o, var_ac) {    // method visitTryCatch(_)up(_), line 3442
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTryCatch(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3442);    // compilenode call
        // call case 6: other requests
        var call1197 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1197;
      };    // end of method visitTryCatch(_)up(_)
      this.methods["visitTryCatch(1)up(1)"] = func1196;
      func1196.methodName = "visitTryCatch(1)up(1)";
      func1196.paramCounts = [1, 1];
      func1196.paramNames = ["o", "ac"];
      func1196.definitionLine = 3442;
      func1196.definitionModule = "ast";
      var func1198 = function(argcv, var_o, var_ac) {    // method visitMethodType(_)up(_), line 3443
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMethodType(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3443);    // compilenode call
        // call case 6: other requests
        var call1199 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1199;
      };    // end of method visitMethodType(_)up(_)
      this.methods["visitMethodType(1)up(1)"] = func1198;
      func1198.methodName = "visitMethodType(1)up(1)";
      func1198.paramCounts = [1, 1];
      func1198.paramNames = ["o", "ac"];
      func1198.definitionLine = 3443;
      func1198.definitionModule = "ast";
      var func1200 = function(argcv, var_o, var_ac) {    // method visitSignaturePart(_)up(_), line 3444
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitSignaturePart(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3444);    // compilenode call
        // call case 6: other requests
        var call1201 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1201;
      };    // end of method visitSignaturePart(_)up(_)
      this.methods["visitSignaturePart(1)up(1)"] = func1200;
      func1200.methodName = "visitSignaturePart(1)up(1)";
      func1200.paramCounts = [1, 1];
      func1200.paramNames = ["o", "ac"];
      func1200.definitionLine = 3444;
      func1200.definitionModule = "ast";
      var func1202 = function(argcv, var_o, var_ac) {    // method visitTypeDec(_)up(_), line 3445
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTypeDec(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3445);    // compilenode call
        // call case 6: other requests
        var call1203 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1203;
      };    // end of method visitTypeDec(_)up(_)
      this.methods["visitTypeDec(1)up(1)"] = func1202;
      func1202.methodName = "visitTypeDec(1)up(1)";
      func1202.paramCounts = [1, 1];
      func1202.paramNames = ["o", "ac"];
      func1202.definitionLine = 3445;
      func1202.definitionModule = "ast";
      var func1204 = function(argcv, var_o, var_ac) {    // method visitTypeLiteral(_)up(_), line 3446
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitTypeLiteral(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3446);    // compilenode call
        // call case 6: other requests
        var call1205 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1205;
      };    // end of method visitTypeLiteral(_)up(_)
      this.methods["visitTypeLiteral(1)up(1)"] = func1204;
      func1204.methodName = "visitTypeLiteral(1)up(1)";
      func1204.paramCounts = [1, 1];
      func1204.paramNames = ["o", "ac"];
      func1204.definitionLine = 3446;
      func1204.definitionModule = "ast";
      var func1206 = function(argcv, var_o, var_ac) {    // method visitMethod(_)up(_), line 3447
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMethod(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3447);    // compilenode call
        // call case 6: other requests
        var call1207 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1207;
      };    // end of method visitMethod(_)up(_)
      this.methods["visitMethod(1)up(1)"] = func1206;
      func1206.methodName = "visitMethod(1)up(1)";
      func1206.paramCounts = [1, 1];
      func1206.paramNames = ["o", "ac"];
      func1206.definitionLine = 3447;
      func1206.definitionModule = "ast";
      var func1208 = function(argcv, var_o, var_ac) {    // method visitCall(_)up(_), line 3448
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitCall(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3448);    // compilenode call
        // call case 6: other requests
        var call1209 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1209;
      };    // end of method visitCall(_)up(_)
      this.methods["visitCall(1)up(1)"] = func1208;
      func1208.methodName = "visitCall(1)up(1)";
      func1208.paramCounts = [1, 1];
      func1208.paramNames = ["o", "ac"];
      func1208.definitionLine = 3448;
      func1208.definitionModule = "ast";
      var func1210 = function(argcv, var_o, var_ac) {    // method visitObject(_)up(_), line 3449
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitObject(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3449);    // compilenode call
        // call case 6: other requests
        var call1211 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1211;
      };    // end of method visitObject(_)up(_)
      this.methods["visitObject(1)up(1)"] = func1210;
      func1210.methodName = "visitObject(1)up(1)";
      func1210.paramCounts = [1, 1];
      func1210.paramNames = ["o", "ac"];
      func1210.definitionLine = 3449;
      func1210.definitionModule = "ast";
      var func1212 = function(argcv, var_o, var_ac) {    // method visitModule(_)up(_), line 3450
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitModule(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3450);    // compilenode call
        // call case 6: other requests
        var call1213 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1213;
      };    // end of method visitModule(_)up(_)
      this.methods["visitModule(1)up(1)"] = func1212;
      func1212.methodName = "visitModule(1)up(1)";
      func1212.paramCounts = [1, 1];
      func1212.paramNames = ["o", "ac"];
      func1212.definitionLine = 3450;
      func1212.definitionModule = "ast";
      var func1214 = function(argcv, var_o, var_ac) {    // method visitArray(_)up(_), line 3451
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitArray(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3451);    // compilenode call
        // call case 6: other requests
        var call1215 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1215;
      };    // end of method visitArray(_)up(_)
      this.methods["visitArray(1)up(1)"] = func1214;
      func1214.methodName = "visitArray(1)up(1)";
      func1214.paramCounts = [1, 1];
      func1214.paramNames = ["o", "ac"];
      func1214.definitionLine = 3451;
      func1214.definitionModule = "ast";
      var func1216 = function(argcv, var_o, var_ac) {    // method visitMember(_)up(_), line 3452
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitMember(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3452);    // compilenode call
        // call case 6: other requests
        var call1217 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1217;
      };    // end of method visitMember(_)up(_)
      this.methods["visitMember(1)up(1)"] = func1216;
      func1216.methodName = "visitMember(1)up(1)";
      func1216.paramCounts = [1, 1];
      func1216.paramNames = ["o", "ac"];
      func1216.definitionLine = 3452;
      func1216.definitionModule = "ast";
      var func1218 = function(argcv, var_o, var_ac) {    // method visitGeneric(_)up(_), line 3453
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitGeneric(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3453);    // compilenode call
        // call case 6: other requests
        var call1219 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1219;
      };    // end of method visitGeneric(_)up(_)
      this.methods["visitGeneric(1)up(1)"] = func1218;
      func1218.methodName = "visitGeneric(1)up(1)";
      func1218.paramCounts = [1, 1];
      func1218.paramNames = ["o", "ac"];
      func1218.definitionLine = 3453;
      func1218.definitionModule = "ast";
      var func1220 = function(argcv, var_o, var_ac) {    // method visitIdentifier(_)up(_), line 3454
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitIdentifier(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3454);    // compilenode call
        // call case 6: other requests
        var call1221 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1221;
      };    // end of method visitIdentifier(_)up(_)
      this.methods["visitIdentifier(1)up(1)"] = func1220;
      func1220.methodName = "visitIdentifier(1)up(1)";
      func1220.paramCounts = [1, 1];
      func1220.paramNames = ["o", "ac"];
      func1220.definitionLine = 3454;
      func1220.definitionModule = "ast";
      var func1222 = function(argcv, var_o, var_ac) {    // method visitString(_)up(_), line 3455
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitString(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3455);    // compilenode call
        // call case 6: other requests
        var call1223 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1223;
      };    // end of method visitString(_)up(_)
      this.methods["visitString(1)up(1)"] = func1222;
      func1222.methodName = "visitString(1)up(1)";
      func1222.paramCounts = [1, 1];
      func1222.paramNames = ["o", "ac"];
      func1222.definitionLine = 3455;
      func1222.definitionModule = "ast";
      var func1224 = function(argcv, var_o, var_ac) {    // method visitNum(_)up(_), line 3456
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitNum(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3456);    // compilenode call
        // call case 6: other requests
        var call1225 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1225;
      };    // end of method visitNum(_)up(_)
      this.methods["visitNum(1)up(1)"] = func1224;
      func1224.methodName = "visitNum(1)up(1)";
      func1224.paramCounts = [1, 1];
      func1224.paramNames = ["o", "ac"];
      func1224.definitionLine = 3456;
      func1224.definitionModule = "ast";
      var func1226 = function(argcv, var_o, var_ac) {    // method visitOp(_)up(_), line 3457
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitOp(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3457);    // compilenode call
        // call case 6: other requests
        var call1227 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1227;
      };    // end of method visitOp(_)up(_)
      this.methods["visitOp(1)up(1)"] = func1226;
      func1226.methodName = "visitOp(1)up(1)";
      func1226.paramCounts = [1, 1];
      func1226.paramNames = ["o", "ac"];
      func1226.definitionLine = 3457;
      func1226.definitionModule = "ast";
      var func1228 = function(argcv, var_o, var_ac) {    // method visitBind(_)up(_), line 3458
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitBind(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3458);    // compilenode call
        // call case 6: other requests
        var call1229 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1229;
      };    // end of method visitBind(_)up(_)
      this.methods["visitBind(1)up(1)"] = func1228;
      func1228.methodName = "visitBind(1)up(1)";
      func1228.paramCounts = [1, 1];
      func1228.paramNames = ["o", "ac"];
      func1228.definitionLine = 3458;
      func1228.definitionModule = "ast";
      var func1230 = function(argcv, var_o, var_ac) {    // method visitDefDec(_)up(_), line 3459
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitDefDec(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3459);    // compilenode call
        // call case 6: other requests
        var call1231 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1231;
      };    // end of method visitDefDec(_)up(_)
      this.methods["visitDefDec(1)up(1)"] = func1230;
      func1230.methodName = "visitDefDec(1)up(1)";
      func1230.paramCounts = [1, 1];
      func1230.paramNames = ["o", "ac"];
      func1230.definitionLine = 3459;
      func1230.definitionModule = "ast";
      var func1232 = function(argcv, var_o, var_ac) {    // method visitVarDec(_)up(_), line 3460
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitVarDec(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3460);    // compilenode call
        // call case 6: other requests
        var call1233 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1233;
      };    // end of method visitVarDec(_)up(_)
      this.methods["visitVarDec(1)up(1)"] = func1232;
      func1232.methodName = "visitVarDec(1)up(1)";
      func1232.paramCounts = [1, 1];
      func1232.paramNames = ["o", "ac"];
      func1232.definitionLine = 3460;
      func1232.definitionModule = "ast";
      var func1234 = function(argcv, var_o, var_ac) {    // method visitImport(_)up(_), line 3461
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitImport(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3461);    // compilenode call
        // call case 6: other requests
        var call1235 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1235;
      };    // end of method visitImport(_)up(_)
      this.methods["visitImport(1)up(1)"] = func1234;
      func1234.methodName = "visitImport(1)up(1)";
      func1234.paramCounts = [1, 1];
      func1234.paramNames = ["o", "ac"];
      func1234.definitionLine = 3461;
      func1234.definitionModule = "ast";
      var func1236 = function(argcv, var_o, var_ac) {    // method visitReturn(_)up(_), line 3462
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitReturn(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3462);    // compilenode call
        // call case 6: other requests
        var call1237 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1237;
      };    // end of method visitReturn(_)up(_)
      this.methods["visitReturn(1)up(1)"] = func1236;
      func1236.methodName = "visitReturn(1)up(1)";
      func1236.paramCounts = [1, 1];
      func1236.paramNames = ["o", "ac"];
      func1236.definitionLine = 3462;
      func1236.definitionModule = "ast";
      var func1238 = function(argcv, var_o, var_ac) {    // method visitInherits(_)up(_), line 3463
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitInherits(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3463);    // compilenode call
        // call case 6: other requests
        var call1239 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1239;
      };    // end of method visitInherits(_)up(_)
      this.methods["visitInherits(1)up(1)"] = func1238;
      func1238.methodName = "visitInherits(1)up(1)";
      func1238.paramCounts = [1, 1];
      func1238.paramNames = ["o", "ac"];
      func1238.definitionLine = 3463;
      func1238.definitionModule = "ast";
      var func1240 = function(argcv, var_o, var_ac) {    // method visitDialect(_)up(_), line 3464
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitDialect(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3464);    // compilenode call
        // call case 6: other requests
        var call1241 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1241;
      };    // end of method visitDialect(_)up(_)
      this.methods["visitDialect(1)up(1)"] = func1240;
      func1240.methodName = "visitDialect(1)up(1)";
      func1240.paramCounts = [1, 1];
      func1240.paramNames = ["o", "ac"];
      func1240.definitionLine = 3464;
      func1240.definitionModule = "ast";
      var func1242 = function(argcv, var_o, var_ac) {    // method visitComment(_)up(_), line 3465
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitComment(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3465);    // compilenode call
        // call case 6: other requests
        var call1243 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1243;
      };    // end of method visitComment(_)up(_)
      this.methods["visitComment(1)up(1)"] = func1242;
      func1242.methodName = "visitComment(1)up(1)";
      func1242.paramCounts = [1, 1];
      func1242.paramNames = ["o", "ac"];
      func1242.definitionLine = 3465;
      func1242.definitionModule = "ast";
      var func1244 = function(argcv, var_o, var_ac) {    // method visitImplicit(_)up(_), line 3466
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitImplicit(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3466);    // compilenode call
        // call case 6: other requests
        var call1245 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1245;
      };    // end of method visitImplicit(_)up(_)
      this.methods["visitImplicit(1)up(1)"] = func1244;
      func1244.methodName = "visitImplicit(1)up(1)";
      func1244.paramCounts = [1, 1];
      func1244.paramNames = ["o", "ac"];
      func1244.definitionLine = 3466;
      func1244.definitionModule = "ast";
      var func1246 = function(argcv, var_o, var_ac) {    // method visitOuter(_)up(_), line 3467
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitOuter(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3467);    // compilenode call
        // call case 6: other requests
        var call1247 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1247;
      };    // end of method visitOuter(_)up(_)
      this.methods["visitOuter(1)up(1)"] = func1246;
      func1246.methodName = "visitOuter(1)up(1)";
      func1246.paramCounts = [1, 1];
      func1246.paramNames = ["o", "ac"];
      func1246.definitionLine = 3467;
      func1246.definitionModule = "ast";
      var func1248 = function(argcv, var_o, var_ac) {    // method visitAlias(_)up(_), line 3468
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 2) && (numArgs !== 2)) {
            raiseTypeArgError("visitAlias(_)up(_)", 0, numArgs - 2);
        }
        setLineNumber(3468);    // compilenode call
        // call case 6: other requests
        var call1249 = request(var_visitation, "apply(2)", [2], var_o, var_ac);
        return call1249;
      };    // end of method visitAlias(_)up(_)
      this.methods["visitAlias(1)up(1)"] = func1248;
      func1248.methodName = "visitAlias(1)up(1)";
      func1248.paramCounts = [1, 1];
      func1248.paramNames = ["o", "ac"];
      func1248.definitionLine = 3468;
      func1248.definitionModule = "ast";
      var func1250 = function(argcv) {    // method asString, line 3470
        var returnTarget = invocationCount;
        invocationCount++;
        const numArgs = arguments.length - 1;
        if ((numArgs > 0) && (numArgs !== 0)) {
            raiseTypeArgError("asString", 0, numArgs - 0);
        }
        setLineNumber(3470);    // compilenode string
        var string1251 = new GraceString("a pluggable AST visitor");
        return string1251;
      };    // end of method asString
      this.methods["asString"] = func1250;
      func1250.methodName = "asString";
      func1250.paramCounts = [0];
      func1250.paramNames = [];
      func1250.definitionLine = 3470;
      func1250.definitionModule = "ast";
      const overridenByAliases = { };
      for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
          const a = aliases[aix];
          const newNm = a.newName;
          const oldNm = a.oldName;
          overridenByAliases[newNm] = this.methods[newNm];
          const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
          m.definitionLine = 3432;
          m.definitionModule = "ast";
          this.methods[newNm] = m;
      }
      for (let exName in inheritedExclusions) {
          if (inheritedExclusions.hasOwnProperty(exName)) {
              if (inheritedExclusions[exName]) {
                  this.methods[exName] = inheritedExclusions[exName];
              } else {
                  delete this.methods[exName];
              }
          }
      }
      var obj1189_init = function() {    // init of object on line 3432
      };
      return obj1189_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
    };
    var obj1189_init = obj1189_build.call(inheritingObject, null, var_visitation, this, aliases, exclusions);
    return obj1189_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
  };    // end of method pluggableVisitor(_)$build(_,_,_)
  this.methods["pluggableVisitor(1)$build(3)"] = func1188;
  func1188.methodName = "pluggableVisitor(1)$build(3)";
  func1188.paramCounts = [1];
  func1188.paramNames = ["visitation"];
  func1188.definitionLine = 3432;
  func1188.definitionModule = "ast";
  var func1252 = function(argcv, var_node, var_annName) {    // method findAnnotation(_,_), line 3482
    var returnTarget = invocationCount;
    invocationCount++;
    const numArgs = arguments.length - 1;
    if ((numArgs > 2) && (numArgs !== 2)) {
        raiseTypeArgError("findAnnotation(_,_)", 0, numArgs - 2);
    }
    setLineNumber(3483);    // compilenode block
    var block1254 = new GraceBlock(this, 3483, 1);
    block1254.guard = jsTrue;
    block1254.real = function block1254(var_ann) {
      var if1255 = GraceDone;
      setLineNumber(3484);    // compilenode member
      // call case 6: other requests
      var call1256 = request(var_ann, "nameString", [0]);
      var opresult1257 = request(call1256, "==(1)", [1], var_annName);
      if (Grace_isTrue(opresult1257)) {
        setLineNumber(3485);    // compilenode object
        var obj1258_build = function(ignore, outerObj, aliases, exclusions) {
          this.closureKeys = this.closureKeys || [];
          this.closureKeys.push("outer_ast_3485");
          this.outer_ast_3485 = outerObj;
          const inheritedExclusions = { };
          for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
              const exMeth = exclusions[eix];
              inheritedExclusions[exMeth] = this.methods[exMeth]; };
          setLineNumber(3486);    // reuse call
          var initFun1259 = request(var___95__prelude, "true$build(3)", [null], this, [], []);  // compileReuseCall
          this.data.value = undefined;
          var reader1260_value = function() {  // reader method value
              if (this.data.value === undefined) raiseUninitializedVariable("value");
              return this.data.value;
          };
          reader1260_value.isDef = true;
          this.methods["value"] = reader1260_value;
          const overridenByAliases = { };
          for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
              const a = aliases[aix];
              const newNm = a.newName;
              const oldNm = a.oldName;
              overridenByAliases[newNm] = this.methods[newNm];
              const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
              m.definitionLine = 3485;
              m.definitionModule = "ast";
              this.methods[newNm] = m;
          }
          for (let exName in inheritedExclusions) {
              if (inheritedExclusions.hasOwnProperty(exName)) {
                  if (inheritedExclusions[exName]) {
                      this.methods[exName] = inheritedExclusions[exName];
                  } else {
                      delete this.methods[exName];
                  }
              }
          }
          var obj1258_init = function() {    // init of object on line 3485
            initFun1259.call(this);
            this.data.value = var_ann;
          };
          return obj1258_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
        };
        var obj1258 = emptyGraceObject("object", "ast", 3485);
        var obj1258_init = obj1258_build.call(obj1258, null, this, [], []);
        obj1258_init.call(obj1258);  // end of compileobject
        throw new ReturnException(obj1258, returnTarget);
      }
      return if1255;
    };
    let applyMeth1254 = function apply_1 (argcv, ...args) {
        if (this.guard.apply(this.receiver, args))
            return this.real.apply(this.receiver, args);
        badBlockArgs.apply(this, args);
    };
    applyMeth1254.methodName = "apply(1)";
    applyMeth1254.paramCounts = [1];
    applyMeth1254.paramNames = ["ann"];
    applyMeth1254.definitionLine = 3483;
    applyMeth1254.definitionModule = "ast";
    block1254.methods["apply(1)"] = applyMeth1254;
    let matchesMeth1254 = function matches_1 (argcv, ...args) {
        return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
    };
    matchesMeth1254.methodName = "matches(1)";
    matchesMeth1254.paramCounts = [1];
    matchesMeth1254.paramNames = ["ann"];
    matchesMeth1254.definitionLine = 3483;
    matchesMeth1254.definitionModule = "ast";
    block1254.methods["matches(1)"] = matchesMeth1254;
    // call case 6: other requests
    setLineNumber(3483);    // compilenode member
    // call case 6: other requests
    var call1261 = request(var_node, "annotations", [0]);
    var call1253 = request(call1261, "do(1)", [1], block1254);
    return GraceFalse;
  };    // end of method findAnnotation(_,_)
  this.methods["findAnnotation(2)"] = func1252;
  func1252.methodName = "findAnnotation(2)";
  func1252.paramCounts = [2];
  func1252.paramNames = ["node", "annName"];
  func1252.definitionLine = 3482;
  func1252.definitionModule = "ast";
  setLineNumber(77);    // compilenode num
  // call case 2: outer request
  var call1262 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], new GraceNum(0), new GraceNum(0));
  var var_noPosition = call1262;
  var reader1263_noPosition = function() {  // reader method noPosition
      if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
      return var_noPosition;
  };
  reader1263_noPosition.isDef = true;
  this.methods["noPosition"] = reader1263_noPosition;
  setLineNumber(78);    // compilenode call
  if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
  if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
  // call case 2: outer request
  var call1264 = selfRequest(importedModules["ast"], "start(1)end(1)", [1, 1], var_noPosition, var_noPosition);
  var var_emptyRange = call1264;
  var reader1265_emptyRange = function() {  // reader method emptyRange
      if (var_emptyRange === undefined) raiseUninitializedVariable("emptyRange");
      return var_emptyRange;
  };
  reader1265_emptyRange.isDef = true;
  this.methods["emptyRange"] = reader1265_emptyRange;
  setLineNumber(127);    // compilenode num
  var var_lineLength = new GraceNum(80);
  var reader1266_lineLength = function() {  // reader method lineLength
      if (var_lineLength === undefined) raiseUninitializedVariable("lineLength");
      return var_lineLength;
  };
  reader1266_lineLength.isDef = true;
  this.methods["lineLength"] = reader1266_lineLength;
  setLineNumber(128);    // compilenode string
  var string1268 = new GraceString("uninitialized");
  // call case 6: other requests
  // call case 2: outer request
  var call1269 = selfRequest(var_prelude, "Singleton", [0]);
  var call1267 = request(call1269, "named(1)", [1], string1268);
  var var_uninitialized = call1267;
  var reader1270_uninitialized = function() {  // reader method uninitialized
      if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
      return var_uninitialized;
  };
  reader1270_uninitialized.isDef = true;
  reader1270_uninitialized.confidential = true;
  this.methods["uninitialized"] = reader1270_uninitialized;
  setLineNumber(149);    // compilenode object
  var obj1271_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_149");
    this.outer_ast_149 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func1272 = function(argcv) {    // method empty, line 150
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 0) && (numArgs !== 0)) {
          raiseTypeArgError("empty", 0, numArgs - 0);
      }
      var ouc = emptyGraceObject("ancestorChain.empty", "ast", 150);
      var ouc_init = this.methods["empty$build(3)"].call(this, null, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method empty
    this.methods["empty"] = func1272;
    func1272.methodName = "empty";
    func1272.paramCounts = [0];
    func1272.paramNames = [];
    func1272.definitionLine = 150;
    func1272.definitionModule = "ast";
    var func1273 = function(argcv, inheritingObject, aliases, exclusions) {    // method empty$build(_,_,_), line 150
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 0) && (numArgs !== 0)) {
          raiseTypeArgError("empty", 0, numArgs - 0);
      }
      var obj1274_build = function(ignore, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_150");
        this.outer_ast_150 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        var func1275 = function(argcv) {     // accessor method isEmpty
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isEmpty", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isEmpty
        this.methods["isEmpty"] = func1275;
        func1275.methodName = "isEmpty";
        func1275.paramCounts = [0];
        func1275.paramNames = [];
        func1275.definitionLine = 151;
        func1275.definitionModule = "ast";
        var func1276 = function(argcv) {    // method asString, line 152
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(152);    // compilenode string
          var string1277 = new GraceString("ancestorChain \u25ab");
          return string1277;
        };    // end of method asString
        this.methods["asString"] = func1276;
        func1276.methodName = "asString";
        func1276.paramCounts = [0];
        func1276.paramNames = [];
        func1276.definitionLine = 152;
        func1276.definitionModule = "ast";
        var func1278 = function(argcv, var_n) {    // method extend(_), line 153
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("extend(_)", 0, numArgs - 1);
          }
          setLineNumber(153);    // compilenode call
          // call case 2: outer request
          var call1279 = selfRequest(this.outer_ast_150, "cons(1)onto(1)", [1, 1], var_n, this);
          return call1279;
        };    // end of method extend(_)
        this.methods["extend(1)"] = func1278;
        func1278.methodName = "extend(1)";
        func1278.paramCounts = [1];
        func1278.paramNames = ["n"];
        func1278.definitionLine = 153;
        func1278.definitionModule = "ast";
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 150;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj1274_init = function() {    // init of object on line 150
        };
        return obj1274_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj1274_init = obj1274_build.call(inheritingObject, null, this, aliases, exclusions);
      return obj1274_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method empty$build(_,_,_)
    this.methods["empty$build(3)"] = func1273;
    func1273.methodName = "empty$build(3)";
    func1273.paramCounts = [0];
    func1273.paramNames = [];
    func1273.definitionLine = 150;
    func1273.definitionModule = "ast";
    var func1280 = function(argcv, var_n) {    // method with(_), line 155
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("with(_)", 0, numArgs - 1);
      }
      setLineNumber(155);    // compilenode call
      // call case 6: other requests
      // call case 4: self request with 0 args and 0 typeArgs 
      var call1282 = selfRequest(this, "empty", [0]);
      var call1281 = request(call1282, "extend(1)", [1], var_n);
      return call1281;
    };    // end of method with(_)
    this.methods["with(1)"] = func1280;
    func1280.methodName = "with(1)";
    func1280.paramCounts = [1];
    func1280.paramNames = ["n"];
    func1280.definitionLine = 155;
    func1280.definitionModule = "ast";
    var func1283 = function(argcv, var_p, var_ac) {    // method cons(_)onto(_), line 156
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("cons(_)onto(_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("ancestorChain.cons(_)onto(_)", "ast", 156);
      var ouc_init = this.methods["cons(1)onto(1)$build(3)"].call(this, null, var_p, var_ac, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method cons(_)onto(_)
    func1283.confidential = true;
    this.methods["cons(1)onto(1)"] = func1283;
    func1283.methodName = "cons(1)onto(1)";
    func1283.paramCounts = [1, 1];
    func1283.paramNames = ["p", "ac"];
    func1283.definitionLine = 156;
    func1283.definitionModule = "ast";
    var func1284 = function(argcv, var_p, var_ac, inheritingObject, aliases, exclusions) {    // method cons(_)onto(_)$build(_,_,_), line 156
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("cons(_)onto(_)", 0, numArgs - 2);
      }
      var obj1285_build = function(ignore, var_p, var_ac, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_156");
        this.outer_ast_156 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        var func1286 = function(argcv) {     // accessor method forebears
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("forebears", 0, numArgs - 0);
          return var_ac;
        };    // end of method forebears
        this.methods["forebears"] = func1286;
        func1286.methodName = "forebears";
        func1286.paramCounts = [0];
        func1286.paramNames = [];
        func1286.definitionLine = 157;
        func1286.definitionModule = "ast";
        var func1287 = function(argcv) {     // accessor method isEmpty
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isEmpty", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isEmpty
        this.methods["isEmpty"] = func1287;
        func1287.methodName = "isEmpty";
        func1287.paramCounts = [0];
        func1287.paramNames = [];
        func1287.definitionLine = 158;
        func1287.definitionModule = "ast";
        var func1288 = function(argcv) {     // accessor method parent
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("parent", 0, numArgs - 0);
          return var_p;
        };    // end of method parent
        this.methods["parent"] = func1288;
        func1288.methodName = "parent";
        func1288.paramCounts = [0];
        func1288.paramNames = [];
        func1288.definitionLine = 159;
        func1288.definitionModule = "ast";
        var func1289 = function(argcv) {    // method grandparent, line 160
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("grandparent", 0, numArgs - 0);
          }
          setLineNumber(160);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1291 = selfRequest(this, "forebears", [0]);
          var call1290 = request(call1291, "parent", [0]);
          return call1290;
        };    // end of method grandparent
        this.methods["grandparent"] = func1289;
        func1289.methodName = "grandparent";
        func1289.paramCounts = [0];
        func1289.paramNames = [];
        func1289.definitionLine = 160;
        func1289.definitionModule = "ast";
        var func1292 = function(argcv) {    // method asString, line 162
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(163);    // compilenode vardec
          var var_a = this;
          setLineNumber(164);    // compilenode string
          var string1293 = new GraceString("ancestorChain ");
          var var_s = string1293;
          setLineNumber(165);    // compilenode block
          var block1295 = new GraceBlock(this, 165, 0);
          block1295.guard = jsTrue;
          block1295.real = function block1295() {
            setLineNumber(165);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_a === undefined) raiseUninitializedVariable("a");
            var call1297 = request(var_a, "isEmpty", [0]);
            var call1296 = request(call1297, "not", [0]);
            return call1296;
          };
          let applyMeth1295 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1295.methodName = "apply";
          applyMeth1295.paramCounts = [0];
          applyMeth1295.paramNames = [];
          applyMeth1295.definitionLine = 165;
          applyMeth1295.definitionModule = "ast";
          block1295.methods["apply"] = applyMeth1295;
          var block1298 = new GraceBlock(this, 165, 0);
          block1298.guard = jsTrue;
          block1298.real = function block1298() {
            setLineNumber(166);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            // call case 6: other requests
            if (var_a === undefined) raiseUninitializedVariable("a");
            var call1299 = request(var_a, "parent", [0]);
            var opresult1300 = request(var_s, "++(1)", [1], call1299);
            var string1301 = new GraceString("\u27a4");
            var opresult1302 = request(opresult1300, "++(1)", [1], string1301);
            var_s = opresult1302;
            setLineNumber(167);    // compilenode member
            // call case 6: other requests
            if (var_a === undefined) raiseUninitializedVariable("a");
            var call1303 = request(var_a, "forebears", [0]);
            var_a = call1303;
            return GraceDone;
          };
          let applyMeth1298 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1298.methodName = "apply";
          applyMeth1298.paramCounts = [0];
          applyMeth1298.paramNames = [];
          applyMeth1298.definitionLine = 165;
          applyMeth1298.definitionModule = "ast";
          block1298.methods["apply"] = applyMeth1298;
          // call case 2: outer request
          var call1294 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1295, block1298);
          setLineNumber(169);    // compilenode string
          var string1304 = new GraceString("\u25ab");
          var opresult1305 = request(var_s, "++(1)", [1], string1304);
          return opresult1305;
        };    // end of method asString
        this.methods["asString"] = func1292;
        func1292.methodName = "asString";
        func1292.paramCounts = [0];
        func1292.paramNames = [];
        func1292.definitionLine = 162;
        func1292.definitionModule = "ast";
        var func1306 = function(argcv, var_cond, var_action) {    // method suchThat(_)ifAbsent(_), line 171
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("suchThat(_)ifAbsent(_)", 0, numArgs - 2);
          }
          setLineNumber(172);    // compilenode vardec
          var var_a = this;
          setLineNumber(173);    // compilenode block
          var block1308 = new GraceBlock(this, 173, 0);
          block1308.guard = jsTrue;
          block1308.real = function block1308() {
            setLineNumber(173);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            if (var_a === undefined) raiseUninitializedVariable("a");
            var call1310 = request(var_a, "isEmpty", [0]);
            var call1309 = request(call1310, "not", [0]);
            return call1309;
          };
          let applyMeth1308 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1308.methodName = "apply";
          applyMeth1308.paramCounts = [0];
          applyMeth1308.paramNames = [];
          applyMeth1308.definitionLine = 173;
          applyMeth1308.definitionModule = "ast";
          block1308.methods["apply"] = applyMeth1308;
          var block1311 = new GraceBlock(this, 173, 0);
          block1311.guard = jsTrue;
          block1311.real = function block1311() {
            var if1312 = GraceDone;
            setLineNumber(174);    // compilenode member
            // call case 6: other requests
            if (var_a === undefined) raiseUninitializedVariable("a");
            var call1314 = request(var_a, "parent", [0]);
            // call case 6: other requests
            var call1313 = request(var_cond, "apply(1)", [1], call1314);
            if (Grace_isTrue(call1313)) {
              // call case 6: other requests
              if (var_a === undefined) raiseUninitializedVariable("a");
              var call1315 = request(var_a, "parent", [0]);
              throw new ReturnException(call1315, returnTarget);
            }
            setLineNumber(175);    // compilenode member
            // call case 6: other requests
            if (var_a === undefined) raiseUninitializedVariable("a");
            var call1316 = request(var_a, "forebears", [0]);
            var_a = call1316;
            return GraceDone;
          };
          let applyMeth1311 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1311.methodName = "apply";
          applyMeth1311.paramCounts = [0];
          applyMeth1311.paramNames = [];
          applyMeth1311.definitionLine = 173;
          applyMeth1311.definitionModule = "ast";
          block1311.methods["apply"] = applyMeth1311;
          // call case 2: outer request
          var call1307 = selfRequest(var_prelude, "while(1)do(1)", [1, 1], block1308, block1311);
          setLineNumber(177);    // compilenode member
          // call case 6: other requests
          var call1317 = request(var_action, "apply", [0]);
          return call1317;
        };    // end of method suchThat(_)ifAbsent(_)
        this.methods["suchThat(1)ifAbsent(1)"] = func1306;
        func1306.methodName = "suchThat(1)ifAbsent(1)";
        func1306.paramCounts = [1, 1];
        func1306.paramNames = ["cond", "action"];
        func1306.definitionLine = 171;
        func1306.definitionModule = "ast";
        var func1318 = function(argcv, var_n) {    // method extend(_), line 179
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("extend(_)", 0, numArgs - 1);
          }
          setLineNumber(179);    // compilenode call
          // call case 2: outer request
          var call1319 = selfRequest(this.outer_ast_156, "cons(1)onto(1)", [1, 1], var_n, this);
          return call1319;
        };    // end of method extend(_)
        this.methods["extend(1)"] = func1318;
        func1318.methodName = "extend(1)";
        func1318.paramCounts = [1];
        func1318.paramNames = ["n"];
        func1318.definitionLine = 179;
        func1318.definitionModule = "ast";
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 156;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj1285_init = function() {    // init of object on line 156
        };
        return obj1285_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj1285_init = obj1285_build.call(inheritingObject, null, var_p, var_ac, this, aliases, exclusions);
      return obj1285_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method cons(_)onto(_)$build(_,_,_)
    func1284.confidential = true;
    this.methods["cons(1)onto(1)$build(3)"] = func1284;
    func1284.methodName = "cons(1)onto(1)$build(3)";
    func1284.paramCounts = [1, 1];
    func1284.paramNames = ["p", "ac"];
    func1284.definitionLine = 156;
    func1284.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 149;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1271_init = function() {    // init of object on line 149
    };
    return obj1271_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1271 = emptyGraceObject("ancestorChain", "ast", 149);
  var obj1271_init = obj1271_build.call(obj1271, null, this, [], []);
  obj1271_init.call(obj1271);  // end of compileobject
  var var_ancestorChain = obj1271;
  var reader1320_ancestorChain = function() {  // reader method ancestorChain
      if (var_ancestorChain === undefined) raiseUninitializedVariable("ancestorChain");
      return var_ancestorChain;
  };
  reader1320_ancestorChain.isDef = true;
  this.methods["ancestorChain"] = reader1320_ancestorChain;
  setLineNumber(183);    // compilenode member
  // call case 2: outer request
  var call1321 = selfRequest(var_prelude, "emptySequence", [0]);
  var var_emptySeq = call1321;
  var reader1322_emptySeq = function() {  // reader method emptySeq
      if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
      return var_emptySeq;
  };
  reader1322_emptySeq.isDef = true;
  reader1322_emptySeq.confidential = true;
  this.methods["emptySeq"] = reader1322_emptySeq;
  setLineNumber(362);    // compilenode object
  var obj1323_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_362");
    this.outer_ast_362 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    setLineNumber(363);    // reuse call
    var initFun1324 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
    this.data.kind = undefined;
    var reader1325_kind = function() {  // reader method kind
        if (this.data.kind === undefined) raiseUninitializedVariable("kind");
        return this.data.kind;
    };
    reader1325_kind.isDef = true;
    this.methods["kind"] = reader1325_kind;
    this.data.nameString = undefined;
    var reader1326_nameString = function() {  // reader method nameString
        if (this.data.nameString === undefined) raiseUninitializedVariable("nameString");
        return this.data.nameString;
    };
    reader1326_nameString.isDef = true;
    this.methods["nameString"] = reader1326_nameString;
    var func1327 = function(argcv) {     // accessor method range
      const numArgs = arguments.length - 1;
      if (numArgs > 0) raiseTypeArgError("range", 0, numArgs - 0);
      if (var_emptyRange === undefined) raiseUninitializedVariable("emptyRange");
      return var_emptyRange;
    };    // end of method range
    this.methods["range"] = func1327;
    func1327.methodName = "range";
    func1327.paramCounts = [0];
    func1327.paramNames = [];
    func1327.definitionLine = 368;
    func1327.definitionModule = "ast";
    var func1328 = function(argcv) {     // accessor method isImplicit
      const numArgs = arguments.length - 1;
      if (numArgs > 0) raiseTypeArgError("isImplicit", 0, numArgs - 0);
      return GraceTrue;
    };    // end of method isImplicit
    this.methods["isImplicit"] = func1328;
    func1328.methodName = "isImplicit";
    func1328.paramCounts = [0];
    func1328.paramNames = [];
    func1328.definitionLine = 369;
    func1328.definitionModule = "ast";
    var func1329 = function(argcv, var_depth) {    // method toGrace(_), line 370
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
      }
      setLineNumber(370);    // compilenode string
      var string1330 = new GraceString("implicit");
      return string1330;
    };    // end of method toGrace(_)
    this.methods["toGrace(1)"] = func1329;
    func1329.methodName = "toGrace(1)";
    func1329.paramCounts = [1];
    func1329.paramNames = ["depth"];
    func1329.definitionLine = 370;
    func1329.definitionModule = "ast";
    var func1331 = function(argcv) {    // method asString, line 371
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 0) && (numArgs !== 0)) {
          raiseTypeArgError("asString", 0, numArgs - 0);
      }
      setLineNumber(371);    // compilenode string
      var string1332 = new GraceString("the implicit receiver");
      return string1332;
    };    // end of method asString
    this.methods["asString"] = func1331;
    func1331.methodName = "asString";
    func1331.paramCounts = [0];
    func1331.paramNames = [];
    func1331.definitionLine = 371;
    func1331.definitionModule = "ast";
    var func1333 = function(argcv, var_blk, var_ac) {     // accessor method map(_)ancestors(_)
      const numArgs = arguments.length - 1;
      if (numArgs > 2) raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
      return this;
    };    // end of method map(_)ancestors(_)
    this.methods["map(1)ancestors(1)"] = func1333;
    func1333.methodName = "map(1)ancestors(1)";
    func1333.paramCounts = [1, 1];
    func1333.paramNames = ["blk", "ac"];
    func1333.definitionLine = 372;
    func1333.definitionModule = "ast";
    var func1334 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 373
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
      }
      setLineNumber(374);    // compilenode call
      // call case 6: other requests
      var call1335 = request(var_visitor, "visitImplicit(1)up(1)", [1, 1], this, var_ac);
      return call1335;
    };    // end of method accept(_)from(_)
    this.methods["accept(1)from(1)"] = func1334;
    func1334.methodName = "accept(1)from(1)";
    func1334.paramCounts = [1, 1];
    func1334.paramNames = ["visitor", "ac"];
    func1334.definitionLine = 373;
    func1334.definitionModule = "ast";
    var func1336 = function(argcv, var_depth) {    // method pretty(_), line 376
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("pretty(_)", 0, numArgs - 1);
      }
      setLineNumber(376);    // compilenode string
      var string1337 = new GraceString("implicit");
      return string1337;
    };    // end of method pretty(_)
    this.methods["pretty(1)"] = func1336;
    func1336.methodName = "pretty(1)";
    func1336.paramCounts = [1];
    func1336.paramNames = ["depth"];
    func1336.definitionLine = 376;
    func1336.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 362;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1323_init = function() {    // init of object on line 362
      initFun1324.call(this);
      setLineNumber(364);    // compilenode num
      // call case 4: self request with 1 args and 0 typeArgs 
      var call1338 = selfRequest(this, "line:=(1)", [1], new GraceNum(0));
      setLineNumber(365);    // compilenode num
      // call case 4: self request with 1 args and 0 typeArgs 
      var call1339 = selfRequest(this, "linePos:=(1)", [1], new GraceNum(0));
      setLineNumber(366);    // compilenode string
      var string1340 = new GraceString("implicit");
      this.data.kind = string1340;
      setLineNumber(367);    // compilenode string
      var string1341 = new GraceString("implicit");
      this.data.nameString = string1341;
    };
    return obj1323_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1323 = emptyGraceObject("implicit", "ast", 362);
  var obj1323_init = obj1323_build.call(obj1323, null, this, [], []);
  obj1323_init.call(obj1323);  // end of compileobject
  var var_implicit = obj1323;
  var reader1342_implicit = function() {  // reader method implicit
      if (var_implicit === undefined) raiseUninitializedVariable("implicit");
      return var_implicit;
  };
  reader1342_implicit.isDef = true;
  this.methods["implicit"] = reader1342_implicit;
  setLineNumber(379);    // compilenode object
  var obj1343_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_379");
    this.outer_ast_379 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    setLineNumber(380);    // reuse call
    var initFun1344 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
    this.data.kind = undefined;
    var reader1345_kind = function() {  // reader method kind
        if (this.data.kind === undefined) raiseUninitializedVariable("kind");
        return this.data.kind;
    };
    reader1345_kind.isDef = true;
    this.methods["kind"] = reader1345_kind;
    var func1346 = function(argcv, var_depth) {    // method toGrace(_), line 382
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
      }
      setLineNumber(383);    // compilenode string
      var string1347 = new GraceString("// null");
      return string1347;
    };    // end of method toGrace(_)
    this.methods["toGrace(1)"] = func1346;
    func1346.methodName = "toGrace(1)";
    func1346.paramCounts = [1];
    func1346.paramNames = ["depth"];
    func1346.definitionLine = 382;
    func1346.definitionModule = "ast";
    var func1348 = function(argcv) {     // accessor method range
      const numArgs = arguments.length - 1;
      if (numArgs > 0) raiseTypeArgError("range", 0, numArgs - 0);
      if (var_emptyRange === undefined) raiseUninitializedVariable("emptyRange");
      return var_emptyRange;
    };    // end of method range
    this.methods["range"] = func1348;
    func1348.methodName = "range";
    func1348.paramCounts = [0];
    func1348.paramNames = [];
    func1348.definitionLine = 385;
    func1348.definitionModule = "ast";
    var func1349 = function(argcv) {    // method asString, line 386
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 0) && (numArgs !== 0)) {
          raiseTypeArgError("asString", 0, numArgs - 0);
      }
      setLineNumber(386);    // compilenode string
      var string1350 = new GraceString("the nullNode");
      return string1350;
    };    // end of method asString
    this.methods["asString"] = func1349;
    func1349.methodName = "asString";
    func1349.paramCounts = [0];
    func1349.paramNames = [];
    func1349.definitionLine = 386;
    func1349.definitionModule = "ast";
    var func1351 = function(argcv) {     // accessor method isNull
      const numArgs = arguments.length - 1;
      if (numArgs > 0) raiseTypeArgError("isNull", 0, numArgs - 0);
      return GraceTrue;
    };    // end of method isNull
    this.methods["isNull"] = func1351;
    func1351.methodName = "isNull";
    func1351.paramCounts = [0];
    func1351.paramNames = [];
    func1351.definitionLine = 387;
    func1351.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 379;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1343_init = function() {    // init of object on line 379
      initFun1344.call(this);
      setLineNumber(381);    // compilenode string
      var string1352 = new GraceString("null");
      this.data.kind = string1352;
    };
    return obj1343_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1343 = emptyGraceObject("nullNode", "ast", 379);
  var obj1343_init = obj1343_build.call(obj1343, null, this, [], []);
  obj1343_init.call(obj1343);  // end of compileobject
  var var_nullNode = obj1343;
  var reader1353_nullNode = function() {  // reader method nullNode
      if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
      return var_nullNode;
  };
  reader1353_nullNode.isDef = true;
  this.methods["nullNode"] = reader1353_nullNode;
  setLineNumber(413);    // compilenode object
  var obj1354_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_413");
    this.outer_ast_413 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func1355 = function(argcv, var_cond, var_thenblock__39__, var_elseblock__39__) {    // method new(_,_,_), line 414
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("ifNode.new(_,_,_)", "ast", 414);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_cond, var_thenblock__39__, var_elseblock__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func1355;
    func1355.methodName = "new(3)";
    func1355.paramCounts = [3];
    func1355.paramNames = ["cond", "thenblock'", "elseblock'"];
    func1355.definitionLine = 414;
    func1355.definitionModule = "ast";
    var func1356 = function(argcv, var_cond, var_thenblock__39__, var_elseblock__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 414
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj1357_build = function(ignore, var_cond, var_thenblock__39__, var_elseblock__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_414");
        this.outer_ast_414 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(415);    // reuse call
        var initFun1358 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader1359_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader1359_kind.isDef = true;
        this.methods["kind"] = reader1359_kind;
        this.data.value = undefined;
        var reader1360_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader1360_value.isVar = true;
        this.methods["value"] = reader1360_value;
        var writer1361_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer1361_value;
        this.data.thenblock = undefined;
        var reader1362_thenblock = function() {  // reader method thenblock
            if (this.data.thenblock === undefined) raiseUninitializedVariable("thenblock");
            return this.data.thenblock;
        };
        reader1362_thenblock.isVar = true;
        this.methods["thenblock"] = reader1362_thenblock;
        var writer1363_thenblock = function(argcv, n) {   // writer method thenblock:=(_)
          this.data.thenblock = n;
          return GraceDone;
        };
        this.methods["thenblock:=(1)"] = writer1363_thenblock;
        this.data.elseblock = undefined;
        var reader1364_elseblock = function() {  // reader method elseblock
            if (this.data.elseblock === undefined) raiseUninitializedVariable("elseblock");
            return this.data.elseblock;
        };
        reader1364_elseblock.isVar = true;
        this.methods["elseblock"] = reader1364_elseblock;
        var writer1365_elseblock = function(argcv, n) {   // writer method elseblock:=(_)
          this.data.elseblock = n;
          return GraceDone;
        };
        this.methods["elseblock:=(1)"] = writer1365_elseblock;
        this.data.handledIdentifiers = undefined;
        var reader1366_handledIdentifiers = function() {  // reader method handledIdentifiers
            if (this.data.handledIdentifiers === undefined) raiseUninitializedVariable("handledIdentifiers");
            return this.data.handledIdentifiers;
        };
        reader1366_handledIdentifiers.isVar = true;
        this.methods["handledIdentifiers"] = reader1366_handledIdentifiers;
        var writer1367_handledIdentifiers = function(argcv, n) {   // writer method handledIdentifiers:=(_)
          this.data.handledIdentifiers = n;
          return GraceDone;
        };
        this.methods["handledIdentifiers:=(1)"] = writer1367_handledIdentifiers;
        var func1368 = function(argcv) {     // accessor method isSimple
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isSimple", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isSimple
        this.methods["isSimple"] = func1368;
        func1368.methodName = "isSimple";
        func1368.paramCounts = [0];
        func1368.paramNames = [];
        func1368.definitionLine = 421;
        func1368.definitionModule = "ast";
        var func1369 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 422
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if1370 = GraceDone;
          setLineNumber(423);    // compilenode call
          // call case 6: other requests
          var call1371 = request(var_visitor, "visitIf(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call1371)) {
            setLineNumber(424);    // compilenode call
            // call case 6: other requests
            var call1372 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call1372;
            setLineNumber(425);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1374 = selfRequest(this, "value", [0]);
            var call1373 = request(call1374, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(426);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1376 = selfRequest(this, "thenblock", [0]);
            var call1375 = request(call1376, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(427);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1378 = selfRequest(this, "elseblock", [0]);
            var call1377 = request(call1378, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if1370 = call1377;
          }
          return if1370;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func1369;
        func1369.methodName = "accept(1)from(1)";
        func1369.paramCounts = [1, 1];
        func1369.paramNames = ["visitor", "ac"];
        func1369.definitionLine = 422;
        func1369.definitionModule = "ast";
        var func1379 = function(argcv) {    // method end, line 430
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(430);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1381 = selfRequest(this, "elseblock", [0]);
          var call1380 = request(call1381, "end", [0]);
          return call1380;
        };    // end of method end
        this.methods["end"] = func1379;
        func1379.methodName = "end";
        func1379.paramCounts = [0];
        func1379.paramNames = [];
        func1379.definitionLine = 430;
        func1379.definitionModule = "ast";
        var func1382 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 431
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(432);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1383 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call1383;
          setLineNumber(433);    // compilenode call
          // call case 6: other requests
          var call1384 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call1384;
          setLineNumber(434);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1387 = selfRequest(this, "value", [0]);
          var call1386 = request(call1387, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call1385 = request(var_n, "value:=(1)", [1], call1386);
          setLineNumber(435);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1390 = selfRequest(this, "thenblock", [0]);
          var call1389 = request(call1390, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call1388 = request(var_n, "thenblock:=(1)", [1], call1389);
          setLineNumber(436);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1393 = selfRequest(this, "elseblock", [0]);
          var call1392 = request(call1393, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call1391 = request(var_n, "elseblock:=(1)", [1], call1392);
          setLineNumber(437);    // compilenode call
          // call case 6: other requests
          var call1394 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call1394;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func1382;
        func1382.methodName = "map(1)ancestors(1)";
        func1382.paramCounts = [1, 1];
        func1382.paramNames = ["blk", "ac"];
        func1382.definitionLine = 431;
        func1382.definitionModule = "ast";
        var func1395 = function(argcv, var_depth) {    // method pretty(_), line 439
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(440);    // compilenode string
          var string1396 = new GraceString("  ");
          var sum1397 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod1398 = request(string1396, "*(1)", [1], sum1397);
          var var_spc = prod1398;
          setLineNumber(441);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1399 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string1400 = new GraceString("\n");
          var opresult1401 = request(call1399, "++(1)", [1], string1400);
          var var_s = opresult1401;
          setLineNumber(442);    // compilenode op
          var opresult1402 = request(var_s, "++(1)", [1], var_spc);
          var sum1404 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1405 = selfRequest(this, "value", [0]);
          var call1403 = request(call1405, "pretty(1)", [1], sum1404);
          var opresult1406 = request(opresult1402, "++(1)", [1], call1403);
          var_s = opresult1406;
          setLineNumber(443);    // compilenode string
          var string1407 = new GraceString("\n");
          var opresult1408 = request(var_s, "++(1)", [1], string1407);
          var_s = opresult1408;
          var if1409 = GraceDone;
          setLineNumber(444);    // compilenode member
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call1410 = request(var_util, "target", [0]);
          var string1411 = new GraceString("symbols");
          var opresult1412 = request(call1410, "==(1)", [1], string1411);
          if (Grace_isTrue(opresult1412)) {
            setLineNumber(445);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1413 = request(var_s, "++(1)", [1], var_spc);
            var string1414 = new GraceString("Then: ");
            var sum1416 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1417 = selfRequest(this, "thenblock", [0]);
            var call1415 = request(call1417, "pretty(1)", [1], sum1416);
            var opresult1418 = request(string1414, "++(1)", [1], call1415);
            var string1419 = new GraceString("\n");
            var opresult1420 = request(opresult1418, "++(1)", [1], string1419);
            var opresult1421 = request(opresult1413, "++(1)", [1], opresult1420);
            var_s = opresult1421;
            setLineNumber(446);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1422 = request(var_s, "++(1)", [1], var_spc);
            var string1423 = new GraceString("Else: ");
            var sum1425 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1426 = selfRequest(this, "elseblock", [0]);
            var call1424 = request(call1426, "pretty(1)", [1], sum1425);
            var opresult1427 = request(string1423, "++(1)", [1], call1424);
            var string1428 = new GraceString("");
            var opresult1429 = request(opresult1427, "++(1)", [1], string1428);
            var opresult1430 = request(opresult1422, "++(1)", [1], opresult1429);
            var_s = opresult1430;
            if1409 = GraceDone;
          } else {
            setLineNumber(448);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1431 = request(var_s, "++(1)", [1], var_spc);
            var string1432 = new GraceString("Then:");
            var opresult1433 = request(opresult1431, "++(1)", [1], string1432);
            var_s = opresult1433;
            setLineNumber(449);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1436 = selfRequest(this, "thenblock", [0]);
            var call1435 = request(call1436, "body", [0]);
            var block1437 = new GraceBlock(this, 449, 1);
            block1437.guard = jsTrue;
            block1437.real = function block1437(var_ix) {
              setLineNumber(450);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string1438 = new GraceString("\n  ");
              var opresult1439 = request(var_s, "++(1)", [1], string1438);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult1440 = request(opresult1439, "++(1)", [1], var_spc);
              var sum1442 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call1441 = request(var_ix, "pretty(1)", [1], sum1442);
              var opresult1443 = request(opresult1440, "++(1)", [1], call1441);
              var_s = opresult1443;
              return GraceDone;
            };
            let applyMeth1437 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1437.methodName = "apply(1)";
            applyMeth1437.paramCounts = [1];
            applyMeth1437.paramNames = ["ix"];
            applyMeth1437.definitionLine = 449;
            applyMeth1437.definitionModule = "ast";
            block1437.methods["apply(1)"] = applyMeth1437;
            let matchesMeth1437 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1437.methodName = "matches(1)";
            matchesMeth1437.paramCounts = [1];
            matchesMeth1437.paramNames = ["ix"];
            matchesMeth1437.definitionLine = 449;
            matchesMeth1437.definitionModule = "ast";
            block1437.methods["matches(1)"] = matchesMeth1437;
            // call case 2: outer request
            var call1434 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1435, block1437);
            setLineNumber(452);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1444 = new GraceString("\n");
            var opresult1445 = request(var_s, "++(1)", [1], string1444);
            var_s = opresult1445;
            setLineNumber(453);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1446 = request(var_s, "++(1)", [1], var_spc);
            var string1447 = new GraceString("Else:");
            var opresult1448 = request(opresult1446, "++(1)", [1], string1447);
            var_s = opresult1448;
            setLineNumber(454);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1451 = selfRequest(this, "elseblock", [0]);
            var call1450 = request(call1451, "body", [0]);
            var block1452 = new GraceBlock(this, 454, 1);
            block1452.guard = jsTrue;
            block1452.real = function block1452(var_ix) {
              setLineNumber(455);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string1453 = new GraceString("\n  ");
              var opresult1454 = request(var_s, "++(1)", [1], string1453);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult1455 = request(opresult1454, "++(1)", [1], var_spc);
              var sum1457 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call1456 = request(var_ix, "pretty(1)", [1], sum1457);
              var opresult1458 = request(opresult1455, "++(1)", [1], call1456);
              var_s = opresult1458;
              return GraceDone;
            };
            let applyMeth1452 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1452.methodName = "apply(1)";
            applyMeth1452.paramCounts = [1];
            applyMeth1452.paramNames = ["ix"];
            applyMeth1452.definitionLine = 454;
            applyMeth1452.definitionModule = "ast";
            block1452.methods["apply(1)"] = applyMeth1452;
            let matchesMeth1452 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1452.methodName = "matches(1)";
            matchesMeth1452.paramCounts = [1];
            matchesMeth1452.paramNames = ["ix"];
            matchesMeth1452.definitionLine = 454;
            matchesMeth1452.definitionModule = "ast";
            block1452.methods["matches(1)"] = matchesMeth1452;
            // call case 2: outer request
            var call1449 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1450, block1452);
            if1409 = call1449;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func1395;
        func1395.methodName = "pretty(1)";
        func1395.paramCounts = [1];
        func1395.paramNames = ["depth"];
        func1395.definitionLine = 439;
        func1395.definitionModule = "ast";
        var func1459 = function(argcv, var_depth) {    // method toGrace(_), line 460
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(461);    // compilenode string
          var string1460 = new GraceString("    ");
          var prod1461 = request(string1460, "*(1)", [1], var_depth);
          var var_spc = prod1461;
          setLineNumber(462);    // compilenode string
          var string1462 = new GraceString("if (");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1464 = selfRequest(this, "value", [0]);
          var call1463 = request(call1464, "toGrace(1)", [1], new GraceNum(0));
          var opresult1465 = request(string1462, "++(1)", [1], call1463);
          var string1466 = new GraceString(") then {");
          var opresult1467 = request(opresult1465, "++(1)", [1], string1466);
          var var_s = opresult1467;
          setLineNumber(463);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1470 = selfRequest(this, "thenblock", [0]);
          var call1469 = request(call1470, "body", [0]);
          var block1471 = new GraceBlock(this, 463, 1);
          block1471.guard = jsTrue;
          block1471.real = function block1471(var_ix) {
            setLineNumber(464);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1472 = new GraceString("\n");
            var opresult1473 = request(var_s, "++(1)", [1], string1472);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1474 = request(opresult1473, "++(1)", [1], var_spc);
            var string1475 = new GraceString("    ");
            var opresult1476 = request(opresult1474, "++(1)", [1], string1475);
            var sum1478 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call1477 = request(var_ix, "toGrace(1)", [1], sum1478);
            var opresult1479 = request(opresult1476, "++(1)", [1], call1477);
            var_s = opresult1479;
            return GraceDone;
          };
          let applyMeth1471 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1471.methodName = "apply(1)";
          applyMeth1471.paramCounts = [1];
          applyMeth1471.paramNames = ["ix"];
          applyMeth1471.definitionLine = 463;
          applyMeth1471.definitionModule = "ast";
          block1471.methods["apply(1)"] = applyMeth1471;
          let matchesMeth1471 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1471.methodName = "matches(1)";
          matchesMeth1471.paramCounts = [1];
          matchesMeth1471.paramNames = ["ix"];
          matchesMeth1471.definitionLine = 463;
          matchesMeth1471.definitionModule = "ast";
          block1471.methods["matches(1)"] = matchesMeth1471;
          // call case 2: outer request
          var call1468 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1469, block1471);
          var if1480 = GraceDone;
          setLineNumber(466);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1482 = selfRequest(this, "elseblock", [0]);
          var call1481 = request(call1482, "isntEmpty", [0]);
          if (Grace_isTrue(call1481)) {
            setLineNumber(467);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1483 = new GraceString("\n");
            var opresult1484 = request(var_s, "++(1)", [1], string1483);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1485 = request(opresult1484, "++(1)", [1], var_spc);
            var string1486 = new GraceString("} else {");
            var opresult1487 = request(opresult1485, "++(1)", [1], string1486);
            var_s = opresult1487;
            setLineNumber(468);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1490 = selfRequest(this, "elseblock", [0]);
            var call1489 = request(call1490, "body", [0]);
            var block1491 = new GraceBlock(this, 468, 1);
            block1491.guard = jsTrue;
            block1491.real = function block1491(var_ix) {
              setLineNumber(469);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string1492 = new GraceString("\n");
              var opresult1493 = request(var_s, "++(1)", [1], string1492);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult1494 = request(opresult1493, "++(1)", [1], var_spc);
              var string1495 = new GraceString("    ");
              var opresult1496 = request(opresult1494, "++(1)", [1], string1495);
              var sum1498 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              var call1497 = request(var_ix, "toGrace(1)", [1], sum1498);
              var opresult1499 = request(opresult1496, "++(1)", [1], call1497);
              var_s = opresult1499;
              return GraceDone;
            };
            let applyMeth1491 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1491.methodName = "apply(1)";
            applyMeth1491.paramCounts = [1];
            applyMeth1491.paramNames = ["ix"];
            applyMeth1491.definitionLine = 468;
            applyMeth1491.definitionModule = "ast";
            block1491.methods["apply(1)"] = applyMeth1491;
            let matchesMeth1491 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1491.methodName = "matches(1)";
            matchesMeth1491.paramCounts = [1];
            matchesMeth1491.paramNames = ["ix"];
            matchesMeth1491.definitionLine = 468;
            matchesMeth1491.definitionModule = "ast";
            block1491.methods["matches(1)"] = matchesMeth1491;
            // call case 2: outer request
            var call1488 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1489, block1491);
            if1480 = call1488;
          }
          setLineNumber(472);    // compilenode string
          var string1500 = new GraceString("\n");
          var opresult1501 = request(var_s, "++(1)", [1], string1500);
          var opresult1502 = request(opresult1501, "++(1)", [1], var_spc);
          var string1503 = new GraceString("}");
          var opresult1504 = request(opresult1502, "++(1)", [1], string1503);
          var_s = opresult1504;
          return var_s;
        };    // end of method toGrace(_)
        func1459.paramTypes = [];
        func1459.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func1459;
        func1459.methodName = "toGrace(1)";
        func1459.paramCounts = [1];
        func1459.paramNames = ["depth"];
        func1459.definitionLine = 460;
        func1459.definitionModule = "ast";
        var func1505 = function(argcv) {    // method shallowCopy, line 475
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(476);    // compilenode call
          // call case 6: other requests
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          // call case 6: other requests
          if (var_ifNode === undefined) raiseUninitializedVariable("ifNode");
          var call1507 = request(var_ifNode, "new(3)", [3], var_nullNode, var_nullNode, var_nullNode);
          var call1506 = request(call1507, "shallowCopyFieldsFrom(1)", [1], this);
          return call1506;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func1505;
        func1505.methodName = "shallowCopy";
        func1505.paramCounts = [0];
        func1505.paramNames = [];
        func1505.definitionLine = 475;
        func1505.definitionModule = "ast";
        var func1508 = function(argcv, var_other) {    // method postCopy(_), line 478
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(479);    // compilenode member
          // call case 6: other requests
          var call1510 = request(var_other, "handledIdentifiers", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1509 = selfRequest(this, "handledIdentifiers:=(1)", [1], call1510);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func1508;
        func1508.methodName = "postCopy(1)";
        func1508.paramCounts = [1];
        func1508.paramNames = ["other"];
        func1508.definitionLine = 478;
        func1508.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 414;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj1357_init = function() {    // init of object on line 414
          initFun1358.call(this);
          setLineNumber(416);    // compilenode string
          var string1511 = new GraceString("if");
          this.data.kind = string1511;
          this.data.value = var_cond;
          this.data.thenblock = var_thenblock__39__;
          this.data.elseblock = var_elseblock__39__;
          this.data.handledIdentifiers = GraceFalse;
        };
        return obj1357_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj1357_init = obj1357_build.call(inheritingObject, null, var_cond, var_thenblock__39__, var_elseblock__39__, this, aliases, exclusions);
      return obj1357_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func1356;
    func1356.methodName = "new(3)$build(3)";
    func1356.paramCounts = [3];
    func1356.paramNames = ["cond", "thenblock'", "elseblock'"];
    func1356.definitionLine = 414;
    func1356.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 413;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1354_init = function() {    // init of object on line 413
    };
    return obj1354_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1354 = emptyGraceObject("ifNode", "ast", 413);
  var obj1354_init = obj1354_build.call(obj1354, null, this, [], []);
  obj1354_init.call(obj1354);  // end of compileobject
  var var_ifNode = obj1354;
  var reader1512_ifNode = function() {  // reader method ifNode
      if (var_ifNode === undefined) raiseUninitializedVariable("ifNode");
      return var_ifNode;
  };
  reader1512_ifNode.isDef = true;
  this.methods["ifNode"] = reader1512_ifNode;
  setLineNumber(484);    // compilenode object
  var obj1513_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_484");
    this.outer_ast_484 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func1514 = function(argcv, var_params__39__, var_body__39__) {    // method new(_,_), line 485
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("blockNode.new(_,_)", "ast", 485);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_params__39__, var_body__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func1514;
    func1514.methodName = "new(2)";
    func1514.paramCounts = [2];
    func1514.paramNames = ["params'", "body'"];
    func1514.definitionLine = 485;
    func1514.definitionModule = "ast";
    var func1515 = function(argcv, var_params__39__, var_body__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 485
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj1516_build = function(ignore, var_params__39__, var_body__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_485");
        this.outer_ast_485 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(486);    // reuse call
        var initFun1517 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader1518_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader1518_kind.isDef = true;
        this.methods["kind"] = reader1518_kind;
        this.data.value = undefined;
        var reader1519_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader1519_value.isDef = true;
        this.methods["value"] = reader1519_value;
        this.data.params = undefined;
        var reader1520_params = function() {  // reader method params
            if (this.data.params === undefined) raiseUninitializedVariable("params");
            return this.data.params;
        };
        reader1520_params.isVar = true;
        this.methods["params"] = reader1520_params;
        var writer1521_params = function(argcv, n) {   // writer method params:=(_)
          this.data.params = n;
          return GraceDone;
        };
        this.methods["params:=(1)"] = writer1521_params;
        this.data.body = undefined;
        var reader1522_body = function() {  // reader method body
            if (this.data.body === undefined) raiseUninitializedVariable("body");
            return this.data.body;
        };
        reader1522_body.isVar = true;
        this.methods["body"] = reader1522_body;
        var writer1523_body = function(argcv, n) {   // writer method body:=(_)
          this.data.body = n;
          return GraceDone;
        };
        this.methods["body:=(1)"] = writer1523_body;
        this.data.selfclosure = undefined;
        var reader1524_selfclosure = function() {  // reader method selfclosure
            if (this.data.selfclosure === undefined) raiseUninitializedVariable("selfclosure");
            return this.data.selfclosure;
        };
        reader1524_selfclosure.isDef = true;
        this.methods["selfclosure"] = reader1524_selfclosure;
        this.data.matchingPattern = undefined;
        var reader1525_matchingPattern = function() {  // reader method matchingPattern
            if (this.data.matchingPattern === undefined) raiseUninitializedVariable("matchingPattern");
            return this.data.matchingPattern;
        };
        reader1525_matchingPattern.isVar = true;
        this.methods["matchingPattern"] = reader1525_matchingPattern;
        var writer1526_matchingPattern = function(argcv, n) {   // writer method matchingPattern:=(_)
          this.data.matchingPattern = n;
          return GraceDone;
        };
        this.methods["matchingPattern:=(1)"] = writer1526_matchingPattern;
        this.data.extraRuntimeData = undefined;
        var reader1527_extraRuntimeData = function() {  // reader method extraRuntimeData
            if (this.data.extraRuntimeData === undefined) raiseUninitializedVariable("extraRuntimeData");
            return this.data.extraRuntimeData;
        };
        reader1527_extraRuntimeData.isVar = true;
        this.methods["extraRuntimeData"] = reader1527_extraRuntimeData;
        var writer1528_extraRuntimeData = function(argcv, n) {   // writer method extraRuntimeData:=(_)
          this.data.extraRuntimeData = n;
          return GraceDone;
        };
        this.methods["extraRuntimeData:=(1)"] = writer1528_extraRuntimeData;
        var func1529 = function(argcv) {     // accessor method isBlock
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isBlock", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isBlock
        this.methods["isBlock"] = func1529;
        func1529.methodName = "isBlock";
        func1529.paramCounts = [0];
        func1529.paramNames = [];
        func1529.definitionLine = 497;
        func1529.definitionModule = "ast";
        var func1530 = function(argcv) {     // accessor method isDelimited
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isDelimited", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isDelimited
        this.methods["isDelimited"] = func1530;
        func1530.methodName = "isDelimited";
        func1530.paramCounts = [0];
        func1530.paramNames = [];
        func1530.definitionLine = 498;
        func1530.definitionModule = "ast";
        var func1531 = function(argcv) {    // method isEmpty, line 499
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isEmpty", 0, numArgs - 0);
          }
          setLineNumber(499);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1533 = selfRequest(this, "body", [0]);
          var call1532 = request(call1533, "size", [0]);
          var opresult1534 = request(call1532, "==(1)", [1], new GraceNum(0));
          return opresult1534;
        };    // end of method isEmpty
        this.methods["isEmpty"] = func1531;
        func1531.methodName = "isEmpty";
        func1531.paramCounts = [0];
        func1531.paramNames = [];
        func1531.definitionLine = 499;
        func1531.definitionModule = "ast";
        var func1535 = function(argcv) {    // method isntEmpty, line 500
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isntEmpty", 0, numArgs - 0);
          }
          setLineNumber(500);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1537 = selfRequest(this, "body", [0]);
          var call1536 = request(call1537, "size", [0]);
          var opresult1538 = request(call1536, ">(1)", [1], new GraceNum(0));
          return opresult1538;
        };    // end of method isntEmpty
        this.methods["isntEmpty"] = func1535;
        func1535.methodName = "isntEmpty";
        func1535.paramCounts = [0];
        func1535.paramNames = [];
        func1535.definitionLine = 500;
        func1535.definitionModule = "ast";
        var func1539 = function(argcv, var_st) {    // method scope:=(_), line 501
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("scope:=(_)", 0, numArgs - 1);
          }
          setLineNumber(504);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1540 = selfRequest(this, "symbolTable:=(1)", [1], var_st);
          setLineNumber(505);    // compilenode call
          // call case 6: other requests
          var call1541 = request(var_st, "node:=(1)", [1], this);
          return call1541;
        };    // end of method scope:=(_)
        this.methods["scope:=(1)"] = func1539;
        func1539.methodName = "scope:=(1)";
        func1539.paramCounts = [1];
        func1539.paramNames = ["st"];
        func1539.definitionLine = 501;
        func1539.definitionModule = "ast";
        var func1542 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 507
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(507);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call1543 = request(var_k, "parameter", [0]);
          return call1543;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func1542;
        func1542.methodName = "declarationKindWithAncestors(1)";
        func1542.paramCounts = [1];
        func1542.paramNames = ["ac"];
        func1542.definitionLine = 507;
        func1542.definitionModule = "ast";
        var func1544 = function(argcv) {    // method isMatchingBlock, line 508
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isMatchingBlock", 0, numArgs - 0);
          }
          setLineNumber(508);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1546 = selfRequest(this, "params", [0]);
          var call1545 = request(call1546, "size", [0]);
          var opresult1547 = request(call1545, "==(1)", [1], new GraceNum(1));
          return opresult1547;
        };    // end of method isMatchingBlock
        this.methods["isMatchingBlock"] = func1544;
        func1544.methodName = "isMatchingBlock";
        func1544.paramCounts = [0];
        func1544.paramNames = [];
        func1544.definitionLine = 508;
        func1544.definitionModule = "ast";
        var func1548 = function(argcv) {    // method returnsObject, line 509
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnsObject", 0, numArgs - 0);
          }
          setLineNumber(510);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1550 = selfRequest(this, "body", [0]);
          var call1549 = request(call1550, "size", [0]);
          var opresult1551 = request(call1549, ">(1)", [1], new GraceNum(0));
          var block1552 = new GraceBlock(this, 510, 0);
          block1552.guard = jsTrue;
          block1552.real = function block1552() {
            setLineNumber(510);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1555 = selfRequest(this, "body", [0]);
            var call1554 = request(call1555, "last", [0]);
            var call1553 = request(call1554, "returnsObject", [0]);
            return call1553;
          };
          let applyMeth1552 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1552.methodName = "apply";
          applyMeth1552.paramCounts = [0];
          applyMeth1552.paramNames = [];
          applyMeth1552.definitionLine = 510;
          applyMeth1552.definitionModule = "ast";
          block1552.methods["apply"] = applyMeth1552;
          var opresult1556 = request(opresult1551, "&&(1)", [1], block1552);
          return opresult1556;
        };    // end of method returnsObject
        this.methods["returnsObject"] = func1548;
        func1548.methodName = "returnsObject";
        func1548.paramCounts = [0];
        func1548.paramNames = [];
        func1548.definitionLine = 509;
        func1548.definitionModule = "ast";
        var func1557 = function(argcv) {    // method returnedObjectScope, line 512
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnedObjectScope", 0, numArgs - 0);
          }
          setLineNumber(514);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1560 = selfRequest(this, "body", [0]);
          var call1559 = request(call1560, "last", [0]);
          var call1558 = request(call1559, "returnedObjectScope", [0]);
          return call1558;
        };    // end of method returnedObjectScope
        this.methods["returnedObjectScope"] = func1557;
        func1557.methodName = "returnedObjectScope";
        func1557.paramCounts = [0];
        func1557.paramNames = [];
        func1557.definitionLine = 512;
        func1557.definitionModule = "ast";
        var func1561 = function(argcv, var_b) {    // method parametersDo(_), line 516
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("parametersDo(_)", 0, numArgs - 1);
          }
          setLineNumber(517);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1563 = selfRequest(this, "params", [0]);
          var call1562 = request(call1563, "do(1)", [1], var_b);
          return call1562;
        };    // end of method parametersDo(_)
        this.methods["parametersDo(1)"] = func1561;
        func1561.methodName = "parametersDo(1)";
        func1561.paramCounts = [1];
        func1561.paramNames = ["b"];
        func1561.definitionLine = 516;
        func1561.definitionModule = "ast";
        var func1564 = function(argcv) {    // method parameterCounts, line 519
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("parameterCounts", 0, numArgs - 0);
          }
          setLineNumber(519);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1567 = selfRequest(this, "params", [0]);
          var call1566 = request(call1567, "size", [0]);
          var array1565 = new GraceSequence([call1566]);
          return array1565;
        };    // end of method parameterCounts
        this.methods["parameterCounts"] = func1564;
        func1564.methodName = "parameterCounts";
        func1564.paramCounts = [0];
        func1564.paramNames = [];
        func1564.definitionLine = 519;
        func1564.definitionModule = "ast";
        var func1568 = function(argcv) {    // method parameterNames, line 520
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("parameterNames", 0, numArgs - 0);
          }
          setLineNumber(521);    // compilenode block
          var block1571 = new GraceBlock(this, 521, 1);
          block1571.guard = jsTrue;
          block1571.real = function block1571(var_each) {
            setLineNumber(521);    // compilenode member
            // call case 6: other requests
            var call1572 = request(var_each, "nameString", [0]);
            return call1572;
          };
          let applyMeth1571 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1571.methodName = "apply(1)";
          applyMeth1571.paramCounts = [1];
          applyMeth1571.paramNames = ["each"];
          applyMeth1571.definitionLine = 521;
          applyMeth1571.definitionModule = "ast";
          block1571.methods["apply(1)"] = applyMeth1571;
          let matchesMeth1571 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1571.methodName = "matches(1)";
          matchesMeth1571.paramCounts = [1];
          matchesMeth1571.paramNames = ["each"];
          matchesMeth1571.definitionLine = 521;
          matchesMeth1571.definitionModule = "ast";
          block1571.methods["matches(1)"] = matchesMeth1571;
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1573 = selfRequest(this, "params", [0]);
          var call1570 = request(call1573, "map(1)", [1], block1571);
          // call case 6: other requests
          // call case 2: outer request
          var call1574 = selfRequest(var_prelude, "list", [0]);
          var call1569 = request(call1574, "withAll(1)", [1], call1570);
          return call1569;
        };    // end of method parameterNames
        this.methods["parameterNames"] = func1568;
        func1568.methodName = "parameterNames";
        func1568.paramCounts = [0];
        func1568.paramNames = [];
        func1568.definitionLine = 520;
        func1568.definitionModule = "ast";
        var func1575 = function(argcv) {    // method typeParameterNames, line 523
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("typeParameterNames", 0, numArgs - 0);
          }
          setLineNumber(523);    // compilenode member
          // call case 6: other requests
          // call case 2: outer request
          var call1577 = selfRequest(var_prelude, "list", [0]);
          var call1576 = request(call1577, "empty", [0]);
          return call1576;
        };    // end of method typeParameterNames
        this.methods["typeParameterNames"] = func1575;
        func1575.methodName = "typeParameterNames";
        func1575.paramCounts = [0];
        func1575.paramNames = [];
        func1575.definitionLine = 523;
        func1575.definitionModule = "ast";
        var func1578 = function(argcv) {     // accessor method hasTypeParams
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("hasTypeParams", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method hasTypeParams
        this.methods["hasTypeParams"] = func1578;
        func1578.methodName = "hasTypeParams";
        func1578.paramCounts = [0];
        func1578.paramNames = [];
        func1578.definitionLine = 524;
        func1578.definitionModule = "ast";
        var func1579 = function(argcv) {    // method aParametersHasATypeAnnotation, line 525
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("aParametersHasATypeAnnotation", 0, numArgs - 0);
          }
          setLineNumber(526);    // compilenode block
          var block1581 = new GraceBlock(this, 526, 1);
          block1581.guard = jsTrue;
          block1581.real = function block1581(var_p) {
            var if1582 = GraceDone;
            setLineNumber(526);    // compilenode member
            // call case 6: other requests
            var call1583 = request(var_p, "dtype", [0]);
            var opresult1584 = request(GraceFalse, "\u2260(1)", [1], call1583);
            if (Grace_isTrue(opresult1584)) {
              throw new ReturnException(GraceTrue, returnTarget);
            }
            return if1582;
          };
          let applyMeth1581 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1581.methodName = "apply(1)";
          applyMeth1581.paramCounts = [1];
          applyMeth1581.paramNames = ["p"];
          applyMeth1581.definitionLine = 526;
          applyMeth1581.definitionModule = "ast";
          block1581.methods["apply(1)"] = applyMeth1581;
          let matchesMeth1581 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1581.methodName = "matches(1)";
          matchesMeth1581.paramCounts = [1];
          matchesMeth1581.paramNames = ["p"];
          matchesMeth1581.definitionLine = 526;
          matchesMeth1581.definitionModule = "ast";
          block1581.methods["matches(1)"] = matchesMeth1581;
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1585 = selfRequest(this, "params", [0]);
          var call1580 = request(call1585, "do(1)", [1], block1581);
          setLineNumber(527);    // compilenode return
          return GraceFalse;
        };    // end of method aParametersHasATypeAnnotation
        this.methods["aParametersHasATypeAnnotation"] = func1579;
        func1579.methodName = "aParametersHasATypeAnnotation";
        func1579.paramCounts = [0];
        func1579.paramNames = [];
        func1579.definitionLine = 525;
        func1579.definitionModule = "ast";
        var func1586 = function(argcv) {    // method end, line 529
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if1587 = GraceDone;
          setLineNumber(530);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1589 = selfRequest(this, "body", [0]);
          var call1588 = request(call1589, "size", [0]);
          var opresult1590 = request(call1588, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult1590)) {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1593 = selfRequest(this, "body", [0]);
            var call1592 = request(call1593, "last", [0]);
            var call1591 = request(call1592, "end", [0]);
            return call1591;
          }
          var if1594 = GraceDone;
          setLineNumber(531);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1596 = selfRequest(this, "params", [0]);
          var call1595 = request(call1596, "isEmpty", [0]);
          if (Grace_isTrue(call1595)) {
            setLineNumber(532);    // compilenode string
            var string1598 = new GraceString("}");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1599 = selfRequest(this, "start", [0]);
            // call case 2: outer request
            var call1597 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string1598, call1599);
            if1594 = call1597;
          } else {
            setLineNumber(534);    // compilenode string
            var string1601 = new GraceString("}");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1604 = selfRequest(this, "params", [0]);
            var call1603 = request(call1604, "last", [0]);
            var call1602 = request(call1603, "end", [0]);
            // call case 2: outer request
            var call1600 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string1601, call1602);
            if1594 = call1600;
          }
          return if1594;
        };    // end of method end
        this.methods["end"] = func1586;
        func1586.methodName = "end";
        func1586.paramCounts = [0];
        func1586.paramNames = [];
        func1586.definitionLine = 529;
        func1586.definitionModule = "ast";
        var func1605 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 537
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if1606 = GraceDone;
          setLineNumber(538);    // compilenode call
          // call case 6: other requests
          var call1607 = request(var_visitor, "visitBlock(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call1607)) {
            setLineNumber(539);    // compilenode call
            // call case 6: other requests
            var call1608 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call1608;
            setLineNumber(540);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1610 = selfRequest(this, "params", [0]);
            var block1611 = new GraceBlock(this, 540, 1);
            block1611.guard = jsTrue;
            block1611.real = function block1611(var_mx) {
              setLineNumber(541);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call1612 = request(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call1612;
            };
            let applyMeth1611 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1611.methodName = "apply(1)";
            applyMeth1611.paramCounts = [1];
            applyMeth1611.paramNames = ["mx"];
            applyMeth1611.definitionLine = 540;
            applyMeth1611.definitionModule = "ast";
            block1611.methods["apply(1)"] = applyMeth1611;
            let matchesMeth1611 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1611.methodName = "matches(1)";
            matchesMeth1611.paramCounts = [1];
            matchesMeth1611.paramNames = ["mx"];
            matchesMeth1611.definitionLine = 540;
            matchesMeth1611.definitionModule = "ast";
            block1611.methods["matches(1)"] = matchesMeth1611;
            // call case 2: outer request
            var call1609 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1610, block1611);
            setLineNumber(543);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1614 = selfRequest(this, "body", [0]);
            var block1615 = new GraceBlock(this, 543, 1);
            block1615.guard = jsTrue;
            block1615.real = function block1615(var_mx) {
              setLineNumber(544);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call1616 = request(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call1616;
            };
            let applyMeth1615 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1615.methodName = "apply(1)";
            applyMeth1615.paramCounts = [1];
            applyMeth1615.paramNames = ["mx"];
            applyMeth1615.definitionLine = 543;
            applyMeth1615.definitionModule = "ast";
            block1615.methods["apply(1)"] = applyMeth1615;
            let matchesMeth1615 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1615.methodName = "matches(1)";
            matchesMeth1615.paramCounts = [1];
            matchesMeth1615.paramNames = ["mx"];
            matchesMeth1615.definitionLine = 543;
            matchesMeth1615.definitionModule = "ast";
            block1615.methods["matches(1)"] = matchesMeth1615;
            // call case 2: outer request
            var call1613 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1614, block1615);
            var if1617 = GraceDone;
            setLineNumber(546);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1618 = selfRequest(this, "matchingPattern", [0]);
            var opresult1619 = request(GraceFalse, "\u2260(1)", [1], call1618);
            if (Grace_isTrue(opresult1619)) {
              setLineNumber(547);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1621 = selfRequest(this, "matchingPattern", [0]);
              var call1620 = request(call1621, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if1617 = call1620;
            }
            if1606 = if1617;
          }
          return if1606;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func1605;
        func1605.methodName = "accept(1)from(1)";
        func1605.paramCounts = [1, 1];
        func1605.paramNames = ["visitor", "ac"];
        func1605.definitionLine = 537;
        func1605.definitionModule = "ast";
        var func1622 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 551
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(552);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1623 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call1623;
          setLineNumber(553);    // compilenode call
          // call case 6: other requests
          var call1624 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call1624;
          setLineNumber(554);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1627 = selfRequest(this, "params", [0]);
          // call case 2: outer request
          var call1626 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call1627, var_blk, var_newChain);
          // call case 6: other requests
          var call1625 = request(var_n, "params:=(1)", [1], call1626);
          setLineNumber(555);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1630 = selfRequest(this, "body", [0]);
          // call case 2: outer request
          var call1629 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call1630, var_blk, var_newChain);
          // call case 6: other requests
          var call1628 = request(var_n, "body:=(1)", [1], call1629);
          setLineNumber(556);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1633 = selfRequest(this, "matchingPattern", [0]);
          // call case 2: outer request
          var call1632 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call1633, var_blk, var_newChain);
          // call case 6: other requests
          var call1631 = request(var_n, "matchingPattern:=(1)", [1], call1632);
          setLineNumber(557);    // compilenode call
          // call case 6: other requests
          var call1634 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call1634;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func1622;
        func1622.methodName = "map(1)ancestors(1)";
        func1622.paramCounts = [1, 1];
        func1622.paramNames = ["blk", "ac"];
        func1622.definitionLine = 551;
        func1622.definitionModule = "ast";
        var func1635 = function(argcv, var_depth) {    // method pretty(_), line 559
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(560);    // compilenode string
          var string1636 = new GraceString("  ");
          var sum1637 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod1638 = request(string1636, "*(1)", [1], sum1637);
          var var_spc = prod1638;
          setLineNumber(561);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1639 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string1640 = new GraceString("\n");
          var opresult1641 = request(call1639, "++(1)", [1], string1640);
          var var_s = opresult1641;
          setLineNumber(562);    // compilenode op
          var opresult1642 = request(var_s, "++(1)", [1], var_spc);
          var string1643 = new GraceString("Parameters:");
          var opresult1644 = request(opresult1642, "++(1)", [1], string1643);
          var_s = opresult1644;
          setLineNumber(563);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1646 = selfRequest(this, "params", [0]);
          var block1647 = new GraceBlock(this, 563, 1);
          block1647.guard = jsTrue;
          block1647.real = function block1647(var_mx) {
            setLineNumber(564);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1648 = new GraceString("\n  ");
            var opresult1649 = request(var_s, "++(1)", [1], string1648);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1650 = request(opresult1649, "++(1)", [1], var_spc);
            var sum1652 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call1651 = request(var_mx, "pretty(1)", [1], sum1652);
            var opresult1653 = request(opresult1650, "++(1)", [1], call1651);
            var_s = opresult1653;
            return GraceDone;
          };
          let applyMeth1647 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1647.methodName = "apply(1)";
          applyMeth1647.paramCounts = [1];
          applyMeth1647.paramNames = ["mx"];
          applyMeth1647.definitionLine = 563;
          applyMeth1647.definitionModule = "ast";
          block1647.methods["apply(1)"] = applyMeth1647;
          let matchesMeth1647 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1647.methodName = "matches(1)";
          matchesMeth1647.paramCounts = [1];
          matchesMeth1647.paramNames = ["mx"];
          matchesMeth1647.definitionLine = 563;
          matchesMeth1647.definitionModule = "ast";
          block1647.methods["matches(1)"] = matchesMeth1647;
          // call case 2: outer request
          var call1645 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1646, block1647);
          setLineNumber(566);    // compilenode string
          var string1654 = new GraceString("\n");
          var opresult1655 = request(var_s, "++(1)", [1], string1654);
          var_s = opresult1655;
          setLineNumber(567);    // compilenode op
          var opresult1656 = request(var_s, "++(1)", [1], var_spc);
          var string1657 = new GraceString("Body:");
          var opresult1658 = request(opresult1656, "++(1)", [1], string1657);
          var_s = opresult1658;
          setLineNumber(568);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1660 = selfRequest(this, "body", [0]);
          var block1661 = new GraceBlock(this, 568, 1);
          block1661.guard = jsTrue;
          block1661.real = function block1661(var_mx) {
            setLineNumber(569);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1662 = new GraceString("\n  ");
            var opresult1663 = request(var_s, "++(1)", [1], string1662);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1664 = request(opresult1663, "++(1)", [1], var_spc);
            var sum1666 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call1665 = request(var_mx, "pretty(1)", [1], sum1666);
            var opresult1667 = request(opresult1664, "++(1)", [1], call1665);
            var_s = opresult1667;
            return GraceDone;
          };
          let applyMeth1661 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1661.methodName = "apply(1)";
          applyMeth1661.paramCounts = [1];
          applyMeth1661.paramNames = ["mx"];
          applyMeth1661.definitionLine = 568;
          applyMeth1661.definitionModule = "ast";
          block1661.methods["apply(1)"] = applyMeth1661;
          let matchesMeth1661 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1661.methodName = "matches(1)";
          matchesMeth1661.paramCounts = [1];
          matchesMeth1661.paramNames = ["mx"];
          matchesMeth1661.definitionLine = 568;
          matchesMeth1661.definitionModule = "ast";
          block1661.methods["matches(1)"] = matchesMeth1661;
          // call case 2: outer request
          var call1659 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1660, block1661);
          var if1668 = GraceDone;
          setLineNumber(571);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1669 = selfRequest(this, "matchingPattern", [0]);
          var opresult1670 = request(GraceFalse, "\u2260(1)", [1], call1669);
          if (Grace_isTrue(opresult1670)) {
            setLineNumber(572);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1671 = new GraceString("\n");
            var opresult1672 = request(var_s, "++(1)", [1], string1671);
            var_s = opresult1672;
            setLineNumber(573);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1673 = request(var_s, "++(1)", [1], var_spc);
            var string1674 = new GraceString("Pattern:");
            var opresult1675 = request(opresult1673, "++(1)", [1], string1674);
            var_s = opresult1675;
            setLineNumber(574);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1676 = new GraceString("\n  ");
            var opresult1677 = request(var_s, "++(1)", [1], string1676);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1678 = request(opresult1677, "++(1)", [1], var_spc);
            var sum1680 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1681 = selfRequest(this, "matchingPattern", [0]);
            var call1679 = request(call1681, "pretty(1)", [1], sum1680);
            var opresult1682 = request(opresult1678, "++(1)", [1], call1679);
            var_s = opresult1682;
            if1668 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func1635;
        func1635.methodName = "pretty(1)";
        func1635.paramCounts = [1];
        func1635.paramNames = ["depth"];
        func1635.definitionLine = 559;
        func1635.definitionModule = "ast";
        var func1683 = function(argcv, var_depth) {    // method toGrace(_), line 578
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(579);    // compilenode string
          var string1684 = new GraceString("    ");
          var prod1685 = request(string1684, "*(1)", [1], var_depth);
          var var_spc = prod1685;
          setLineNumber(580);    // compilenode string
          var string1686 = new GraceString("{");
          var var_s = string1686;
          var if1687 = GraceDone;
          setLineNumber(581);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1689 = selfRequest(this, "params", [0]);
          var call1688 = request(call1689, "size", [0]);
          var opresult1690 = request(call1688, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult1690)) {
            setLineNumber(582);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1691 = new GraceString(" ");
            var opresult1692 = request(var_s, "++(1)", [1], string1691);
            var_s = opresult1692;
            setLineNumber(583);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1695 = selfRequest(this, "params", [0]);
            var call1694 = request(call1695, "indices", [0]);
            var block1696 = new GraceBlock(this, 583, 1);
            block1696.guard = jsTrue;
            block1696.real = function block1696(var_i) {
              setLineNumber(584);    // compilenode call
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1698 = selfRequest(this, "params", [0]);
              var call1697 = request(call1698, "at(1)", [1], var_i);
              var var_p = call1697;
              var if1699 = GraceDone;
              setLineNumber(585);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1700 = selfRequest(this, "matchingPattern", [0]);
              var opresult1701 = request(GraceFalse, "\u2260(1)", [1], call1700);
              if (Grace_isTrue(opresult1701)) {
                setLineNumber(586);    // compilenode op
                if (var_s === undefined) raiseUninitializedVariable("s");
                var string1702 = new GraceString("(");
                var opresult1703 = request(var_s, "++(1)", [1], string1702);
                // call case 6: other requests
                if (var_p === undefined) raiseUninitializedVariable("p");
                var call1704 = request(var_p, "toGrace(1)", [1], new GraceNum(0));
                var opresult1705 = request(opresult1703, "++(1)", [1], call1704);
                var string1706 = new GraceString(")");
                var opresult1707 = request(opresult1705, "++(1)", [1], string1706);
                var_s = opresult1707;
                if1699 = GraceDone;
              } else {
                setLineNumber(588);    // compilenode op
                if (var_s === undefined) raiseUninitializedVariable("s");
                // call case 6: other requests
                if (var_p === undefined) raiseUninitializedVariable("p");
                var call1708 = request(var_p, "toGrace(1)", [1], new GraceNum(0));
                var opresult1709 = request(var_s, "++(1)", [1], call1708);
                var_s = opresult1709;
                if1699 = GraceDone;
              }
              var if1710 = GraceDone;
              setLineNumber(590);    // compilenode member
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1712 = selfRequest(this, "params", [0]);
              var call1711 = request(call1712, "size", [0]);
              var opresult1713 = request(var_i, "<(1)", [1], call1711);
              if (Grace_isTrue(opresult1713)) {
                setLineNumber(591);    // compilenode op
                if (var_s === undefined) raiseUninitializedVariable("s");
                var string1714 = new GraceString(", ");
                var opresult1715 = request(var_s, "++(1)", [1], string1714);
                var_s = opresult1715;
                if1710 = GraceDone;
              } else {
                setLineNumber(593);    // compilenode op
                if (var_s === undefined) raiseUninitializedVariable("s");
                var string1716 = new GraceString(" \u2192");
                var opresult1717 = request(var_s, "++(1)", [1], string1716);
                var_s = opresult1717;
                if1710 = GraceDone;
              }
              return if1710;
            };
            let applyMeth1696 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1696.methodName = "apply(1)";
            applyMeth1696.paramCounts = [1];
            applyMeth1696.paramNames = ["i"];
            applyMeth1696.definitionLine = 583;
            applyMeth1696.definitionModule = "ast";
            block1696.methods["apply(1)"] = applyMeth1696;
            let matchesMeth1696 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1696.methodName = "matches(1)";
            matchesMeth1696.paramCounts = [1];
            matchesMeth1696.paramNames = ["i"];
            matchesMeth1696.definitionLine = 583;
            matchesMeth1696.definitionModule = "ast";
            block1696.methods["matches(1)"] = matchesMeth1696;
            // call case 2: outer request
            var call1693 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1694, block1696);
            if1687 = call1693;
          }
          setLineNumber(597);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1719 = selfRequest(this, "body", [0]);
          var block1720 = new GraceBlock(this, 597, 1);
          block1720.guard = jsTrue;
          block1720.real = function block1720(var_mx) {
            setLineNumber(598);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1721 = new GraceString("\n");
            var opresult1722 = request(var_s, "++(1)", [1], string1721);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1723 = request(opresult1722, "++(1)", [1], var_spc);
            var sum1725 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call1724 = request(var_mx, "toGrace(1)", [1], sum1725);
            var opresult1726 = request(opresult1723, "++(1)", [1], call1724);
            var_s = opresult1726;
            return GraceDone;
          };
          let applyMeth1720 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1720.methodName = "apply(1)";
          applyMeth1720.paramCounts = [1];
          applyMeth1720.paramNames = ["mx"];
          applyMeth1720.definitionLine = 597;
          applyMeth1720.definitionModule = "ast";
          block1720.methods["apply(1)"] = applyMeth1720;
          let matchesMeth1720 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1720.methodName = "matches(1)";
          matchesMeth1720.paramCounts = [1];
          matchesMeth1720.paramNames = ["mx"];
          matchesMeth1720.definitionLine = 597;
          matchesMeth1720.definitionModule = "ast";
          block1720.methods["matches(1)"] = matchesMeth1720;
          // call case 2: outer request
          var call1718 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1719, block1720);
          setLineNumber(600);    // compilenode string
          var string1727 = new GraceString("\n");
          var opresult1728 = request(var_s, "++(1)", [1], string1727);
          var_s = opresult1728;
          setLineNumber(601);    // compilenode num
          var diff1730 = request(var_depth, "-(1)", [1], new GraceNum(1));
          var block1731 = new GraceBlock(this, 601, 0);
          block1731.guard = jsTrue;
          block1731.real = function block1731() {
            setLineNumber(601);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1732 = new GraceString("    ");
            var opresult1733 = request(var_s, "++(1)", [1], string1732);
            var_s = opresult1733;
            return GraceDone;
          };
          let applyMeth1731 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth1731.methodName = "apply";
          applyMeth1731.paramCounts = [0];
          applyMeth1731.paramNames = [];
          applyMeth1731.definitionLine = 601;
          applyMeth1731.definitionModule = "ast";
          block1731.methods["apply"] = applyMeth1731;
          // call case 2: outer request
          var call1729 = selfRequest(var_prelude, "repeat(1)times(1)", [1, 1], diff1730, block1731);
          setLineNumber(602);    // compilenode string
          var string1734 = new GraceString("}");
          var opresult1735 = request(var_s, "++(1)", [1], string1734);
          return opresult1735;
        };    // end of method toGrace(_)
        func1683.paramTypes = [];
        func1683.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func1683;
        func1683.methodName = "toGrace(1)";
        func1683.paramCounts = [1];
        func1683.paramNames = ["depth"];
        func1683.definitionLine = 578;
        func1683.definitionModule = "ast";
        var func1736 = function(argcv) {    // method shallowCopy, line 604
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(605);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1739 = selfRequest(this, "params", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1740 = selfRequest(this, "body", [0]);
          // call case 6: other requests
          if (var_blockNode === undefined) raiseUninitializedVariable("blockNode");
          var call1738 = request(var_blockNode, "new(2)", [2], call1739, call1740);
          var call1737 = request(call1738, "shallowCopyFieldsFrom(1)", [1], this);
          return call1737;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func1736;
        func1736.methodName = "shallowCopy";
        func1736.paramCounts = [0];
        func1736.paramNames = [];
        func1736.definitionLine = 604;
        func1736.definitionModule = "ast";
        var func1741 = function(argcv, var_other) {    // method postCopy(_), line 607
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(608);    // compilenode member
          // call case 6: other requests
          var call1743 = request(var_other, "matchingPattern", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1742 = selfRequest(this, "matchingPattern:=(1)", [1], call1743);
          setLineNumber(609);    // compilenode member
          // call case 6: other requests
          var call1745 = request(var_other, "extraRuntimeData", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1744 = selfRequest(this, "extraRuntimeData:=(1)", [1], call1745);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func1741;
        func1741.methodName = "postCopy(1)";
        func1741.paramCounts = [1];
        func1741.paramNames = ["other"];
        func1741.definitionLine = 607;
        func1741.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 485;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj1516_init = function() {    // init of object on line 485
          initFun1517.call(this);
          setLineNumber(487);    // compilenode string
          var string1746 = new GraceString("block");
          this.data.kind = string1746;
          setLineNumber(488);    // compilenode string
          var string1747 = new GraceString("block");
          this.data.value = string1747;
          this.data.params = var_params__39__;
          this.data.body = var_body__39__;
          this.data.selfclosure = GraceTrue;
          this.data.matchingPattern = GraceFalse;
          this.data.extraRuntimeData = GraceFalse;
          setLineNumber(494);    // compilenode block
          var block1749 = new GraceBlock(this, 494, 1);
          block1749.guard = jsTrue;
          block1749.real = function block1749(var_p) {
            setLineNumber(495);    // compilenode call
            if (var_patternMarkVisitor === undefined) raiseUninitializedVariable("patternMarkVisitor");
            // call case 6: other requests
            if (var_ancestorChain === undefined) raiseUninitializedVariable("ancestorChain");
            var call1751 = request(var_ancestorChain, "with(1)", [1], this);
            // call case 6: other requests
            var call1750 = request(var_p, "accept(1)from(1)", [1, 1], var_patternMarkVisitor, call1751);
            return call1750;
          };
          let applyMeth1749 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1749.methodName = "apply(1)";
          applyMeth1749.paramCounts = [1];
          applyMeth1749.paramNames = ["p"];
          applyMeth1749.definitionLine = 494;
          applyMeth1749.definitionModule = "ast";
          block1749.methods["apply(1)"] = applyMeth1749;
          let matchesMeth1749 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1749.methodName = "matches(1)";
          matchesMeth1749.paramCounts = [1];
          matchesMeth1749.paramNames = ["p"];
          matchesMeth1749.definitionLine = 494;
          matchesMeth1749.definitionModule = "ast";
          block1749.methods["matches(1)"] = matchesMeth1749;
          // call case 2: outer request
          var call1748 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], var_params__39__, block1749);
        };
        return obj1516_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj1516_init = obj1516_build.call(inheritingObject, null, var_params__39__, var_body__39__, this, aliases, exclusions);
      return obj1516_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func1515;
    func1515.methodName = "new(2)$build(3)";
    func1515.paramCounts = [2];
    func1515.paramNames = ["params'", "body'"];
    func1515.definitionLine = 485;
    func1515.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 484;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1513_init = function() {    // init of object on line 484
    };
    return obj1513_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1513 = emptyGraceObject("blockNode", "ast", 484);
  var obj1513_init = obj1513_build.call(obj1513, null, this, [], []);
  obj1513_init.call(obj1513);  // end of compileobject
  var var_blockNode = obj1513;
  var reader1752_blockNode = function() {  // reader method blockNode
      if (var_blockNode === undefined) raiseUninitializedVariable("blockNode");
      return var_blockNode;
  };
  reader1752_blockNode.isDef = true;
  this.methods["blockNode"] = reader1752_blockNode;
  setLineNumber(614);    // compilenode object
  var obj1753_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_614");
    this.outer_ast_614 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func1754 = function(argcv, var_block, var_cases__39__, var_finally__39__) {    // method new(_,_,_), line 615
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("tryCatchNode.new(_,_,_)", "ast", 615);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_block, var_cases__39__, var_finally__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func1754;
    func1754.methodName = "new(3)";
    func1754.paramCounts = [3];
    func1754.paramNames = ["block", "cases'", "finally'"];
    func1754.definitionLine = 615;
    func1754.definitionModule = "ast";
    var func1755 = function(argcv, var_block, var_cases__39__, var_finally__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 615
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj1756_build = function(ignore, var_block, var_cases__39__, var_finally__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_615");
        this.outer_ast_615 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(616);    // reuse call
        var initFun1757 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader1758_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader1758_kind.isDef = true;
        this.methods["kind"] = reader1758_kind;
        this.data.value = undefined;
        var reader1759_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader1759_value.isVar = true;
        this.methods["value"] = reader1759_value;
        var writer1760_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer1760_value;
        this.data.cases = undefined;
        var reader1761_cases = function() {  // reader method cases
            if (this.data.cases === undefined) raiseUninitializedVariable("cases");
            return this.data.cases;
        };
        reader1761_cases.isVar = true;
        this.methods["cases"] = reader1761_cases;
        var writer1762_cases = function(argcv, n) {   // writer method cases:=(_)
          this.data.cases = n;
          return GraceDone;
        };
        this.methods["cases:=(1)"] = writer1762_cases;
        this.data.finally = undefined;
        var reader1763_finally = function() {  // reader method finally
            if (this.data.finally === undefined) raiseUninitializedVariable("finally");
            return this.data.finally;
        };
        reader1763_finally.isVar = true;
        this.methods["finally"] = reader1763_finally;
        var writer1764_finally = function(argcv, n) {   // writer method finally:=(_)
          this.data.finally = n;
          return GraceDone;
        };
        this.methods["finally:=(1)"] = writer1764_finally;
        var func1765 = function(argcv) {     // accessor method isSimple
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isSimple", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isSimple
        this.methods["isSimple"] = func1765;
        func1765.methodName = "isSimple";
        func1765.paramCounts = [0];
        func1765.paramNames = [];
        func1765.definitionLine = 621;
        func1765.definitionModule = "ast";
        var func1766 = function(argcv) {    // method end, line 622
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if1767 = GraceDone;
          setLineNumber(623);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1768 = selfRequest(this, "finally", [0]);
          var opresult1769 = request(GraceFalse, "\u2260(1)", [1], call1768);
          if (Grace_isTrue(opresult1769)) {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1771 = selfRequest(this, "finally", [0]);
            var call1770 = request(call1771, "end", [0]);
            return call1770;
          }
          var if1772 = GraceDone;
          setLineNumber(624);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1775 = selfRequest(this, "cases", [0]);
          var call1774 = request(call1775, "isEmpty", [0]);
          var call1773 = request(call1774, "not", [0]);
          if (Grace_isTrue(call1773)) {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1778 = selfRequest(this, "cases", [0]);
            var call1777 = request(call1778, "last", [0]);
            var call1776 = request(call1777, "end", [0]);
            return call1776;
          }
          setLineNumber(625);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1780 = selfRequest(this, "value", [0]);
          var call1779 = request(call1780, "end", [0]);
          return call1779;
        };    // end of method end
        this.methods["end"] = func1766;
        func1766.methodName = "end";
        func1766.paramCounts = [0];
        func1766.paramNames = [];
        func1766.definitionLine = 622;
        func1766.definitionModule = "ast";
        var func1781 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 627
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if1782 = GraceDone;
          setLineNumber(628);    // compilenode call
          // call case 6: other requests
          var call1783 = request(var_visitor, "visitTryCatch(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call1783)) {
            setLineNumber(629);    // compilenode call
            // call case 6: other requests
            var call1784 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call1784;
            setLineNumber(630);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1786 = selfRequest(this, "value", [0]);
            var call1785 = request(call1786, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(631);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1788 = selfRequest(this, "cases", [0]);
            var block1789 = new GraceBlock(this, 631, 1);
            block1789.guard = jsTrue;
            block1789.real = function block1789(var_mx) {
              setLineNumber(632);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call1790 = request(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call1790;
            };
            let applyMeth1789 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1789.methodName = "apply(1)";
            applyMeth1789.paramCounts = [1];
            applyMeth1789.paramNames = ["mx"];
            applyMeth1789.definitionLine = 631;
            applyMeth1789.definitionModule = "ast";
            block1789.methods["apply(1)"] = applyMeth1789;
            let matchesMeth1789 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1789.methodName = "matches(1)";
            matchesMeth1789.paramCounts = [1];
            matchesMeth1789.paramNames = ["mx"];
            matchesMeth1789.definitionLine = 631;
            matchesMeth1789.definitionModule = "ast";
            block1789.methods["matches(1)"] = matchesMeth1789;
            // call case 2: outer request
            var call1787 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1788, block1789);
            var if1791 = GraceDone;
            setLineNumber(634);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1792 = selfRequest(this, "finally", [0]);
            var opresult1793 = request(GraceFalse, "\u2260(1)", [1], call1792);
            if (Grace_isTrue(opresult1793)) {
              setLineNumber(635);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1795 = selfRequest(this, "finally", [0]);
              var call1794 = request(call1795, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if1791 = call1794;
            }
            if1782 = if1791;
          }
          return if1782;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func1781;
        func1781.methodName = "accept(1)from(1)";
        func1781.paramCounts = [1, 1];
        func1781.paramNames = ["visitor", "ac"];
        func1781.definitionLine = 627;
        func1781.definitionModule = "ast";
        var func1796 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 639
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(640);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1797 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call1797;
          setLineNumber(641);    // compilenode call
          // call case 6: other requests
          var call1798 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call1798;
          setLineNumber(642);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1801 = selfRequest(this, "value", [0]);
          var call1800 = request(call1801, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call1799 = request(var_n, "value:=(1)", [1], call1800);
          setLineNumber(643);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1804 = selfRequest(this, "cases", [0]);
          // call case 2: outer request
          var call1803 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call1804, var_blk, var_newChain);
          // call case 6: other requests
          var call1802 = request(var_n, "cases:=(1)", [1], call1803);
          setLineNumber(644);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1807 = selfRequest(this, "finally", [0]);
          // call case 2: outer request
          var call1806 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call1807, var_blk, var_newChain);
          // call case 6: other requests
          var call1805 = request(var_n, "finally:=(1)", [1], call1806);
          setLineNumber(645);    // compilenode call
          // call case 6: other requests
          var call1808 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call1808;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func1796;
        func1796.methodName = "map(1)ancestors(1)";
        func1796.paramCounts = [1, 1];
        func1796.paramNames = ["blk", "ac"];
        func1796.definitionLine = 639;
        func1796.definitionModule = "ast";
        var func1809 = function(argcv, var_depth) {    // method pretty(_), line 647
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(648);    // compilenode string
          var string1810 = new GraceString("  ");
          var sum1811 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod1812 = request(string1810, "*(1)", [1], sum1811);
          var var_spc = prod1812;
          setLineNumber(649);    // compilenode string
          var string1813 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1814 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult1815 = request(string1813, "++(1)", [1], call1814);
          var string1816 = new GraceString("\n");
          var opresult1817 = request(opresult1815, "++(1)", [1], string1816);
          var var_s = opresult1817;
          setLineNumber(650);    // compilenode op
          var opresult1818 = request(var_s, "++(1)", [1], var_spc);
          var sum1820 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1821 = selfRequest(this, "value", [0]);
          var call1819 = request(call1821, "pretty(1)", [1], sum1820);
          var opresult1822 = request(opresult1818, "++(1)", [1], call1819);
          var_s = opresult1822;
          setLineNumber(651);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1824 = selfRequest(this, "cases", [0]);
          var block1825 = new GraceBlock(this, 651, 1);
          block1825.guard = jsTrue;
          block1825.real = function block1825(var_mx) {
            setLineNumber(652);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1826 = new GraceString("\n");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1827 = request(string1826, "++(1)", [1], var_spc);
            var string1828 = new GraceString("Case:\n");
            var opresult1829 = request(opresult1827, "++(1)", [1], string1828);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1830 = request(opresult1829, "++(1)", [1], var_spc);
            var string1831 = new GraceString("  ");
            var opresult1832 = request(opresult1830, "++(1)", [1], string1831);
            var sum1834 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call1833 = request(var_mx, "pretty(1)", [1], sum1834);
            var opresult1835 = request(opresult1832, "++(1)", [1], call1833);
            var string1836 = new GraceString("");
            var opresult1837 = request(opresult1835, "++(1)", [1], string1836);
            var opresult1838 = request(var_s, "++(1)", [1], opresult1837);
            var_s = opresult1838;
            return GraceDone;
          };
          let applyMeth1825 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1825.methodName = "apply(1)";
          applyMeth1825.paramCounts = [1];
          applyMeth1825.paramNames = ["mx"];
          applyMeth1825.definitionLine = 651;
          applyMeth1825.definitionModule = "ast";
          block1825.methods["apply(1)"] = applyMeth1825;
          let matchesMeth1825 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1825.methodName = "matches(1)";
          matchesMeth1825.paramCounts = [1];
          matchesMeth1825.paramNames = ["mx"];
          matchesMeth1825.definitionLine = 651;
          matchesMeth1825.definitionModule = "ast";
          block1825.methods["matches(1)"] = matchesMeth1825;
          // call case 2: outer request
          var call1823 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1824, block1825);
          var if1839 = GraceDone;
          setLineNumber(654);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1840 = selfRequest(this, "finally", [0]);
          var opresult1841 = request(GraceFalse, "\u2260(1)", [1], call1840);
          if (Grace_isTrue(opresult1841)) {
            setLineNumber(655);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1842 = new GraceString("\n");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1843 = request(string1842, "++(1)", [1], var_spc);
            var string1844 = new GraceString("Finally:\n");
            var opresult1845 = request(opresult1843, "++(1)", [1], string1844);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1846 = request(opresult1845, "++(1)", [1], var_spc);
            var string1847 = new GraceString("  ");
            var opresult1848 = request(opresult1846, "++(1)", [1], string1847);
            var sum1850 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1851 = selfRequest(this, "finally", [0]);
            var call1849 = request(call1851, "pretty(1)", [1], sum1850);
            var opresult1852 = request(opresult1848, "++(1)", [1], call1849);
            var string1853 = new GraceString("");
            var opresult1854 = request(opresult1852, "++(1)", [1], string1853);
            var opresult1855 = request(var_s, "++(1)", [1], opresult1854);
            var_s = opresult1855;
            if1839 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func1809;
        func1809.methodName = "pretty(1)";
        func1809.paramCounts = [1];
        func1809.paramNames = ["depth"];
        func1809.definitionLine = 647;
        func1809.definitionModule = "ast";
        var func1856 = function(argcv, var_depth) {    // method toGrace(_), line 659
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(660);    // compilenode string
          var string1857 = new GraceString("    ");
          var prod1858 = request(string1857, "*(1)", [1], var_depth);
          var var_spc = prod1858;
          setLineNumber(661);    // compilenode string
          var string1859 = new GraceString("try ");
          var sum1861 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1862 = selfRequest(this, "value", [0]);
          var call1860 = request(call1862, "toGrace(1)", [1], sum1861);
          var opresult1863 = request(string1859, "++(1)", [1], call1860);
          var string1864 = new GraceString(" ");
          var opresult1865 = request(opresult1863, "++(1)", [1], string1864);
          var var_s = opresult1865;
          setLineNumber(662);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1867 = selfRequest(this, "cases", [0]);
          var block1868 = new GraceBlock(this, 662, 1);
          block1868.guard = jsTrue;
          block1868.real = function block1868(var_case) {
            setLineNumber(663);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1869 = new GraceString("\n");
            var opresult1870 = request(var_s, "++(1)", [1], string1869);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1871 = request(opresult1870, "++(1)", [1], var_spc);
            var string1872 = new GraceString("    ");
            var opresult1873 = request(opresult1871, "++(1)", [1], string1872);
            var string1874 = new GraceString("catch ");
            var opresult1875 = request(opresult1873, "++(1)", [1], string1874);
            var sum1877 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call1876 = request(var_case, "toGrace(1)", [1], sum1877);
            var opresult1878 = request(opresult1875, "++(1)", [1], call1876);
            var_s = opresult1878;
            return GraceDone;
          };
          let applyMeth1868 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1868.methodName = "apply(1)";
          applyMeth1868.paramCounts = [1];
          applyMeth1868.paramNames = ["case"];
          applyMeth1868.definitionLine = 662;
          applyMeth1868.definitionModule = "ast";
          block1868.methods["apply(1)"] = applyMeth1868;
          let matchesMeth1868 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1868.methodName = "matches(1)";
          matchesMeth1868.paramCounts = [1];
          matchesMeth1868.paramNames = ["case"];
          matchesMeth1868.definitionLine = 662;
          matchesMeth1868.definitionModule = "ast";
          block1868.methods["matches(1)"] = matchesMeth1868;
          // call case 2: outer request
          var call1866 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1867, block1868);
          var if1879 = GraceDone;
          setLineNumber(665);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1880 = selfRequest(this, "finally", [0]);
          var opresult1881 = request(GraceFalse, "\u2260(1)", [1], call1880);
          if (Grace_isTrue(opresult1881)) {
            setLineNumber(666);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1882 = new GraceString("\n");
            var opresult1883 = request(var_s, "++(1)", [1], string1882);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1884 = request(opresult1883, "++(1)", [1], var_spc);
            var string1885 = new GraceString("    ");
            var opresult1886 = request(opresult1884, "++(1)", [1], string1885);
            var string1887 = new GraceString("finally ");
            var opresult1888 = request(opresult1886, "++(1)", [1], string1887);
            var sum1890 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1891 = selfRequest(this, "finally", [0]);
            var call1889 = request(call1891, "toGrace(1)", [1], sum1890);
            var opresult1892 = request(opresult1888, "++(1)", [1], call1889);
            var_s = opresult1892;
            if1879 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func1856.paramTypes = [];
        func1856.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func1856;
        func1856.methodName = "toGrace(1)";
        func1856.paramCounts = [1];
        func1856.paramNames = ["depth"];
        func1856.definitionLine = 659;
        func1856.definitionModule = "ast";
        var func1893 = function(argcv) {    // method shallowCopy, line 670
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(671);    // compilenode call
          // call case 6: other requests
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          // call case 6: other requests
          if (var_tryCatchNode === undefined) raiseUninitializedVariable("tryCatchNode");
          var call1895 = request(var_tryCatchNode, "new(3)", [3], var_nullNode, var_emptySeq, GraceFalse);
          var call1894 = request(call1895, "shallowCopyFieldsFrom(1)", [1], this);
          return call1894;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func1893;
        func1893.methodName = "shallowCopy";
        func1893.paramCounts = [0];
        func1893.paramNames = [];
        func1893.definitionLine = 670;
        func1893.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 615;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj1756_init = function() {    // init of object on line 615
          initFun1757.call(this);
          setLineNumber(617);    // compilenode string
          var string1896 = new GraceString("trycatch");
          this.data.kind = string1896;
          this.data.value = var_block;
          this.data.cases = var_cases__39__;
          this.data.finally = var_finally__39__;
        };
        return obj1756_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj1756_init = obj1756_build.call(inheritingObject, null, var_block, var_cases__39__, var_finally__39__, this, aliases, exclusions);
      return obj1756_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func1755;
    func1755.methodName = "new(3)$build(3)";
    func1755.paramCounts = [3];
    func1755.paramNames = ["block", "cases'", "finally'"];
    func1755.definitionLine = 615;
    func1755.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 614;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1753_init = function() {    // init of object on line 614
    };
    return obj1753_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1753 = emptyGraceObject("tryCatchNode", "ast", 614);
  var obj1753_init = obj1753_build.call(obj1753, null, this, [], []);
  obj1753_init.call(obj1753);  // end of compileobject
  var var_tryCatchNode = obj1753;
  var reader1897_tryCatchNode = function() {  // reader method tryCatchNode
      if (var_tryCatchNode === undefined) raiseUninitializedVariable("tryCatchNode");
      return var_tryCatchNode;
  };
  reader1897_tryCatchNode.isDef = true;
  this.methods["tryCatchNode"] = reader1897_tryCatchNode;
  setLineNumber(675);    // compilenode object
  var obj1898_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_675");
    this.outer_ast_675 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func1899 = function(argcv, var_matchee__39__, var_cases__39__, var_elsecase__39__) {    // method new(_,_,_), line 676
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("matchCaseNode.new(_,_,_)", "ast", 676);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_matchee__39__, var_cases__39__, var_elsecase__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func1899;
    func1899.methodName = "new(3)";
    func1899.paramCounts = [3];
    func1899.paramNames = ["matchee'", "cases'", "elsecase'"];
    func1899.definitionLine = 676;
    func1899.definitionModule = "ast";
    var func1900 = function(argcv, var_matchee__39__, var_cases__39__, var_elsecase__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 676
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj1901_build = function(ignore, var_matchee__39__, var_cases__39__, var_elsecase__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_676");
        this.outer_ast_676 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(677);    // reuse call
        var initFun1902 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader1903_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader1903_kind.isDef = true;
        this.methods["kind"] = reader1903_kind;
        this.data.value = undefined;
        var reader1904_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader1904_value.isVar = true;
        this.methods["value"] = reader1904_value;
        var writer1905_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer1905_value;
        this.data.cases = undefined;
        var reader1906_cases = function() {  // reader method cases
            if (this.data.cases === undefined) raiseUninitializedVariable("cases");
            return this.data.cases;
        };
        reader1906_cases.isVar = true;
        this.methods["cases"] = reader1906_cases;
        var writer1907_cases = function(argcv, n) {   // writer method cases:=(_)
          this.data.cases = n;
          return GraceDone;
        };
        this.methods["cases:=(1)"] = writer1907_cases;
        this.data.elsecase = undefined;
        var reader1908_elsecase = function() {  // reader method elsecase
            if (this.data.elsecase === undefined) raiseUninitializedVariable("elsecase");
            return this.data.elsecase;
        };
        reader1908_elsecase.isVar = true;
        this.methods["elsecase"] = reader1908_elsecase;
        var writer1909_elsecase = function(argcv, n) {   // writer method elsecase:=(_)
          this.data.elsecase = n;
          return GraceDone;
        };
        this.methods["elsecase:=(1)"] = writer1909_elsecase;
        var func1910 = function(argcv) {     // accessor method isSimple
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isSimple", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isSimple
        this.methods["isSimple"] = func1910;
        func1910.methodName = "isSimple";
        func1910.paramCounts = [0];
        func1910.paramNames = [];
        func1910.definitionLine = 682;
        func1910.definitionModule = "ast";
        var func1911 = function(argcv) {    // method end, line 683
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if1912 = GraceDone;
          setLineNumber(684);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1913 = selfRequest(this, "elsecase", [0]);
          var opresult1914 = request(GraceFalse, "\u2260(1)", [1], call1913);
          if (Grace_isTrue(opresult1914)) {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1916 = selfRequest(this, "elsecase", [0]);
            var call1915 = request(call1916, "end", [0]);
            return call1915;
          }
          var if1917 = GraceDone;
          setLineNumber(685);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1920 = selfRequest(this, "cases", [0]);
          var call1919 = request(call1920, "isEmpty", [0]);
          var call1918 = request(call1919, "not", [0]);
          if (Grace_isTrue(call1918)) {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1923 = selfRequest(this, "cases", [0]);
            var call1922 = request(call1923, "last", [0]);
            var call1921 = request(call1922, "end", [0]);
            return call1921;
          }
          setLineNumber(686);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1925 = selfRequest(this, "value", [0]);
          var call1924 = request(call1925, "end", [0]);
          return call1924;
        };    // end of method end
        this.methods["end"] = func1911;
        func1911.methodName = "end";
        func1911.paramCounts = [0];
        func1911.paramNames = [];
        func1911.definitionLine = 683;
        func1911.definitionModule = "ast";
        var func1926 = function(argcv) {    // method matchee, line 688
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("matchee", 0, numArgs - 0);
          }
          setLineNumber(688);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1927 = selfRequest(this, "value", [0]);
          return call1927;
        };    // end of method matchee
        this.methods["matchee"] = func1926;
        func1926.methodName = "matchee";
        func1926.paramCounts = [0];
        func1926.paramNames = [];
        func1926.definitionLine = 688;
        func1926.definitionModule = "ast";
        var func1928 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 689
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if1929 = GraceDone;
          setLineNumber(690);    // compilenode call
          // call case 6: other requests
          var call1930 = request(var_visitor, "visitMatchCase(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call1930)) {
            setLineNumber(691);    // compilenode call
            // call case 6: other requests
            var call1931 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call1931;
            setLineNumber(692);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1933 = selfRequest(this, "value", [0]);
            var call1932 = request(call1933, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(693);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1935 = selfRequest(this, "cases", [0]);
            var block1936 = new GraceBlock(this, 693, 1);
            block1936.guard = jsTrue;
            block1936.real = function block1936(var_mx) {
              setLineNumber(694);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call1937 = request(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call1937;
            };
            let applyMeth1936 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth1936.methodName = "apply(1)";
            applyMeth1936.paramCounts = [1];
            applyMeth1936.paramNames = ["mx"];
            applyMeth1936.definitionLine = 693;
            applyMeth1936.definitionModule = "ast";
            block1936.methods["apply(1)"] = applyMeth1936;
            let matchesMeth1936 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth1936.methodName = "matches(1)";
            matchesMeth1936.paramCounts = [1];
            matchesMeth1936.paramNames = ["mx"];
            matchesMeth1936.definitionLine = 693;
            matchesMeth1936.definitionModule = "ast";
            block1936.methods["matches(1)"] = matchesMeth1936;
            // call case 2: outer request
            var call1934 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1935, block1936);
            var if1938 = GraceDone;
            setLineNumber(696);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1939 = selfRequest(this, "elsecase", [0]);
            var opresult1940 = request(GraceFalse, "\u2260(1)", [1], call1939);
            if (Grace_isTrue(opresult1940)) {
              setLineNumber(697);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call1942 = selfRequest(this, "elsecase", [0]);
              var call1941 = request(call1942, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if1938 = call1941;
            }
            if1929 = if1938;
          }
          return if1929;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func1928;
        func1928.methodName = "accept(1)from(1)";
        func1928.paramCounts = [1, 1];
        func1928.paramNames = ["visitor", "ac"];
        func1928.definitionLine = 689;
        func1928.definitionModule = "ast";
        var func1943 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 701
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(702);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1944 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call1944;
          setLineNumber(703);    // compilenode call
          // call case 6: other requests
          var call1945 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call1945;
          setLineNumber(704);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1948 = selfRequest(this, "value", [0]);
          var call1947 = request(call1948, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call1946 = request(var_n, "value:=(1)", [1], call1947);
          setLineNumber(705);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1951 = selfRequest(this, "cases", [0]);
          // call case 2: outer request
          var call1950 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call1951, var_blk, var_newChain);
          // call case 6: other requests
          var call1949 = request(var_n, "cases:=(1)", [1], call1950);
          setLineNumber(706);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1954 = selfRequest(this, "elsecase", [0]);
          // call case 2: outer request
          var call1953 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call1954, var_blk, var_newChain);
          // call case 6: other requests
          var call1952 = request(var_n, "elsecase:=(1)", [1], call1953);
          setLineNumber(707);    // compilenode call
          // call case 6: other requests
          var call1955 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call1955;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func1943;
        func1943.methodName = "map(1)ancestors(1)";
        func1943.paramCounts = [1, 1];
        func1943.paramNames = ["blk", "ac"];
        func1943.definitionLine = 701;
        func1943.definitionModule = "ast";
        var func1956 = function(argcv, var_depth) {    // method pretty(_), line 709
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(710);    // compilenode string
          var string1957 = new GraceString("  ");
          var sum1958 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod1959 = request(string1957, "*(1)", [1], sum1958);
          var var_spc = prod1959;
          setLineNumber(711);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call1960 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string1961 = new GraceString("\n");
          var opresult1962 = request(call1960, "++(1)", [1], string1961);
          var var_s = opresult1962;
          setLineNumber(712);    // compilenode op
          var opresult1963 = request(var_s, "++(1)", [1], var_spc);
          var sum1965 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1966 = selfRequest(this, "matchee", [0]);
          var call1964 = request(call1966, "pretty(1)", [1], sum1965);
          var opresult1967 = request(opresult1963, "++(1)", [1], call1964);
          var_s = opresult1967;
          setLineNumber(713);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1969 = selfRequest(this, "cases", [0]);
          var block1970 = new GraceBlock(this, 713, 1);
          block1970.guard = jsTrue;
          block1970.real = function block1970(var_mx) {
            setLineNumber(714);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1971 = new GraceString("\n");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1972 = request(string1971, "++(1)", [1], var_spc);
            var string1973 = new GraceString("Case:\n");
            var opresult1974 = request(opresult1972, "++(1)", [1], string1973);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1975 = request(opresult1974, "++(1)", [1], var_spc);
            var string1976 = new GraceString("  ");
            var opresult1977 = request(opresult1975, "++(1)", [1], string1976);
            var sum1979 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call1978 = request(var_mx, "pretty(1)", [1], sum1979);
            var opresult1980 = request(opresult1977, "++(1)", [1], call1978);
            var string1981 = new GraceString("");
            var opresult1982 = request(opresult1980, "++(1)", [1], string1981);
            var opresult1983 = request(var_s, "++(1)", [1], opresult1982);
            var_s = opresult1983;
            return GraceDone;
          };
          let applyMeth1970 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth1970.methodName = "apply(1)";
          applyMeth1970.paramCounts = [1];
          applyMeth1970.paramNames = ["mx"];
          applyMeth1970.definitionLine = 713;
          applyMeth1970.definitionModule = "ast";
          block1970.methods["apply(1)"] = applyMeth1970;
          let matchesMeth1970 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth1970.methodName = "matches(1)";
          matchesMeth1970.paramCounts = [1];
          matchesMeth1970.paramNames = ["mx"];
          matchesMeth1970.definitionLine = 713;
          matchesMeth1970.definitionModule = "ast";
          block1970.methods["matches(1)"] = matchesMeth1970;
          // call case 2: outer request
          var call1968 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call1969, block1970);
          var if1984 = GraceDone;
          setLineNumber(716);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call1985 = selfRequest(this, "elsecase", [0]);
          var opresult1986 = request(GraceFalse, "\u2260(1)", [1], call1985);
          if (Grace_isTrue(opresult1986)) {
            setLineNumber(717);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string1987 = new GraceString("\n");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1988 = request(string1987, "++(1)", [1], var_spc);
            var string1989 = new GraceString("Else:\n");
            var opresult1990 = request(opresult1988, "++(1)", [1], string1989);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult1991 = request(opresult1990, "++(1)", [1], var_spc);
            var string1992 = new GraceString("  ");
            var opresult1993 = request(opresult1991, "++(1)", [1], string1992);
            var sum1995 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call1996 = selfRequest(this, "elsecase", [0]);
            var call1994 = request(call1996, "pretty(1)", [1], sum1995);
            var opresult1997 = request(opresult1993, "++(1)", [1], call1994);
            var string1998 = new GraceString("");
            var opresult1999 = request(opresult1997, "++(1)", [1], string1998);
            var opresult2000 = request(var_s, "++(1)", [1], opresult1999);
            var_s = opresult2000;
            if1984 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func1956;
        func1956.methodName = "pretty(1)";
        func1956.paramCounts = [1];
        func1956.paramNames = ["depth"];
        func1956.definitionLine = 709;
        func1956.definitionModule = "ast";
        var func2001 = function(argcv, var_depth) {    // method toGrace(_), line 721
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(722);    // compilenode string
          var string2002 = new GraceString("    ");
          var prod2003 = request(string2002, "*(1)", [1], var_depth);
          var var_spc = prod2003;
          setLineNumber(723);    // compilenode string
          var string2004 = new GraceString("match(");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2006 = selfRequest(this, "value", [0]);
          var call2005 = request(call2006, "toGrace(1)", [1], new GraceNum(0));
          var opresult2007 = request(string2004, "++(1)", [1], call2005);
          var string2008 = new GraceString(")");
          var opresult2009 = request(opresult2007, "++(1)", [1], string2008);
          var var_s = opresult2009;
          setLineNumber(724);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2011 = selfRequest(this, "cases", [0]);
          var block2012 = new GraceBlock(this, 724, 1);
          block2012.guard = jsTrue;
          block2012.real = function block2012(var_case) {
            setLineNumber(725);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2013 = new GraceString("\n");
            var opresult2014 = request(var_s, "++(1)", [1], string2013);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2015 = request(opresult2014, "++(1)", [1], var_spc);
            var string2016 = new GraceString("    ");
            var opresult2017 = request(opresult2015, "++(1)", [1], string2016);
            var string2018 = new GraceString("case ");
            var opresult2019 = request(opresult2017, "++(1)", [1], string2018);
            var sum2021 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call2020 = request(var_case, "toGrace(1)", [1], sum2021);
            var opresult2022 = request(opresult2019, "++(1)", [1], call2020);
            var_s = opresult2022;
            return GraceDone;
          };
          let applyMeth2012 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2012.methodName = "apply(1)";
          applyMeth2012.paramCounts = [1];
          applyMeth2012.paramNames = ["case"];
          applyMeth2012.definitionLine = 724;
          applyMeth2012.definitionModule = "ast";
          block2012.methods["apply(1)"] = applyMeth2012;
          let matchesMeth2012 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2012.methodName = "matches(1)";
          matchesMeth2012.paramCounts = [1];
          matchesMeth2012.paramNames = ["case"];
          matchesMeth2012.definitionLine = 724;
          matchesMeth2012.definitionModule = "ast";
          block2012.methods["matches(1)"] = matchesMeth2012;
          // call case 2: outer request
          var call2010 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2011, block2012);
          var if2023 = GraceDone;
          setLineNumber(727);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2024 = selfRequest(this, "elsecase", [0]);
          var opresult2025 = request(GraceFalse, "\u2260(1)", [1], call2024);
          if (Grace_isTrue(opresult2025)) {
            setLineNumber(728);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2026 = new GraceString("\n");
            var opresult2027 = request(var_s, "++(1)", [1], string2026);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2028 = request(opresult2027, "++(1)", [1], var_spc);
            var string2029 = new GraceString("    ");
            var opresult2030 = request(opresult2028, "++(1)", [1], string2029);
            var string2031 = new GraceString("else ");
            var opresult2032 = request(opresult2030, "++(1)", [1], string2031);
            var sum2034 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2035 = selfRequest(this, "elsecase", [0]);
            var call2033 = request(call2035, "toGrace(1)", [1], sum2034);
            var opresult2036 = request(opresult2032, "++(1)", [1], call2033);
            var_s = opresult2036;
            if2023 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func2001.paramTypes = [];
        func2001.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func2001;
        func2001.methodName = "toGrace(1)";
        func2001.paramCounts = [1];
        func2001.paramNames = ["depth"];
        func2001.definitionLine = 721;
        func2001.definitionModule = "ast";
        var func2037 = function(argcv) {    // method shallowCopy, line 732
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(733);    // compilenode call
          // call case 6: other requests
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          // call case 6: other requests
          if (var_matchCaseNode === undefined) raiseUninitializedVariable("matchCaseNode");
          var call2039 = request(var_matchCaseNode, "new(3)", [3], var_nullNode, var_emptySeq, GraceFalse);
          var call2038 = request(call2039, "shallowCopyFieldsFrom(1)", [1], this);
          return call2038;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func2037;
        func2037.methodName = "shallowCopy";
        func2037.paramCounts = [0];
        func2037.paramNames = [];
        func2037.definitionLine = 732;
        func2037.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 676;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj1901_init = function() {    // init of object on line 676
          initFun1902.call(this);
          setLineNumber(678);    // compilenode string
          var string2040 = new GraceString("matchcase");
          this.data.kind = string2040;
          this.data.value = var_matchee__39__;
          this.data.cases = var_cases__39__;
          this.data.elsecase = var_elsecase__39__;
        };
        return obj1901_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj1901_init = obj1901_build.call(inheritingObject, null, var_matchee__39__, var_cases__39__, var_elsecase__39__, this, aliases, exclusions);
      return obj1901_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func1900;
    func1900.methodName = "new(3)$build(3)";
    func1900.paramCounts = [3];
    func1900.paramNames = ["matchee'", "cases'", "elsecase'"];
    func1900.definitionLine = 676;
    func1900.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 675;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj1898_init = function() {    // init of object on line 675
    };
    return obj1898_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj1898 = emptyGraceObject("matchCaseNode", "ast", 675);
  var obj1898_init = obj1898_build.call(obj1898, null, this, [], []);
  obj1898_init.call(obj1898);  // end of compileobject
  var var_matchCaseNode = obj1898;
  var reader2041_matchCaseNode = function() {  // reader method matchCaseNode
      if (var_matchCaseNode === undefined) raiseUninitializedVariable("matchCaseNode");
      return var_matchCaseNode;
  };
  reader2041_matchCaseNode.isDef = true;
  this.methods["matchCaseNode"] = reader2041_matchCaseNode;
  setLineNumber(882);    // compilenode object
  var obj2042_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_882");
    this.outer_ast_882 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func2043 = function(argcv, var_methods__39__, var_types__39__) {    // method new(_,_), line 883
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("typeLiteralNode.new(_,_)", "ast", 883);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_methods__39__, var_types__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func2043;
    func2043.methodName = "new(2)";
    func2043.paramCounts = [2];
    func2043.paramNames = ["methods'", "types'"];
    func2043.definitionLine = 883;
    func2043.definitionModule = "ast";
    var func2044 = function(argcv, var_methods__39__, var_types__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 883
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj2045_build = function(ignore, var_methods__39__, var_types__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_883");
        this.outer_ast_883 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(884);    // reuse call
        var initFun2046 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader2047_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader2047_kind.isDef = true;
        this.methods["kind"] = reader2047_kind;
        this.data.methods = undefined;
        var reader2048_methods = function() {  // reader method methods
            if (this.data.methods === undefined) raiseUninitializedVariable("methods");
            return this.data.methods;
        };
        reader2048_methods.isVar = true;
        this.methods["methods"] = reader2048_methods;
        var writer2049_methods = function(argcv, n) {   // writer method methods:=(_)
          this.data.methods = n;
          return GraceDone;
        };
        this.methods["methods:=(1)"] = writer2049_methods;
        this.data.types = undefined;
        var reader2050_types = function() {  // reader method types
            if (this.data.types === undefined) raiseUninitializedVariable("types");
            return this.data.types;
        };
        reader2050_types.isVar = true;
        this.methods["types"] = reader2050_types;
        var writer2051_types = function(argcv, n) {   // writer method types:=(_)
          this.data.types = n;
          return GraceDone;
        };
        this.methods["types:=(1)"] = writer2051_types;
        this.data.nominal = undefined;
        var reader2052_nominal = function() {  // reader method nominal
            if (this.data.nominal === undefined) raiseUninitializedVariable("nominal");
            return this.data.nominal;
        };
        reader2052_nominal.isVar = true;
        this.methods["nominal"] = reader2052_nominal;
        var writer2053_nominal = function(argcv, n) {   // writer method nominal:=(_)
          this.data.nominal = n;
          return GraceDone;
        };
        this.methods["nominal:=(1)"] = writer2053_nominal;
        this.data.anonymous = undefined;
        var reader2054_anonymous = function() {  // reader method anonymous
            if (this.data.anonymous === undefined) raiseUninitializedVariable("anonymous");
            return this.data.anonymous;
        };
        reader2054_anonymous.isVar = true;
        this.methods["anonymous"] = reader2054_anonymous;
        var writer2055_anonymous = function(argcv, n) {   // writer method anonymous:=(_)
          this.data.anonymous = n;
          return GraceDone;
        };
        this.methods["anonymous:=(1)"] = writer2055_anonymous;
        this.data.value = undefined;
        var reader2056_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader2056_value.isVar = true;
        this.methods["value"] = reader2056_value;
        var writer2057_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer2057_value;
        var func2058 = function(argcv) {    // method name, line 892
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("name", 0, numArgs - 0);
          }
          setLineNumber(892);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2059 = selfRequest(this, "value", [0]);
          return call2059;
        };    // end of method name
        this.methods["name"] = func2058;
        func2058.methodName = "name";
        func2058.paramCounts = [0];
        func2058.paramNames = [];
        func2058.definitionLine = 892;
        func2058.definitionModule = "ast";
        var func2060 = function(argcv, var_n) {    // method name:=(_), line 893
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("name:=(_)", 0, numArgs - 1);
          }
          setLineNumber(894);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2061 = selfRequest(this, "value:=(1)", [1], var_n);
          setLineNumber(895);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2062 = selfRequest(this, "anonymous:=(1)", [1], GraceFalse);
          return call2062;
        };    // end of method name:=(_)
        this.methods["name:=(1)"] = func2060;
        func2060.methodName = "name:=(1)";
        func2060.paramCounts = [1];
        func2060.paramNames = ["n"];
        func2060.definitionLine = 893;
        func2060.definitionModule = "ast";
        var func2063 = function(argcv) {    // method asString, line 897
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(898);    // compilenode string
          var string2064 = new GraceString("typeliteral: methods = ");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2065 = selfRequest(this, "methods", [0]);
          var opresult2066 = request(string2064, "++(1)", [1], call2065);
          var string2067 = new GraceString(", types = ");
          var opresult2068 = request(opresult2066, "++(1)", [1], string2067);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2069 = selfRequest(this, "types", [0]);
          var opresult2070 = request(opresult2068, "++(1)", [1], call2069);
          var string2071 = new GraceString("");
          var opresult2072 = request(opresult2070, "++(1)", [1], string2071);
          return opresult2072;
        };    // end of method asString
        this.methods["asString"] = func2063;
        func2063.methodName = "asString";
        func2063.paramCounts = [0];
        func2063.paramNames = [];
        func2063.definitionLine = 897;
        func2063.definitionModule = "ast";
        var func2073 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 900
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(900);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call2074 = request(var_k, "typedec", [0]);
          return call2074;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func2073;
        func2073.methodName = "declarationKindWithAncestors(1)";
        func2073.paramCounts = [1];
        func2073.paramNames = ["ac"];
        func2073.definitionLine = 900;
        func2073.definitionModule = "ast";
        var func2075 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func2075;
        func2075.methodName = "isExecutable";
        func2075.paramCounts = [0];
        func2075.paramNames = [];
        func2075.definitionLine = 901;
        func2075.definitionModule = "ast";
        var func2076 = function(argcv) {    // method end, line 903
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if2077 = GraceDone;
          setLineNumber(904);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2079 = selfRequest(this, "types", [0]);
          var call2078 = request(call2079, "isEmpty", [0]);
          if (Grace_isTrue(call2078)) {
            if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
            if2077 = var_noPosition;
          } else {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2082 = selfRequest(this, "types", [0]);
            var call2081 = request(call2082, "last", [0]);
            var call2080 = request(call2081, "end", [0]);
            if2077 = call2080;
          }
          var var_tEnd = if2077;
          var if2083 = GraceDone;
          setLineNumber(905);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2085 = selfRequest(this, "methods", [0]);
          var call2084 = request(call2085, "isEmpty", [0]);
          if (Grace_isTrue(call2084)) {
            if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
            if2083 = var_noPosition;
          } else {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2088 = selfRequest(this, "methods", [0]);
            var call2087 = request(call2088, "last", [0]);
            var call2086 = request(call2087, "end", [0]);
            if2083 = call2086;
          }
          var var_mEnd = if2083;
          setLineNumber(906);    // compilenode string
          var string2090 = new GraceString("}");
          // call case 2: outer request
          var call2091 = selfRequest(var_prelude, "max(2)", [2], var_tEnd, var_mEnd);
          // call case 2: outer request
          var call2089 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string2090, call2091);
          return call2089;
        };    // end of method end
        this.methods["end"] = func2076;
        func2076.methodName = "end";
        func2076.paramCounts = [0];
        func2076.paramNames = [];
        func2076.definitionLine = 903;
        func2076.definitionModule = "ast";
        var func2092 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 909
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if2093 = GraceDone;
          setLineNumber(910);    // compilenode call
          // call case 6: other requests
          var call2094 = request(var_visitor, "visitTypeLiteral(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call2094)) {
            setLineNumber(911);    // compilenode call
            // call case 6: other requests
            var call2095 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call2095;
            setLineNumber(912);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2097 = selfRequest(this, "methods", [0]);
            var block2098 = new GraceBlock(this, 912, 1);
            block2098.guard = jsTrue;
            block2098.real = function block2098(var_each) {
              setLineNumber(913);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call2099 = request(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call2099;
            };
            let applyMeth2098 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2098.methodName = "apply(1)";
            applyMeth2098.paramCounts = [1];
            applyMeth2098.paramNames = ["each"];
            applyMeth2098.definitionLine = 912;
            applyMeth2098.definitionModule = "ast";
            block2098.methods["apply(1)"] = applyMeth2098;
            let matchesMeth2098 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2098.methodName = "matches(1)";
            matchesMeth2098.paramCounts = [1];
            matchesMeth2098.paramNames = ["each"];
            matchesMeth2098.definitionLine = 912;
            matchesMeth2098.definitionModule = "ast";
            block2098.methods["matches(1)"] = matchesMeth2098;
            // call case 2: outer request
            var call2096 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2097, block2098);
            setLineNumber(915);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2101 = selfRequest(this, "types", [0]);
            var block2102 = new GraceBlock(this, 915, 1);
            block2102.guard = jsTrue;
            block2102.real = function block2102(var_each) {
              setLineNumber(916);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call2103 = request(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call2103;
            };
            let applyMeth2102 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2102.methodName = "apply(1)";
            applyMeth2102.paramCounts = [1];
            applyMeth2102.paramNames = ["each"];
            applyMeth2102.definitionLine = 915;
            applyMeth2102.definitionModule = "ast";
            block2102.methods["apply(1)"] = applyMeth2102;
            let matchesMeth2102 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2102.methodName = "matches(1)";
            matchesMeth2102.paramCounts = [1];
            matchesMeth2102.paramNames = ["each"];
            matchesMeth2102.definitionLine = 915;
            matchesMeth2102.definitionModule = "ast";
            block2102.methods["matches(1)"] = matchesMeth2102;
            // call case 2: outer request
            var call2100 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2101, block2102);
            if2093 = call2100;
          }
          return if2093;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func2092;
        func2092.methodName = "accept(1)from(1)";
        func2092.paramCounts = [1, 1];
        func2092.paramNames = ["visitor", "ac"];
        func2092.definitionLine = 909;
        func2092.definitionModule = "ast";
        var func2104 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 920
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(921);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2105 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call2105;
          setLineNumber(922);    // compilenode call
          // call case 6: other requests
          var call2106 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call2106;
          setLineNumber(923);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2109 = selfRequest(this, "methods", [0]);
          // call case 2: outer request
          var call2108 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call2109, var_blk, var_ac);
          // call case 6: other requests
          var call2107 = request(var_n, "methods:=(1)", [1], call2108);
          setLineNumber(924);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2112 = selfRequest(this, "types", [0]);
          // call case 2: outer request
          var call2111 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call2112, var_blk, var_ac);
          // call case 6: other requests
          var call2110 = request(var_n, "types:=(1)", [1], call2111);
          setLineNumber(925);    // compilenode call
          // call case 6: other requests
          var call2113 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call2113;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func2104;
        func2104.methodName = "map(1)ancestors(1)";
        func2104.paramCounts = [1, 1];
        func2104.paramNames = ["blk", "ac"];
        func2104.definitionLine = 920;
        func2104.definitionModule = "ast";
        var func2114 = function(argcv, var_depth) {    // method pretty(_), line 927
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(928);    // compilenode string
          var string2115 = new GraceString("  ");
          var sum2116 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod2117 = request(string2115, "*(1)", [1], sum2116);
          var var_spc = prod2117;
          setLineNumber(929);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2118 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string2119 = new GraceString("\n");
          var opresult2120 = request(call2118, "++(1)", [1], string2119);
          var var_s = opresult2120;
          setLineNumber(930);    // compilenode op
          var opresult2121 = request(var_s, "++(1)", [1], var_spc);
          var string2122 = new GraceString("Types:");
          var opresult2123 = request(opresult2121, "++(1)", [1], string2122);
          var_s = opresult2123;
          setLineNumber(931);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2125 = selfRequest(this, "types", [0]);
          var block2126 = new GraceBlock(this, 931, 1);
          block2126.guard = jsTrue;
          block2126.real = function block2126(var_each) {
            setLineNumber(932);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2127 = new GraceString("\n  ");
            var opresult2128 = request(var_s, "++(1)", [1], string2127);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2129 = request(opresult2128, "++(1)", [1], var_spc);
            var sum2131 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call2130 = request(var_each, "pretty(1)", [1], sum2131);
            var opresult2132 = request(opresult2129, "++(1)", [1], call2130);
            var_s = opresult2132;
            return GraceDone;
          };
          let applyMeth2126 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2126.methodName = "apply(1)";
          applyMeth2126.paramCounts = [1];
          applyMeth2126.paramNames = ["each"];
          applyMeth2126.definitionLine = 931;
          applyMeth2126.definitionModule = "ast";
          block2126.methods["apply(1)"] = applyMeth2126;
          let matchesMeth2126 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2126.methodName = "matches(1)";
          matchesMeth2126.paramCounts = [1];
          matchesMeth2126.paramNames = ["each"];
          matchesMeth2126.definitionLine = 931;
          matchesMeth2126.definitionModule = "ast";
          block2126.methods["matches(1)"] = matchesMeth2126;
          // call case 2: outer request
          var call2124 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2125, block2126);
          setLineNumber(934);    // compilenode string
          var string2133 = new GraceString("\n");
          var opresult2134 = request(var_s, "++(1)", [1], string2133);
          var opresult2135 = request(opresult2134, "++(1)", [1], var_spc);
          var string2136 = new GraceString("Methods:");
          var opresult2137 = request(opresult2135, "++(1)", [1], string2136);
          var_s = opresult2137;
          setLineNumber(935);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2139 = selfRequest(this, "methods", [0]);
          var block2140 = new GraceBlock(this, 935, 1);
          block2140.guard = jsTrue;
          block2140.real = function block2140(var_each) {
            setLineNumber(936);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2141 = new GraceString("\n  ");
            var opresult2142 = request(var_s, "++(1)", [1], string2141);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2143 = request(opresult2142, "++(1)", [1], var_spc);
            var sum2145 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call2144 = request(var_each, "pretty(1)", [1], sum2145);
            var opresult2146 = request(opresult2143, "++(1)", [1], call2144);
            var_s = opresult2146;
            return GraceDone;
          };
          let applyMeth2140 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2140.methodName = "apply(1)";
          applyMeth2140.paramCounts = [1];
          applyMeth2140.paramNames = ["each"];
          applyMeth2140.definitionLine = 935;
          applyMeth2140.definitionModule = "ast";
          block2140.methods["apply(1)"] = applyMeth2140;
          let matchesMeth2140 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2140.methodName = "matches(1)";
          matchesMeth2140.paramCounts = [1];
          matchesMeth2140.paramNames = ["each"];
          matchesMeth2140.definitionLine = 935;
          matchesMeth2140.definitionModule = "ast";
          block2140.methods["matches(1)"] = matchesMeth2140;
          // call case 2: outer request
          var call2138 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2139, block2140);
          setLineNumber(938);    // compilenode string
          var string2147 = new GraceString("\n");
          var opresult2148 = request(var_s, "++(1)", [1], string2147);
          var_s = opresult2148;
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func2114;
        func2114.methodName = "pretty(1)";
        func2114.paramCounts = [1];
        func2114.paramNames = ["depth"];
        func2114.definitionLine = 927;
        func2114.definitionModule = "ast";
        var func2149 = function(argcv, var_depth) {    // method toGrace(_), line 941
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(942);    // compilenode string
          var string2150 = new GraceString("    ");
          var prod2151 = request(string2150, "*(1)", [1], var_depth);
          var var_spc = prod2151;
          setLineNumber(943);    // compilenode string
          var string2152 = new GraceString("interface {");
          var var_s = string2152;
          setLineNumber(944);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2154 = selfRequest(this, "methods", [0]);
          var block2155 = new GraceBlock(this, 944, 1);
          block2155.guard = jsTrue;
          block2155.real = function block2155(var_each) {
            setLineNumber(945);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2156 = new GraceString("\n");
            var opresult2157 = request(var_s, "++(1)", [1], string2156);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2158 = request(opresult2157, "++(1)", [1], var_spc);
            var string2159 = new GraceString("    ");
            var opresult2160 = request(opresult2158, "++(1)", [1], string2159);
            var sum2162 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call2161 = request(var_each, "toGrace(1)", [1], sum2162);
            var opresult2163 = request(opresult2160, "++(1)", [1], call2161);
            var_s = opresult2163;
            return GraceDone;
          };
          let applyMeth2155 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2155.methodName = "apply(1)";
          applyMeth2155.paramCounts = [1];
          applyMeth2155.paramNames = ["each"];
          applyMeth2155.definitionLine = 944;
          applyMeth2155.definitionModule = "ast";
          block2155.methods["apply(1)"] = applyMeth2155;
          let matchesMeth2155 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2155.methodName = "matches(1)";
          matchesMeth2155.paramCounts = [1];
          matchesMeth2155.paramNames = ["each"];
          matchesMeth2155.definitionLine = 944;
          matchesMeth2155.definitionModule = "ast";
          block2155.methods["matches(1)"] = matchesMeth2155;
          // call case 2: outer request
          var call2153 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2154, block2155);
          setLineNumber(947);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2165 = selfRequest(this, "types", [0]);
          var block2166 = new GraceBlock(this, 947, 1);
          block2166.guard = jsTrue;
          block2166.real = function block2166(var_each) {
            setLineNumber(948);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2167 = new GraceString("\n");
            var opresult2168 = request(var_s, "++(1)", [1], string2167);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2169 = request(opresult2168, "++(1)", [1], var_spc);
            var string2170 = new GraceString("    ");
            var opresult2171 = request(opresult2169, "++(1)", [1], string2170);
            var sum2173 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call2172 = request(var_each, "toGrace(1)", [1], sum2173);
            var opresult2174 = request(opresult2171, "++(1)", [1], call2172);
            var_s = opresult2174;
            return GraceDone;
          };
          let applyMeth2166 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2166.methodName = "apply(1)";
          applyMeth2166.paramCounts = [1];
          applyMeth2166.paramNames = ["each"];
          applyMeth2166.definitionLine = 947;
          applyMeth2166.definitionModule = "ast";
          block2166.methods["apply(1)"] = applyMeth2166;
          let matchesMeth2166 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2166.methodName = "matches(1)";
          matchesMeth2166.paramCounts = [1];
          matchesMeth2166.paramNames = ["each"];
          matchesMeth2166.definitionLine = 947;
          matchesMeth2166.definitionModule = "ast";
          block2166.methods["matches(1)"] = matchesMeth2166;
          // call case 2: outer request
          var call2164 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2165, block2166);
          setLineNumber(950);    // compilenode string
          var string2175 = new GraceString("}");
          var opresult2176 = request(var_s, "++(1)", [1], string2175);
          return opresult2176;
        };    // end of method toGrace(_)
        func2149.paramTypes = [];
        func2149.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func2149;
        func2149.methodName = "toGrace(1)";
        func2149.paramCounts = [1];
        func2149.paramNames = ["depth"];
        func2149.definitionLine = 941;
        func2149.definitionModule = "ast";
        var func2177 = function(argcv) {    // method shallowCopy, line 952
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(953);    // compilenode call
          // call case 6: other requests
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          // call case 6: other requests
          if (var_typeLiteralNode === undefined) raiseUninitializedVariable("typeLiteralNode");
          var call2179 = request(var_typeLiteralNode, "new(2)", [2], var_emptySeq, var_emptySeq);
          var call2178 = request(call2179, "shallowCopyFieldsFrom(1)", [1], this);
          return call2178;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func2177;
        func2177.methodName = "shallowCopy";
        func2177.paramCounts = [0];
        func2177.paramNames = [];
        func2177.definitionLine = 952;
        func2177.definitionModule = "ast";
        var func2180 = function(argcv, var_other) {    // method postCopy(_), line 955
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(956);    // compilenode member
          // call case 6: other requests
          var call2182 = request(var_other, "nominal", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2181 = selfRequest(this, "nominal:=(1)", [1], call2182);
          setLineNumber(957);    // compilenode member
          // call case 6: other requests
          var call2184 = request(var_other, "anonymous", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2183 = selfRequest(this, "anonymous:=(1)", [1], call2184);
          setLineNumber(958);    // compilenode member
          // call case 6: other requests
          var call2186 = request(var_other, "value", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2185 = selfRequest(this, "value:=(1)", [1], call2186);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func2180;
        func2180.methodName = "postCopy(1)";
        func2180.paramCounts = [1];
        func2180.paramNames = ["other"];
        func2180.definitionLine = 955;
        func2180.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 883;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj2045_init = function() {    // init of object on line 883
          initFun2046.call(this);
          setLineNumber(885);    // compilenode string
          var string2187 = new GraceString("typeliteral");
          this.data.kind = string2187;
          this.data.methods = var_methods__39__;
          this.data.types = var_types__39__;
          this.data.nominal = GraceFalse;
          this.data.anonymous = GraceTrue;
          setLineNumber(890);    // compilenode string
          var string2188 = new GraceString("\u2039anon\u203a");
          this.data.value = string2188;
        };
        return obj2045_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj2045_init = obj2045_build.call(inheritingObject, null, var_methods__39__, var_types__39__, this, aliases, exclusions);
      return obj2045_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func2044;
    func2044.methodName = "new(2)$build(3)";
    func2044.paramCounts = [2];
    func2044.paramNames = ["methods'", "types'"];
    func2044.definitionLine = 883;
    func2044.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 882;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj2042_init = function() {    // init of object on line 882
    };
    return obj2042_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj2042 = emptyGraceObject("typeLiteralNode", "ast", 882);
  var obj2042_init = obj2042_build.call(obj2042, null, this, [], []);
  obj2042_init.call(obj2042);  // end of compileobject
  var var_typeLiteralNode = obj2042;
  var reader2189_typeLiteralNode = function() {  // reader method typeLiteralNode
      if (var_typeLiteralNode === undefined) raiseUninitializedVariable("typeLiteralNode");
      return var_typeLiteralNode;
  };
  reader2189_typeLiteralNode.isDef = true;
  this.methods["typeLiteralNode"] = reader2189_typeLiteralNode;
  setLineNumber(964);    // compilenode object
  var obj2190_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_964");
    this.outer_ast_964 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func2191 = function(argcv, var_name__39__, var_typeValue) {    // method new(_,_), line 965
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("typeDecNode.new(_,_)", "ast", 965);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_name__39__, var_typeValue, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func2191;
    func2191.methodName = "new(2)";
    func2191.paramCounts = [2];
    func2191.paramNames = ["name'", "typeValue"];
    func2191.definitionLine = 965;
    func2191.definitionModule = "ast";
    var func2192 = function(argcv, var_name__39__, var_typeValue, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 965
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj2193_build = function(ignore, var_name__39__, var_typeValue, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_965");
        this.outer_ast_965 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(966);    // reuse call
        var initFun2194 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader2195_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader2195_kind.isDef = true;
        this.methods["kind"] = reader2195_kind;
        this.data.name = undefined;
        var reader2196_name = function() {  // reader method name
            if (this.data.name === undefined) raiseUninitializedVariable("name");
            return this.data.name;
        };
        reader2196_name.isVar = true;
        this.methods["name"] = reader2196_name;
        var writer2197_name = function(argcv, n) {   // writer method name:=(_)
          this.data.name = n;
          return GraceDone;
        };
        this.methods["name:=(1)"] = writer2197_name;
        this.data.value = undefined;
        var reader2198_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader2198_value.isVar = true;
        this.methods["value"] = reader2198_value;
        var writer2199_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer2199_value;
        this.data.parentKind = undefined;
        var reader2200_parentKind = function() {  // reader method parentKind
            if (this.data.parentKind === undefined) raiseUninitializedVariable("parentKind");
            return this.data.parentKind;
        };
        reader2200_parentKind.isVar = true;
        this.methods["parentKind"] = reader2200_parentKind;
        var writer2201_parentKind = function(argcv, n) {   // writer method parentKind:=(_)
          this.data.parentKind = n;
          return GraceDone;
        };
        this.methods["parentKind:=(1)"] = writer2201_parentKind;
        this.data.annotations = undefined;
        var reader2202_annotations = function() {  // reader method annotations
            if (this.data.annotations === undefined) raiseUninitializedVariable("annotations");
            return this.data.annotations;
        };
        reader2202_annotations.isVar = true;
        this.methods["annotations"] = reader2202_annotations;
        var writer2203_annotations = function(argcv, n) {   // writer method annotations:=(_)
          this.data.annotations = n;
          return GraceDone;
        };
        this.methods["annotations:=(1)"] = writer2203_annotations;
        this.data.typeParams = undefined;
        var reader2204_typeParams = function() {  // reader method typeParams
            if (this.data.typeParams === undefined) raiseUninitializedVariable("typeParams");
            return this.data.typeParams;
        };
        reader2204_typeParams.isVar = true;
        this.methods["typeParams"] = reader2204_typeParams;
        var writer2205_typeParams = function(argcv, n) {   // writer method typeParams:=(_)
          this.data.typeParams = n;
          return GraceDone;
        };
        this.methods["typeParams:=(1)"] = writer2205_typeParams;
        var func2206 = function(argcv) {    // method nameString, line 974
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(974);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2208 = selfRequest(this, "name", [0]);
          var call2207 = request(call2208, "value", [0]);
          return call2207;
        };    // end of method nameString
        this.methods["nameString"] = func2206;
        func2206.methodName = "nameString";
        func2206.paramCounts = [0];
        func2206.paramNames = [];
        func2206.definitionLine = 974;
        func2206.definitionModule = "ast";
        var func2209 = function(argcv) {    // method end, line 975
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(975);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2211 = selfRequest(this, "value", [0]);
          var call2210 = request(call2211, "end", [0]);
          return call2210;
        };    // end of method end
        this.methods["end"] = func2209;
        func2209.methodName = "end";
        func2209.paramCounts = [0];
        func2209.paramNames = [];
        func2209.definitionLine = 975;
        func2209.definitionModule = "ast";
        var func2212 = function(argcv) {     // accessor method isLegalInTrait
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isLegalInTrait", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isLegalInTrait
        this.methods["isLegalInTrait"] = func2212;
        func2212.methodName = "isLegalInTrait";
        func2212.paramCounts = [0];
        func2212.paramNames = [];
        func2212.definitionLine = 976;
        func2212.definitionModule = "ast";
        var func2213 = function(argcv) {     // accessor method isTypeDec
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isTypeDec", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isTypeDec
        this.methods["isTypeDec"] = func2213;
        func2213.methodName = "isTypeDec";
        func2213.paramCounts = [0];
        func2213.paramNames = [];
        func2213.definitionLine = 977;
        func2213.definitionModule = "ast";
        var func2214 = function(argcv, var_st) {    // method scope:=(_), line 978
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("scope:=(_)", 0, numArgs - 1);
          }
          setLineNumber(981);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2215 = selfRequest(this, "symbolTable:=(1)", [1], var_st);
          setLineNumber(982);    // compilenode call
          // call case 6: other requests
          var call2216 = request(var_st, "node:=(1)", [1], this);
          return call2216;
        };    // end of method scope:=(_)
        this.methods["scope:=(1)"] = func2214;
        func2214.methodName = "scope:=(1)";
        func2214.paramCounts = [1];
        func2214.paramNames = ["st"];
        func2214.definitionLine = 978;
        func2214.definitionModule = "ast";
        var func2217 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func2217;
        func2217.methodName = "isExecutable";
        func2217.paramCounts = [0];
        func2217.paramNames = [];
        func2217.definitionLine = 985;
        func2217.definitionModule = "ast";
        var func2218 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 986
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(986);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call2219 = request(var_k, "typeparam", [0]);
          return call2219;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func2218;
        func2218.methodName = "declarationKindWithAncestors(1)";
        func2218.paramCounts = [1];
        func2218.paramNames = ["ac"];
        func2218.definitionLine = 986;
        func2218.definitionModule = "ast";
        var func2220 = function(argcv) {    // method isConfidential, line 987
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isConfidential", 0, numArgs - 0);
          }
          setLineNumber(987);    // compilenode string
          var string2222 = new GraceString("confidential");
          // call case 2: outer request
          var call2221 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string2222);
          return call2221;
        };    // end of method isConfidential
        this.methods["isConfidential"] = func2220;
        func2220.methodName = "isConfidential";
        func2220.paramCounts = [0];
        func2220.paramNames = [];
        func2220.definitionLine = 987;
        func2220.definitionModule = "ast";
        var func2223 = function(argcv) {    // method isPublic, line 988
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isPublic", 0, numArgs - 0);
          }
          setLineNumber(988);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2225 = selfRequest(this, "isConfidential", [0]);
          var call2224 = request(call2225, "not", [0]);
          return call2224;
        };    // end of method isPublic
        this.methods["isPublic"] = func2223;
        func2223.methodName = "isPublic";
        func2223.paramCounts = [0];
        func2223.paramNames = [];
        func2223.definitionLine = 988;
        func2223.definitionModule = "ast";
        var func2226 = function(argcv) {     // accessor method isWritable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isWritable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isWritable
        this.methods["isWritable"] = func2226;
        func2226.methodName = "isWritable";
        func2226.paramCounts = [0];
        func2226.paramNames = [];
        func2226.definitionLine = 989;
        func2226.definitionModule = "ast";
        var func2227 = function(argcv) {    // method isReadable, line 990
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isReadable", 0, numArgs - 0);
          }
          setLineNumber(990);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2228 = selfRequest(this, "isPublic", [0]);
          return call2228;
        };    // end of method isReadable
        this.methods["isReadable"] = func2227;
        func2227.methodName = "isReadable";
        func2227.paramCounts = [0];
        func2227.paramNames = [];
        func2227.definitionLine = 990;
        func2227.definitionModule = "ast";
        var func2229 = function(argcv) {    // method numTypeParams, line 991
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeParams", 0, numArgs - 0);
          }
          var if2230 = GraceDone;
          setLineNumber(992);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2231 = selfRequest(this, "typeParams", [0]);
          var opresult2232 = request(GraceFalse, "==(1)", [1], call2231);
          if (Grace_isTrue(opresult2232)) {
            if2230 = new GraceNum(0);
          } else {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2234 = selfRequest(this, "typeParams", [0]);
            var call2233 = request(call2234, "size", [0]);
            if2230 = call2233;
          }
          return if2230;
        };    // end of method numTypeParams
        this.methods["numTypeParams"] = func2229;
        func2229.methodName = "numTypeParams";
        func2229.paramCounts = [0];
        func2229.paramNames = [];
        func2229.definitionLine = 991;
        func2229.definitionModule = "ast";
        var func2235 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 994
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if2236 = GraceDone;
          setLineNumber(995);    // compilenode call
          // call case 6: other requests
          var call2237 = request(var_visitor, "visitTypeDec(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call2237)) {
            setLineNumber(996);    // compilenode call
            // call case 6: other requests
            var call2238 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call2238;
            setLineNumber(997);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2240 = selfRequest(this, "name", [0]);
            var call2239 = request(call2240, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            var if2241 = GraceDone;
            setLineNumber(998);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2242 = selfRequest(this, "typeParams", [0]);
            var opresult2243 = request(GraceFalse, "\u2260(1)", [1], call2242);
            if (Grace_isTrue(opresult2243)) {
              setLineNumber(999);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call2245 = selfRequest(this, "typeParams", [0]);
              var call2244 = request(call2245, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if2241 = call2244;
            }
            setLineNumber(1001);    // compilenode block
            var block2247 = new GraceBlock(this, 1001, 1);
            block2247.guard = jsTrue;
            block2247.real = function block2247(var_each) {
              setLineNumber(1001);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call2248 = request(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call2248;
            };
            let applyMeth2247 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2247.methodName = "apply(1)";
            applyMeth2247.paramCounts = [1];
            applyMeth2247.paramNames = ["each"];
            applyMeth2247.definitionLine = 1001;
            applyMeth2247.definitionModule = "ast";
            block2247.methods["apply(1)"] = applyMeth2247;
            let matchesMeth2247 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2247.methodName = "matches(1)";
            matchesMeth2247.paramCounts = [1];
            matchesMeth2247.paramNames = ["each"];
            matchesMeth2247.definitionLine = 1001;
            matchesMeth2247.definitionModule = "ast";
            block2247.methods["matches(1)"] = matchesMeth2247;
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2249 = selfRequest(this, "annotations", [0]);
            var call2246 = request(call2249, "do(1)", [1], block2247);
            setLineNumber(1002);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2251 = selfRequest(this, "value", [0]);
            var call2250 = request(call2251, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if2236 = call2250;
          }
          return if2236;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func2235;
        func2235.methodName = "accept(1)from(1)";
        func2235.paramCounts = [1, 1];
        func2235.paramNames = ["visitor", "ac"];
        func2235.definitionLine = 994;
        func2235.definitionModule = "ast";
        var func2252 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1005
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1006);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2253 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call2253;
          setLineNumber(1007);    // compilenode call
          // call case 6: other requests
          var call2254 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call2254;
          setLineNumber(1008);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2257 = selfRequest(this, "name", [0]);
          var call2256 = request(call2257, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call2255 = request(var_n, "name:=(1)", [1], call2256);
          setLineNumber(1009);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2260 = selfRequest(this, "typeParams", [0]);
          // call case 2: outer request
          var call2259 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call2260, var_blk, var_newChain);
          // call case 6: other requests
          var call2258 = request(var_n, "typeParams:=(1)", [1], call2259);
          setLineNumber(1010);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2263 = selfRequest(this, "value", [0]);
          var call2262 = request(call2263, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call2261 = request(var_n, "value:=(1)", [1], call2262);
          setLineNumber(1011);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2266 = selfRequest(this, "annotations", [0]);
          // call case 2: outer request
          var call2265 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call2266, var_blk, var_newChain);
          // call case 6: other requests
          var call2264 = request(var_n, "annotations:=(1)", [1], call2265);
          setLineNumber(1012);    // compilenode call
          // call case 6: other requests
          var call2267 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call2267;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func2252;
        func2252.methodName = "map(1)ancestors(1)";
        func2252.paramCounts = [1, 1];
        func2252.paramNames = ["blk", "ac"];
        func2252.definitionLine = 1005;
        func2252.definitionModule = "ast";
        var func2268 = function(argcv, var_depth) {    // method pretty(_), line 1014
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1015);    // compilenode string
          var string2269 = new GraceString("  ");
          var sum2270 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod2271 = request(string2269, "*(1)", [1], sum2270);
          var var_spc = prod2271;
          setLineNumber(1016);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2272 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string2273 = new GraceString("\n");
          var opresult2274 = request(call2272, "++(1)", [1], string2273);
          var var_s = opresult2274;
          setLineNumber(1017);    // compilenode op
          var opresult2275 = request(var_s, "++(1)", [1], var_spc);
          var sum2277 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2278 = selfRequest(this, "name", [0]);
          var call2276 = request(call2278, "pretty(1)", [1], sum2277);
          var opresult2279 = request(opresult2275, "++(1)", [1], call2276);
          var string2280 = new GraceString("\n");
          var opresult2281 = request(opresult2279, "++(1)", [1], string2280);
          var_s = opresult2281;
          var if2282 = GraceDone;
          setLineNumber(1018);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2283 = selfRequest(this, "typeParams", [0]);
          var opresult2284 = request(GraceFalse, "\u2260(1)", [1], call2283);
          if (Grace_isTrue(opresult2284)) {
            setLineNumber(1019);    // compilenode string
            var string2285 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult2286 = request(string2285, "++(1)", [1], var_s);
            var string2287 = new GraceString("");
            var opresult2288 = request(opresult2286, "++(1)", [1], string2287);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2289 = request(opresult2288, "++(1)", [1], var_spc);
            var string2290 = new GraceString("Type parameters:\n");
            var opresult2291 = request(opresult2289, "++(1)", [1], string2290);
            var sum2293 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2294 = selfRequest(this, "typeParams", [0]);
            var call2292 = request(call2294, "pretty(1)", [1], sum2293);
            var opresult2295 = request(opresult2291, "++(1)", [1], call2292);
            var string2296 = new GraceString("\n");
            var opresult2297 = request(opresult2295, "++(1)", [1], string2296);
            var_s = opresult2297;
            if2282 = GraceDone;
          }
          setLineNumber(1021);    // compilenode op
          var opresult2298 = request(var_s, "++(1)", [1], var_spc);
          var string2299 = new GraceString("Value:");
          var opresult2300 = request(opresult2298, "++(1)", [1], string2299);
          var_s = opresult2300;
          setLineNumber(1022);    // compilenode num
          var sum2302 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2303 = selfRequest(this, "value", [0]);
          var call2301 = request(call2303, "pretty(1)", [1], sum2302);
          var opresult2304 = request(var_s, "++(1)", [1], call2301);
          var_s = opresult2304;
          setLineNumber(1023);    // compilenode string
          var string2305 = new GraceString("\n");
          var opresult2306 = request(var_s, "++(1)", [1], string2305);
          var_s = opresult2306;
          var if2307 = GraceDone;
          setLineNumber(1024);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2308 = selfRequest(this, "comments", [0]);
          var opresult2309 = request(GraceFalse, "\u2260(1)", [1], call2308);
          if (Grace_isTrue(opresult2309)) {
            setLineNumber(1025);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum2311 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2312 = selfRequest(this, "comments", [0]);
            var call2310 = request(call2312, "pretty(1)", [1], sum2311);
            var opresult2313 = request(var_s, "++(1)", [1], call2310);
            var_s = opresult2313;
            if2307 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func2268;
        func2268.methodName = "pretty(1)";
        func2268.paramCounts = [1];
        func2268.paramNames = ["depth"];
        func2268.definitionLine = 1014;
        func2268.definitionModule = "ast";
        var func2314 = function(argcv, var_depth) {    // method toGrace(_), line 1029
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(1030);    // compilenode string
          var string2315 = new GraceString("    ");
          var prod2316 = request(string2315, "*(1)", [1], var_depth);
          var var_spc = prod2316;
          setLineNumber(1031);    // compilenode string
          var string2317 = new GraceString("");
          var var_s = string2317;
          setLineNumber(1032);    // compilenode string
          var string2318 = new GraceString("type ");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2319 = selfRequest(this, "name", [0]);
          var opresult2320 = request(string2318, "++(1)", [1], call2319);
          var string2321 = new GraceString("");
          var opresult2322 = request(opresult2320, "++(1)", [1], string2321);
          var_s = opresult2322;
          var if2323 = GraceDone;
          setLineNumber(1033);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2324 = selfRequest(this, "typeParams", [0]);
          var opresult2325 = request(GraceFalse, "\u2260(1)", [1], call2324);
          if (Grace_isTrue(opresult2325)) {
            setLineNumber(1034);    // compilenode num
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2327 = selfRequest(this, "typeParams", [0]);
            var call2326 = request(call2327, "toGrace(1)", [1], new GraceNum(0));
            if2323 = call2326;
          }
          setLineNumber(1036);    // compilenode string
          var string2328 = new GraceString(" = ");
          var opresult2329 = request(var_s, "++(1)", [1], string2328);
          var sum2331 = request(var_depth, "+(1)", [1], new GraceNum(2));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2332 = selfRequest(this, "value", [0]);
          var call2330 = request(call2332, "toGrace(1)", [1], sum2331);
          var opresult2333 = request(opresult2329, "++(1)", [1], call2330);
          return opresult2333;
        };    // end of method toGrace(_)
        func2314.paramTypes = [];
        func2314.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func2314;
        func2314.methodName = "toGrace(1)";
        func2314.paramCounts = [1];
        func2314.paramNames = ["depth"];
        func2314.definitionLine = 1029;
        func2314.definitionModule = "ast";
        var func2334 = function(argcv) {    // method shallowCopy, line 1038
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(1039);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2337 = selfRequest(this, "name", [0]);
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          // call case 6: other requests
          if (var_typeDecNode === undefined) raiseUninitializedVariable("typeDecNode");
          var call2336 = request(var_typeDecNode, "new(2)", [2], call2337, var_nullNode);
          var call2335 = request(call2336, "shallowCopyFieldsFrom(1)", [1], this);
          return call2335;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func2334;
        func2334.methodName = "shallowCopy";
        func2334.paramCounts = [0];
        func2334.paramNames = [];
        func2334.definitionLine = 1038;
        func2334.definitionModule = "ast";
        var func2338 = function(argcv, var_other) {    // method postCopy(_), line 1041
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(1042);    // compilenode member
          // call case 6: other requests
          var call2340 = request(var_other, "parentKind", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2339 = selfRequest(this, "parentKind:=(1)", [1], call2340);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func2338;
        func2338.methodName = "postCopy(1)";
        func2338.paramCounts = [1];
        func2338.paramNames = ["other"];
        func2338.definitionLine = 1041;
        func2338.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 965;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj2193_init = function() {    // init of object on line 965
          initFun2194.call(this);
          setLineNumber(967);    // compilenode string
          var string2341 = new GraceString("typedec");
          this.data.kind = string2341;
          this.data.name = var_name__39__;
          this.data.value = var_typeValue;
          setLineNumber(970);    // compilenode string
          var string2342 = new GraceString("unset");
          this.data.parentKind = string2342;
          setLineNumber(971);    // compilenode array
          var array2344 = new GraceSequence([]);
          // call case 2: outer request
          var call2343 = selfRequest(var_prelude, "list(1)", [1], array2344);
          this.data.annotations = call2343;
          this.data.typeParams = GraceFalse;
        };
        return obj2193_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj2193_init = obj2193_build.call(inheritingObject, null, var_name__39__, var_typeValue, this, aliases, exclusions);
      return obj2193_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func2192;
    func2192.methodName = "new(2)$build(3)";
    func2192.paramCounts = [2];
    func2192.paramNames = ["name'", "typeValue"];
    func2192.definitionLine = 965;
    func2192.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 964;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj2190_init = function() {    // init of object on line 964
    };
    return obj2190_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj2190 = emptyGraceObject("typeDecNode", "ast", 964);
  var obj2190_init = obj2190_build.call(obj2190, null, this, [], []);
  obj2190_init.call(obj2190);  // end of compileobject
  var var_typeDecNode = obj2190;
  var reader2345_typeDecNode = function() {  // reader method typeDecNode
      if (var_typeDecNode === undefined) raiseUninitializedVariable("typeDecNode");
      return var_typeDecNode;
  };
  reader2345_typeDecNode.isDef = true;
  this.methods["typeDecNode"] = reader2345_typeDecNode;
  setLineNumber(1048);    // compilenode object
  var obj2346_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_1048");
    this.outer_ast_1048 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func2347 = function(argcv, var_signature, var_body, var_dtype, var_s) {    // method new(_,_,_)scope(_), line 1049
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 4) && (numArgs !== 4)) {
          raiseTypeArgError("new(_,_,_)scope(_)", 0, numArgs - 4);
      }
      setLineNumber(1050);    // compilenode call
      // call case 4: self request with 3 args and 0 typeArgs 
      var call2348 = selfRequest(this, "new(3)", [3], var_signature, var_body, var_dtype);
      var var_result = call2348;
      setLineNumber(1051);    // compilenode call
      // call case 6: other requests
      var call2349 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_,_,_)scope(_)
    this.methods["new(3)scope(1)"] = func2347;
    func2347.methodName = "new(3)scope(1)";
    func2347.paramCounts = [3, 1];
    func2347.paramNames = ["signature", "body", "dtype", "s"];
    func2347.definitionLine = 1049;
    func2347.definitionModule = "ast";
    var func2350 = function(argcv, var_signature__39__, var_body__39__, var_dtype__39__) {    // method new(_,_,_), line 1055
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("methodNode.new(_,_,_)", "ast", 1055);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_signature__39__, var_body__39__, var_dtype__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func2350;
    func2350.methodName = "new(3)";
    func2350.paramCounts = [3];
    func2350.paramNames = ["signature'", "body'", "dtype'"];
    func2350.definitionLine = 1055;
    func2350.definitionModule = "ast";
    var func2351 = function(argcv, var_signature__39__, var_body__39__, var_dtype__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 1055
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj2352_build = function(ignore, var_signature__39__, var_body__39__, var_dtype__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_1055");
        this.outer_ast_1055 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(1062);    // reuse call
        var initFun2353 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader2354_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader2354_kind.isDef = true;
        this.methods["kind"] = reader2354_kind;
        this.data.description = undefined;
        var reader2355_description = function() {  // reader method description
            if (this.data.description === undefined) raiseUninitializedVariable("description");
            return this.data.description;
        };
        reader2355_description.isVar = true;
        this.methods["description"] = reader2355_description;
        var writer2356_description = function(argcv, n) {   // writer method description:=(_)
          this.data.description = n;
          return GraceDone;
        };
        this.methods["description:=(1)"] = writer2356_description;
        this.data.signature = undefined;
        var reader2357_signature = function() {  // reader method signature
            if (this.data.signature === undefined) raiseUninitializedVariable("signature");
            return this.data.signature;
        };
        reader2357_signature.isVar = true;
        this.methods["signature"] = reader2357_signature;
        var writer2358_signature = function(argcv, n) {   // writer method signature:=(_)
          this.data.signature = n;
          return GraceDone;
        };
        this.methods["signature:=(1)"] = writer2358_signature;
        this.data.hasBody = undefined;
        var reader2359_hasBody = function() {  // reader method hasBody
            if (this.data.hasBody === undefined) raiseUninitializedVariable("hasBody");
            return this.data.hasBody;
        };
        reader2359_hasBody.isVar = true;
        this.methods["hasBody"] = reader2359_hasBody;
        var writer2360_hasBody = function(argcv, n) {   // writer method hasBody:=(_)
          this.data.hasBody = n;
          return GraceDone;
        };
        this.methods["hasBody:=(1)"] = writer2360_hasBody;
        this.data.body = undefined;
        var reader2361_body = function() {  // reader method body
            if (this.data.body === undefined) raiseUninitializedVariable("body");
            return this.data.body;
        };
        reader2361_body.isVar = true;
        this.methods["body"] = reader2361_body;
        var writer2362_body = function(argcv, n) {   // writer method body:=(_)
          this.data.body = n;
          return GraceDone;
        };
        this.methods["body:=(1)"] = writer2362_body;
        this.data.dtype = undefined;
        var reader2363_dtype = function() {  // reader method dtype
            if (this.data.dtype === undefined) raiseUninitializedVariable("dtype");
            return this.data.dtype;
        };
        reader2363_dtype.isVar = true;
        this.methods["dtype"] = reader2363_dtype;
        var writer2364_dtype = function(argcv, n) {   // writer method dtype:=(_)
          this.data.dtype = n;
          return GraceDone;
        };
        this.methods["dtype:=(1)"] = writer2364_dtype;
        this.data.selfclosure = undefined;
        var reader2365_selfclosure = function() {  // reader method selfclosure
            if (this.data.selfclosure === undefined) raiseUninitializedVariable("selfclosure");
            return this.data.selfclosure;
        };
        reader2365_selfclosure.isVar = true;
        this.methods["selfclosure"] = reader2365_selfclosure;
        var writer2366_selfclosure = function(argcv, n) {   // writer method selfclosure:=(_)
          this.data.selfclosure = n;
          return GraceDone;
        };
        this.methods["selfclosure:=(1)"] = writer2366_selfclosure;
        this.data.annotations = undefined;
        var reader2367_annotations = function() {  // reader method annotations
            if (this.data.annotations === undefined) raiseUninitializedVariable("annotations");
            return this.data.annotations;
        };
        reader2367_annotations.isVar = true;
        this.methods["annotations"] = reader2367_annotations;
        var writer2368_annotations = function(argcv, n) {   // writer method annotations:=(_)
          this.data.annotations = n;
          return GraceDone;
        };
        this.methods["annotations:=(1)"] = writer2368_annotations;
        this.data.isFresh = undefined;
        var reader2369_isFresh = function() {  // reader method isFresh
            if (this.data.isFresh === undefined) raiseUninitializedVariable("isFresh");
            return this.data.isFresh;
        };
        reader2369_isFresh.isVar = true;
        this.methods["isFresh"] = reader2369_isFresh;
        var writer2370_isFresh = function(argcv, n) {   // writer method isFresh:=(_)
          this.data.isFresh = n;
          return GraceDone;
        };
        this.methods["isFresh:=(1)"] = writer2370_isFresh;
        this.data.isOnceMethod = undefined;
        var reader2371_isOnceMethod = function() {  // reader method isOnceMethod
            if (this.data.isOnceMethod === undefined) raiseUninitializedVariable("isOnceMethod");
            return this.data.isOnceMethod;
        };
        reader2371_isOnceMethod.isVar = true;
        this.methods["isOnceMethod"] = reader2371_isOnceMethod;
        var writer2372_isOnceMethod = function(argcv, n) {   // writer method isOnceMethod:=(_)
          this.data.isOnceMethod = n;
          return GraceDone;
        };
        this.methods["isOnceMethod:=(1)"] = writer2372_isOnceMethod;
        var func2373 = function(argcv) {    // method usesClassSyntax, line 1077
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("usesClassSyntax", 0, numArgs - 0);
          }
          setLineNumber(1077);    // compilenode string
          var string2374 = new GraceString("class");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2375 = selfRequest(this, "description", [0]);
          var opresult2376 = request(string2374, "==(1)", [1], call2375);
          return opresult2376;
        };    // end of method usesClassSyntax
        this.methods["usesClassSyntax"] = func2373;
        func2373.methodName = "usesClassSyntax";
        func2373.paramCounts = [0];
        func2373.paramNames = [];
        func2373.definitionLine = 1077;
        func2373.definitionModule = "ast";
        var func2377 = function(argcv) {    // method usesTraitSyntax, line 1078
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("usesTraitSyntax", 0, numArgs - 0);
          }
          setLineNumber(1078);    // compilenode string
          var string2378 = new GraceString("trait");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2379 = selfRequest(this, "description", [0]);
          var opresult2380 = request(string2378, "==(1)", [1], call2379);
          return opresult2380;
        };    // end of method usesTraitSyntax
        this.methods["usesTraitSyntax"] = func2377;
        func2377.methodName = "usesTraitSyntax";
        func2377.paramCounts = [0];
        func2377.paramNames = [];
        func2377.definitionLine = 1078;
        func2377.definitionModule = "ast";
        this.data.cachedIdentifier = undefined;
        var reader2381_cachedIdentifier = function() {  // reader method cachedIdentifier
            if (this.data.cachedIdentifier === undefined) raiseUninitializedVariable("cachedIdentifier");
            return this.data.cachedIdentifier;
        };
        reader2381_cachedIdentifier.isVar = true;
        reader2381_cachedIdentifier.confidential = true;
        this.methods["cachedIdentifier"] = reader2381_cachedIdentifier;
        var writer2382_cachedIdentifier = function(argcv, n) {   // writer method cachedIdentifier:=(_)
          this.data.cachedIdentifier = n;
          return GraceDone;
        };
        writer2382_cachedIdentifier.confidential = true;
        this.methods["cachedIdentifier:=(1)"] = writer2382_cachedIdentifier;
        this.data.isBindingOccurrence = undefined;
        var reader2383_isBindingOccurrence = function() {  // reader method isBindingOccurrence
            if (this.data.isBindingOccurrence === undefined) raiseUninitializedVariable("isBindingOccurrence");
            return this.data.isBindingOccurrence;
        };
        reader2383_isBindingOccurrence.isVar = true;
        this.methods["isBindingOccurrence"] = reader2383_isBindingOccurrence;
        var writer2384_isBindingOccurrence = function(argcv, n) {   // writer method isBindingOccurrence:=(_)
          this.data.isBindingOccurrence = n;
          return GraceDone;
        };
        writer2384_isBindingOccurrence.confidential = true;
        this.methods["isBindingOccurrence:=(1)"] = writer2384_isBindingOccurrence;
        var func2385 = function(argcv) {    // method isAppliedOccurrence, line 1083
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isAppliedOccurrence", 0, numArgs - 0);
          }
          setLineNumber(1083);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2387 = selfRequest(this, "isBindingOccurrence", [0]);
          var call2386 = request(call2387, "not", [0]);
          return call2386;
        };    // end of method isAppliedOccurrence
        this.methods["isAppliedOccurrence"] = func2385;
        func2385.methodName = "isAppliedOccurrence";
        func2385.paramCounts = [0];
        func2385.paramNames = [];
        func2385.definitionLine = 1083;
        func2385.definitionModule = "ast";
        var func2388 = function(argcv) {    // method end, line 1085
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if2389 = GraceDone;
          setLineNumber(1086);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2392 = selfRequest(this, "body", [0]);
          var call2391 = request(call2392, "isEmpty", [0]);
          var call2390 = request(call2391, "not", [0]);
          if (Grace_isTrue(call2390)) {
            var if2393 = GraceDone;
            setLineNumber(1087);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2394 = selfRequest(this, "usesClassSyntax", [0]);
            if (Grace_isTrue(call2394)) {
              // call case 6: other requests
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call2397 = selfRequest(this, "body", [0]);
              var call2396 = request(call2397, "last", [0]);
              var call2395 = request(call2396, "end", [0]);
              return call2395;
            }
            setLineNumber(1088);    // compilenode string
            var string2399 = new GraceString("}");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2402 = selfRequest(this, "body", [0]);
            var call2401 = request(call2402, "last", [0]);
            var call2400 = request(call2401, "end", [0]);
            // call case 2: outer request
            var call2398 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string2399, call2400);
            return call2398;
          }
          var if2403 = GraceDone;
          setLineNumber(1090);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2404 = selfRequest(this, "dtype", [0]);
          var opresult2405 = request(GraceFalse, "\u2260(1)", [1], call2404);
          if (Grace_isTrue(opresult2405)) {
            setLineNumber(1091);    // compilenode string
            var string2407 = new GraceString("}");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2409 = selfRequest(this, "dtype", [0]);
            var call2408 = request(call2409, "end", [0]);
            // call case 2: outer request
            var call2406 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string2407, call2408);
            return call2406;
          }
          setLineNumber(1093);    // compilenode string
          var string2411 = new GraceString("}");
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2414 = selfRequest(this, "signature", [0]);
          var call2413 = request(call2414, "last", [0]);
          var call2412 = request(call2413, "end", [0]);
          // call case 2: outer request
          var call2410 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string2411, call2412);
          return call2410;
        };    // end of method end
        this.methods["end"] = func2388;
        func2388.methodName = "end";
        func2388.paramCounts = [0];
        func2388.paramNames = [];
        func2388.definitionLine = 1085;
        func2388.definitionModule = "ast";
        var func2415 = function(argcv) {    // method ilkName, line 1095
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("ilkName", 0, numArgs - 0);
          }
          var if2416 = GraceDone;
          setLineNumber(1097);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2417 = selfRequest(this, "isFresh", [0]);
          var block2418 = new GraceBlock(this, 1097, 0);
          block2418.guard = jsTrue;
          block2418.real = function block2418() {
            setLineNumber(1097);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2421 = selfRequest(this, "body", [0]);
            var call2420 = request(call2421, "last", [0]);
            var call2419 = request(call2420, "isObject", [0]);
            return call2419;
          };
          let applyMeth2418 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth2418.methodName = "apply";
          applyMeth2418.paramCounts = [0];
          applyMeth2418.paramNames = [];
          applyMeth2418.definitionLine = 1097;
          applyMeth2418.definitionModule = "ast";
          block2418.methods["apply"] = applyMeth2418;
          var opresult2422 = request(call2417, "&&(1)", [1], block2418);
          if (Grace_isTrue(opresult2422)) {
            setLineNumber(1098);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2425 = selfRequest(this, "body", [0]);
            var call2424 = request(call2425, "last", [0]);
            var call2423 = request(call2424, "name", [0]);
            if2416 = call2423;
          } else {
            setLineNumber(1100);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2426 = selfRequest(this, "canonicalName", [0]);
            if2416 = call2426;
          }
          return if2416;
        };    // end of method ilkName
        this.methods["ilkName"] = func2415;
        func2415.methodName = "ilkName";
        func2415.paramCounts = [0];
        func2415.paramNames = [];
        func2415.definitionLine = 1095;
        func2415.definitionModule = "ast";
        var func2427 = function(argcv) {    // method appliedOccurrence, line 1103
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("appliedOccurrence", 0, numArgs - 0);
          }
          setLineNumber(1104);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2428 = selfRequest(this, "isBindingOccurrence:=(1)", [1], GraceFalse);
          var if2429 = GraceDone;
          setLineNumber(1105);    // compilenode op
          if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2430 = selfRequest(this, "cachedIdentifier", [0]);
          var opresult2431 = request(var_uninitialized, "\u2260(1)", [1], call2430);
          if (Grace_isTrue(opresult2431)) {
            setLineNumber(1106);    // compilenode call
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2433 = selfRequest(this, "cachedIdentifier", [0]);
            var call2432 = selfRequest(call2433, "isBindingOccurrence:=(1)", [1], GraceFalse);
            if2429 = call2432;
          }
          return this;
        };    // end of method appliedOccurrence
        this.methods["appliedOccurrence"] = func2427;
        func2427.methodName = "appliedOccurrence";
        func2427.paramCounts = [0];
        func2427.paramNames = [];
        func2427.definitionLine = 1103;
        func2427.definitionModule = "ast";
        var func2434 = function(argcv) {    // method numParams, line 1110
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numParams", 0, numArgs - 0);
          }
          setLineNumber(1111);    // compilenode block
          var block2436 = new GraceBlock(this, 1111, 2);
          block2436.guard = jsTrue;
          block2436.real = function block2436(var_acc, var_p) {
            setLineNumber(1111);    // compilenode member
            // call case 6: other requests
            var call2437 = request(var_p, "numParams", [0]);
            var sum2438 = request(var_acc, "+(1)", [1], call2437);
            return sum2438;
          };
          let applyMeth2436 = function apply_2 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2436.methodName = "apply(2)";
          applyMeth2436.paramCounts = [2];
          applyMeth2436.paramNames = ["acc", "p"];
          applyMeth2436.definitionLine = 1111;
          applyMeth2436.definitionModule = "ast";
          block2436.methods["apply(2)"] = applyMeth2436;
          let matchesMeth2436 = function matches_2 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2436.methodName = "matches(2)";
          matchesMeth2436.paramCounts = [2];
          matchesMeth2436.paramNames = ["acc", "p"];
          matchesMeth2436.definitionLine = 1111;
          matchesMeth2436.definitionModule = "ast";
          block2436.methods["matches(2)"] = matchesMeth2436;
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2439 = selfRequest(this, "signature", [0]);
          var call2435 = request(call2439, "fold(1)startingWith(1)", [1, 1], block2436, new GraceNum(0));
          return call2435;
        };    // end of method numParams
        this.methods["numParams"] = func2434;
        func2434.methodName = "numParams";
        func2434.paramCounts = [0];
        func2434.paramNames = [];
        func2434.definitionLine = 1110;
        func2434.definitionModule = "ast";
        var func2440 = function(argcv, var_b) {    // method parametersDo(_), line 1113
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("parametersDo(_)", 0, numArgs - 1);
          }
          setLineNumber(1114);    // compilenode block
          var block2442 = new GraceBlock(this, 1114, 1);
          block2442.guard = jsTrue;
          block2442.real = function block2442(var_part) {
            setLineNumber(1115);    // compilenode block
            var block2444 = new GraceBlock(this, 1115, 1);
            block2444.guard = jsTrue;
            block2444.real = function block2444(var_each) {
              setLineNumber(1115);    // compilenode call
              // call case 6: other requests
              var call2445 = request(var_b, "apply(1)", [1], var_each);
              return call2445;
            };
            let applyMeth2444 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2444.methodName = "apply(1)";
            applyMeth2444.paramCounts = [1];
            applyMeth2444.paramNames = ["each"];
            applyMeth2444.definitionLine = 1115;
            applyMeth2444.definitionModule = "ast";
            block2444.methods["apply(1)"] = applyMeth2444;
            let matchesMeth2444 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2444.methodName = "matches(1)";
            matchesMeth2444.paramCounts = [1];
            matchesMeth2444.paramNames = ["each"];
            matchesMeth2444.definitionLine = 1115;
            matchesMeth2444.definitionModule = "ast";
            block2444.methods["matches(1)"] = matchesMeth2444;
            // call case 6: other requests
            // call case 6: other requests
            var call2446 = request(var_part, "params", [0]);
            var call2443 = request(call2446, "do(1)", [1], block2444);
            return call2443;
          };
          let applyMeth2442 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2442.methodName = "apply(1)";
          applyMeth2442.paramCounts = [1];
          applyMeth2442.paramNames = ["part"];
          applyMeth2442.definitionLine = 1114;
          applyMeth2442.definitionModule = "ast";
          block2442.methods["apply(1)"] = applyMeth2442;
          let matchesMeth2442 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2442.methodName = "matches(1)";
          matchesMeth2442.paramCounts = [1];
          matchesMeth2442.paramNames = ["part"];
          matchesMeth2442.definitionLine = 1114;
          matchesMeth2442.definitionModule = "ast";
          block2442.methods["matches(1)"] = matchesMeth2442;
          // call case 6: other requests
          setLineNumber(1114);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2447 = selfRequest(this, "signature", [0]);
          var call2441 = request(call2447, "do(1)", [1], block2442);
          return call2441;
        };    // end of method parametersDo(_)
        this.methods["parametersDo(1)"] = func2440;
        func2440.methodName = "parametersDo(1)";
        func2440.paramCounts = [1];
        func2440.paramNames = ["b"];
        func2440.definitionLine = 1113;
        func2440.definitionModule = "ast";
        var func2448 = function(argcv) {    // method parameterCounts, line 1118
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("parameterCounts", 0, numArgs - 0);
          }
          setLineNumber(1119);    // compilenode array
          var array2450 = new GraceSequence([]);
          // call case 2: outer request
          var call2449 = selfRequest(var_prelude, "list(1)", [1], array2450);
          var var_result = call2449;
          setLineNumber(1120);    // compilenode block
          var block2452 = new GraceBlock(this, 1120, 1);
          block2452.guard = jsTrue;
          block2452.real = function block2452(var_part) {
            setLineNumber(1121);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            var call2455 = request(var_part, "params", [0]);
            var call2454 = request(call2455, "size", [0]);
            // call case 6: other requests
            if (var_result === undefined) raiseUninitializedVariable("result");
            var call2453 = request(var_result, "push(1)", [1], call2454);
            return call2453;
          };
          let applyMeth2452 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2452.methodName = "apply(1)";
          applyMeth2452.paramCounts = [1];
          applyMeth2452.paramNames = ["part"];
          applyMeth2452.definitionLine = 1120;
          applyMeth2452.definitionModule = "ast";
          block2452.methods["apply(1)"] = applyMeth2452;
          let matchesMeth2452 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2452.methodName = "matches(1)";
          matchesMeth2452.paramCounts = [1];
          matchesMeth2452.paramNames = ["part"];
          matchesMeth2452.definitionLine = 1120;
          matchesMeth2452.definitionModule = "ast";
          block2452.methods["matches(1)"] = matchesMeth2452;
          // call case 6: other requests
          setLineNumber(1120);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2456 = selfRequest(this, "signature", [0]);
          var call2451 = request(call2456, "do(1)", [1], block2452);
          return var_result;
        };    // end of method parameterCounts
        this.methods["parameterCounts"] = func2448;
        func2448.methodName = "parameterCounts";
        func2448.paramCounts = [0];
        func2448.paramNames = [];
        func2448.definitionLine = 1118;
        func2448.definitionModule = "ast";
        var func2457 = function(argcv) {    // method parameterNames, line 1125
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("parameterNames", 0, numArgs - 0);
          }
          setLineNumber(1126);    // compilenode array
          var array2459 = new GraceSequence([]);
          // call case 2: outer request
          var call2458 = selfRequest(var_prelude, "list(1)", [1], array2459);
          var var_result = call2458;
          setLineNumber(1127);    // compilenode block
          var block2461 = new GraceBlock(this, 1127, 1);
          block2461.guard = jsTrue;
          block2461.real = function block2461(var_part) {
            setLineNumber(1128);    // compilenode block
            var block2463 = new GraceBlock(this, 1128, 1);
            block2463.guard = jsTrue;
            block2463.real = function block2463(var_param) {
              setLineNumber(1129);    // compilenode member
              // call case 6: other requests
              var call2465 = request(var_param, "nameString", [0]);
              // call case 6: other requests
              if (var_result === undefined) raiseUninitializedVariable("result");
              var call2464 = request(var_result, "push(1)", [1], call2465);
              return call2464;
            };
            let applyMeth2463 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2463.methodName = "apply(1)";
            applyMeth2463.paramCounts = [1];
            applyMeth2463.paramNames = ["param"];
            applyMeth2463.definitionLine = 1128;
            applyMeth2463.definitionModule = "ast";
            block2463.methods["apply(1)"] = applyMeth2463;
            let matchesMeth2463 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2463.methodName = "matches(1)";
            matchesMeth2463.paramCounts = [1];
            matchesMeth2463.paramNames = ["param"];
            matchesMeth2463.definitionLine = 1128;
            matchesMeth2463.definitionModule = "ast";
            block2463.methods["matches(1)"] = matchesMeth2463;
            // call case 6: other requests
            setLineNumber(1128);    // compilenode member
            // call case 6: other requests
            var call2466 = request(var_part, "params", [0]);
            var call2462 = request(call2466, "do(1)", [1], block2463);
            return call2462;
          };
          let applyMeth2461 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2461.methodName = "apply(1)";
          applyMeth2461.paramCounts = [1];
          applyMeth2461.paramNames = ["part"];
          applyMeth2461.definitionLine = 1127;
          applyMeth2461.definitionModule = "ast";
          block2461.methods["apply(1)"] = applyMeth2461;
          let matchesMeth2461 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2461.methodName = "matches(1)";
          matchesMeth2461.paramCounts = [1];
          matchesMeth2461.paramNames = ["part"];
          matchesMeth2461.definitionLine = 1127;
          matchesMeth2461.definitionModule = "ast";
          block2461.methods["matches(1)"] = matchesMeth2461;
          // call case 6: other requests
          setLineNumber(1127);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2467 = selfRequest(this, "signature", [0]);
          var call2460 = request(call2467, "do(1)", [1], block2461);
          return var_result;
        };    // end of method parameterNames
        this.methods["parameterNames"] = func2457;
        func2457.methodName = "parameterNames";
        func2457.paramCounts = [0];
        func2457.paramNames = [];
        func2457.definitionLine = 1125;
        func2457.definitionModule = "ast";
        var func2468 = function(argcv) {    // method typeParameterNames, line 1134
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("typeParameterNames", 0, numArgs - 0);
          }
          var if2469 = GraceDone;
          setLineNumber(1135);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2471 = selfRequest(this, "hasTypeParams", [0]);
          var call2470 = request(call2471, "not", [0]);
          if (Grace_isTrue(call2470)) {
            var array2473 = new GraceSequence([]);
            // call case 2: outer request
            var call2472 = selfRequest(var_prelude, "list(1)", [1], array2473);
            return call2472;
          }
          setLineNumber(1136);    // compilenode array
          var array2475 = new GraceSequence([]);
          // call case 2: outer request
          var call2474 = selfRequest(var_prelude, "list(1)", [1], array2475);
          var var_result = call2474;
          setLineNumber(1137);    // compilenode block
          var block2477 = new GraceBlock(this, 1137, 1);
          block2477.guard = jsTrue;
          block2477.real = function block2477(var_each) {
            setLineNumber(1138);    // compilenode member
            // call case 6: other requests
            var call2479 = request(var_each, "nameString", [0]);
            // call case 6: other requests
            if (var_result === undefined) raiseUninitializedVariable("result");
            var call2478 = request(var_result, "push(1)", [1], call2479);
            return call2478;
          };
          let applyMeth2477 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2477.methodName = "apply(1)";
          applyMeth2477.paramCounts = [1];
          applyMeth2477.paramNames = ["each"];
          applyMeth2477.definitionLine = 1137;
          applyMeth2477.definitionModule = "ast";
          block2477.methods["apply(1)"] = applyMeth2477;
          let matchesMeth2477 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2477.methodName = "matches(1)";
          matchesMeth2477.paramCounts = [1];
          matchesMeth2477.paramNames = ["each"];
          matchesMeth2477.definitionLine = 1137;
          matchesMeth2477.definitionModule = "ast";
          block2477.methods["matches(1)"] = matchesMeth2477;
          // call case 6: other requests
          setLineNumber(1137);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2482 = selfRequest(this, "signature", [0]);
          var call2481 = request(call2482, "first", [0]);
          var call2480 = request(call2481, "typeParams", [0]);
          var call2476 = request(call2480, "do(1)", [1], block2477);
          return var_result;
        };    // end of method typeParameterNames
        this.methods["typeParameterNames"] = func2468;
        func2468.methodName = "typeParameterNames";
        func2468.paramCounts = [0];
        func2468.paramNames = [];
        func2468.definitionLine = 1134;
        func2468.definitionModule = "ast";
        var func2483 = function(argcv) {    // method numTypeParams, line 1142
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeParams", 0, numArgs - 0);
          }
          setLineNumber(1142);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2486 = selfRequest(this, "signature", [0]);
          var call2485 = request(call2486, "first", [0]);
          var call2484 = request(call2485, "numTypeParams", [0]);
          return call2484;
        };    // end of method numTypeParams
        this.methods["numTypeParams"] = func2483;
        func2483.methodName = "numTypeParams";
        func2483.paramCounts = [0];
        func2483.paramNames = [];
        func2483.definitionLine = 1142;
        func2483.definitionModule = "ast";
        var func2487 = function(argcv) {    // method endPos, line 1143
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("endPos", 0, numArgs - 0);
          }
          setLineNumber(1144);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2489 = selfRequest(this, "signature", [0]);
          var call2488 = request(call2489, "last", [0]);
          var var_lastPart = call2488;
          setLineNumber(1145);    // compilenode member
          // call case 6: other requests
          var call2490 = request(var_lastPart, "linePos", [0]);
          // call case 6: other requests
          // call case 6: other requests
          var call2492 = request(var_lastPart, "name", [0]);
          var call2491 = request(call2492, "size", [0]);
          var sum2493 = request(call2490, "+(1)", [1], call2491);
          var diff2494 = request(sum2493, "-(1)", [1], new GraceNum(1));
          return diff2494;
        };    // end of method endPos
        this.methods["endPos"] = func2487;
        func2487.methodName = "endPos";
        func2487.paramCounts = [0];
        func2487.paramNames = [];
        func2487.definitionLine = 1143;
        func2487.definitionModule = "ast";
        var func2495 = function(argcv) {    // method headerRange, line 1147
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("headerRange", 0, numArgs - 0);
          }
          setLineNumber(1148);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2497 = selfRequest(this, "start", [0]);
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2500 = selfRequest(this, "signature", [0]);
          var call2499 = request(call2500, "last", [0]);
          var call2498 = request(call2499, "end", [0]);
          // call case 2: outer request
          var call2496 = selfRequest(importedModules["ast"], "start(1)end(1)", [1, 1], call2497, call2498);
          return call2496;
        };    // end of method headerRange
        this.methods["headerRange"] = func2495;
        func2495.methodName = "headerRange";
        func2495.paramCounts = [0];
        func2495.paramNames = [];
        func2495.definitionLine = 1147;
        func2495.definitionModule = "ast";
        var func2501 = function(argcv) {    // method nameString, line 1151
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(1152);    // compilenode block
          var block2503 = new GraceBlock(this, 1152, 2);
          block2503.guard = jsTrue;
          block2503.real = function block2503(var_acc, var_each) {
            setLineNumber(1152);    // compilenode member
            // call case 6: other requests
            var call2504 = request(var_each, "nameString", [0]);
            var opresult2505 = request(var_acc, "++(1)", [1], call2504);
            return opresult2505;
          };
          let applyMeth2503 = function apply_2 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2503.methodName = "apply(2)";
          applyMeth2503.paramCounts = [2];
          applyMeth2503.paramNames = ["acc", "each"];
          applyMeth2503.definitionLine = 1152;
          applyMeth2503.definitionModule = "ast";
          block2503.methods["apply(2)"] = applyMeth2503;
          let matchesMeth2503 = function matches_2 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2503.methodName = "matches(2)";
          matchesMeth2503.paramCounts = [2];
          matchesMeth2503.paramNames = ["acc", "each"];
          matchesMeth2503.definitionLine = 1152;
          matchesMeth2503.definitionModule = "ast";
          block2503.methods["matches(2)"] = matchesMeth2503;
          setLineNumber(1153);    // compilenode string
          var string2506 = new GraceString("");
          // call case 6: other requests
          setLineNumber(1152);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2507 = selfRequest(this, "signature", [0]);
          var call2502 = request(call2507, "fold(1)startingWith(1)", [1, 1], block2503, string2506);
          return call2502;
        };    // end of method nameString
        this.methods["nameString"] = func2501;
        func2501.methodName = "nameString";
        func2501.paramCounts = [0];
        func2501.paramNames = [];
        func2501.definitionLine = 1151;
        func2501.definitionModule = "ast";
        var func2508 = function(argcv) {    // method asIdentifier, line 1155
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asIdentifier", 0, numArgs - 0);
          }
          var if2509 = GraceDone;
          setLineNumber(1156);    // compilenode op
          if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2510 = selfRequest(this, "cachedIdentifier", [0]);
          var opresult2511 = request(var_uninitialized, "==(1)", [1], call2510);
          if (Grace_isTrue(opresult2511)) {
            setLineNumber(1157);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2514 = selfRequest(this, "nameString", [0]);
            // call case 6: other requests
            if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
            var call2513 = request(var_identifierNode, "new(2)", [2], call2514, GraceFalse);
            // call case 4: self request with 1 args and 0 typeArgs 
            var call2512 = selfRequest(this, "cachedIdentifier:=(1)", [1], call2513);
            setLineNumber(1158);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2518 = selfRequest(this, "signature", [0]);
            var call2517 = request(call2518, "first", [0]);
            var call2516 = request(call2517, "line", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2519 = selfRequest(this, "cachedIdentifier", [0]);
            var call2515 = selfRequest(call2519, "line:=(1)", [1], call2516);
            setLineNumber(1159);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2523 = selfRequest(this, "signature", [0]);
            var call2522 = request(call2523, "first", [0]);
            var call2521 = request(call2522, "linePos", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2524 = selfRequest(this, "cachedIdentifier", [0]);
            var call2520 = selfRequest(call2524, "linePos:=(1)", [1], call2521);
            setLineNumber(1160);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2526 = selfRequest(this, "isBindingOccurrence", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2527 = selfRequest(this, "cachedIdentifier", [0]);
            var call2525 = selfRequest(call2527, "isBindingOccurrence:=(1)", [1], call2526);
            setLineNumber(1161);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2531 = selfRequest(this, "signature", [0]);
            var call2530 = request(call2531, "last", [0]);
            var call2529 = request(call2530, "end", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2532 = selfRequest(this, "cachedIdentifier", [0]);
            var call2528 = selfRequest(call2532, "end:=(1)", [1], call2529);
            setLineNumber(1162);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2534 = selfRequest(this, "canonicalName", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2535 = selfRequest(this, "cachedIdentifier", [0]);
            var call2533 = selfRequest(call2535, "canonicalName:=(1)", [1], call2534);
            if2509 = call2533;
          }
          setLineNumber(1164);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2536 = selfRequest(this, "cachedIdentifier", [0]);
          return call2536;
        };    // end of method asIdentifier
        this.methods["asIdentifier"] = func2508;
        func2508.methodName = "asIdentifier";
        func2508.paramCounts = [0];
        func2508.paramNames = [];
        func2508.definitionLine = 1155;
        func2508.definitionModule = "ast";
        var func2537 = function(argcv) {    // method value, line 1166
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("value", 0, numArgs - 0);
          }
          setLineNumber(1166);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2538 = selfRequest(this, "asIdentifier", [0]);
          return call2538;
        };    // end of method value
        this.methods["value"] = func2537;
        func2537.methodName = "value";
        func2537.paramCounts = [0];
        func2537.paramNames = [];
        func2537.definitionLine = 1166;
        func2537.definitionModule = "ast";
        var func2539 = function(argcv) {    // method canonicalName, line 1167
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          setLineNumber(1168);    // compilenode block
          var block2541 = new GraceBlock(this, 1168, 2);
          block2541.guard = jsTrue;
          block2541.real = function block2541(var_acc, var_each) {
            setLineNumber(1168);    // compilenode member
            // call case 6: other requests
            var call2542 = request(var_each, "canonicalName", [0]);
            var opresult2543 = request(var_acc, "++(1)", [1], call2542);
            return opresult2543;
          };
          let applyMeth2541 = function apply_2 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2541.methodName = "apply(2)";
          applyMeth2541.paramCounts = [2];
          applyMeth2541.paramNames = ["acc", "each"];
          applyMeth2541.definitionLine = 1168;
          applyMeth2541.definitionModule = "ast";
          block2541.methods["apply(2)"] = applyMeth2541;
          let matchesMeth2541 = function matches_2 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2541.methodName = "matches(2)";
          matchesMeth2541.paramCounts = [2];
          matchesMeth2541.paramNames = ["acc", "each"];
          matchesMeth2541.definitionLine = 1168;
          matchesMeth2541.definitionModule = "ast";
          block2541.methods["matches(2)"] = matchesMeth2541;
          setLineNumber(1169);    // compilenode string
          var string2544 = new GraceString("");
          // call case 6: other requests
          setLineNumber(1168);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2545 = selfRequest(this, "signature", [0]);
          var call2540 = request(call2545, "fold(1)startingWith(1)", [1, 1], block2541, string2544);
          return call2540;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func2539;
        func2539.methodName = "canonicalName";
        func2539.paramCounts = [0];
        func2539.paramNames = [];
        func2539.definitionLine = 1167;
        func2539.definitionModule = "ast";
        var func2546 = function(argcv) {    // method hasParams, line 1171
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("hasParams", 0, numArgs - 0);
          }
          setLineNumber(1171);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2551 = selfRequest(this, "signature", [0]);
          var call2550 = request(call2551, "first", [0]);
          var call2549 = request(call2550, "params", [0]);
          var call2548 = request(call2549, "isEmpty", [0]);
          var call2547 = request(call2548, "not", [0]);
          return call2547;
        };    // end of method hasParams
        this.methods["hasParams"] = func2546;
        func2546.methodName = "hasParams";
        func2546.paramCounts = [0];
        func2546.paramNames = [];
        func2546.definitionLine = 1171;
        func2546.definitionModule = "ast";
        var func2552 = function(argcv) {    // method numParamLists, line 1172
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numParamLists", 0, numArgs - 0);
          }
          setLineNumber(1175);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2554 = selfRequest(this, "signature", [0]);
          var call2553 = request(call2554, "size", [0]);
          var var_sigSz = call2553;
          var if2555 = GraceDone;
          setLineNumber(1176);    // compilenode num
          var opresult2556 = request(var_sigSz, ">(1)", [1], new GraceNum(1));
          if (Grace_isTrue(opresult2556)) {
            if (var_sigSz === undefined) raiseUninitializedVariable("sigSz");
            return var_sigSz;
          }
          var if2557 = GraceDone;
          setLineNumber(1177);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2561 = selfRequest(this, "signature", [0]);
          var call2560 = request(call2561, "first", [0]);
          var call2559 = request(call2560, "params", [0]);
          var call2558 = request(call2559, "isEmpty", [0]);
          if (Grace_isTrue(call2558)) {
            return new GraceNum(0);
          }
          setLineNumber(1178);    // compilenode num
          return new GraceNum(1);
        };    // end of method numParamLists
        this.methods["numParamLists"] = func2552;
        func2552.methodName = "numParamLists";
        func2552.paramCounts = [0];
        func2552.paramNames = [];
        func2552.definitionLine = 1172;
        func2552.definitionModule = "ast";
        var func2562 = function(argcv) {    // method hasTypeParams, line 1180
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("hasTypeParams", 0, numArgs - 0);
          }
          setLineNumber(1180);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2565 = selfRequest(this, "signature", [0]);
          var call2564 = request(call2565, "first", [0]);
          var call2563 = request(call2564, "typeParams", [0]);
          var opresult2566 = request(GraceFalse, "\u2260(1)", [1], call2563);
          return opresult2566;
        };    // end of method hasTypeParams
        this.methods["hasTypeParams"] = func2562;
        func2562.methodName = "hasTypeParams";
        func2562.paramCounts = [0];
        func2562.paramNames = [];
        func2562.definitionLine = 1180;
        func2562.definitionModule = "ast";
        var func2567 = function(argcv) {    // method typeParams, line 1181
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("typeParams", 0, numArgs - 0);
          }
          setLineNumber(1181);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2570 = selfRequest(this, "signature", [0]);
          var call2569 = request(call2570, "first", [0]);
          var call2568 = request(call2569, "typeParams", [0]);
          return call2568;
        };    // end of method typeParams
        this.methods["typeParams"] = func2567;
        func2567.methodName = "typeParams";
        func2567.paramCounts = [0];
        func2567.paramNames = [];
        func2567.definitionLine = 1181;
        func2567.definitionModule = "ast";
        var func2571 = function(argcv, var_tp) {    // method withTypeParams(_), line 1182
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("withTypeParams(_)", 0, numArgs - 1);
          }
          setLineNumber(1183);    // compilenode call
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2574 = selfRequest(this, "signature", [0]);
          var call2573 = request(call2574, "first", [0]);
          var call2572 = selfRequest(call2573, "typeParams:=(1)", [1], var_tp);
          return this;
        };    // end of method withTypeParams(_)
        this.methods["withTypeParams(1)"] = func2571;
        func2571.methodName = "withTypeParams(1)";
        func2571.paramCounts = [1];
        func2571.paramNames = ["tp"];
        func2571.definitionLine = 1182;
        func2571.definitionModule = "ast";
        var func2575 = function(argcv) {     // accessor method isMethod
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isMethod", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isMethod
        this.methods["isMethod"] = func2575;
        func2575.methodName = "isMethod";
        func2575.paramCounts = [0];
        func2575.paramNames = [];
        func2575.definitionLine = 1186;
        func2575.definitionModule = "ast";
        var func2576 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func2576;
        func2576.methodName = "isExecutable";
        func2576.paramCounts = [0];
        func2576.paramNames = [];
        func2576.definitionLine = 1187;
        func2576.definitionModule = "ast";
        var func2577 = function(argcv) {     // accessor method isLegalInTrait
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isLegalInTrait", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isLegalInTrait
        this.methods["isLegalInTrait"] = func2577;
        func2577.methodName = "isLegalInTrait";
        func2577.paramCounts = [0];
        func2577.paramNames = [];
        func2577.definitionLine = 1188;
        func2577.definitionModule = "ast";
        var func2578 = function(argcv) {    // method isClass, line 1189
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isClass", 0, numArgs - 0);
          }
          setLineNumber(1189);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2579 = selfRequest(this, "usesClassSyntax", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2580 = selfRequest(this, "isFresh", [0]);
          var opresult2581 = request(call2579, "||(1)", [1], call2580);
          return opresult2581;
        };    // end of method isClass
        this.methods["isClass"] = func2578;
        func2578.methodName = "isClass";
        func2578.paramCounts = [0];
        func2578.paramNames = [];
        func2578.definitionLine = 1189;
        func2578.definitionModule = "ast";
        var func2582 = function(argcv) {    // method isTrait, line 1190
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isTrait", 0, numArgs - 0);
          }
          setLineNumber(1190);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2583 = selfRequest(this, "usesTraitSyntax", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2584 = selfRequest(this, "isFresh", [0]);
          var block2585 = new GraceBlock(this, 1190, 0);
          block2585.guard = jsTrue;
          block2585.real = function block2585() {
            setLineNumber(1190);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2588 = selfRequest(this, "body", [0]);
            var call2587 = request(call2588, "last", [0]);
            var call2586 = request(call2587, "isTrait", [0]);
            return call2586;
          };
          let applyMeth2585 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth2585.methodName = "apply";
          applyMeth2585.paramCounts = [0];
          applyMeth2585.paramNames = [];
          applyMeth2585.definitionLine = 1190;
          applyMeth2585.definitionModule = "ast";
          block2585.methods["apply"] = applyMeth2585;
          var opresult2589 = request(call2584, "&&(1)", [1], block2585);
          var opresult2590 = request(call2583, "||(1)", [1], opresult2589);
          return opresult2590;
        };    // end of method isTrait
        this.methods["isTrait"] = func2582;
        func2582.methodName = "isTrait";
        func2582.paramCounts = [0];
        func2582.paramNames = [];
        func2582.definitionLine = 1190;
        func2582.definitionModule = "ast";
        var func2591 = function(argcv) {    // method needsArgChecks, line 1191
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("needsArgChecks", 0, numArgs - 0);
          }
          setLineNumber(1192);    // compilenode block
          var block2593 = new GraceBlock(this, 1192, 1);
          block2593.guard = jsTrue;
          block2593.real = function block2593(var_part) {
            setLineNumber(1193);    // compilenode block
            var block2595 = new GraceBlock(this, 1193, 1);
            block2595.guard = jsTrue;
            block2595.real = function block2595(var_p) {
              var if2596 = GraceDone;
              setLineNumber(1194);    // compilenode member
              // call case 6: other requests
              var call2597 = request(var_p, "dtype", [0]);
              var opresult2598 = request(GraceFalse, "\u2260(1)", [1], call2597);
              setLineNumber(1195);    // compilenode block
              var block2599 = new GraceBlock(this, 1195, 0);
              block2599.guard = jsTrue;
              block2599.real = function block2599() {
                setLineNumber(1195);    // compilenode member
                // call case 6: other requests
                // call case 6: other requests
                var call2601 = request(var_p, "dtype", [0]);
                var call2600 = request(call2601, "nameString", [0]);
                var string2602 = new GraceString("Unknown");
                var opresult2603 = request(call2600, "\u2260(1)", [1], string2602);
                return opresult2603;
              };
              let applyMeth2599 = function apply (argcv) {
                  return this.real.apply(this.receiver);
              };
              applyMeth2599.methodName = "apply";
              applyMeth2599.paramCounts = [0];
              applyMeth2599.paramNames = [];
              applyMeth2599.definitionLine = 1195;
              applyMeth2599.definitionModule = "ast";
              block2599.methods["apply"] = applyMeth2599;
              var opresult2604 = request(opresult2598, "&&(1)", [1], block2599);
              if (Grace_isTrue(opresult2604)) {
                setLineNumber(1196);    // compilenode return
                throw new ReturnException(GraceTrue, returnTarget);
              }
              return if2596;
            };
            let applyMeth2595 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2595.methodName = "apply(1)";
            applyMeth2595.paramCounts = [1];
            applyMeth2595.paramNames = ["p"];
            applyMeth2595.definitionLine = 1193;
            applyMeth2595.definitionModule = "ast";
            block2595.methods["apply(1)"] = applyMeth2595;
            let matchesMeth2595 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2595.methodName = "matches(1)";
            matchesMeth2595.paramCounts = [1];
            matchesMeth2595.paramNames = ["p"];
            matchesMeth2595.definitionLine = 1193;
            matchesMeth2595.definitionModule = "ast";
            block2595.methods["matches(1)"] = matchesMeth2595;
            // call case 6: other requests
            setLineNumber(1193);    // compilenode member
            // call case 6: other requests
            var call2605 = request(var_part, "params", [0]);
            var call2594 = request(call2605, "do(1)", [1], block2595);
            return call2594;
          };
          let applyMeth2593 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2593.methodName = "apply(1)";
          applyMeth2593.paramCounts = [1];
          applyMeth2593.paramNames = ["part"];
          applyMeth2593.definitionLine = 1192;
          applyMeth2593.definitionModule = "ast";
          block2593.methods["apply(1)"] = applyMeth2593;
          let matchesMeth2593 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2593.methodName = "matches(1)";
          matchesMeth2593.paramCounts = [1];
          matchesMeth2593.paramNames = ["part"];
          matchesMeth2593.definitionLine = 1192;
          matchesMeth2593.definitionModule = "ast";
          block2593.methods["matches(1)"] = matchesMeth2593;
          // call case 6: other requests
          setLineNumber(1192);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2606 = selfRequest(this, "signature", [0]);
          var call2592 = request(call2606, "do(1)", [1], block2593);
          setLineNumber(1200);    // compilenode return
          return GraceFalse;
        };    // end of method needsArgChecks
        this.methods["needsArgChecks"] = func2591;
        func2591.methodName = "needsArgChecks";
        func2591.paramCounts = [0];
        func2591.paramNames = [];
        func2591.definitionLine = 1191;
        func2591.definitionModule = "ast";
        var func2607 = function(argcv, var_st) {    // method scope:=(_), line 1202
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("scope:=(_)", 0, numArgs - 1);
          }
          setLineNumber(1205);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2608 = selfRequest(this, "symbolTable:=(1)", [1], var_st);
          setLineNumber(1206);    // compilenode call
          // call case 6: other requests
          var call2609 = request(var_st, "node:=(1)", [1], this);
          return call2609;
        };    // end of method scope:=(_)
        this.methods["scope:=(1)"] = func2607;
        func2607.methodName = "scope:=(1)";
        func2607.paramCounts = [1];
        func2607.paramNames = ["st"];
        func2607.definitionLine = 1202;
        func2607.definitionModule = "ast";
        var func2610 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 1208
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(1208);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call2611 = request(var_k, "parameter", [0]);
          return call2611;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func2610;
        func2610.methodName = "declarationKindWithAncestors(1)";
        func2610.paramCounts = [1];
        func2610.paramNames = ["ac"];
        func2610.definitionLine = 1208;
        func2610.definitionModule = "ast";
        var func2612 = function(argcv) {    // method isConfidential, line 1209
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isConfidential", 0, numArgs - 0);
          }
          setLineNumber(1209);    // compilenode string
          var string2614 = new GraceString("confidential");
          // call case 2: outer request
          var call2613 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string2614);
          return call2613;
        };    // end of method isConfidential
        this.methods["isConfidential"] = func2612;
        func2612.methodName = "isConfidential";
        func2612.paramCounts = [0];
        func2612.paramNames = [];
        func2612.definitionLine = 1209;
        func2612.definitionModule = "ast";
        var func2615 = function(argcv) {    // method isPublic, line 1210
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isPublic", 0, numArgs - 0);
          }
          setLineNumber(1210);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2617 = selfRequest(this, "isConfidential", [0]);
          var call2616 = request(call2617, "not", [0]);
          return call2616;
        };    // end of method isPublic
        this.methods["isPublic"] = func2615;
        func2615.methodName = "isPublic";
        func2615.paramCounts = [0];
        func2615.paramNames = [];
        func2615.definitionLine = 1210;
        func2615.definitionModule = "ast";
        var func2618 = function(argcv) {     // accessor method isWritable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isWritable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isWritable
        this.methods["isWritable"] = func2618;
        func2618.methodName = "isWritable";
        func2618.paramCounts = [0];
        func2618.paramNames = [];
        func2618.definitionLine = 1211;
        func2618.definitionModule = "ast";
        var func2619 = function(argcv) {    // method isReadable, line 1212
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isReadable", 0, numArgs - 0);
          }
          setLineNumber(1212);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2620 = selfRequest(this, "isPublic", [0]);
          return call2620;
        };    // end of method isReadable
        this.methods["isReadable"] = func2619;
        func2619.methodName = "isReadable";
        func2619.paramCounts = [0];
        func2619.paramNames = [];
        func2619.definitionLine = 1212;
        func2619.definitionModule = "ast";
        var func2621 = function(argcv) {    // method isAbstract, line 1213
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isAbstract", 0, numArgs - 0);
          }
          setLineNumber(1213);    // compilenode string
          var string2623 = new GraceString("abstract");
          // call case 2: outer request
          var call2622 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string2623);
          return call2622;
        };    // end of method isAbstract
        this.methods["isAbstract"] = func2621;
        func2621.methodName = "isAbstract";
        func2621.paramCounts = [0];
        func2621.paramNames = [];
        func2621.definitionLine = 1213;
        func2621.definitionModule = "ast";
        var func2624 = function(argcv) {    // method isRequired, line 1214
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isRequired", 0, numArgs - 0);
          }
          setLineNumber(1214);    // compilenode string
          var string2626 = new GraceString("required");
          // call case 2: outer request
          var call2625 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string2626);
          return call2625;
        };    // end of method isRequired
        this.methods["isRequired"] = func2624;
        func2624.methodName = "isRequired";
        func2624.paramCounts = [0];
        func2624.paramNames = [];
        func2624.definitionLine = 1214;
        func2624.definitionModule = "ast";
        var func2627 = function(argcv) {    // method isAnnotationDecl, line 1215
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isAnnotationDecl", 0, numArgs - 0);
          }
          setLineNumber(1215);    // compilenode string
          var string2629 = new GraceString("annotation");
          // call case 2: outer request
          var call2628 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string2629);
          return call2628;
        };    // end of method isAnnotationDecl
        this.methods["isAnnotationDecl"] = func2627;
        func2627.methodName = "isAnnotationDecl";
        func2627.paramCounts = [0];
        func2627.paramNames = [];
        func2627.definitionLine = 1215;
        func2627.definitionModule = "ast";
        var func2630 = function(argcv, var_aNode) {    // method usesAsType(_), line 1216
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("usesAsType(_)", 0, numArgs - 1);
          }
          setLineNumber(1217);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2631 = selfRequest(this, "dtype", [0]);
          var opresult2632 = request(var_aNode, "==(1)", [1], call2631);
          return opresult2632;
        };    // end of method usesAsType(_)
        this.methods["usesAsType(1)"] = func2630;
        func2630.methodName = "usesAsType(1)";
        func2630.paramCounts = [1];
        func2630.paramNames = ["aNode"];
        func2630.definitionLine = 1216;
        func2630.definitionModule = "ast";
        var func2633 = function(argcv) {    // method returnsObject, line 1219
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnsObject", 0, numArgs - 0);
          }
          setLineNumber(1220);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2636 = selfRequest(this, "body", [0]);
          var call2635 = request(call2636, "isEmpty", [0]);
          var call2634 = request(call2635, "not", [0]);
          var block2637 = new GraceBlock(this, 1220, 0);
          block2637.guard = jsTrue;
          block2637.real = function block2637() {
            setLineNumber(1220);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2640 = selfRequest(this, "body", [0]);
            var call2639 = request(call2640, "last", [0]);
            var call2638 = request(call2639, "returnsObject", [0]);
            return call2638;
          };
          let applyMeth2637 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth2637.methodName = "apply";
          applyMeth2637.paramCounts = [0];
          applyMeth2637.paramNames = [];
          applyMeth2637.definitionLine = 1220;
          applyMeth2637.definitionModule = "ast";
          block2637.methods["apply"] = applyMeth2637;
          var opresult2641 = request(call2634, "&&(1)", [1], block2637);
          return opresult2641;
        };    // end of method returnsObject
        this.methods["returnsObject"] = func2633;
        func2633.methodName = "returnsObject";
        func2633.paramCounts = [0];
        func2633.paramNames = [];
        func2633.definitionLine = 1219;
        func2633.definitionModule = "ast";
        var func2642 = function(argcv) {    // method returnedObjectScope, line 1222
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnedObjectScope", 0, numArgs - 0);
          }
          setLineNumber(1224);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2645 = selfRequest(this, "body", [0]);
          var call2644 = request(call2645, "last", [0]);
          var call2643 = request(call2644, "returnedObjectScope", [0]);
          return call2643;
        };    // end of method returnedObjectScope
        this.methods["returnedObjectScope"] = func2642;
        func2642.methodName = "returnedObjectScope";
        func2642.paramCounts = [0];
        func2642.paramNames = [];
        func2642.definitionLine = 1222;
        func2642.definitionModule = "ast";
        var func2646 = function(argcv) {    // method resultExpression, line 1226
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("resultExpression", 0, numArgs - 0);
          }
          var if2647 = GraceDone;
          setLineNumber(1227);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2649 = selfRequest(this, "body", [0]);
          var call2648 = request(call2649, "isEmpty", [0]);
          if (Grace_isTrue(call2648)) {
            var string2651 = new GraceString("method has no body");
            // call case 6: other requests
            // call case 2: outer request
            var call2652 = selfRequest(var_prelude, "ProgrammingError", [0]);
            var call2650 = request(call2652, "raise(1)", [1], string2651);
            if2647 = call2650;
          }
          setLineNumber(1228);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2654 = selfRequest(this, "body", [0]);
          var call2653 = request(call2654, "last", [0]);
          var var_last = call2653;
          var if2655 = GraceDone;
          setLineNumber(1229);    // compilenode member
          // call case 6: other requests
          var call2656 = request(var_last, "isReturn", [0]);
          if (Grace_isTrue(call2656)) {
            // call case 6: other requests
            if (var_last === undefined) raiseUninitializedVariable("last");
            var call2657 = request(var_last, "value", [0]);
            var_last = call2657;
            if2655 = GraceDone;
          }
          return var_last;
        };    // end of method resultExpression
        this.methods["resultExpression"] = func2646;
        func2646.methodName = "resultExpression";
        func2646.paramCounts = [0];
        func2646.paramNames = [];
        func2646.definitionLine = 1226;
        func2646.definitionModule = "ast";
        var func2658 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1232
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if2659 = GraceDone;
          setLineNumber(1233);    // compilenode call
          // call case 6: other requests
          var call2660 = request(var_visitor, "visitMethod(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call2660)) {
            setLineNumber(1234);    // compilenode call
            // call case 6: other requests
            var call2661 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call2661;
            setLineNumber(1235);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2663 = selfRequest(this, "value", [0]);
            var call2662 = request(call2663, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(1236);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2665 = selfRequest(this, "signature", [0]);
            var block2666 = new GraceBlock(this, 1236, 1);
            block2666.guard = jsTrue;
            block2666.real = function block2666(var_part) {
              setLineNumber(1237);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call2667 = request(var_part, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call2667;
            };
            let applyMeth2666 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2666.methodName = "apply(1)";
            applyMeth2666.paramCounts = [1];
            applyMeth2666.paramNames = ["part"];
            applyMeth2666.definitionLine = 1236;
            applyMeth2666.definitionModule = "ast";
            block2666.methods["apply(1)"] = applyMeth2666;
            let matchesMeth2666 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2666.methodName = "matches(1)";
            matchesMeth2666.paramCounts = [1];
            matchesMeth2666.paramNames = ["part"];
            matchesMeth2666.definitionLine = 1236;
            matchesMeth2666.definitionModule = "ast";
            block2666.methods["matches(1)"] = matchesMeth2666;
            // call case 2: outer request
            var call2664 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2665, block2666);
            var if2668 = GraceDone;
            setLineNumber(1239);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2669 = selfRequest(this, "dtype", [0]);
            var opresult2670 = request(GraceFalse, "\u2260(1)", [1], call2669);
            if (Grace_isTrue(opresult2670)) {
              setLineNumber(1240);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call2672 = selfRequest(this, "dtype", [0]);
              var call2671 = request(call2672, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if2668 = call2671;
            }
            setLineNumber(1242);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2674 = selfRequest(this, "annotations", [0]);
            var block2675 = new GraceBlock(this, 1242, 1);
            block2675.guard = jsTrue;
            block2675.real = function block2675(var_ann) {
              setLineNumber(1243);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call2676 = request(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call2676;
            };
            let applyMeth2675 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2675.methodName = "apply(1)";
            applyMeth2675.paramCounts = [1];
            applyMeth2675.paramNames = ["ann"];
            applyMeth2675.definitionLine = 1242;
            applyMeth2675.definitionModule = "ast";
            block2675.methods["apply(1)"] = applyMeth2675;
            let matchesMeth2675 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2675.methodName = "matches(1)";
            matchesMeth2675.paramCounts = [1];
            matchesMeth2675.paramNames = ["ann"];
            matchesMeth2675.definitionLine = 1242;
            matchesMeth2675.definitionModule = "ast";
            block2675.methods["matches(1)"] = matchesMeth2675;
            // call case 2: outer request
            var call2673 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2674, block2675);
            setLineNumber(1245);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2678 = selfRequest(this, "body", [0]);
            var block2679 = new GraceBlock(this, 1245, 1);
            block2679.guard = jsTrue;
            block2679.real = function block2679(var_mx) {
              setLineNumber(1246);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call2680 = request(var_mx, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call2680;
            };
            let applyMeth2679 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2679.methodName = "apply(1)";
            applyMeth2679.paramCounts = [1];
            applyMeth2679.paramNames = ["mx"];
            applyMeth2679.definitionLine = 1245;
            applyMeth2679.definitionModule = "ast";
            block2679.methods["apply(1)"] = applyMeth2679;
            let matchesMeth2679 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2679.methodName = "matches(1)";
            matchesMeth2679.paramCounts = [1];
            matchesMeth2679.paramNames = ["mx"];
            matchesMeth2679.definitionLine = 1245;
            matchesMeth2679.definitionModule = "ast";
            block2679.methods["matches(1)"] = matchesMeth2679;
            // call case 2: outer request
            var call2677 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2678, block2679);
            if2659 = call2677;
          }
          return if2659;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func2658;
        func2658.methodName = "accept(1)from(1)";
        func2658.paramCounts = [1, 1];
        func2658.paramNames = ["visitor", "ac"];
        func2658.definitionLine = 1232;
        func2658.definitionModule = "ast";
        var func2681 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1250
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1251);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2682 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call2682;
          setLineNumber(1252);    // compilenode call
          // call case 6: other requests
          var call2683 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call2683;
          setLineNumber(1253);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2686 = selfRequest(this, "body", [0]);
          // call case 2: outer request
          var call2685 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call2686, var_blk, var_newChain);
          // call case 6: other requests
          var call2684 = request(var_n, "body:=(1)", [1], call2685);
          setLineNumber(1254);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2689 = selfRequest(this, "signature", [0]);
          // call case 2: outer request
          var call2688 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call2689, var_blk, var_newChain);
          // call case 6: other requests
          var call2687 = request(var_n, "signature:=(1)", [1], call2688);
          setLineNumber(1255);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2692 = selfRequest(this, "annotations", [0]);
          // call case 2: outer request
          var call2691 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call2692, var_blk, var_newChain);
          // call case 6: other requests
          var call2690 = request(var_n, "annotations:=(1)", [1], call2691);
          setLineNumber(1256);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2695 = selfRequest(this, "dtype", [0]);
          // call case 2: outer request
          var call2694 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call2695, var_blk, var_newChain);
          // call case 6: other requests
          var call2693 = request(var_n, "dtype:=(1)", [1], call2694);
          setLineNumber(1257);    // compilenode call
          // call case 6: other requests
          var call2696 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call2696;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func2681;
        func2681.methodName = "map(1)ancestors(1)";
        func2681.paramCounts = [1, 1];
        func2681.paramNames = ["blk", "ac"];
        func2681.definitionLine = 1250;
        func2681.definitionModule = "ast";
        var func2697 = function(argcv, var_depth) {    // method pretty(_), line 1259
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1260);    // compilenode string
          var string2698 = new GraceString("  ");
          var sum2699 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod2700 = request(string2698, "*(1)", [1], sum2699);
          var var_spc = prod2700;
          setLineNumber(1261);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2701 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var if2702 = GraceDone;
          setLineNumber(1262);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2703 = selfRequest(this, "isOnceMethod", [0]);
          if (Grace_isTrue(call2703)) {
            var string2704 = new GraceString(" (once)\n");
            if2702 = string2704;
          } else {
            var string2705 = new GraceString("\n");
            if2702 = string2705;
          }
          var opresult2706 = request(call2701, "++(1)", [1], if2702);
          var var_s = opresult2706;
          setLineNumber(1263);    // compilenode op
          var opresult2707 = request(var_s, "++(1)", [1], var_spc);
          var string2708 = new GraceString("Name: ");
          var opresult2709 = request(opresult2707, "++(1)", [1], string2708);
          var sum2711 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2712 = selfRequest(this, "value", [0]);
          var call2710 = request(call2712, "pretty(1)", [1], sum2711);
          var opresult2713 = request(opresult2709, "++(1)", [1], call2710);
          var string2714 = new GraceString("\n");
          var opresult2715 = request(opresult2713, "++(1)", [1], string2714);
          var_s = opresult2715;
          var if2716 = GraceDone;
          setLineNumber(1264);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2717 = selfRequest(this, "dtype", [0]);
          var opresult2718 = request(GraceFalse, "\u2260(1)", [1], call2717);
          if (Grace_isTrue(opresult2718)) {
            setLineNumber(1265);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2719 = request(var_s, "++(1)", [1], var_spc);
            var string2720 = new GraceString("Returns:\n");
            var opresult2721 = request(opresult2719, "++(1)", [1], string2720);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2722 = request(opresult2721, "++(1)", [1], var_spc);
            var string2723 = new GraceString("  ");
            var opresult2724 = request(opresult2722, "++(1)", [1], string2723);
            var_s = opresult2724;
            setLineNumber(1266);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum2726 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2727 = selfRequest(this, "dtype", [0]);
            var call2725 = request(call2727, "pretty(1)", [1], sum2726);
            var opresult2728 = request(var_s, "++(1)", [1], call2725);
            var string2729 = new GraceString("\n");
            var opresult2730 = request(opresult2728, "++(1)", [1], string2729);
            var_s = opresult2730;
            if2716 = GraceDone;
          }
          var if2731 = GraceDone;
          setLineNumber(1268);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2733 = selfRequest(this, "isBindingOccurrence", [0]);
          var call2732 = request(call2733, "not", [0]);
          if (Grace_isTrue(call2732)) {
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2734 = request(var_s, "++(1)", [1], var_spc);
            var string2735 = new GraceString("Applied\n");
            var opresult2736 = request(opresult2734, "++(1)", [1], string2735);
            var_s = opresult2736;
            if2731 = GraceDone;
          }
          var if2737 = GraceDone;
          setLineNumber(1269);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2738 = selfRequest(this, "isFresh", [0]);
          if (Grace_isTrue(call2738)) {
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2739 = request(var_s, "++(1)", [1], var_spc);
            var string2740 = new GraceString("Fresh\n");
            var opresult2741 = request(opresult2739, "++(1)", [1], string2740);
            var_s = opresult2741;
            if2737 = GraceDone;
          }
          setLineNumber(1270);    // compilenode string
          var string2742 = new GraceString("");
          var opresult2743 = request(string2742, "++(1)", [1], var_s);
          var string2744 = new GraceString("");
          var opresult2745 = request(opresult2743, "++(1)", [1], string2744);
          var opresult2746 = request(opresult2745, "++(1)", [1], var_spc);
          var string2747 = new GraceString("Signature:");
          var opresult2748 = request(opresult2746, "++(1)", [1], string2747);
          var_s = opresult2748;
          setLineNumber(1271);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2750 = selfRequest(this, "signature", [0]);
          var block2751 = new GraceBlock(this, 1271, 1);
          block2751.guard = jsTrue;
          block2751.real = function block2751(var_part) {
            setLineNumber(1272);    // compilenode string
            var string2752 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult2753 = request(string2752, "++(1)", [1], var_s);
            var string2754 = new GraceString("\n  ");
            var opresult2755 = request(opresult2753, "++(1)", [1], string2754);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2756 = request(opresult2755, "++(1)", [1], var_spc);
            var string2757 = new GraceString("Part: ");
            var opresult2758 = request(opresult2756, "++(1)", [1], string2757);
            // call case 6: other requests
            var call2759 = request(var_part, "name", [0]);
            var opresult2760 = request(opresult2758, "++(1)", [1], call2759);
            var string2761 = new GraceString("");
            var opresult2762 = request(opresult2760, "++(1)", [1], string2761);
            var_s = opresult2762;
            var if2763 = GraceDone;
            setLineNumber(1273);    // compilenode member
            // call case 6: other requests
            var call2764 = request(var_part, "hasTypeParams", [0]);
            if (Grace_isTrue(call2764)) {
              setLineNumber(1274);    // compilenode string
              var string2765 = new GraceString("");
              if (var_s === undefined) raiseUninitializedVariable("s");
              var opresult2766 = request(string2765, "++(1)", [1], var_s);
              var string2767 = new GraceString("\n    ");
              var opresult2768 = request(opresult2766, "++(1)", [1], string2767);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult2769 = request(opresult2768, "++(1)", [1], var_spc);
              var string2770 = new GraceString("Type Parameters:");
              var opresult2771 = request(opresult2769, "++(1)", [1], string2770);
              var_s = opresult2771;
              setLineNumber(1275);    // compilenode member
              // call case 6: other requests
              var call2773 = request(var_part, "typeParams", [0]);
              var block2774 = new GraceBlock(this, 1275, 1);
              block2774.guard = jsTrue;
              block2774.real = function block2774(var_p) {
                setLineNumber(1276);    // compilenode string
                var string2775 = new GraceString("");
                if (var_s === undefined) raiseUninitializedVariable("s");
                var opresult2776 = request(string2775, "++(1)", [1], var_s);
                var string2777 = new GraceString("\n      ");
                var opresult2778 = request(opresult2776, "++(1)", [1], string2777);
                if (var_spc === undefined) raiseUninitializedVariable("spc");
                var opresult2779 = request(opresult2778, "++(1)", [1], var_spc);
                var string2780 = new GraceString("");
                var opresult2781 = request(opresult2779, "++(1)", [1], string2780);
                var sum2783 = request(var_depth, "+(1)", [1], new GraceNum(4));
                // call case 6: other requests
                var call2782 = request(var_p, "pretty(1)", [1], sum2783);
                var opresult2784 = request(opresult2781, "++(1)", [1], call2782);
                var string2785 = new GraceString("");
                var opresult2786 = request(opresult2784, "++(1)", [1], string2785);
                var_s = opresult2786;
                return GraceDone;
              };
              let applyMeth2774 = function apply_1 (argcv, ...args) {
                  if (this.guard.apply(this.receiver, args))
                      return this.real.apply(this.receiver, args);
                  badBlockArgs.apply(this, args);
              };
              applyMeth2774.methodName = "apply(1)";
              applyMeth2774.paramCounts = [1];
              applyMeth2774.paramNames = ["p"];
              applyMeth2774.definitionLine = 1275;
              applyMeth2774.definitionModule = "ast";
              block2774.methods["apply(1)"] = applyMeth2774;
              let matchesMeth2774 = function matches_1 (argcv, ...args) {
                  return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
              };
              matchesMeth2774.methodName = "matches(1)";
              matchesMeth2774.paramCounts = [1];
              matchesMeth2774.paramNames = ["p"];
              matchesMeth2774.definitionLine = 1275;
              matchesMeth2774.definitionModule = "ast";
              block2774.methods["matches(1)"] = matchesMeth2774;
              // call case 2: outer request
              var call2772 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2773, block2774);
              if2763 = call2772;
            }
            var if2787 = GraceDone;
            setLineNumber(1279);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2788 = selfRequest(this, "hasParams", [0]);
            if (Grace_isTrue(call2788)) {
              setLineNumber(1280);    // compilenode string
              var string2789 = new GraceString("");
              if (var_s === undefined) raiseUninitializedVariable("s");
              var opresult2790 = request(string2789, "++(1)", [1], var_s);
              var string2791 = new GraceString("\n    ");
              var opresult2792 = request(opresult2790, "++(1)", [1], string2791);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult2793 = request(opresult2792, "++(1)", [1], var_spc);
              var string2794 = new GraceString("Parameters:");
              var opresult2795 = request(opresult2793, "++(1)", [1], string2794);
              var_s = opresult2795;
              setLineNumber(1281);    // compilenode member
              // call case 6: other requests
              var call2797 = request(var_part, "params", [0]);
              var block2798 = new GraceBlock(this, 1281, 1);
              block2798.guard = jsTrue;
              block2798.real = function block2798(var_p) {
                setLineNumber(1282);    // compilenode string
                var string2799 = new GraceString("");
                if (var_s === undefined) raiseUninitializedVariable("s");
                var opresult2800 = request(string2799, "++(1)", [1], var_s);
                var string2801 = new GraceString("\n      ");
                var opresult2802 = request(opresult2800, "++(1)", [1], string2801);
                if (var_spc === undefined) raiseUninitializedVariable("spc");
                var opresult2803 = request(opresult2802, "++(1)", [1], var_spc);
                var string2804 = new GraceString("");
                var opresult2805 = request(opresult2803, "++(1)", [1], string2804);
                var sum2807 = request(var_depth, "+(1)", [1], new GraceNum(4));
                // call case 6: other requests
                var call2806 = request(var_p, "pretty(1)", [1], sum2807);
                var opresult2808 = request(opresult2805, "++(1)", [1], call2806);
                var string2809 = new GraceString("");
                var opresult2810 = request(opresult2808, "++(1)", [1], string2809);
                var_s = opresult2810;
                return GraceDone;
              };
              let applyMeth2798 = function apply_1 (argcv, ...args) {
                  if (this.guard.apply(this.receiver, args))
                      return this.real.apply(this.receiver, args);
                  badBlockArgs.apply(this, args);
              };
              applyMeth2798.methodName = "apply(1)";
              applyMeth2798.paramCounts = [1];
              applyMeth2798.paramNames = ["p"];
              applyMeth2798.definitionLine = 1281;
              applyMeth2798.definitionModule = "ast";
              block2798.methods["apply(1)"] = applyMeth2798;
              let matchesMeth2798 = function matches_1 (argcv, ...args) {
                  return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
              };
              matchesMeth2798.methodName = "matches(1)";
              matchesMeth2798.paramCounts = [1];
              matchesMeth2798.paramNames = ["p"];
              matchesMeth2798.definitionLine = 1281;
              matchesMeth2798.definitionModule = "ast";
              block2798.methods["matches(1)"] = matchesMeth2798;
              // call case 2: outer request
              var call2796 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2797, block2798);
              if2787 = call2796;
            }
            return if2787;
          };
          let applyMeth2751 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2751.methodName = "apply(1)";
          applyMeth2751.paramCounts = [1];
          applyMeth2751.paramNames = ["part"];
          applyMeth2751.definitionLine = 1271;
          applyMeth2751.definitionModule = "ast";
          block2751.methods["apply(1)"] = applyMeth2751;
          let matchesMeth2751 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2751.methodName = "matches(1)";
          matchesMeth2751.paramCounts = [1];
          matchesMeth2751.paramNames = ["part"];
          matchesMeth2751.definitionLine = 1271;
          matchesMeth2751.definitionModule = "ast";
          block2751.methods["matches(1)"] = matchesMeth2751;
          // call case 2: outer request
          var call2749 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2750, block2751);
          setLineNumber(1286);    // compilenode string
          var string2811 = new GraceString("\n");
          var opresult2812 = request(var_s, "++(1)", [1], string2811);
          var_s = opresult2812;
          var if2813 = GraceDone;
          setLineNumber(1287);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2815 = selfRequest(this, "annotations", [0]);
          var call2814 = request(call2815, "size", [0]);
          var opresult2816 = request(call2814, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult2816)) {
            setLineNumber(1288);    // compilenode string
            var string2817 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult2818 = request(string2817, "++(1)", [1], var_s);
            var string2819 = new GraceString("");
            var opresult2820 = request(opresult2818, "++(1)", [1], string2819);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2821 = request(opresult2820, "++(1)", [1], var_spc);
            var string2822 = new GraceString("Annotations:");
            var opresult2823 = request(opresult2821, "++(1)", [1], string2822);
            var_s = opresult2823;
            setLineNumber(1289);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2825 = selfRequest(this, "annotations", [0]);
            var block2826 = new GraceBlock(this, 1289, 1);
            block2826.guard = jsTrue;
            block2826.real = function block2826(var_an) {
              setLineNumber(1290);    // compilenode string
              var string2827 = new GraceString("");
              if (var_s === undefined) raiseUninitializedVariable("s");
              var opresult2828 = request(string2827, "++(1)", [1], var_s);
              var string2829 = new GraceString("\n");
              var opresult2830 = request(opresult2828, "++(1)", [1], string2829);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult2831 = request(opresult2830, "++(1)", [1], var_spc);
              var string2832 = new GraceString("  ");
              var opresult2833 = request(opresult2831, "++(1)", [1], string2832);
              var sum2835 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call2834 = request(var_an, "pretty(1)", [1], sum2835);
              var opresult2836 = request(opresult2833, "++(1)", [1], call2834);
              var string2837 = new GraceString("");
              var opresult2838 = request(opresult2836, "++(1)", [1], string2837);
              var_s = opresult2838;
              return GraceDone;
            };
            let applyMeth2826 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2826.methodName = "apply(1)";
            applyMeth2826.paramCounts = [1];
            applyMeth2826.paramNames = ["an"];
            applyMeth2826.definitionLine = 1289;
            applyMeth2826.definitionModule = "ast";
            block2826.methods["apply(1)"] = applyMeth2826;
            let matchesMeth2826 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2826.methodName = "matches(1)";
            matchesMeth2826.paramCounts = [1];
            matchesMeth2826.paramNames = ["an"];
            matchesMeth2826.definitionLine = 1289;
            matchesMeth2826.definitionModule = "ast";
            block2826.methods["matches(1)"] = matchesMeth2826;
            // call case 2: outer request
            var call2824 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2825, block2826);
            setLineNumber(1292);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2839 = new GraceString("\n");
            var opresult2840 = request(var_s, "++(1)", [1], string2839);
            var_s = opresult2840;
            if2813 = GraceDone;
          }
          setLineNumber(1294);    // compilenode op
          var opresult2841 = request(var_s, "++(1)", [1], var_spc);
          var string2842 = new GraceString("Body:");
          var opresult2843 = request(opresult2841, "++(1)", [1], string2842);
          var_s = opresult2843;
          setLineNumber(1295);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2845 = selfRequest(this, "body", [0]);
          var block2846 = new GraceBlock(this, 1295, 1);
          block2846.guard = jsTrue;
          block2846.real = function block2846(var_mx) {
            setLineNumber(1296);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2847 = new GraceString("\n  ");
            var opresult2848 = request(var_s, "++(1)", [1], string2847);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2849 = request(opresult2848, "++(1)", [1], var_spc);
            var sum2851 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call2850 = request(var_mx, "pretty(1)", [1], sum2851);
            var opresult2852 = request(opresult2849, "++(1)", [1], call2850);
            var_s = opresult2852;
            return GraceDone;
          };
          let applyMeth2846 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2846.methodName = "apply(1)";
          applyMeth2846.paramCounts = [1];
          applyMeth2846.paramNames = ["mx"];
          applyMeth2846.definitionLine = 1295;
          applyMeth2846.definitionModule = "ast";
          block2846.methods["apply(1)"] = applyMeth2846;
          let matchesMeth2846 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2846.methodName = "matches(1)";
          matchesMeth2846.paramCounts = [1];
          matchesMeth2846.paramNames = ["mx"];
          matchesMeth2846.definitionLine = 1295;
          matchesMeth2846.definitionModule = "ast";
          block2846.methods["matches(1)"] = matchesMeth2846;
          // call case 2: outer request
          var call2844 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2845, block2846);
          var if2853 = GraceDone;
          setLineNumber(1298);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2854 = selfRequest(this, "comments", [0]);
          var opresult2855 = request(GraceFalse, "\u2260(1)", [1], call2854);
          if (Grace_isTrue(opresult2855)) {
            setLineNumber(1299);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum2857 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2858 = selfRequest(this, "comments", [0]);
            var call2856 = request(call2858, "pretty(1)", [1], sum2857);
            var opresult2859 = request(var_s, "++(1)", [1], call2856);
            var_s = opresult2859;
            if2853 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func2697;
        func2697.methodName = "pretty(1)";
        func2697.paramCounts = [1];
        func2697.paramNames = ["depth"];
        func2697.definitionLine = 1259;
        func2697.definitionModule = "ast";
        var func2860 = function(argcv, var_depth) {    // method toGrace(_), line 1303
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(1304);    // compilenode string
          var string2861 = new GraceString("    ");
          var prod2862 = request(string2861, "*(1)", [1], var_depth);
          var var_spc = prod2862;
          var if2863 = GraceDone;
          setLineNumber(1305);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2864 = selfRequest(this, "isOnceMethod", [0]);
          if (Grace_isTrue(call2864)) {
            var string2865 = new GraceString("once ");
            if2863 = string2865;
          } else {
            var string2866 = new GraceString("");
            if2863 = string2866;
          }
          var var_s = if2863;
          setLineNumber(1306);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2867 = selfRequest(this, "description", [0]);
          var opresult2868 = request(var_s, "++(1)", [1], call2867);
          var string2869 = new GraceString(" ");
          var opresult2870 = request(opresult2868, "++(1)", [1], string2869);
          var_s = opresult2870;
          setLineNumber(1307);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2872 = selfRequest(this, "signature", [0]);
          var block2873 = new GraceBlock(this, 1307, 1);
          block2873.guard = jsTrue;
          block2873.real = function block2873(var_part) {
            setLineNumber(1307);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            // call case 6: other requests
            var call2874 = request(var_part, "toGrace(1)", [1], var_depth);
            var opresult2875 = request(var_s, "++(1)", [1], call2874);
            var_s = opresult2875;
            return GraceDone;
          };
          let applyMeth2873 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth2873.methodName = "apply(1)";
          applyMeth2873.paramCounts = [1];
          applyMeth2873.paramNames = ["part"];
          applyMeth2873.definitionLine = 1307;
          applyMeth2873.definitionModule = "ast";
          block2873.methods["apply(1)"] = applyMeth2873;
          let matchesMeth2873 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth2873.methodName = "matches(1)";
          matchesMeth2873.paramCounts = [1];
          matchesMeth2873.paramNames = ["part"];
          matchesMeth2873.definitionLine = 1307;
          matchesMeth2873.definitionModule = "ast";
          block2873.methods["matches(1)"] = matchesMeth2873;
          // call case 2: outer request
          var call2871 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2872, block2873);
          var if2876 = GraceDone;
          setLineNumber(1308);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2877 = selfRequest(this, "dtype", [0]);
          var opresult2878 = request(GraceFalse, "\u2260(1)", [1], call2877);
          if (Grace_isTrue(opresult2878)) {
            setLineNumber(1309);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2879 = new GraceString(" -> ");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2881 = selfRequest(this, "dtype", [0]);
            var call2880 = request(call2881, "toGrace(1)", [1], new GraceNum(0));
            var opresult2882 = request(string2879, "++(1)", [1], call2880);
            var string2883 = new GraceString("");
            var opresult2884 = request(opresult2882, "++(1)", [1], string2883);
            var opresult2885 = request(var_s, "++(1)", [1], opresult2884);
            var_s = opresult2885;
            if2876 = GraceDone;
          }
          var if2886 = GraceDone;
          setLineNumber(1311);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2888 = selfRequest(this, "annotations", [0]);
          var call2887 = request(call2888, "size", [0]);
          var opresult2889 = request(call2887, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult2889)) {
            setLineNumber(1312);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2890 = new GraceString(" is ");
            var opresult2891 = request(var_s, "++(1)", [1], string2890);
            var_s = opresult2891;
            setLineNumber(1313);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var block2893 = new GraceBlock(this, 1313, 2);
            block2893.guard = jsTrue;
            block2893.real = function block2893(var_a, var_b) {
              var if2894 = GraceDone;
              setLineNumber(1314);    // compilenode string
              var string2895 = new GraceString("");
              var opresult2896 = request(var_a, "\u2260(1)", [1], string2895);
              if (Grace_isTrue(opresult2896)) {
                var string2897 = new GraceString(", ");
                var opresult2898 = request(var_a, "++(1)", [1], string2897);
                if2894 = opresult2898;
              } else {
                var string2899 = new GraceString("");
                if2894 = string2899;
              }
              // call case 6: other requests
              var call2900 = request(var_b, "toGrace(1)", [1], new GraceNum(0));
              var opresult2901 = request(if2894, "++(1)", [1], call2900);
              return opresult2901;
            };
            let applyMeth2893 = function apply_2 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2893.methodName = "apply(2)";
            applyMeth2893.paramCounts = [2];
            applyMeth2893.paramNames = ["a", "b"];
            applyMeth2893.definitionLine = 1313;
            applyMeth2893.definitionModule = "ast";
            block2893.methods["apply(2)"] = applyMeth2893;
            let matchesMeth2893 = function matches_2 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2893.methodName = "matches(2)";
            matchesMeth2893.paramCounts = [2];
            matchesMeth2893.paramNames = ["a", "b"];
            matchesMeth2893.definitionLine = 1313;
            matchesMeth2893.definitionModule = "ast";
            block2893.methods["matches(2)"] = matchesMeth2893;
            setLineNumber(1315);    // compilenode string
            var string2902 = new GraceString("");
            // call case 6: other requests
            setLineNumber(1313);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2903 = selfRequest(this, "annotations", [0]);
            var call2892 = request(call2903, "fold(1)startingWith(1)", [1, 1], block2893, string2902);
            var opresult2904 = request(var_s, "++(1)", [1], call2892);
            var_s = opresult2904;
            if2886 = GraceDone;
          }
          var if2905 = GraceDone;
          setLineNumber(1317);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2906 = selfRequest(this, "hasBody", [0]);
          if (Grace_isTrue(call2906)) {
            setLineNumber(1318);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2907 = new GraceString(" {");
            var opresult2908 = request(var_s, "++(1)", [1], string2907);
            var_s = opresult2908;
            var if2909 = GraceDone;
            setLineNumber(1319);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2910 = selfRequest(this, "comments", [0]);
            var opresult2911 = request(GraceFalse, "\u2260(1)", [1], call2910);
            if (Grace_isTrue(opresult2911)) {
              setLineNumber(1320);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var sum2913 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call2914 = selfRequest(this, "comments", [0]);
              var call2912 = request(call2914, "toGrace(1)", [1], sum2913);
              var opresult2915 = request(var_s, "++(1)", [1], call2912);
              var_s = opresult2915;
              if2909 = GraceDone;
            }
            setLineNumber(1322);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2917 = selfRequest(this, "body", [0]);
            var block2918 = new GraceBlock(this, 1322, 1);
            block2918.guard = jsTrue;
            block2918.real = function block2918(var_mx) {
              setLineNumber(1323);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string2919 = new GraceString("\n");
              var opresult2920 = request(var_s, "++(1)", [1], string2919);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult2921 = request(opresult2920, "++(1)", [1], var_spc);
              var string2922 = new GraceString("    ");
              var opresult2923 = request(opresult2921, "++(1)", [1], string2922);
              var sum2925 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              var call2924 = request(var_mx, "toGrace(1)", [1], sum2925);
              var opresult2926 = request(opresult2923, "++(1)", [1], call2924);
              var_s = opresult2926;
              return GraceDone;
            };
            let applyMeth2918 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth2918.methodName = "apply(1)";
            applyMeth2918.paramCounts = [1];
            applyMeth2918.paramNames = ["mx"];
            applyMeth2918.definitionLine = 1322;
            applyMeth2918.definitionModule = "ast";
            block2918.methods["apply(1)"] = applyMeth2918;
            let matchesMeth2918 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth2918.methodName = "matches(1)";
            matchesMeth2918.paramCounts = [1];
            matchesMeth2918.paramNames = ["mx"];
            matchesMeth2918.definitionLine = 1322;
            matchesMeth2918.definitionModule = "ast";
            block2918.methods["matches(1)"] = matchesMeth2918;
            // call case 2: outer request
            var call2916 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call2917, block2918);
            setLineNumber(1325);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string2927 = new GraceString("\n");
            var opresult2928 = request(var_s, "++(1)", [1], string2927);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult2929 = request(opresult2928, "++(1)", [1], var_spc);
            var string2930 = new GraceString("}");
            var opresult2931 = request(opresult2929, "++(1)", [1], string2930);
            var_s = opresult2931;
            if2905 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func2860.paramTypes = [];
        func2860.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func2860;
        func2860.methodName = "toGrace(1)";
        func2860.paramCounts = [1];
        func2860.paramNames = ["depth"];
        func2860.definitionLine = 1303;
        func2860.definitionModule = "ast";
        var func2932 = function(argcv) {    // method shallowCopy, line 1329
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(1330);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2935 = selfRequest(this, "signature", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2936 = selfRequest(this, "body", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2937 = selfRequest(this, "dtype", [0]);
          // call case 6: other requests
          if (var_methodNode === undefined) raiseUninitializedVariable("methodNode");
          var call2934 = request(var_methodNode, "new(3)", [3], call2935, call2936, call2937);
          var call2933 = request(call2934, "shallowCopyFieldsFrom(1)", [1], this);
          return call2933;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func2932;
        func2932.methodName = "shallowCopy";
        func2932.paramCounts = [0];
        func2932.paramNames = [];
        func2932.definitionLine = 1329;
        func2932.definitionModule = "ast";
        var func2938 = function(argcv, var_other) {    // method postCopy(_), line 1332
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(1333);    // compilenode member
          // call case 6: other requests
          var call2940 = request(var_other, "isFresh", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2939 = selfRequest(this, "isFresh:=(1)", [1], call2940);
          setLineNumber(1334);    // compilenode member
          // call case 6: other requests
          var call2942 = request(var_other, "isOnceMethod", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2941 = selfRequest(this, "isOnceMethod:=(1)", [1], call2942);
          setLineNumber(1335);    // compilenode member
          // call case 6: other requests
          var call2944 = request(var_other, "description", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2943 = selfRequest(this, "description:=(1)", [1], call2944);
          setLineNumber(1336);    // compilenode member
          // call case 6: other requests
          var call2946 = request(var_other, "hasBody", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2945 = selfRequest(this, "hasBody:=(1)", [1], call2946);
          setLineNumber(1337);    // compilenode member
          // call case 6: other requests
          var call2948 = request(var_other, "selfclosure", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call2947 = selfRequest(this, "selfclosure:=(1)", [1], call2948);
          var if2949 = GraceDone;
          setLineNumber(1338);    // compilenode member
          // call case 6: other requests
          var call2950 = request(var_other, "isAppliedOccurrence", [0]);
          if (Grace_isTrue(call2950)) {
            setLineNumber(1339);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2951 = selfRequest(this, "appliedOccurrence", [0]);
            if2949 = call2951;
          }
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func2938;
        func2938.methodName = "postCopy(1)";
        func2938.paramCounts = [1];
        func2938.paramNames = ["other"];
        func2938.definitionLine = 1332;
        func2938.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 1055;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj2352_init = function() {    // init of object on line 1055
          initFun2353.call(this);
          setLineNumber(1063);    // compilenode string
          var string2952 = new GraceString("method");
          this.data.kind = string2952;
          setLineNumber(1064);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2953 = selfRequest(this, "kind", [0]);
          this.data.description = call2953;
          this.data.signature = var_signature__39__;
          this.data.hasBody = GraceTrue;
          this.data.body = var_body__39__;
          var if2954 = GraceDone;
          setLineNumber(1068);    // compilenode op
          var opresult2955 = request(GraceFalse, "==(1)", [1], var_body__39__);
          if (Grace_isTrue(opresult2955)) {
            setLineNumber(1069);    // compilenode member
            // call case 6: other requests
            // call case 2: outer request
            var call2958 = selfRequest(var_prelude, "sequence", [0]);
            var call2957 = request(call2958, "empty", [0]);
            // call case 4: self request with 1 args and 0 typeArgs 
            var call2956 = selfRequest(this, "body:=(1)", [1], call2957);
            setLineNumber(1070);    // compilenode call
            // call case 4: self request with 1 args and 0 typeArgs 
            var call2959 = selfRequest(this, "hasBody:=(1)", [1], GraceFalse);
            if2954 = call2959;
          }
          this.data.dtype = var_dtype__39__;
          this.data.selfclosure = GraceFalse;
          setLineNumber(1074);    // compilenode array
          var array2961 = new GraceSequence([]);
          // call case 2: outer request
          var call2960 = selfRequest(var_prelude, "list(1)", [1], array2961);
          this.data.annotations = call2960;
          this.data.isFresh = GraceFalse;
          this.data.isOnceMethod = GraceFalse;
          if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
          this.data.cachedIdentifier = var_uninitialized;
          this.data.isBindingOccurrence = GraceTrue;
        };
        return obj2352_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj2352_init = obj2352_build.call(inheritingObject, null, var_signature__39__, var_body__39__, var_dtype__39__, this, aliases, exclusions);
      return obj2352_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func2351;
    func2351.methodName = "new(3)$build(3)";
    func2351.paramCounts = [3];
    func2351.paramNames = ["signature'", "body'", "dtype'"];
    func2351.definitionLine = 1055;
    func2351.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 1048;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj2346_init = function() {    // init of object on line 1048
    };
    return obj2346_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj2346 = emptyGraceObject("methodNode", "ast", 1048);
  var obj2346_init = obj2346_build.call(obj2346, null, this, [], []);
  obj2346_init.call(obj2346);  // end of compileobject
  var var_methodNode = obj2346;
  var reader2962_methodNode = function() {  // reader method methodNode
      if (var_methodNode === undefined) raiseUninitializedVariable("methodNode");
      return var_methodNode;
  };
  reader2962_methodNode.isDef = true;
  this.methods["methodNode"] = reader2962_methodNode;
  setLineNumber(1345);    // compilenode object
  var obj2963_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_1345");
    this.outer_ast_1345 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func2964 = function(argcv, var_receiver, var_parts, var_s) {    // method new(_,_)scope(_), line 1346
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(1347);    // compilenode call
      // call case 4: self request with 2 args and 0 typeArgs 
      var call2965 = selfRequest(this, "new(2)", [2], var_receiver, var_parts);
      var var_result = call2965;
      setLineNumber(1348);    // compilenode call
      // call case 6: other requests
      var call2966 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_,_)scope(_)
    this.methods["new(2)scope(1)"] = func2964;
    func2964.methodName = "new(2)scope(1)";
    func2964.paramCounts = [2, 1];
    func2964.paramNames = ["receiver", "parts", "s"];
    func2964.definitionLine = 1346;
    func2964.definitionModule = "ast";
    var func2967 = function(argcv, var_receiver__39__, var_parts__39__) {    // method new(_,_), line 1351
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("callNode.new(_,_)", "ast", 1351);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_receiver__39__, var_parts__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func2967;
    func2967.methodName = "new(2)";
    func2967.paramCounts = [2];
    func2967.paramNames = ["receiver'", "parts'"];
    func2967.definitionLine = 1351;
    func2967.definitionModule = "ast";
    var func2968 = function(argcv, var_receiver__39__, var_parts__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 1351
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj2969_build = function(ignore, var_receiver__39__, var_parts__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_1351");
        this.outer_ast_1351 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(1355);    // reuse call
        var initFun2970 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader2971_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader2971_kind.isDef = true;
        this.methods["kind"] = reader2971_kind;
        this.data.parts = undefined;
        var reader2972_parts = function() {  // reader method parts
            if (this.data.parts === undefined) raiseUninitializedVariable("parts");
            return this.data.parts;
        };
        reader2972_parts.isVar = true;
        this.methods["parts"] = reader2972_parts;
        var writer2973_parts = function(argcv, n) {   // writer method parts:=(_)
          this.data.parts = n;
          return GraceDone;
        };
        this.methods["parts:=(1)"] = writer2973_parts;
        this.data.generics = undefined;
        var reader2974_generics = function() {  // reader method generics
            if (this.data.generics === undefined) raiseUninitializedVariable("generics");
            return this.data.generics;
        };
        reader2974_generics.isVar = true;
        this.methods["generics"] = reader2974_generics;
        var writer2975_generics = function(argcv, n) {   // writer method generics:=(_)
          this.data.generics = n;
          return GraceDone;
        };
        this.methods["generics:=(1)"] = writer2975_generics;
        this.data.isPattern = undefined;
        var reader2976_isPattern = function() {  // reader method isPattern
            if (this.data.isPattern === undefined) raiseUninitializedVariable("isPattern");
            return this.data.isPattern;
        };
        reader2976_isPattern.isVar = true;
        this.methods["isPattern"] = reader2976_isPattern;
        var writer2977_isPattern = function(argcv, n) {   // writer method isPattern:=(_)
          this.data.isPattern = n;
          return GraceDone;
        };
        this.methods["isPattern:=(1)"] = writer2977_isPattern;
        this.data.receiver = undefined;
        var reader2978_receiver = function() {  // reader method receiver
            if (this.data.receiver === undefined) raiseUninitializedVariable("receiver");
            return this.data.receiver;
        };
        reader2978_receiver.isVar = true;
        this.methods["receiver"] = reader2978_receiver;
        var writer2979_receiver = function(argcv, n) {   // writer method receiver:=(_)
          this.data.receiver = n;
          return GraceDone;
        };
        this.methods["receiver:=(1)"] = writer2979_receiver;
        this.data.isSelfRequest = undefined;
        var reader2980_isSelfRequest = function() {  // reader method isSelfRequest
            if (this.data.isSelfRequest === undefined) raiseUninitializedVariable("isSelfRequest");
            return this.data.isSelfRequest;
        };
        reader2980_isSelfRequest.isVar = true;
        this.methods["isSelfRequest"] = reader2980_isSelfRequest;
        var writer2981_isSelfRequest = function(argcv, n) {   // writer method isSelfRequest:=(_)
          this.data.isSelfRequest = n;
          return GraceDone;
        };
        this.methods["isSelfRequest:=(1)"] = writer2981_isSelfRequest;
        this.data.isTailCall = undefined;
        var reader2982_isTailCall = function() {  // reader method isTailCall
            if (this.data.isTailCall === undefined) raiseUninitializedVariable("isTailCall");
            return this.data.isTailCall;
        };
        reader2982_isTailCall.isVar = true;
        this.methods["isTailCall"] = reader2982_isTailCall;
        var writer2983_isTailCall = function(argcv, n) {   // writer method isTailCall:=(_)
          this.data.isTailCall = n;
          return GraceDone;
        };
        this.methods["isTailCall:=(1)"] = writer2983_isTailCall;
        this.data.isFresh = undefined;
        var reader2984_isFresh = function() {  // reader method isFresh
            if (this.data.isFresh === undefined) raiseUninitializedVariable("isFresh");
            return this.data.isFresh;
        };
        reader2984_isFresh.isVar = true;
        this.methods["isFresh"] = reader2984_isFresh;
        var writer2985_isFresh = function(argcv, n) {   // writer method isFresh:=(_)
          this.data.isFresh = n;
          return GraceDone;
        };
        this.methods["isFresh:=(1)"] = writer2985_isFresh;
        this.data.cachedIdentifier = undefined;
        var reader2986_cachedIdentifier = function() {  // reader method cachedIdentifier
            if (this.data.cachedIdentifier === undefined) raiseUninitializedVariable("cachedIdentifier");
            return this.data.cachedIdentifier;
        };
        reader2986_cachedIdentifier.isVar = true;
        reader2986_cachedIdentifier.confidential = true;
        this.methods["cachedIdentifier"] = reader2986_cachedIdentifier;
        var writer2987_cachedIdentifier = function(argcv, n) {   // writer method cachedIdentifier:=(_)
          this.data.cachedIdentifier = n;
          return GraceDone;
        };
        writer2987_cachedIdentifier.confidential = true;
        this.methods["cachedIdentifier:=(1)"] = writer2987_cachedIdentifier;
        this.data.endPos = undefined;
        var reader2988_endPos = function() {  // reader method endPos
            if (this.data.endPos === undefined) raiseUninitializedVariable("endPos");
            return this.data.endPos;
        };
        reader2988_endPos.isVar = true;
        this.methods["endPos"] = reader2988_endPos;
        var writer2989_endPos = function(argcv, n) {   // writer method endPos:=(_)
          this.data.endPos = n;
          return GraceDone;
        };
        this.methods["endPos:=(1)"] = writer2989_endPos;
        var func2990 = function(argcv) {    // method end, line 1367
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if2991 = GraceDone;
          setLineNumber(1368);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call2992 = selfRequest(this, "endPos", [0]);
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          var opresult2993 = request(call2992, "==(1)", [1], var_noPosition);
          if (Grace_isTrue(opresult2993)) {
            var if2994 = GraceDone;
            setLineNumber(1369);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call2995 = selfRequest(this, "isRequestOfPrefixOperator", [0]);
            if (Grace_isTrue(call2995)) {
              setLineNumber(1370);    // compilenode member
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call2997 = selfRequest(this, "receiver", [0]);
              var call2996 = request(call2997, "end", [0]);
              if2994 = call2996;
            } else {
              setLineNumber(1372);    // compilenode member
              // call case 6: other requests
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3000 = selfRequest(this, "parts", [0]);
              var call2999 = request(call3000, "last", [0]);
              var call2998 = request(call2999, "end", [0]);
              if2994 = call2998;
            }
            if2991 = if2994;
          } else {
            setLineNumber(1375);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3001 = selfRequest(this, "endPos", [0]);
            if2991 = call3001;
          }
          return if2991;
        };    // end of method end
        this.methods["end"] = func2990;
        func2990.methodName = "end";
        func2990.paramCounts = [0];
        func2990.paramNames = [];
        func2990.definitionLine = 1367;
        func2990.definitionModule = "ast";
        var func3002 = function(argcv, var_newPos) {    // method end:=(_), line 1378
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("end:=(_)", 0, numArgs - 1);
          }
          setLineNumber(1378);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3003 = selfRequest(this, "endPos:=(1)", [1], var_newPos);
          return call3003;
        };    // end of method end:=(_)
        this.methods["end:=(1)"] = func3002;
        func3002.methodName = "end:=(1)";
        func3002.paramCounts = [1];
        func3002.paramNames = ["newPos"];
        func3002.definitionLine = 1378;
        func3002.definitionModule = "ast";
        var func3004 = function(argcv) {    // method isRequestOfPrefixOperator, line 1379
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isRequestOfPrefixOperator", 0, numArgs - 0);
          }
          setLineNumber(1379);    // compilenode string
          var string3006 = new GraceString("prefix");
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3009 = selfRequest(this, "parts", [0]);
          var call3008 = request(call3009, "first", [0]);
          var call3007 = request(call3008, "name", [0]);
          var call3005 = request(call3007, "startsWith(1)", [1], string3006);
          return call3005;
        };    // end of method isRequestOfPrefixOperator
        this.methods["isRequestOfPrefixOperator"] = func3004;
        func3004.methodName = "isRequestOfPrefixOperator";
        func3004.paramCounts = [0];
        func3004.paramNames = [];
        func3004.definitionLine = 1379;
        func3004.definitionModule = "ast";
        var func3010 = function(argcv) {    // method onSelf, line 1380
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("onSelf", 0, numArgs - 0);
          }
          setLineNumber(1382);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3011 = selfRequest(this, "isSelfRequest:=(1)", [1], GraceTrue);
          return this;
        };    // end of method onSelf
        this.methods["onSelf"] = func3010;
        func3010.methodName = "onSelf";
        func3010.paramCounts = [0];
        func3010.paramNames = [];
        func3010.definitionLine = 1380;
        func3010.definitionModule = "ast";
        var func3012 = function(argcv) {    // method nameString, line 1386
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(1388);    // compilenode block
          var block3014 = new GraceBlock(this, 1388, 2);
          block3014.guard = jsTrue;
          block3014.real = function block3014(var_acc, var_each) {
            setLineNumber(1388);    // compilenode member
            // call case 6: other requests
            var call3015 = request(var_each, "nameString", [0]);
            var opresult3016 = request(var_acc, "++(1)", [1], call3015);
            return opresult3016;
          };
          let applyMeth3014 = function apply_2 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3014.methodName = "apply(2)";
          applyMeth3014.paramCounts = [2];
          applyMeth3014.paramNames = ["acc", "each"];
          applyMeth3014.definitionLine = 1388;
          applyMeth3014.definitionModule = "ast";
          block3014.methods["apply(2)"] = applyMeth3014;
          let matchesMeth3014 = function matches_2 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3014.methodName = "matches(2)";
          matchesMeth3014.paramCounts = [2];
          matchesMeth3014.paramNames = ["acc", "each"];
          matchesMeth3014.definitionLine = 1388;
          matchesMeth3014.definitionModule = "ast";
          block3014.methods["matches(2)"] = matchesMeth3014;
          var string3017 = new GraceString("");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3018 = selfRequest(this, "parts", [0]);
          var call3013 = request(call3018, "fold(1)startingWith(1)", [1, 1], block3014, string3017);
          return call3013;
        };    // end of method nameString
        this.methods["nameString"] = func3012;
        func3012.methodName = "nameString";
        func3012.paramCounts = [0];
        func3012.paramNames = [];
        func3012.definitionLine = 1386;
        func3012.definitionModule = "ast";
        var func3019 = function(argcv) {    // method canonicalName, line 1391
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          setLineNumber(1393);    // compilenode block
          var block3021 = new GraceBlock(this, 1393, 2);
          block3021.guard = jsTrue;
          block3021.real = function block3021(var_acc, var_each) {
            setLineNumber(1393);    // compilenode member
            // call case 6: other requests
            var call3022 = request(var_each, "canonicalName", [0]);
            var opresult3023 = request(var_acc, "++(1)", [1], call3022);
            return opresult3023;
          };
          let applyMeth3021 = function apply_2 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3021.methodName = "apply(2)";
          applyMeth3021.paramCounts = [2];
          applyMeth3021.paramNames = ["acc", "each"];
          applyMeth3021.definitionLine = 1393;
          applyMeth3021.definitionModule = "ast";
          block3021.methods["apply(2)"] = applyMeth3021;
          let matchesMeth3021 = function matches_2 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3021.methodName = "matches(2)";
          matchesMeth3021.paramCounts = [2];
          matchesMeth3021.paramNames = ["acc", "each"];
          matchesMeth3021.definitionLine = 1393;
          matchesMeth3021.definitionModule = "ast";
          block3021.methods["matches(2)"] = matchesMeth3021;
          setLineNumber(1394);    // compilenode string
          var string3024 = new GraceString("");
          // call case 6: other requests
          setLineNumber(1393);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3025 = selfRequest(this, "parts", [0]);
          var call3020 = request(call3025, "fold(1)startingWith(1)", [1, 1], block3021, string3024);
          return call3020;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func3019;
        func3019.methodName = "canonicalName";
        func3019.paramCounts = [0];
        func3019.paramNames = [];
        func3019.definitionLine = 1391;
        func3019.definitionModule = "ast";
        var func3026 = function(argcv) {     // accessor method isCall
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isCall", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isCall
        this.methods["isCall"] = func3026;
        func3026.methodName = "isCall";
        func3026.paramCounts = [0];
        func3026.paramNames = [];
        func3026.definitionLine = 1397;
        func3026.definitionModule = "ast";
        var func3027 = function(argcv) {    // method returnsObject, line 1398
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnsObject", 0, numArgs - 0);
          }
          var if3028 = GraceDone;
          setLineNumber(1401);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3029 = selfRequest(this, "isCopy", [0]);
          if (Grace_isTrue(call3029)) {
            return GraceTrue;
          }
          var if3030 = GraceDone;
          setLineNumber(1402);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3031 = selfRequest(this, "isClone", [0]);
          if (Grace_isTrue(call3031)) {
            return GraceTrue;
          }
          setLineNumber(1403);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3032 = selfRequest(this, "isFresh", [0]);
          return call3032;
        };    // end of method returnsObject
        this.methods["returnsObject"] = func3027;
        func3027.methodName = "returnsObject";
        func3027.paramCounts = [0];
        func3027.paramNames = [];
        func3027.definitionLine = 1398;
        func3027.definitionModule = "ast";
        var func3033 = function(argcv) {    // method isCopy, line 1405
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isCopy", 0, numArgs - 0);
          }
          setLineNumber(1406);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3035 = selfRequest(this, "receiver", [0]);
          var call3034 = request(call3035, "isImplicit", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3037 = selfRequest(this, "receiver", [0]);
          var call3036 = request(call3037, "isSelf", [0]);
          var opresult3038 = request(call3034, "||(1)", [1], call3036);
          setLineNumber(1407);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3039 = selfRequest(this, "nameString", [0]);
          var string3040 = new GraceString("copy");
          var opresult3041 = request(call3039, "==(1)", [1], string3040);
          var opresult3042 = request(opresult3038, "&&(1)", [1], opresult3041);
          return opresult3042;
        };    // end of method isCopy
        this.methods["isCopy"] = func3033;
        func3033.methodName = "isCopy";
        func3033.paramCounts = [0];
        func3033.paramNames = [];
        func3033.definitionLine = 1405;
        func3033.definitionModule = "ast";
        var func3043 = function(argcv) {    // method isClone, line 1409
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isClone", 0, numArgs - 0);
          }
          setLineNumber(1410);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3045 = selfRequest(this, "receiver", [0]);
          var call3044 = request(call3045, "isImplicit", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3047 = selfRequest(this, "receiver", [0]);
          var call3046 = request(call3047, "isPrelude", [0]);
          var opresult3048 = request(call3044, "||(1)", [1], call3046);
          setLineNumber(1411);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3049 = selfRequest(this, "nameString", [0]);
          var string3050 = new GraceString("clone(1)");
          var opresult3051 = request(call3049, "==(1)", [1], string3050);
          var opresult3052 = request(opresult3048, "&&(1)", [1], opresult3051);
          return opresult3052;
        };    // end of method isClone
        this.methods["isClone"] = func3043;
        func3043.methodName = "isClone";
        func3043.paramCounts = [0];
        func3043.paramNames = [];
        func3043.definitionLine = 1409;
        func3043.definitionModule = "ast";
        var func3053 = function(argcv) {    // method returnedObjectScope, line 1413
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnedObjectScope", 0, numArgs - 0);
          }
          setLineNumber(1415);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3054 = selfRequest(this, "scope", [0]);
          return call3054;
        };    // end of method returnedObjectScope
        this.methods["returnedObjectScope"] = func3053;
        func3053.methodName = "returnedObjectScope";
        func3053.paramCounts = [0];
        func3053.paramNames = [];
        func3053.definitionLine = 1413;
        func3053.definitionModule = "ast";
        var func3055 = function(argcv) {    // method arguments, line 1417
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("arguments", 0, numArgs - 0);
          }
          setLineNumber(1418);    // compilenode array
          var array3057 = new GraceSequence([]);
          // call case 2: outer request
          var call3056 = selfRequest(var_prelude, "list(1)", [1], array3057);
          var var_result = call3056;
          setLineNumber(1419);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3059 = selfRequest(this, "parts", [0]);
          var block3060 = new GraceBlock(this, 1419, 1);
          block3060.guard = jsTrue;
          block3060.real = function block3060(var_part) {
            setLineNumber(1420);    // compilenode member
            // call case 6: other requests
            var call3062 = request(var_part, "args", [0]);
            var block3063 = new GraceBlock(this, 1420, 1);
            block3063.guard = jsTrue;
            block3063.real = function block3063(var_arg) {
              setLineNumber(1420);    // compilenode call
              // call case 6: other requests
              if (var_result === undefined) raiseUninitializedVariable("result");
              var call3064 = request(var_result, "push(1)", [1], var_arg);
              return call3064;
            };
            let applyMeth3063 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3063.methodName = "apply(1)";
            applyMeth3063.paramCounts = [1];
            applyMeth3063.paramNames = ["arg"];
            applyMeth3063.definitionLine = 1420;
            applyMeth3063.definitionModule = "ast";
            block3063.methods["apply(1)"] = applyMeth3063;
            let matchesMeth3063 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3063.methodName = "matches(1)";
            matchesMeth3063.paramCounts = [1];
            matchesMeth3063.paramNames = ["arg"];
            matchesMeth3063.definitionLine = 1420;
            matchesMeth3063.definitionModule = "ast";
            block3063.methods["matches(1)"] = matchesMeth3063;
            // call case 2: outer request
            var call3061 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3062, block3063);
            return call3061;
          };
          let applyMeth3060 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3060.methodName = "apply(1)";
          applyMeth3060.paramCounts = [1];
          applyMeth3060.paramNames = ["part"];
          applyMeth3060.definitionLine = 1419;
          applyMeth3060.definitionModule = "ast";
          block3060.methods["apply(1)"] = applyMeth3060;
          let matchesMeth3060 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3060.methodName = "matches(1)";
          matchesMeth3060.paramCounts = [1];
          matchesMeth3060.paramNames = ["part"];
          matchesMeth3060.definitionLine = 1419;
          matchesMeth3060.definitionModule = "ast";
          block3060.methods["matches(1)"] = matchesMeth3060;
          // call case 2: outer request
          var call3058 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3059, block3060);
          return var_result;
        };    // end of method arguments
        this.methods["arguments"] = func3055;
        func3055.methodName = "arguments";
        func3055.paramCounts = [0];
        func3055.paramNames = [];
        func3055.definitionLine = 1417;
        func3055.definitionModule = "ast";
        var func3065 = function(argcv, var_action) {    // method argumentsDo(_), line 1425
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("argumentsDo(_)", 0, numArgs - 1);
          }
          setLineNumber(1426);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3067 = selfRequest(this, "parts", [0]);
          var block3068 = new GraceBlock(this, 1426, 1);
          block3068.guard = jsTrue;
          block3068.real = function block3068(var_part) {
            setLineNumber(1427);    // compilenode member
            // call case 6: other requests
            var call3070 = request(var_part, "args", [0]);
            var block3071 = new GraceBlock(this, 1427, 1);
            block3071.guard = jsTrue;
            block3071.real = function block3071(var_arg) {
              setLineNumber(1427);    // compilenode call
              // call case 6: other requests
              var call3072 = request(var_action, "apply(1)", [1], var_arg);
              return call3072;
            };
            let applyMeth3071 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3071.methodName = "apply(1)";
            applyMeth3071.paramCounts = [1];
            applyMeth3071.paramNames = ["arg"];
            applyMeth3071.definitionLine = 1427;
            applyMeth3071.definitionModule = "ast";
            block3071.methods["apply(1)"] = applyMeth3071;
            let matchesMeth3071 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3071.methodName = "matches(1)";
            matchesMeth3071.paramCounts = [1];
            matchesMeth3071.paramNames = ["arg"];
            matchesMeth3071.definitionLine = 1427;
            matchesMeth3071.definitionModule = "ast";
            block3071.methods["matches(1)"] = matchesMeth3071;
            // call case 2: outer request
            var call3069 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3070, block3071);
            return call3069;
          };
          let applyMeth3068 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3068.methodName = "apply(1)";
          applyMeth3068.paramCounts = [1];
          applyMeth3068.paramNames = ["part"];
          applyMeth3068.definitionLine = 1426;
          applyMeth3068.definitionModule = "ast";
          block3068.methods["apply(1)"] = applyMeth3068;
          let matchesMeth3068 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3068.methodName = "matches(1)";
          matchesMeth3068.paramCounts = [1];
          matchesMeth3068.paramNames = ["part"];
          matchesMeth3068.definitionLine = 1426;
          matchesMeth3068.definitionModule = "ast";
          block3068.methods["matches(1)"] = matchesMeth3068;
          // call case 2: outer request
          var call3066 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3067, block3068);
          return call3066;
        };    // end of method argumentsDo(_)
        this.methods["argumentsDo(1)"] = func3065;
        func3065.methodName = "argumentsDo(1)";
        func3065.paramCounts = [1];
        func3065.paramNames = ["action"];
        func3065.definitionLine = 1425;
        func3065.definitionModule = "ast";
        var func3073 = function(argcv) {    // method numArgs, line 1431
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numArgs", 0, numArgs - 0);
          }
          setLineNumber(1432);    // compilenode block
          var block3075 = new GraceBlock(this, 1432, 2);
          block3075.guard = jsTrue;
          block3075.real = function block3075(var_acc, var_part) {
            setLineNumber(1432);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            var call3077 = request(var_part, "args", [0]);
            var call3076 = request(call3077, "size", [0]);
            var sum3078 = request(var_acc, "+(1)", [1], call3076);
            return sum3078;
          };
          let applyMeth3075 = function apply_2 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3075.methodName = "apply(2)";
          applyMeth3075.paramCounts = [2];
          applyMeth3075.paramNames = ["acc", "part"];
          applyMeth3075.definitionLine = 1432;
          applyMeth3075.definitionModule = "ast";
          block3075.methods["apply(2)"] = applyMeth3075;
          let matchesMeth3075 = function matches_2 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3075.methodName = "matches(2)";
          matchesMeth3075.paramCounts = [2];
          matchesMeth3075.paramNames = ["acc", "part"];
          matchesMeth3075.definitionLine = 1432;
          matchesMeth3075.definitionModule = "ast";
          block3075.methods["matches(2)"] = matchesMeth3075;
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3079 = selfRequest(this, "parts", [0]);
          var call3074 = request(call3079, "fold(1)startingWith(1)", [1, 1], block3075, new GraceNum(0));
          return call3074;
        };    // end of method numArgs
        this.methods["numArgs"] = func3073;
        func3073.methodName = "numArgs";
        func3073.paramCounts = [0];
        func3073.paramNames = [];
        func3073.definitionLine = 1431;
        func3073.definitionModule = "ast";
        var func3080 = function(argcv) {    // method numTypeArgs, line 1435
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeArgs", 0, numArgs - 0);
          }
          var if3081 = GraceDone;
          setLineNumber(1436);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3082 = selfRequest(this, "generics", [0]);
          var opresult3083 = request(GraceFalse, "==(1)", [1], call3082);
          if (Grace_isTrue(opresult3083)) {
            if3081 = new GraceNum(0);
          } else {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3085 = selfRequest(this, "generics", [0]);
            var call3084 = request(call3085, "size", [0]);
            if3081 = call3084;
          }
          return if3081;
        };    // end of method numTypeArgs
        this.methods["numTypeArgs"] = func3080;
        func3080.methodName = "numTypeArgs";
        func3080.paramCounts = [0];
        func3080.paramNames = [];
        func3080.definitionLine = 1435;
        func3080.definitionModule = "ast";
        var func3086 = function(argcv) {    // method hasTypeArgs, line 1439
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("hasTypeArgs", 0, numArgs - 0);
          }
          setLineNumber(1439);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3087 = selfRequest(this, "generics", [0]);
          var opresult3088 = request(GraceFalse, "\u2260(1)", [1], call3087);
          return opresult3088;
        };    // end of method hasTypeArgs
        this.methods["hasTypeArgs"] = func3086;
        func3086.methodName = "hasTypeArgs";
        func3086.paramCounts = [0];
        func3086.paramNames = [];
        func3086.definitionLine = 1439;
        func3086.definitionModule = "ast";
        var func3089 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1441
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if3090 = GraceDone;
          setLineNumber(1442);    // compilenode call
          // call case 6: other requests
          var call3091 = request(var_visitor, "visitCall(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call3091)) {
            setLineNumber(1443);    // compilenode call
            // call case 6: other requests
            var call3092 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call3092;
            setLineNumber(1444);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3094 = selfRequest(this, "receiver", [0]);
            var call3093 = request(call3094, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(1445);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3096 = selfRequest(this, "parts", [0]);
            var block3097 = new GraceBlock(this, 1445, 1);
            block3097.guard = jsTrue;
            block3097.real = function block3097(var_part) {
              setLineNumber(1446);    // compilenode member
              // call case 6: other requests
              var call3099 = request(var_part, "args", [0]);
              var block3100 = new GraceBlock(this, 1446, 1);
              block3100.guard = jsTrue;
              block3100.real = function block3100(var_arg) {
                setLineNumber(1447);    // compilenode call
                if (var_newChain === undefined) raiseUninitializedVariable("newChain");
                // call case 6: other requests
                var call3101 = request(var_arg, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                return call3101;
              };
              let applyMeth3100 = function apply_1 (argcv, ...args) {
                  if (this.guard.apply(this.receiver, args))
                      return this.real.apply(this.receiver, args);
                  badBlockArgs.apply(this, args);
              };
              applyMeth3100.methodName = "apply(1)";
              applyMeth3100.paramCounts = [1];
              applyMeth3100.paramNames = ["arg"];
              applyMeth3100.definitionLine = 1446;
              applyMeth3100.definitionModule = "ast";
              block3100.methods["apply(1)"] = applyMeth3100;
              let matchesMeth3100 = function matches_1 (argcv, ...args) {
                  return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
              };
              matchesMeth3100.methodName = "matches(1)";
              matchesMeth3100.paramCounts = [1];
              matchesMeth3100.paramNames = ["arg"];
              matchesMeth3100.definitionLine = 1446;
              matchesMeth3100.definitionModule = "ast";
              block3100.methods["matches(1)"] = matchesMeth3100;
              // call case 2: outer request
              var call3098 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3099, block3100);
              return call3098;
            };
            let applyMeth3097 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3097.methodName = "apply(1)";
            applyMeth3097.paramCounts = [1];
            applyMeth3097.paramNames = ["part"];
            applyMeth3097.definitionLine = 1445;
            applyMeth3097.definitionModule = "ast";
            block3097.methods["apply(1)"] = applyMeth3097;
            let matchesMeth3097 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3097.methodName = "matches(1)";
            matchesMeth3097.paramCounts = [1];
            matchesMeth3097.paramNames = ["part"];
            matchesMeth3097.definitionLine = 1445;
            matchesMeth3097.definitionModule = "ast";
            block3097.methods["matches(1)"] = matchesMeth3097;
            // call case 2: outer request
            var call3095 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3096, block3097);
            var if3102 = GraceDone;
            setLineNumber(1450);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3103 = selfRequest(this, "generics", [0]);
            var opresult3104 = request(GraceFalse, "\u2260(1)", [1], call3103);
            if (Grace_isTrue(opresult3104)) {
              setLineNumber(1451);    // compilenode block
              var block3106 = new GraceBlock(this, 1451, 1);
              block3106.guard = jsTrue;
              block3106.real = function block3106(var_each) {
                setLineNumber(1452);    // compilenode call
                if (var_newChain === undefined) raiseUninitializedVariable("newChain");
                // call case 6: other requests
                var call3107 = request(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                return call3107;
              };
              let applyMeth3106 = function apply_1 (argcv, ...args) {
                  if (this.guard.apply(this.receiver, args))
                      return this.real.apply(this.receiver, args);
                  badBlockArgs.apply(this, args);
              };
              applyMeth3106.methodName = "apply(1)";
              applyMeth3106.paramCounts = [1];
              applyMeth3106.paramNames = ["each"];
              applyMeth3106.definitionLine = 1451;
              applyMeth3106.definitionModule = "ast";
              block3106.methods["apply(1)"] = applyMeth3106;
              let matchesMeth3106 = function matches_1 (argcv, ...args) {
                  return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
              };
              matchesMeth3106.methodName = "matches(1)";
              matchesMeth3106.paramCounts = [1];
              matchesMeth3106.paramNames = ["each"];
              matchesMeth3106.definitionLine = 1451;
              matchesMeth3106.definitionModule = "ast";
              block3106.methods["matches(1)"] = matchesMeth3106;
              // call case 6: other requests
              setLineNumber(1451);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3108 = selfRequest(this, "generics", [0]);
              var call3105 = request(call3108, "do(1)", [1], block3106);
              if3102 = call3105;
            }
            if3090 = if3102;
          }
          return if3090;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func3089;
        func3089.methodName = "accept(1)from(1)";
        func3089.paramCounts = [1, 1];
        func3089.paramNames = ["visitor", "ac"];
        func3089.definitionLine = 1441;
        func3089.definitionModule = "ast";
        var func3109 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1457
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1458);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3110 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call3110;
          setLineNumber(1459);    // compilenode call
          // call case 6: other requests
          var call3111 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call3111;
          setLineNumber(1460);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3114 = selfRequest(this, "receiver", [0]);
          var call3113 = request(call3114, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call3112 = request(var_n, "receiver:=(1)", [1], call3113);
          setLineNumber(1461);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3117 = selfRequest(this, "parts", [0]);
          // call case 2: outer request
          var call3116 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call3117, var_blk, var_newChain);
          // call case 6: other requests
          var call3115 = request(var_n, "parts:=(1)", [1], call3116);
          setLineNumber(1462);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3120 = selfRequest(this, "generics", [0]);
          // call case 2: outer request
          var call3119 = selfRequest(importedModules["ast"], "maybeListMap(2)ancestors(1)", [2, 1], call3120, var_blk, var_newChain);
          // call case 6: other requests
          var call3118 = request(var_n, "generics:=(1)", [1], call3119);
          setLineNumber(1463);    // compilenode call
          // call case 6: other requests
          var call3121 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call3121;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func3109;
        func3109.methodName = "map(1)ancestors(1)";
        func3109.paramCounts = [1, 1];
        func3109.paramNames = ["blk", "ac"];
        func3109.definitionLine = 1457;
        func3109.definitionModule = "ast";
        var func3122 = function(argcv, var_depth) {    // method pretty(_), line 1465
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1466);    // compilenode string
          var string3123 = new GraceString("  ");
          var sum3124 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod3125 = request(string3123, "*(1)", [1], sum3124);
          var var_spc = prod3125;
          setLineNumber(1467);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3126 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var var_s = call3126;
          var if3127 = GraceDone;
          setLineNumber(1468);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3128 = selfRequest(this, "isSelfRequest", [0]);
          if (Grace_isTrue(call3128)) {
            var string3129 = new GraceString(" on self\n");
            if3127 = string3129;
          } else {
            var string3130 = new GraceString("\n");
            if3127 = string3130;
          }
          var opresult3131 = request(var_s, "++(1)", [1], if3127);
          var_s = opresult3131;
          setLineNumber(1469);    // compilenode op
          var opresult3132 = request(var_s, "++(1)", [1], var_spc);
          var string3133 = new GraceString("Receiver: ");
          var sum3135 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3136 = selfRequest(this, "receiver", [0]);
          var call3134 = request(call3136, "pretty(1)", [1], sum3135);
          var opresult3137 = request(string3133, "++(1)", [1], call3134);
          var string3138 = new GraceString("\n");
          var opresult3139 = request(opresult3137, "++(1)", [1], string3138);
          var opresult3140 = request(opresult3132, "++(1)", [1], opresult3139);
          var_s = opresult3140;
          setLineNumber(1470);    // compilenode op
          var opresult3141 = request(var_s, "++(1)", [1], var_spc);
          var string3142 = new GraceString("Method Name: ");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3143 = selfRequest(this, "nameString", [0]);
          var opresult3144 = request(string3142, "++(1)", [1], call3143);
          var string3145 = new GraceString("\n");
          var opresult3146 = request(opresult3144, "++(1)", [1], string3145);
          var opresult3147 = request(opresult3141, "++(1)", [1], opresult3146);
          var_s = opresult3147;
          var if3148 = GraceDone;
          setLineNumber(1471);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3149 = selfRequest(this, "generics", [0]);
          var opresult3150 = request(GraceFalse, "\u2260(1)", [1], call3149);
          if (Grace_isTrue(opresult3150)) {
            setLineNumber(1472);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3151 = request(var_s, "++(1)", [1], var_spc);
            var string3152 = new GraceString("  Generics:\n");
            var opresult3153 = request(opresult3151, "++(1)", [1], string3152);
            var_s = opresult3153;
            setLineNumber(1473);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3155 = selfRequest(this, "generics", [0]);
            var block3156 = new GraceBlock(this, 1473, 1);
            block3156.guard = jsTrue;
            block3156.real = function block3156(var_g) {
              setLineNumber(1474);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult3157 = request(var_s, "++(1)", [1], var_spc);
              var string3158 = new GraceString("    ");
              var opresult3159 = request(opresult3157, "++(1)", [1], string3158);
              var sum3161 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call3160 = request(var_g, "pretty(1)", [1], sum3161);
              var opresult3162 = request(opresult3159, "++(1)", [1], call3160);
              var string3163 = new GraceString("\n");
              var opresult3164 = request(opresult3162, "++(1)", [1], string3163);
              var_s = opresult3164;
              return GraceDone;
            };
            let applyMeth3156 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3156.methodName = "apply(1)";
            applyMeth3156.paramCounts = [1];
            applyMeth3156.paramNames = ["g"];
            applyMeth3156.definitionLine = 1473;
            applyMeth3156.definitionModule = "ast";
            block3156.methods["apply(1)"] = applyMeth3156;
            let matchesMeth3156 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3156.methodName = "matches(1)";
            matchesMeth3156.paramCounts = [1];
            matchesMeth3156.paramNames = ["g"];
            matchesMeth3156.definitionLine = 1473;
            matchesMeth3156.definitionModule = "ast";
            block3156.methods["matches(1)"] = matchesMeth3156;
            // call case 2: outer request
            var call3154 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3155, block3156);
            if3148 = call3154;
          }
          setLineNumber(1477);    // compilenode op
          var opresult3165 = request(var_s, "++(1)", [1], var_spc);
          var string3166 = new GraceString("Parts:");
          var opresult3167 = request(opresult3165, "++(1)", [1], string3166);
          var_s = opresult3167;
          setLineNumber(1478);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3169 = selfRequest(this, "parts", [0]);
          var block3170 = new GraceBlock(this, 1478, 1);
          block3170.guard = jsTrue;
          block3170.real = function block3170(var_part) {
            setLineNumber(1479);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3171 = new GraceString("\n  ");
            var opresult3172 = request(var_s, "++(1)", [1], string3171);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3173 = request(opresult3172, "++(1)", [1], var_spc);
            var sum3175 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call3174 = request(var_part, "pretty(1)", [1], sum3175);
            var opresult3176 = request(opresult3173, "++(1)", [1], call3174);
            var_s = opresult3176;
            return GraceDone;
          };
          let applyMeth3170 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3170.methodName = "apply(1)";
          applyMeth3170.paramCounts = [1];
          applyMeth3170.paramNames = ["part"];
          applyMeth3170.definitionLine = 1478;
          applyMeth3170.definitionModule = "ast";
          block3170.methods["apply(1)"] = applyMeth3170;
          let matchesMeth3170 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3170.methodName = "matches(1)";
          matchesMeth3170.paramCounts = [1];
          matchesMeth3170.paramNames = ["part"];
          matchesMeth3170.definitionLine = 1478;
          matchesMeth3170.definitionModule = "ast";
          block3170.methods["matches(1)"] = matchesMeth3170;
          // call case 2: outer request
          var call3168 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3169, block3170);
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func3122;
        func3122.methodName = "pretty(1)";
        func3122.paramCounts = [1];
        func3122.paramNames = ["depth"];
        func3122.definitionLine = 1465;
        func3122.definitionModule = "ast";
        var func3177 = function(argcv, var_depth) {    // method toGrace(_), line 1483
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          var if3178 = GraceDone;
          setLineNumber(1484);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3179 = selfRequest(this, "isRequestOfPrefixOperator", [0]);
          if (Grace_isTrue(call3179)) {
            setLineNumber(1485);    // compilenode num
            // call case 6: other requests
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3183 = selfRequest(this, "parts", [0]);
            var call3182 = request(call3183, "first", [0]);
            var call3181 = request(call3182, "name", [0]);
            var call3180 = request(call3181, "substringFrom(1)", [1], new GraceNum(7));
            var var_opSymbol = call3180;
            setLineNumber(1486);    // compilenode string
            var string3184 = new GraceString("");
            if (var_opSymbol === undefined) raiseUninitializedVariable("opSymbol");
            var opresult3185 = request(string3184, "++(1)", [1], var_opSymbol);
            var string3186 = new GraceString(" ");
            var opresult3187 = request(opresult3185, "++(1)", [1], string3186);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3189 = selfRequest(this, "receiver", [0]);
            var call3188 = request(call3189, "toGrace(1)", [1], new GraceNum(0));
            var opresult3190 = request(opresult3187, "++(1)", [1], call3188);
            var string3191 = new GraceString("");
            var opresult3192 = request(opresult3190, "++(1)", [1], string3191);
            return opresult3192;
          }
          setLineNumber(1488);    // compilenode string
          var string3193 = new GraceString("");
          var var_s = string3193;
          var if3194 = GraceDone;
          setLineNumber(1489);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3197 = selfRequest(this, "receiver", [0]);
          var call3196 = request(call3197, "isImplicit", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3199 = selfRequest(this, "receiver", [0]);
          var call3198 = request(call3199, "isSelfOrOuter", [0]);
          var opresult3200 = request(call3196, "||(1)", [1], call3198);
          var call3195 = request(opresult3200, "not", [0]);
          if (Grace_isTrue(call3195)) {
            var if3201 = GraceDone;
            setLineNumber(1490);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3203 = selfRequest(this, "receiver", [0]);
            var call3202 = request(call3203, "isSimple", [0]);
            if (Grace_isTrue(call3202)) {
              setLineNumber(1491);    // compilenode string
              var string3204 = new GraceString("");
              var sum3206 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3207 = selfRequest(this, "receiver", [0]);
              var call3205 = request(call3207, "toGrace(1)", [1], sum3206);
              var opresult3208 = request(string3204, "++(1)", [1], call3205);
              var string3209 = new GraceString(".");
              var opresult3210 = request(opresult3208, "++(1)", [1], string3209);
              var_s = opresult3210;
              if3201 = GraceDone;
            } else {
              setLineNumber(1493);    // compilenode string
              var string3211 = new GraceString("(");
              var sum3213 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3214 = selfRequest(this, "receiver", [0]);
              var call3212 = request(call3214, "toGrace(1)", [1], sum3213);
              var opresult3215 = request(string3211, "++(1)", [1], call3212);
              var string3216 = new GraceString(").");
              var opresult3217 = request(opresult3215, "++(1)", [1], string3216);
              var_s = opresult3217;
              if3201 = GraceDone;
            }
            if3194 = if3201;
          }
          setLineNumber(1496);    // compilenode block
          var block3219 = new GraceBlock(this, 1496, 1);
          block3219.guard = jsTrue;
          block3219.real = function block3219(var_part) {
            setLineNumber(1496);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum3221 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call3220 = request(var_part, "toGrace(1)", [1], sum3221);
            var opresult3222 = request(var_s, "++(1)", [1], call3220);
            var_s = opresult3222;
            return GraceDone;
          };
          let applyMeth3219 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3219.methodName = "apply(1)";
          applyMeth3219.paramCounts = [1];
          applyMeth3219.paramNames = ["part"];
          applyMeth3219.definitionLine = 1496;
          applyMeth3219.definitionModule = "ast";
          block3219.methods["apply(1)"] = applyMeth3219;
          let matchesMeth3219 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3219.methodName = "matches(1)";
          matchesMeth3219.paramCounts = [1];
          matchesMeth3219.paramNames = ["part"];
          matchesMeth3219.definitionLine = 1496;
          matchesMeth3219.definitionModule = "ast";
          block3219.methods["matches(1)"] = matchesMeth3219;
          setLineNumber(1497);    // compilenode block
          var block3223 = new GraceBlock(this, 1497, 0);
          block3223.guard = jsTrue;
          block3223.real = function block3223() {
            setLineNumber(1497);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3224 = new GraceString(" ");
            var opresult3225 = request(var_s, "++(1)", [1], string3224);
            var_s = opresult3225;
            return GraceDone;
          };
          let applyMeth3223 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth3223.methodName = "apply";
          applyMeth3223.paramCounts = [0];
          applyMeth3223.paramNames = [];
          applyMeth3223.definitionLine = 1497;
          applyMeth3223.definitionModule = "ast";
          block3223.methods["apply"] = applyMeth3223;
          // call case 6: other requests
          setLineNumber(1496);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3226 = selfRequest(this, "parts", [0]);
          var call3218 = request(call3226, "do(1)separatedBy(1)", [1, 1], block3219, block3223);
          return var_s;
        };    // end of method toGrace(_)
        func3177.paramTypes = [];
        func3177.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func3177;
        func3177.methodName = "toGrace(1)";
        func3177.paramCounts = [1];
        func3177.paramNames = ["depth"];
        func3177.definitionLine = 1483;
        func3177.definitionModule = "ast";
        var func3227 = function(argcv) {    // method asIdentifier, line 1500
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asIdentifier", 0, numArgs - 0);
          }
          var if3228 = GraceDone;
          setLineNumber(1503);    // compilenode op
          if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3229 = selfRequest(this, "cachedIdentifier", [0]);
          var opresult3230 = request(var_uninitialized, "==(1)", [1], call3229);
          if (Grace_isTrue(opresult3230)) {
            var if3231 = GraceDone;
            setLineNumber(1504);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3233 = selfRequest(this, "scope", [0]);
            var call3232 = request(call3233, "variety", [0]);
            var string3234 = new GraceString("fake");
            var opresult3235 = request(call3232, "==(1)", [1], string3234);
            if (Grace_isTrue(opresult3235)) {
              setLineNumber(1506);    // compilenode string
              var string3237 = new GraceString("asIdentifier requested on ");
              // call case 4: self request with 1 args and 0 typeArgs 
              var call3238 = selfRequest(this, "pretty(1)", [1], new GraceNum(0));
              var opresult3239 = request(string3237, "++(1)", [1], call3238);
              var string3240 = new GraceString(" when scope was fake");
              var opresult3241 = request(opresult3239, "++(1)", [1], string3240);
              // call case 6: other requests
              setLineNumber(1505);    // compilenode member
              // call case 2: outer request
              var call3242 = selfRequest(var_prelude, "ProgrammingError", [0]);
              var call3236 = request(call3242, "raise(1)", [1], opresult3241);
              if3231 = call3236;
            }
            setLineNumber(1508);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3245 = selfRequest(this, "nameString", [0]);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3246 = selfRequest(this, "scope", [0]);
            // call case 6: other requests
            if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
            var call3244 = request(var_identifierNode, "new(2)scope(1)", [2, 1], call3245, GraceFalse, call3246);
            // call case 4: self request with 1 args and 0 typeArgs 
            var call3243 = selfRequest(this, "cachedIdentifier:=(1)", [1], call3244);
            setLineNumber(1509);    // compilenode call
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3248 = selfRequest(this, "cachedIdentifier", [0]);
            var call3247 = selfRequest(call3248, "inRequest:=(1)", [1], GraceTrue);
            setLineNumber(1510);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3252 = selfRequest(this, "parts", [0]);
            var call3251 = request(call3252, "first", [0]);
            var call3250 = request(call3251, "line", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3253 = selfRequest(this, "cachedIdentifier", [0]);
            var call3249 = selfRequest(call3253, "line:=(1)", [1], call3250);
            setLineNumber(1511);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3257 = selfRequest(this, "parts", [0]);
            var call3256 = request(call3257, "first", [0]);
            var call3255 = request(call3256, "linePos", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3258 = selfRequest(this, "cachedIdentifier", [0]);
            var call3254 = selfRequest(call3258, "linePos:=(1)", [1], call3255);
            setLineNumber(1512);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3260 = selfRequest(this, "canonicalName", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3261 = selfRequest(this, "cachedIdentifier", [0]);
            var call3259 = selfRequest(call3261, "canonicalName:=(1)", [1], call3260);
            setLineNumber(1513);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3263 = selfRequest(this, "end", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3264 = selfRequest(this, "cachedIdentifier", [0]);
            var call3262 = selfRequest(call3264, "end:=(1)", [1], call3263);
            if3228 = call3262;
          }
          setLineNumber(1515);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3265 = selfRequest(this, "cachedIdentifier", [0]);
          return call3265;
        };    // end of method asIdentifier
        this.methods["asIdentifier"] = func3227;
        func3227.methodName = "asIdentifier";
        func3227.paramCounts = [0];
        func3227.paramNames = [];
        func3227.definitionLine = 1500;
        func3227.definitionModule = "ast";
        var func3266 = function(argcv) {    // method asString, line 1517
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(1517);    // compilenode string
          var string3267 = new GraceString("call ");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3268 = selfRequest(this, "toGrace(1)", [1], new GraceNum(0));
          var opresult3269 = request(string3267, "++(1)", [1], call3268);
          var string3270 = new GraceString("");
          var opresult3271 = request(opresult3269, "++(1)", [1], string3270);
          return opresult3271;
        };    // end of method asString
        this.methods["asString"] = func3266;
        func3266.methodName = "asString";
        func3266.paramCounts = [0];
        func3266.paramNames = [];
        func3266.definitionLine = 1517;
        func3266.definitionModule = "ast";
        var func3272 = function(argcv) {    // method shallowCopy, line 1518
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(1519);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3275 = selfRequest(this, "receiver", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3276 = selfRequest(this, "parts", [0]);
          // call case 6: other requests
          if (var_callNode === undefined) raiseUninitializedVariable("callNode");
          var call3274 = request(var_callNode, "new(2)", [2], call3275, call3276);
          var call3273 = request(call3274, "shallowCopyFieldsFrom(1)", [1], this);
          return call3273;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func3272;
        func3272.methodName = "shallowCopy";
        func3272.paramCounts = [0];
        func3272.paramNames = [];
        func3272.definitionLine = 1518;
        func3272.definitionModule = "ast";
        var func3277 = function(argcv, var_other) {    // method postCopy(_), line 1521
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(1522);    // compilenode member
          // call case 6: other requests
          var call3279 = request(var_other, "isPattern", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3278 = selfRequest(this, "isPattern:=(1)", [1], call3279);
          setLineNumber(1523);    // compilenode member
          // call case 6: other requests
          var call3281 = request(var_other, "isSelfRequest", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3280 = selfRequest(this, "isSelfRequest:=(1)", [1], call3281);
          setLineNumber(1524);    // compilenode member
          // call case 6: other requests
          var call3283 = request(var_other, "isTailCall", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3282 = selfRequest(this, "isTailCall:=(1)", [1], call3283);
          setLineNumber(1525);    // compilenode member
          // call case 6: other requests
          var call3285 = request(var_other, "isFresh", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3284 = selfRequest(this, "isFresh:=(1)", [1], call3285);
          setLineNumber(1526);    // compilenode member
          // call case 6: other requests
          var call3287 = request(var_other, "endPos", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3286 = selfRequest(this, "endPos:=(1)", [1], call3287);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func3277;
        func3277.methodName = "postCopy(1)";
        func3277.paramCounts = [1];
        func3277.paramNames = ["other"];
        func3277.definitionLine = 1521;
        func3277.definitionModule = "ast";
        var func3288 = function(argcv) {    // method statementName, line 1529
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(1529);    // compilenode string
          var string3289 = new GraceString("request");
          return string3289;
        };    // end of method statementName
        this.methods["statementName"] = func3288;
        func3288.methodName = "statementName";
        func3288.paramCounts = [0];
        func3288.paramNames = [];
        func3288.definitionLine = 1529;
        func3288.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 1351;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj2969_init = function() {    // init of object on line 1351
          initFun2970.call(this);
          setLineNumber(1356);    // compilenode string
          var string3290 = new GraceString("call");
          this.data.kind = string3290;
          this.data.parts = var_parts__39__;
          this.data.generics = GraceFalse;
          this.data.isPattern = GraceFalse;
          this.data.receiver = var_receiver__39__;
          this.data.isSelfRequest = GraceFalse;
          this.data.isTailCall = GraceFalse;
          this.data.isFresh = GraceFalse;
          if (var_uninitialized === undefined) raiseUninitializedVariable("uninitialized");
          this.data.cachedIdentifier = var_uninitialized;
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          this.data.endPos = var_noPosition;
        };
        return obj2969_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj2969_init = obj2969_build.call(inheritingObject, null, var_receiver__39__, var_parts__39__, this, aliases, exclusions);
      return obj2969_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func2968;
    func2968.methodName = "new(2)$build(3)";
    func2968.paramCounts = [2];
    func2968.paramNames = ["receiver'", "parts'"];
    func2968.definitionLine = 1351;
    func2968.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 1345;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj2963_init = function() {    // init of object on line 1345
    };
    return obj2963_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj2963 = emptyGraceObject("callNode", "ast", 1345);
  var obj2963_init = obj2963_build.call(obj2963, null, this, [], []);
  obj2963_init.call(obj2963);  // end of compileobject
  var var_callNode = obj2963;
  var reader3291_callNode = function() {  // reader method callNode
      if (var_callNode === undefined) raiseUninitializedVariable("callNode");
      return var_callNode;
  };
  reader3291_callNode.isDef = true;
  this.methods["callNode"] = reader3291_callNode;
  setLineNumber(1532);    // compilenode object
  var obj3292_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_1532");
    this.outer_ast_1532 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func3293 = function(argcv, var_b, var_n, var_s) {    // method body(_)named(_)scope(_), line 1533
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("body(_)named(_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(1534);    // compilenode call
      // call case 4: self request with 1 args and 0 typeArgs 
      var call3294 = selfRequest(this, "body(1)", [1], var_b);
      var var_result = call3294;
      setLineNumber(1535);    // compilenode call
      // call case 6: other requests
      var call3295 = request(var_result, "name:=(1)", [1], var_n);
      setLineNumber(1536);    // compilenode call
      // call case 6: other requests
      var call3296 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method body(_)named(_)scope(_)
    this.methods["body(1)named(1)scope(1)"] = func3293;
    func3293.methodName = "body(1)named(1)scope(1)";
    func3293.paramCounts = [1, 1, 1];
    func3293.paramNames = ["b", "n", "s"];
    func3293.definitionLine = 1533;
    func3293.definitionModule = "ast";
    var func3297 = function(argcv, var_b, var_n) {    // method body(_)named(_), line 1539
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("body(_)named(_)", 0, numArgs - 2);
      }
      setLineNumber(1540);    // compilenode call
      // call case 4: self request with 1 args and 0 typeArgs 
      var call3298 = selfRequest(this, "body(1)", [1], var_b);
      var var_result = call3298;
      setLineNumber(1541);    // compilenode call
      // call case 6: other requests
      var call3299 = request(var_result, "name:=(1)", [1], var_n);
      return var_result;
    };    // end of method body(_)named(_)
    this.methods["body(1)named(1)"] = func3297;
    func3297.methodName = "body(1)named(1)";
    func3297.paramCounts = [1, 1];
    func3297.paramNames = ["b", "n"];
    func3297.definitionLine = 1539;
    func3297.definitionModule = "ast";
    var func3300 = function(argcv, var_b) {    // method body(_), line 1544
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("body(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("moduleNode.body(_)", "ast", 1544);
      var ouc_init = this.methods["body(1)$build(3)"].call(this, null, var_b, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method body(_)
    this.methods["body(1)"] = func3300;
    func3300.methodName = "body(1)";
    func3300.paramCounts = [1];
    func3300.paramNames = ["b"];
    func3300.definitionLine = 1544;
    func3300.definitionModule = "ast";
    var func3301 = function(argcv, var_b, inheritingObject, aliases, exclusions) {    // method body(_)$build(_,_,_), line 1544
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("body(_)", 0, numArgs - 1);
      }
      var obj3302_build = function(ignore, var_b, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_1544");
        this.outer_ast_1544 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(1545);    // reuse call
        if (var_objectNode === undefined) raiseUninitializedVariable("objectNode");
        var initFun3303 = request(var_objectNode, "new(2)$build(3)", [null], var_b, GraceFalse, this, [new Alias("oNPostCopy(1)", "postCopy(1)")], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader3304_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader3304_kind.isDef = true;
        this.methods["kind"] = reader3304_kind;
        this.data.sourceLines = undefined;
        var reader3305_sourceLines = function() {  // reader method sourceLines
            if (this.data.sourceLines === undefined) raiseUninitializedVariable("sourceLines");
            return this.data.sourceLines;
        };
        reader3305_sourceLines.isDef = true;
        reader3305_sourceLines.confidential = true;
        this.methods["sourceLines"] = reader3305_sourceLines;
        this.data.theDialect = undefined;
        var reader3306_theDialect = function() {  // reader method theDialect
            if (this.data.theDialect === undefined) raiseUninitializedVariable("theDialect");
            return this.data.theDialect;
        };
        reader3306_theDialect.isVar = true;
        this.methods["theDialect"] = reader3306_theDialect;
        var writer3307_theDialect = function(argcv, n) {   // writer method theDialect:=(_)
          this.data.theDialect = n;
          return GraceDone;
        };
        this.methods["theDialect:=(1)"] = writer3307_theDialect;
        this.data.imports = undefined;
        var reader3308_imports = function() {  // reader method imports
            if (this.data.imports === undefined) raiseUninitializedVariable("imports");
            return this.data.imports;
        };
        reader3308_imports.isVar = true;
        this.methods["imports"] = reader3308_imports;
        var writer3309_imports = function(argcv, n) {   // writer method imports:=(_)
          this.data.imports = n;
          return GraceDone;
        };
        this.methods["imports:=(1)"] = writer3309_imports;
        this.data.directImports = undefined;
        var reader3310_directImports = function() {  // reader method directImports
            if (this.data.directImports === undefined) raiseUninitializedVariable("directImports");
            return this.data.directImports;
        };
        reader3310_directImports.isVar = true;
        this.methods["directImports"] = reader3310_directImports;
        var writer3311_directImports = function(argcv, n) {   // writer method directImports:=(_)
          this.data.directImports = n;
          return GraceDone;
        };
        this.methods["directImports:=(1)"] = writer3311_directImports;
        var func3312 = function(argcv) {    // method end, line 1555
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(1556);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call3315 = request(var_util, "lines", [0]);
          var call3314 = request(call3315, "size", [0]);
          // call case 6: other requests
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call3318 = request(var_util, "lines", [0]);
          var call3317 = request(call3318, "last", [0]);
          var call3316 = request(call3317, "size", [0]);
          // call case 2: outer request
          var call3313 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call3314, call3316);
          return call3313;
        };    // end of method end
        this.methods["end"] = func3312;
        func3312.methodName = "end";
        func3312.paramCounts = [0];
        func3312.paramNames = [];
        func3312.definitionLine = 1555;
        func3312.definitionModule = "ast";
        var func3319 = function(argcv) {     // accessor method isModule
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isModule", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isModule
        this.methods["isModule"] = func3319;
        func3319.methodName = "isModule";
        func3319.paramCounts = [0];
        func3319.paramNames = [];
        func3319.definitionLine = 1558;
        func3319.definitionModule = "ast";
        var func3320 = function(argcv) {     // accessor method isTrait
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isTrait", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isTrait
        this.methods["isTrait"] = func3320;
        func3320.methodName = "isTrait";
        func3320.paramCounts = [0];
        func3320.paramNames = [];
        func3320.definitionLine = 1559;
        func3320.definitionModule = "ast";
        var func3321 = function(argcv) {     // accessor method returnsObject
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("returnsObject", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method returnsObject
        this.methods["returnsObject"] = func3321;
        func3321.methodName = "returnsObject";
        func3321.paramCounts = [0];
        func3321.paramNames = [];
        func3321.definitionLine = 1560;
        func3321.definitionModule = "ast";
        var func3322 = function(argcv, var_action) {    // method importsDo(_), line 1561
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("importsDo(_)", 0, numArgs - 1);
          }
          setLineNumber(1562);    // compilenode block
          var block3324 = new GraceBlock(this, 1562, 1);
          block3324.guard = jsTrue;
          block3324.real = function block3324(var_o) {
            var if3325 = GraceDone;
            setLineNumber(1563);    // compilenode member
            // call case 6: other requests
            var call3326 = request(var_o, "isExternal", [0]);
            if (Grace_isTrue(call3326)) {
              // call case 6: other requests
              var call3327 = request(var_action, "apply(1)", [1], var_o);
              if3325 = call3327;
            }
            return if3325;
          };
          let applyMeth3324 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3324.methodName = "apply(1)";
          applyMeth3324.paramCounts = [1];
          applyMeth3324.paramNames = ["o"];
          applyMeth3324.definitionLine = 1562;
          applyMeth3324.definitionModule = "ast";
          block3324.methods["apply(1)"] = applyMeth3324;
          let matchesMeth3324 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3324.methodName = "matches(1)";
          matchesMeth3324.paramCounts = [1];
          matchesMeth3324.paramNames = ["o"];
          matchesMeth3324.definitionLine = 1562;
          matchesMeth3324.definitionModule = "ast";
          block3324.methods["matches(1)"] = matchesMeth3324;
          // call case 6: other requests
          setLineNumber(1562);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3328 = selfRequest(this, "value", [0]);
          var call3323 = request(call3328, "do(1)", [1], block3324);
          return call3323;
        };    // end of method importsDo(_)
        this.methods["importsDo(1)"] = func3322;
        func3322.methodName = "importsDo(1)";
        func3322.paramCounts = [1];
        func3322.paramNames = ["action"];
        func3322.definitionLine = 1561;
        func3322.definitionModule = "ast";
        var func3329 = function(argcv, var_action) {    // method externalsDo(_), line 1566
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("externalsDo(_)", 0, numArgs - 1);
          }
          var if3330 = GraceDone;
          setLineNumber(1567);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3332 = selfRequest(this, "theDialect", [0]);
          var call3331 = request(call3332, "value", [0]);
          var string3333 = new GraceString("none");
          var opresult3334 = request(call3331, "\u2260(1)", [1], string3333);
          if (Grace_isTrue(opresult3334)) {
            setLineNumber(1568);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3336 = selfRequest(this, "theDialect", [0]);
            // call case 6: other requests
            var call3335 = request(var_action, "apply(1)", [1], call3336);
            if3330 = call3335;
          }
          setLineNumber(1570);    // compilenode block
          var block3338 = new GraceBlock(this, 1570, 1);
          block3338.guard = jsTrue;
          block3338.real = function block3338(var_o) {
            var if3339 = GraceDone;
            setLineNumber(1571);    // compilenode member
            // call case 6: other requests
            var call3340 = request(var_o, "isExternal", [0]);
            if (Grace_isTrue(call3340)) {
              // call case 6: other requests
              var call3341 = request(var_action, "apply(1)", [1], var_o);
              if3339 = call3341;
            }
            return if3339;
          };
          let applyMeth3338 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3338.methodName = "apply(1)";
          applyMeth3338.paramCounts = [1];
          applyMeth3338.paramNames = ["o"];
          applyMeth3338.definitionLine = 1570;
          applyMeth3338.definitionModule = "ast";
          block3338.methods["apply(1)"] = applyMeth3338;
          let matchesMeth3338 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3338.methodName = "matches(1)";
          matchesMeth3338.paramCounts = [1];
          matchesMeth3338.paramNames = ["o"];
          matchesMeth3338.definitionLine = 1570;
          matchesMeth3338.definitionModule = "ast";
          block3338.methods["matches(1)"] = matchesMeth3338;
          // call case 6: other requests
          setLineNumber(1570);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3342 = selfRequest(this, "value", [0]);
          var call3337 = request(call3342, "do(1)", [1], block3338);
          return call3337;
        };    // end of method externalsDo(_)
        this.methods["externalsDo(1)"] = func3329;
        func3329.methodName = "externalsDo(1)";
        func3329.paramCounts = [1];
        func3329.paramNames = ["action"];
        func3329.definitionLine = 1566;
        func3329.definitionModule = "ast";
        var func3343 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1574
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if3344 = GraceDone;
          setLineNumber(1575);    // compilenode call
          // call case 6: other requests
          var call3345 = request(var_visitor, "visitModule(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call3345)) {
            setLineNumber(1576);    // compilenode call
            // call case 6: other requests
            var call3346 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call3346;
            setLineNumber(1577);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3348 = selfRequest(this, "theDialect", [0]);
            var call3347 = request(call3348, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            var if3349 = GraceDone;
            setLineNumber(1578);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3350 = selfRequest(this, "superclass", [0]);
            var opresult3351 = request(GraceFalse, "\u2260(1)", [1], call3350);
            if (Grace_isTrue(opresult3351)) {
              setLineNumber(1579);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3353 = selfRequest(this, "superclass", [0]);
              var call3352 = request(call3353, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if3349 = call3352;
            }
            setLineNumber(1581);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3355 = selfRequest(this, "value", [0]);
            var block3356 = new GraceBlock(this, 1581, 1);
            block3356.guard = jsTrue;
            block3356.real = function block3356(var_x) {
              setLineNumber(1582);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call3357 = request(var_x, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call3357;
            };
            let applyMeth3356 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3356.methodName = "apply(1)";
            applyMeth3356.paramCounts = [1];
            applyMeth3356.paramNames = ["x"];
            applyMeth3356.definitionLine = 1581;
            applyMeth3356.definitionModule = "ast";
            block3356.methods["apply(1)"] = applyMeth3356;
            let matchesMeth3356 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3356.methodName = "matches(1)";
            matchesMeth3356.paramCounts = [1];
            matchesMeth3356.paramNames = ["x"];
            matchesMeth3356.definitionLine = 1581;
            matchesMeth3356.definitionModule = "ast";
            block3356.methods["matches(1)"] = matchesMeth3356;
            // call case 2: outer request
            var call3354 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3355, block3356);
            if3344 = call3354;
          }
          return if3344;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func3343;
        func3343.methodName = "accept(1)from(1)";
        func3343.paramCounts = [1, 1];
        func3343.paramNames = ["visitor", "ac"];
        func3343.definitionLine = 1574;
        func3343.definitionModule = "ast";
        var func3358 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1586
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1587);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3359 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call3359;
          setLineNumber(1588);    // compilenode call
          // call case 6: other requests
          var call3360 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call3360;
          setLineNumber(1589);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3363 = selfRequest(this, "theDialect", [0]);
          var call3362 = request(call3363, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call3361 = request(var_n, "theDialect:=(1)", [1], call3362);
          setLineNumber(1590);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3366 = selfRequest(this, "value", [0]);
          // call case 2: outer request
          var call3365 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call3366, var_blk, var_newChain);
          // call case 6: other requests
          var call3364 = request(var_n, "value:=(1)", [1], call3365);
          setLineNumber(1591);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3369 = selfRequest(this, "superclass", [0]);
          // call case 2: outer request
          var call3368 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call3369, var_blk, var_newChain);
          // call case 6: other requests
          var call3367 = request(var_n, "superclass:=(1)", [1], call3368);
          setLineNumber(1592);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3372 = selfRequest(this, "usedTraits", [0]);
          // call case 2: outer request
          var call3371 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call3372, var_blk, var_newChain);
          // call case 6: other requests
          var call3370 = request(var_n, "usedTraits:=(1)", [1], call3371);
          setLineNumber(1593);    // compilenode call
          // call case 6: other requests
          var call3373 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call3373;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func3358;
        func3358.methodName = "map(1)ancestors(1)";
        func3358.paramCounts = [1, 1];
        func3358.paramNames = ["blk", "ac"];
        func3358.definitionLine = 1586;
        func3358.definitionModule = "ast";
        var func3374 = function(argcv, var_depth) {    // method basePretty(_), line 1595
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("basePretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1596);    // compilenode string
          var string3375 = new GraceString("  ");
          var sum3376 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod3377 = request(string3375, "*(1)", [1], sum3376);
          var var_spc = prod3377;
          setLineNumber(1597);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3378 = selfRequest(this, "prettyPrefix(1)", [1], var_depth);
          var string3379 = new GraceString("\n");
          var opresult3380 = request(call3378, "++(1)", [1], string3379);
          setLineNumber(1598);    // compilenode string
          var string3381 = new GraceString("");
          var opresult3382 = request(string3381, "++(1)", [1], var_spc);
          var string3383 = new GraceString("");
          var opresult3384 = request(opresult3382, "++(1)", [1], string3383);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3386 = selfRequest(this, "theDialect", [0]);
          var call3385 = request(call3386, "pretty(1)", [1], new GraceNum(0));
          var opresult3387 = request(opresult3384, "++(1)", [1], call3385);
          var string3388 = new GraceString("");
          var opresult3389 = request(opresult3387, "++(1)", [1], string3388);
          var opresult3390 = request(opresult3380, "++(1)", [1], opresult3389);
          return opresult3390;
        };    // end of method basePretty(_)
        this.methods["basePretty(1)"] = func3374;
        func3374.methodName = "basePretty(1)";
        func3374.paramCounts = [1];
        func3374.paramNames = ["depth"];
        func3374.definitionLine = 1595;
        func3374.definitionModule = "ast";
        var func3391 = function(argcv) {    // method shallowCopy, line 1600
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(1601);    // compilenode call
          // call case 6: other requests
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          // call case 6: other requests
          if (var_moduleNode === undefined) raiseUninitializedVariable("moduleNode");
          var call3393 = request(var_moduleNode, "body(1)", [1], var_emptySeq);
          var call3392 = request(call3393, "shallowCopyFieldsFrom(1)", [1], this);
          return call3392;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func3391;
        func3391.methodName = "shallowCopy";
        func3391.paramCounts = [0];
        func3391.paramNames = [];
        func3391.definitionLine = 1600;
        func3391.definitionModule = "ast";
        var func3394 = function(argcv, var_other) {    // method postCopy(_), line 1603
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(1604);    // compilenode member
          // call case 6: other requests
          var call3396 = request(var_other, "imports", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3395 = selfRequest(this, "imports:=(1)", [1], call3396);
          setLineNumber(1605);    // compilenode member
          // call case 6: other requests
          var call3398 = request(var_other, "directImports", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3397 = selfRequest(this, "directImports:=(1)", [1], call3398);
          setLineNumber(1606);    // compilenode member
          // call case 6: other requests
          var call3400 = request(var_other, "theDialect", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3399 = selfRequest(this, "theDialect:=(1)", [1], call3400);
          setLineNumber(1609);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3401 = selfRequest(this, "oNPostCopy(1)", [1], var_other);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func3394;
        func3394.methodName = "postCopy(1)";
        func3394.paramCounts = [1];
        func3394.paramNames = ["other"];
        func3394.definitionLine = 1603;
        func3394.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 1544;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3302_init = function() {    // init of object on line 1544
          initFun3303.call(this);
          setLineNumber(1547);    // compilenode string
          var string3402 = new GraceString("module");
          this.data.kind = string3402;
          setLineNumber(1548);    // compilenode member
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call3403 = request(var_util, "lines", [0]);
          this.data.sourceLines = call3403;
          setLineNumber(1549);    // compilenode string
          var string3405 = new GraceString("standardGrace");
          // call case 6: other requests
          if (var_dialectNode === undefined) raiseUninitializedVariable("dialectNode");
          var call3404 = request(var_dialectNode, "new(1)", [1], string3405);
          this.data.theDialect = call3404;
          setLineNumber(1550);    // compilenode call
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3407 = selfRequest(this, "theDialect", [0]);
          var call3406 = request(call3407, "setStart(1)", [1], var_noPosition);
          setLineNumber(1551);    // compilenode num
          // call case 2: outer request
          var call3409 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], new GraceNum(1), new GraceNum(1));
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3408 = selfRequest(this, "setStart(1)", [1], call3409);
          setLineNumber(1552);    // compilenode member
          // call case 6: other requests
          // call case 2: outer request
          var call3411 = selfRequest(var_prelude, "list", [0]);
          var call3410 = request(call3411, "empty", [0]);
          this.data.imports = call3410;
          setLineNumber(1553);    // compilenode member
          // call case 6: other requests
          // call case 2: outer request
          var call3413 = selfRequest(var_prelude, "list", [0]);
          var call3412 = request(call3413, "empty", [0]);
          this.data.directImports = call3412;
        };
        return obj3302_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3302_init = obj3302_build.call(inheritingObject, null, var_b, this, aliases, exclusions);
      return obj3302_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method body(_)$build(_,_,_)
    this.methods["body(1)$build(3)"] = func3301;
    func3301.methodName = "body(1)$build(3)";
    func3301.paramCounts = [1];
    func3301.paramNames = ["b"];
    func3301.definitionLine = 1544;
    func3301.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 1532;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj3292_init = function() {    // init of object on line 1532
    };
    return obj3292_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj3292 = emptyGraceObject("moduleNode", "ast", 1532);
  var obj3292_init = obj3292_build.call(obj3292, null, this, [], []);
  obj3292_init.call(obj3292);  // end of compileobject
  var var_moduleNode = obj3292;
  var reader3414_moduleNode = function() {  // reader method moduleNode
      if (var_moduleNode === undefined) raiseUninitializedVariable("moduleNode");
      return var_moduleNode;
  };
  reader3414_moduleNode.isDef = true;
  this.methods["moduleNode"] = reader3414_moduleNode;
  setLineNumber(1614);    // compilenode object
  var obj3415_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_1614");
    this.outer_ast_1614 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func3416 = function(argcv, var_b, var_n, var_s) {    // method body(_)named(_)scope(_), line 1615
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("body(_)named(_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(1616);    // compilenode call
      // call case 4: self request with 2 args and 0 typeArgs 
      var call3417 = selfRequest(this, "new(2)", [2], var_b, GraceFalse);
      var var_result = call3417;
      setLineNumber(1617);    // compilenode call
      // call case 6: other requests
      var call3418 = request(var_result, "name:=(1)", [1], var_n);
      setLineNumber(1618);    // compilenode call
      // call case 6: other requests
      var call3419 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method body(_)named(_)scope(_)
    this.methods["body(1)named(1)scope(1)"] = func3416;
    func3416.methodName = "body(1)named(1)scope(1)";
    func3416.paramCounts = [1, 1, 1];
    func3416.paramNames = ["b", "n", "s"];
    func3416.definitionLine = 1615;
    func3416.definitionModule = "ast";
    var func3420 = function(argcv, var_b, var_n) {    // method body(_)named(_), line 1621
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("body(_)named(_)", 0, numArgs - 2);
      }
      setLineNumber(1622);    // compilenode member
      // call case 2: outer request
      var call3422 = selfRequest(importedModules["ast"], "fakeSymbolTable", [0]);
      // call case 4: self request with 3 args and 0 typeArgs 
      var call3421 = selfRequest(this, "body(1)named(1)scope(1)", [1, 1, 1], var_b, var_n, call3422);
      return call3421;
    };    // end of method body(_)named(_)
    this.methods["body(1)named(1)"] = func3420;
    func3420.methodName = "body(1)named(1)";
    func3420.paramCounts = [1, 1];
    func3420.paramNames = ["b", "n"];
    func3420.definitionLine = 1621;
    func3420.definitionModule = "ast";
    var func3423 = function(argcv, var_b, var_superclass__39__) {    // method new(_,_), line 1624
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("objectNode.new(_,_)", "ast", 1624);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_b, var_superclass__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func3423;
    func3423.methodName = "new(2)";
    func3423.paramCounts = [2];
    func3423.paramNames = ["b", "superclass'"];
    func3423.definitionLine = 1624;
    func3423.definitionModule = "ast";
    var func3424 = function(argcv, var_b, var_superclass__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 1624
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj3425_build = function(ignore, var_b, var_superclass__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_1624");
        this.outer_ast_1624 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(1625);    // reuse call
        var initFun3426 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader3427_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader3427_kind.isDef = true;
        this.methods["kind"] = reader3427_kind;
        this.data.value = undefined;
        var reader3428_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader3428_value.isVar = true;
        this.methods["value"] = reader3428_value;
        var writer3429_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer3429_value;
        this.data.superclass = undefined;
        var reader3430_superclass = function() {  // reader method superclass
            if (this.data.superclass === undefined) raiseUninitializedVariable("superclass");
            return this.data.superclass;
        };
        reader3430_superclass.isVar = true;
        this.methods["superclass"] = reader3430_superclass;
        var writer3431_superclass = function(argcv, n) {   // writer method superclass:=(_)
          this.data.superclass = n;
          return GraceDone;
        };
        this.methods["superclass:=(1)"] = writer3431_superclass;
        this.data.usedTraits = undefined;
        var reader3432_usedTraits = function() {  // reader method usedTraits
            if (this.data.usedTraits === undefined) raiseUninitializedVariable("usedTraits");
            return this.data.usedTraits;
        };
        reader3432_usedTraits.isVar = true;
        this.methods["usedTraits"] = reader3432_usedTraits;
        var writer3433_usedTraits = function(argcv, n) {   // writer method usedTraits:=(_)
          this.data.usedTraits = n;
          return GraceDone;
        };
        this.methods["usedTraits:=(1)"] = writer3433_usedTraits;
        this.data.name = undefined;
        var reader3434_name = function() {  // reader method name
            if (this.data.name === undefined) raiseUninitializedVariable("name");
            return this.data.name;
        };
        reader3434_name.isVar = true;
        this.methods["name"] = reader3434_name;
        var writer3435_name = function(argcv, n) {   // writer method name:=(_)
          this.data.name = n;
          return GraceDone;
        };
        this.methods["name:=(1)"] = writer3435_name;
        this.data.inClass = undefined;
        var reader3436_inClass = function() {  // reader method inClass
            if (this.data.inClass === undefined) raiseUninitializedVariable("inClass");
            return this.data.inClass;
        };
        reader3436_inClass.isVar = true;
        this.methods["inClass"] = reader3436_inClass;
        var writer3437_inClass = function(argcv, n) {   // writer method inClass:=(_)
          this.data.inClass = n;
          return GraceDone;
        };
        this.methods["inClass:=(1)"] = writer3437_inClass;
        this.data.inTrait = undefined;
        var reader3438_inTrait = function() {  // reader method inTrait
            if (this.data.inTrait === undefined) raiseUninitializedVariable("inTrait");
            return this.data.inTrait;
        };
        reader3438_inTrait.isVar = true;
        this.methods["inTrait"] = reader3438_inTrait;
        var writer3439_inTrait = function(argcv, n) {   // writer method inTrait:=(_)
          this.data.inTrait = n;
          return GraceDone;
        };
        this.methods["inTrait:=(1)"] = writer3439_inTrait;
        this.data.myLocalNames = undefined;
        var reader3440_myLocalNames = function() {  // reader method myLocalNames
            if (this.data.myLocalNames === undefined) raiseUninitializedVariable("myLocalNames");
            return this.data.myLocalNames;
        };
        reader3440_myLocalNames.isVar = true;
        reader3440_myLocalNames.confidential = true;
        this.methods["myLocalNames"] = reader3440_myLocalNames;
        var writer3441_myLocalNames = function(argcv, n) {   // writer method myLocalNames:=(_)
          this.data.myLocalNames = n;
          return GraceDone;
        };
        writer3441_myLocalNames.confidential = true;
        this.methods["myLocalNames:=(1)"] = writer3441_myLocalNames;
        this.data.annotations = undefined;
        var reader3442_annotations = function() {  // reader method annotations
            if (this.data.annotations === undefined) raiseUninitializedVariable("annotations");
            return this.data.annotations;
        };
        reader3442_annotations.isVar = true;
        this.methods["annotations"] = reader3442_annotations;
        var writer3443_annotations = function(argcv, n) {   // writer method annotations:=(_)
          this.data.annotations = n;
          return GraceDone;
        };
        this.methods["annotations:=(1)"] = writer3443_annotations;
        var func3444 = function(argcv) {    // method end, line 1636
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if3445 = GraceDone;
          setLineNumber(1637);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3448 = selfRequest(this, "value", [0]);
          var call3447 = request(call3448, "isEmpty", [0]);
          var call3446 = request(call3447, "not", [0]);
          if (Grace_isTrue(call3446)) {
            setLineNumber(1638);    // compilenode string
            var string3450 = new GraceString("}");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3453 = selfRequest(this, "value", [0]);
            var call3452 = request(call3453, "last", [0]);
            var call3451 = request(call3452, "end", [0]);
            // call case 2: outer request
            var call3449 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string3450, call3451);
            return call3449;
          }
          var if3454 = GraceDone;
          setLineNumber(1640);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3455 = selfRequest(this, "superclass", [0]);
          var opresult3456 = request(GraceFalse, "==(1)", [1], call3455);
          if (Grace_isTrue(opresult3456)) {
            if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
            if3454 = var_noPosition;
          } else {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3458 = selfRequest(this, "superclass", [0]);
            var call3457 = request(call3458, "end", [0]);
            if3454 = call3457;
          }
          var var_iEnd = if3454;
          var if3459 = GraceDone;
          setLineNumber(1641);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3461 = selfRequest(this, "usedTraits", [0]);
          var call3460 = request(call3461, "isEmpty", [0]);
          if (Grace_isTrue(call3460)) {
            if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
            if3459 = var_noPosition;
          } else {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3464 = selfRequest(this, "usedTraits", [0]);
            var call3463 = request(call3464, "last", [0]);
            var call3462 = request(call3463, "end", [0]);
            if3459 = call3462;
          }
          var var_tEnd = if3459;
          var if3465 = GraceDone;
          setLineNumber(1642);    // compilenode op
          var opresult3466 = request(var_iEnd, "\u2260(1)", [1], var_tEnd);
          if (Grace_isTrue(opresult3466)) {
            setLineNumber(1643);    // compilenode string
            var string3468 = new GraceString("}");
            if (var_iEnd === undefined) raiseUninitializedVariable("iEnd");
            if (var_tEnd === undefined) raiseUninitializedVariable("tEnd");
            // call case 2: outer request
            var call3469 = selfRequest(var_prelude, "max(2)", [2], var_iEnd, var_tEnd);
            // call case 2: outer request
            var call3467 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string3468, call3469);
            if3465 = call3467;
          } else {
            setLineNumber(1645);    // compilenode string
            var string3471 = new GraceString("}");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3472 = selfRequest(this, "start", [0]);
            // call case 2: outer request
            var call3470 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string3471, call3472);
            if3465 = call3470;
          }
          return if3465;
        };    // end of method end
        this.methods["end"] = func3444;
        func3444.methodName = "end";
        func3444.paramCounts = [0];
        func3444.paramNames = [];
        func3444.definitionLine = 1636;
        func3444.definitionModule = "ast";
        var func3473 = function(argcv) {    // method description, line 1648
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("description", 0, numArgs - 0);
          }
          var if3474 = GraceDone;
          setLineNumber(1649);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3475 = selfRequest(this, "isTrait", [0]);
          if (Grace_isTrue(call3475)) {
            setLineNumber(1650);    // compilenode string
            var string3476 = new GraceString("");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3477 = selfRequest(this, "kind", [0]);
            var opresult3478 = request(string3476, "++(1)", [1], call3477);
            var string3479 = new GraceString(" (is trait)");
            var opresult3480 = request(opresult3478, "++(1)", [1], string3479);
            if3474 = opresult3480;
          } else {
            var if3481 = GraceDone;
            setLineNumber(1651);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3482 = selfRequest(this, "inClass", [0]);
            if (Grace_isTrue(call3482)) {
              setLineNumber(1652);    // compilenode string
              var string3483 = new GraceString("");
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3484 = selfRequest(this, "kind", [0]);
              var opresult3485 = request(string3483, "++(1)", [1], call3484);
              var string3486 = new GraceString(" (in class)");
              var opresult3487 = request(opresult3485, "++(1)", [1], string3486);
              if3481 = opresult3487;
            } else {
              setLineNumber(1654);    // compilenode member
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3488 = selfRequest(this, "kind", [0]);
              if3481 = call3488;
            }
            if3474 = if3481;
          }
          return if3474;
        };    // end of method description
        this.methods["description"] = func3473;
        func3473.methodName = "description";
        func3473.paramCounts = [0];
        func3473.paramNames = [];
        func3473.definitionLine = 1648;
        func3473.definitionModule = "ast";
        var func3489 = function(argcv) {     // accessor method isFresh
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isFresh", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isFresh
        this.methods["isFresh"] = func3489;
        func3489.methodName = "isFresh";
        func3489.paramCounts = [0];
        func3489.paramNames = [];
        func3489.definitionLine = 1657;
        func3489.definitionModule = "ast";
        var func3490 = function(argcv) {    // method isTrait, line 1658
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isTrait", 0, numArgs - 0);
          }
          var if3491 = GraceDone;
          setLineNumber(1662);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3492 = selfRequest(this, "inTrait", [0]);
          if (Grace_isTrue(call3492)) {
            return GraceTrue;
          }
          var if3493 = GraceDone;
          setLineNumber(1663);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3494 = selfRequest(this, "superclass", [0]);
          var opresult3495 = request(GraceFalse, "\u2260(1)", [1], call3494);
          if (Grace_isTrue(opresult3495)) {
            return GraceFalse;
          }
          setLineNumber(1664);    // compilenode block
          var block3497 = new GraceBlock(this, 1664, 1);
          block3497.guard = jsTrue;
          block3497.real = function block3497(var_each) {
            var if3498 = GraceDone;
            setLineNumber(1665);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            var call3500 = request(var_each, "isLegalInTrait", [0]);
            var call3499 = request(call3500, "not", [0]);
            if (Grace_isTrue(call3499)) {
              throw new ReturnException(GraceFalse, returnTarget);
            }
            return if3498;
          };
          let applyMeth3497 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3497.methodName = "apply(1)";
          applyMeth3497.paramCounts = [1];
          applyMeth3497.paramNames = ["each"];
          applyMeth3497.definitionLine = 1664;
          applyMeth3497.definitionModule = "ast";
          block3497.methods["apply(1)"] = applyMeth3497;
          let matchesMeth3497 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3497.methodName = "matches(1)";
          matchesMeth3497.paramCounts = [1];
          matchesMeth3497.paramNames = ["each"];
          matchesMeth3497.definitionLine = 1664;
          matchesMeth3497.definitionModule = "ast";
          block3497.methods["matches(1)"] = matchesMeth3497;
          // call case 6: other requests
          setLineNumber(1664);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3501 = selfRequest(this, "value", [0]);
          var call3496 = request(call3501, "do(1)", [1], block3497);
          setLineNumber(1667);    // compilenode return
          return GraceTrue;
        };    // end of method isTrait
        this.methods["isTrait"] = func3490;
        func3490.methodName = "isTrait";
        func3490.paramCounts = [0];
        func3490.paramNames = [];
        func3490.definitionLine = 1658;
        func3490.definitionModule = "ast";
        var func3502 = function(argcv) {    // method localNames, line 1670
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("localNames", 0, numArgs - 0);
          }
          var if3503 = GraceDone;
          setLineNumber(1673);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3504 = selfRequest(this, "myLocalNames", [0]);
          var opresult3505 = request(GraceFalse, "==(1)", [1], call3504);
          if (Grace_isTrue(opresult3505)) {
            setLineNumber(1674);    // compilenode member
            // call case 2: outer request
            var call3507 = selfRequest(var_prelude, "emptySet", [0]);
            // call case 4: self request with 1 args and 0 typeArgs 
            var call3506 = selfRequest(this, "myLocalNames:=(1)", [1], call3507);
            setLineNumber(1675);    // compilenode block
            var block3509 = new GraceBlock(this, 1675, 1);
            block3509.guard = jsTrue;
            block3509.real = function block3509(var_node) {
              var if3510 = GraceDone;
              setLineNumber(1676);    // compilenode member
              // call case 6: other requests
              var call3511 = request(var_node, "isFieldDec", [0]);
              // call case 6: other requests
              var call3512 = request(var_node, "isMethod", [0]);
              var opresult3513 = request(call3511, "||(1)", [1], call3512);
              if (Grace_isTrue(opresult3513)) {
                setLineNumber(1677);    // compilenode member
                // call case 6: other requests
                var call3515 = request(var_node, "nameString", [0]);
                // call case 6: other requests
                // call case 4: self request with 0 args and 0 typeArgs 
                var call3516 = selfRequest(this, "myLocalNames", [0]);
                var call3514 = request(call3516, "add(1)", [1], call3515);
                if3510 = call3514;
              }
              return if3510;
            };
            let applyMeth3509 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3509.methodName = "apply(1)";
            applyMeth3509.paramCounts = [1];
            applyMeth3509.paramNames = ["node"];
            applyMeth3509.definitionLine = 1675;
            applyMeth3509.definitionModule = "ast";
            block3509.methods["apply(1)"] = applyMeth3509;
            let matchesMeth3509 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3509.methodName = "matches(1)";
            matchesMeth3509.paramCounts = [1];
            matchesMeth3509.paramNames = ["node"];
            matchesMeth3509.definitionLine = 1675;
            matchesMeth3509.definitionModule = "ast";
            block3509.methods["matches(1)"] = matchesMeth3509;
            // call case 6: other requests
            setLineNumber(1675);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3517 = selfRequest(this, "value", [0]);
            var call3508 = request(call3517, "do(1)", [1], block3509);
            if3503 = call3508;
          }
          setLineNumber(1681);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3518 = selfRequest(this, "myLocalNames", [0]);
          return call3518;
        };    // end of method localNames
        this.methods["localNames"] = func3502;
        func3502.methodName = "localNames";
        func3502.paramCounts = [0];
        func3502.paramNames = [];
        func3502.definitionLine = 1670;
        func3502.definitionModule = "ast";
        var func3519 = function(argcv, var_action) {    // method parentsDo(_), line 1684
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("parentsDo(_)", 0, numArgs - 1);
          }
          var if3520 = GraceDone;
          setLineNumber(1687);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3521 = selfRequest(this, "superclass", [0]);
          var opresult3522 = request(GraceFalse, "\u2260(1)", [1], call3521);
          if (Grace_isTrue(opresult3522)) {
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3524 = selfRequest(this, "superclass", [0]);
            // call case 6: other requests
            var call3523 = request(var_action, "apply(1)", [1], call3524);
            if3520 = call3523;
          }
          setLineNumber(1688);    // compilenode block
          var block3526 = new GraceBlock(this, 1688, 1);
          block3526.guard = jsTrue;
          block3526.real = function block3526(var_t) {
            setLineNumber(1688);    // compilenode call
            // call case 6: other requests
            var call3527 = request(var_action, "apply(1)", [1], var_t);
            return call3527;
          };
          let applyMeth3526 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3526.methodName = "apply(1)";
          applyMeth3526.paramCounts = [1];
          applyMeth3526.paramNames = ["t"];
          applyMeth3526.definitionLine = 1688;
          applyMeth3526.definitionModule = "ast";
          block3526.methods["apply(1)"] = applyMeth3526;
          let matchesMeth3526 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3526.methodName = "matches(1)";
          matchesMeth3526.paramCounts = [1];
          matchesMeth3526.paramNames = ["t"];
          matchesMeth3526.definitionLine = 1688;
          matchesMeth3526.definitionModule = "ast";
          block3526.methods["matches(1)"] = matchesMeth3526;
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3528 = selfRequest(this, "usedTraits", [0]);
          var call3525 = request(call3528, "do(1)", [1], block3526);
          return call3525;
        };    // end of method parentsDo(_)
        this.methods["parentsDo(1)"] = func3519;
        func3519.methodName = "parentsDo(1)";
        func3519.paramCounts = [1];
        func3519.paramNames = ["action"];
        func3519.definitionLine = 1684;
        func3519.definitionModule = "ast";
        var func3529 = function(argcv, var_action) {    // method methodsDo(_), line 1691
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("methodsDo(_)", 0, numArgs - 1);
          }
          setLineNumber(1694);    // compilenode block
          var block3531 = new GraceBlock(this, 1694, 1);
          block3531.guard = jsTrue;
          block3531.real = function block3531(var_o) {
            var if3532 = GraceDone;
            setLineNumber(1695);    // compilenode member
            // call case 6: other requests
            var call3533 = request(var_o, "isMethod", [0]);
            if (Grace_isTrue(call3533)) {
              // call case 6: other requests
              var call3534 = request(var_action, "apply(1)", [1], var_o);
              if3532 = call3534;
            }
            return if3532;
          };
          let applyMeth3531 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3531.methodName = "apply(1)";
          applyMeth3531.paramCounts = [1];
          applyMeth3531.paramNames = ["o"];
          applyMeth3531.definitionLine = 1694;
          applyMeth3531.definitionModule = "ast";
          block3531.methods["apply(1)"] = applyMeth3531;
          let matchesMeth3531 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3531.methodName = "matches(1)";
          matchesMeth3531.paramCounts = [1];
          matchesMeth3531.paramNames = ["o"];
          matchesMeth3531.definitionLine = 1694;
          matchesMeth3531.definitionModule = "ast";
          block3531.methods["matches(1)"] = matchesMeth3531;
          // call case 6: other requests
          setLineNumber(1694);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3535 = selfRequest(this, "value", [0]);
          var call3530 = request(call3535, "do(1)", [1], block3531);
          return call3530;
        };    // end of method methodsDo(_)
        this.methods["methodsDo(1)"] = func3529;
        func3529.methodName = "methodsDo(1)";
        func3529.paramCounts = [1];
        func3529.paramNames = ["action"];
        func3529.definitionLine = 1691;
        func3529.definitionModule = "ast";
        var func3536 = function(argcv, var_action) {    // method methodsAndTypesDo(_), line 1699
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("methodsAndTypesDo(_)", 0, numArgs - 1);
          }
          setLineNumber(1701);    // compilenode block
          var block3538 = new GraceBlock(this, 1701, 1);
          block3538.guard = jsTrue;
          block3538.real = function block3538(var_o) {
            var if3539 = GraceDone;
            setLineNumber(1702);    // compilenode member
            // call case 6: other requests
            var call3540 = request(var_o, "isMethod", [0]);
            // call case 6: other requests
            var call3541 = request(var_o, "isTypeDec", [0]);
            var opresult3542 = request(call3540, "||(1)", [1], call3541);
            if (Grace_isTrue(opresult3542)) {
              // call case 6: other requests
              var call3543 = request(var_action, "apply(1)", [1], var_o);
              if3539 = call3543;
            }
            return if3539;
          };
          let applyMeth3538 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3538.methodName = "apply(1)";
          applyMeth3538.paramCounts = [1];
          applyMeth3538.paramNames = ["o"];
          applyMeth3538.definitionLine = 1701;
          applyMeth3538.definitionModule = "ast";
          block3538.methods["apply(1)"] = applyMeth3538;
          let matchesMeth3538 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3538.methodName = "matches(1)";
          matchesMeth3538.paramCounts = [1];
          matchesMeth3538.paramNames = ["o"];
          matchesMeth3538.definitionLine = 1701;
          matchesMeth3538.definitionModule = "ast";
          block3538.methods["matches(1)"] = matchesMeth3538;
          // call case 6: other requests
          setLineNumber(1701);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3544 = selfRequest(this, "value", [0]);
          var call3537 = request(call3544, "do(1)", [1], block3538);
          return call3537;
        };    // end of method methodsAndTypesDo(_)
        this.methods["methodsAndTypesDo(1)"] = func3536;
        func3536.methodName = "methodsAndTypesDo(1)";
        func3536.paramCounts = [1];
        func3536.paramNames = ["action"];
        func3536.definitionLine = 1699;
        func3536.definitionModule = "ast";
        var func3545 = function(argcv, var_action) {    // method executableComponentsDo(_), line 1706
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("executableComponentsDo(_)", 0, numArgs - 1);
          }
          setLineNumber(1709);    // compilenode block
          var block3547 = new GraceBlock(this, 1709, 1);
          block3547.guard = jsTrue;
          block3547.real = function block3547(var_o) {
            var if3548 = GraceDone;
            setLineNumber(1710);    // compilenode member
            // call case 6: other requests
            var call3549 = request(var_o, "isExecutable", [0]);
            if (Grace_isTrue(call3549)) {
              // call case 6: other requests
              var call3550 = request(var_action, "apply(1)", [1], var_o);
              if3548 = call3550;
            }
            return if3548;
          };
          let applyMeth3547 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3547.methodName = "apply(1)";
          applyMeth3547.paramCounts = [1];
          applyMeth3547.paramNames = ["o"];
          applyMeth3547.definitionLine = 1709;
          applyMeth3547.definitionModule = "ast";
          block3547.methods["apply(1)"] = applyMeth3547;
          let matchesMeth3547 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3547.methodName = "matches(1)";
          matchesMeth3547.paramCounts = [1];
          matchesMeth3547.paramNames = ["o"];
          matchesMeth3547.definitionLine = 1709;
          matchesMeth3547.definitionModule = "ast";
          block3547.methods["matches(1)"] = matchesMeth3547;
          // call case 6: other requests
          setLineNumber(1709);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3551 = selfRequest(this, "value", [0]);
          var call3546 = request(call3551, "do(1)", [1], block3547);
          return call3546;
        };    // end of method executableComponentsDo(_)
        this.methods["executableComponentsDo(1)"] = func3545;
        func3545.methodName = "executableComponentsDo(1)";
        func3545.paramCounts = [1];
        func3545.paramNames = ["action"];
        func3545.definitionLine = 1706;
        func3545.definitionModule = "ast";
        var func3552 = function(argcv, var_st) {    // method scope:=(_), line 1714
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("scope:=(_)", 0, numArgs - 1);
          }
          setLineNumber(1717);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3553 = selfRequest(this, "symbolTable:=(1)", [1], var_st);
          setLineNumber(1718);    // compilenode call
          // call case 6: other requests
          var call3554 = request(var_st, "node:=(1)", [1], this);
          return call3554;
        };    // end of method scope:=(_)
        this.methods["scope:=(1)"] = func3552;
        func3552.methodName = "scope:=(1)";
        func3552.paramCounts = [1];
        func3552.paramNames = ["st"];
        func3552.definitionLine = 1714;
        func3552.definitionModule = "ast";
        var func3555 = function(argcv) {    // method body, line 1720
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("body", 0, numArgs - 0);
          }
          setLineNumber(1720);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3556 = selfRequest(this, "value", [0]);
          return call3556;
        };    // end of method body
        this.methods["body"] = func3555;
        func3555.methodName = "body";
        func3555.paramCounts = [0];
        func3555.paramNames = [];
        func3555.definitionLine = 1720;
        func3555.definitionModule = "ast";
        var func3557 = function(argcv) {     // accessor method returnsObject
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("returnsObject", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method returnsObject
        this.methods["returnsObject"] = func3557;
        func3557.methodName = "returnsObject";
        func3557.paramCounts = [0];
        func3557.paramNames = [];
        func3557.definitionLine = 1721;
        func3557.definitionModule = "ast";
        var func3558 = function(argcv) {    // method returnedObjectScope, line 1722
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnedObjectScope", 0, numArgs - 0);
          }
          setLineNumber(1722);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3559 = selfRequest(this, "scope", [0]);
          return call3559;
        };    // end of method returnedObjectScope
        this.methods["returnedObjectScope"] = func3558;
        func3558.methodName = "returnedObjectScope";
        func3558.paramCounts = [0];
        func3558.paramNames = [];
        func3558.definitionLine = 1722;
        func3558.definitionModule = "ast";
        var func3560 = function(argcv) {    // method canInherit, line 1723
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canInherit", 0, numArgs - 0);
          }
          setLineNumber(1723);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3562 = selfRequest(this, "inTrait", [0]);
          var call3561 = request(call3562, "not", [0]);
          return call3561;
        };    // end of method canInherit
        this.methods["canInherit"] = func3560;
        func3560.methodName = "canInherit";
        func3560.paramCounts = [0];
        func3560.paramNames = [];
        func3560.definitionLine = 1723;
        func3560.definitionModule = "ast";
        var func3563 = function(argcv) {     // accessor method canUse
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("canUse", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method canUse
        this.methods["canUse"] = func3563;
        func3563.methodName = "canUse";
        func3563.paramCounts = [0];
        func3563.paramNames = [];
        func3563.definitionLine = 1724;
        func3563.definitionModule = "ast";
        var func3564 = function(argcv) {     // accessor method isObject
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isObject", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isObject
        this.methods["isObject"] = func3564;
        func3564.methodName = "isObject";
        func3564.paramCounts = [0];
        func3564.paramNames = [];
        func3564.definitionLine = 1725;
        func3564.definitionModule = "ast";
        var func3565 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1726
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if3566 = GraceDone;
          setLineNumber(1727);    // compilenode call
          // call case 6: other requests
          var call3567 = request(var_visitor, "visitObject(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call3567)) {
            setLineNumber(1728);    // compilenode call
            // call case 6: other requests
            var call3568 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call3568;
            var if3569 = GraceDone;
            setLineNumber(1729);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3570 = selfRequest(this, "superclass", [0]);
            var opresult3571 = request(GraceFalse, "\u2260(1)", [1], call3570);
            if (Grace_isTrue(opresult3571)) {
              setLineNumber(1730);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3573 = selfRequest(this, "superclass", [0]);
              var call3572 = request(call3573, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if3569 = call3572;
            }
            setLineNumber(1732);    // compilenode block
            var block3575 = new GraceBlock(this, 1732, 1);
            block3575.guard = jsTrue;
            block3575.real = function block3575(var_t) {
              setLineNumber(1732);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call3576 = request(var_t, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call3576;
            };
            let applyMeth3575 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3575.methodName = "apply(1)";
            applyMeth3575.paramCounts = [1];
            applyMeth3575.paramNames = ["t"];
            applyMeth3575.definitionLine = 1732;
            applyMeth3575.definitionModule = "ast";
            block3575.methods["apply(1)"] = applyMeth3575;
            let matchesMeth3575 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3575.methodName = "matches(1)";
            matchesMeth3575.paramCounts = [1];
            matchesMeth3575.paramNames = ["t"];
            matchesMeth3575.definitionLine = 1732;
            matchesMeth3575.definitionModule = "ast";
            block3575.methods["matches(1)"] = matchesMeth3575;
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3577 = selfRequest(this, "usedTraits", [0]);
            var call3574 = request(call3577, "do(1)", [1], block3575);
            setLineNumber(1733);    // compilenode block
            var block3579 = new GraceBlock(this, 1733, 1);
            block3579.guard = jsTrue;
            block3579.real = function block3579(var_x) {
              setLineNumber(1733);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call3580 = request(var_x, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call3580;
            };
            let applyMeth3579 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3579.methodName = "apply(1)";
            applyMeth3579.paramCounts = [1];
            applyMeth3579.paramNames = ["x"];
            applyMeth3579.definitionLine = 1733;
            applyMeth3579.definitionModule = "ast";
            block3579.methods["apply(1)"] = applyMeth3579;
            let matchesMeth3579 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3579.methodName = "matches(1)";
            matchesMeth3579.paramCounts = [1];
            matchesMeth3579.paramNames = ["x"];
            matchesMeth3579.definitionLine = 1733;
            matchesMeth3579.definitionModule = "ast";
            block3579.methods["matches(1)"] = matchesMeth3579;
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3581 = selfRequest(this, "value", [0]);
            var call3578 = request(call3581, "do(1)", [1], block3579);
            if3566 = call3578;
          }
          return if3566;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func3565;
        func3565.methodName = "accept(1)from(1)";
        func3565.paramCounts = [1, 1];
        func3565.paramNames = ["visitor", "ac"];
        func3565.definitionLine = 1726;
        func3565.definitionModule = "ast";
        var func3582 = function(argcv) {    // method nameString, line 1736
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          var if3583 = GraceDone;
          setLineNumber(1737);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3584 = selfRequest(this, "name", [0]);
          var string3585 = new GraceString("object");
          var opresult3586 = request(call3584, "==(1)", [1], string3585);
          if (Grace_isTrue(opresult3586)) {
            setLineNumber(1738);    // compilenode string
            var string3587 = new GraceString("object_on_line_");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3588 = selfRequest(this, "line", [0]);
            var opresult3589 = request(string3587, "++(1)", [1], call3588);
            var string3590 = new GraceString("");
            var opresult3591 = request(opresult3589, "++(1)", [1], string3590);
            if3583 = opresult3591;
          } else {
            setLineNumber(1740);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3592 = selfRequest(this, "name", [0]);
            if3583 = call3592;
          }
          return if3583;
        };    // end of method nameString
        this.methods["nameString"] = func3582;
        func3582.methodName = "nameString";
        func3582.paramCounts = [0];
        func3582.paramNames = [];
        func3582.definitionLine = 1736;
        func3582.definitionModule = "ast";
        var func3593 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1743
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1744);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3594 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call3594;
          setLineNumber(1745);    // compilenode call
          // call case 6: other requests
          var call3595 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call3595;
          setLineNumber(1746);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3598 = selfRequest(this, "value", [0]);
          // call case 2: outer request
          var call3597 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call3598, var_blk, var_newChain);
          // call case 6: other requests
          var call3596 = request(var_n, "value:=(1)", [1], call3597);
          setLineNumber(1747);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3601 = selfRequest(this, "superclass", [0]);
          // call case 2: outer request
          var call3600 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call3601, var_blk, var_newChain);
          // call case 6: other requests
          var call3599 = request(var_n, "superclass:=(1)", [1], call3600);
          setLineNumber(1748);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3604 = selfRequest(this, "usedTraits", [0]);
          // call case 2: outer request
          var call3603 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call3604, var_blk, var_newChain);
          // call case 6: other requests
          var call3602 = request(var_n, "usedTraits:=(1)", [1], call3603);
          setLineNumber(1749);    // compilenode call
          // call case 6: other requests
          var call3605 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call3605;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func3593;
        func3593.methodName = "map(1)ancestors(1)";
        func3593.paramCounts = [1, 1];
        func3593.paramNames = ["blk", "ac"];
        func3593.definitionLine = 1743;
        func3593.definitionModule = "ast";
        var func3606 = function(argcv, var_depth__39__) {    // method pretty(_), line 1751
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1752);    // compilenode vardec
          var var_depth = var_depth__39__;
          setLineNumber(1753);    // compilenode string
          var string3607 = new GraceString("  ");
          var sum3608 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod3609 = request(string3607, "*(1)", [1], sum3608);
          var var_spc = prod3609;
          setLineNumber(1754);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3610 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var var_s = call3610;
          setLineNumber(1755);    // compilenode string
          var string3611 = new GraceString("");
          var opresult3612 = request(string3611, "++(1)", [1], var_s);
          var string3613 = new GraceString("\n");
          var opresult3614 = request(opresult3612, "++(1)", [1], string3613);
          var opresult3615 = request(opresult3614, "++(1)", [1], var_spc);
          var string3616 = new GraceString("Name: ");
          var opresult3617 = request(opresult3615, "++(1)", [1], string3616);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3618 = selfRequest(this, "name", [0]);
          var opresult3619 = request(opresult3617, "++(1)", [1], call3618);
          var string3620 = new GraceString("");
          var opresult3621 = request(opresult3619, "++(1)", [1], string3620);
          var_s = opresult3621;
          var if3622 = GraceDone;
          setLineNumber(1756);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3623 = selfRequest(this, "superclass", [0]);
          var opresult3624 = request(GraceFalse, "\u2260(1)", [1], call3623);
          if (Grace_isTrue(opresult3624)) {
            setLineNumber(1757);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3625 = new GraceString("\n");
            var opresult3626 = request(var_s, "++(1)", [1], string3625);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3627 = request(opresult3626, "++(1)", [1], var_spc);
            var string3628 = new GraceString("Superclass: ");
            var opresult3629 = request(opresult3627, "++(1)", [1], string3628);
            setLineNumber(1758);    // compilenode op
            if (var_depth === undefined) raiseUninitializedVariable("depth");
            var sum3631 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3632 = selfRequest(this, "superclass", [0]);
            var call3630 = request(call3632, "pretty(1)", [1], sum3631);
            var opresult3633 = request(opresult3629, "++(1)", [1], call3630);
            var_s = opresult3633;
            if3622 = GraceDone;
          }
          var if3634 = GraceDone;
          setLineNumber(1760);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3637 = selfRequest(this, "usedTraits", [0]);
          var call3636 = request(call3637, "isEmpty", [0]);
          var call3635 = request(call3636, "not", [0]);
          if (Grace_isTrue(call3635)) {
            setLineNumber(1761);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3638 = new GraceString("\n");
            var opresult3639 = request(var_s, "++(1)", [1], string3638);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3640 = request(opresult3639, "++(1)", [1], var_spc);
            var string3641 = new GraceString("Traits:");
            var opresult3642 = request(opresult3640, "++(1)", [1], string3641);
            var_s = opresult3642;
            setLineNumber(1762);    // compilenode block
            var block3644 = new GraceBlock(this, 1762, 1);
            block3644.guard = jsTrue;
            block3644.real = function block3644(var_t) {
              setLineNumber(1763);    // compilenode string
              var string3645 = new GraceString("");
              if (var_s === undefined) raiseUninitializedVariable("s");
              var opresult3646 = request(string3645, "++(1)", [1], var_s);
              var string3647 = new GraceString("\n");
              var opresult3648 = request(opresult3646, "++(1)", [1], string3647);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult3649 = request(opresult3648, "++(1)", [1], var_spc);
              var string3650 = new GraceString("  ");
              var opresult3651 = request(opresult3649, "++(1)", [1], string3650);
              if (var_depth === undefined) raiseUninitializedVariable("depth");
              var sum3653 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              var call3652 = request(var_t, "pretty(1)", [1], sum3653);
              var opresult3654 = request(opresult3651, "++(1)", [1], call3652);
              var string3655 = new GraceString("");
              var opresult3656 = request(opresult3654, "++(1)", [1], string3655);
              var_s = opresult3656;
              return GraceDone;
            };
            let applyMeth3644 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3644.methodName = "apply(1)";
            applyMeth3644.paramCounts = [1];
            applyMeth3644.paramNames = ["t"];
            applyMeth3644.definitionLine = 1762;
            applyMeth3644.definitionModule = "ast";
            block3644.methods["apply(1)"] = applyMeth3644;
            let matchesMeth3644 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3644.methodName = "matches(1)";
            matchesMeth3644.paramCounts = [1];
            matchesMeth3644.paramNames = ["t"];
            matchesMeth3644.definitionLine = 1762;
            matchesMeth3644.definitionModule = "ast";
            block3644.methods["matches(1)"] = matchesMeth3644;
            // call case 6: other requests
            setLineNumber(1762);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3657 = selfRequest(this, "usedTraits", [0]);
            var call3643 = request(call3657, "do(1)", [1], block3644);
            if3634 = call3643;
          }
          setLineNumber(1766);    // compilenode block
          var block3659 = new GraceBlock(this, 1766, 1);
          block3659.guard = jsTrue;
          block3659.real = function block3659(var_x) {
            setLineNumber(1767);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3660 = new GraceString("\n");
            var opresult3661 = request(var_s, "++(1)", [1], string3660);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3662 = request(opresult3661, "++(1)", [1], var_spc);
            if (var_depth === undefined) raiseUninitializedVariable("depth");
            var sum3664 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call3663 = request(var_x, "pretty(1)", [1], sum3664);
            var opresult3665 = request(opresult3662, "++(1)", [1], call3663);
            var_s = opresult3665;
            return GraceDone;
          };
          let applyMeth3659 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3659.methodName = "apply(1)";
          applyMeth3659.paramCounts = [1];
          applyMeth3659.paramNames = ["x"];
          applyMeth3659.definitionLine = 1766;
          applyMeth3659.definitionModule = "ast";
          block3659.methods["apply(1)"] = applyMeth3659;
          let matchesMeth3659 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3659.methodName = "matches(1)";
          matchesMeth3659.paramCounts = [1];
          matchesMeth3659.paramNames = ["x"];
          matchesMeth3659.definitionLine = 1766;
          matchesMeth3659.definitionModule = "ast";
          block3659.methods["matches(1)"] = matchesMeth3659;
          // call case 6: other requests
          setLineNumber(1766);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3666 = selfRequest(this, "value", [0]);
          var call3658 = request(call3666, "do(1)", [1], block3659);
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func3606;
        func3606.methodName = "pretty(1)";
        func3606.paramCounts = [1];
        func3606.paramNames = ["depth'"];
        func3606.definitionLine = 1751;
        func3606.definitionModule = "ast";
        var func3667 = function(argcv, var_depth) {    // method toGrace(_), line 1771
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(1772);    // compilenode string
          var string3668 = new GraceString("    ");
          var prod3669 = request(string3668, "*(1)", [1], var_depth);
          var var_spc = prod3669;
          setLineNumber(1773);    // compilenode string
          var string3670 = new GraceString("object {");
          var var_s = string3670;
          var if3671 = GraceDone;
          setLineNumber(1774);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3672 = selfRequest(this, "inTrait", [0]);
          if (Grace_isTrue(call3672)) {
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3673 = new GraceString("   // trait");
            var opresult3674 = request(var_s, "++(1)", [1], string3673);
            var_s = opresult3674;
            if3671 = GraceDone;
          }
          var if3675 = GraceDone;
          setLineNumber(1775);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3676 = selfRequest(this, "inClass", [0]);
          if (Grace_isTrue(call3676)) {
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3677 = new GraceString("   // class");
            var opresult3678 = request(var_s, "++(1)", [1], string3677);
            var_s = opresult3678;
            if3675 = GraceDone;
          }
          var if3679 = GraceDone;
          setLineNumber(1776);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3680 = selfRequest(this, "superclass", [0]);
          var opresult3681 = request(GraceFalse, "\u2260(1)", [1], call3680);
          if (Grace_isTrue(opresult3681)) {
            setLineNumber(1777);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3682 = new GraceString("\n");
            var opresult3683 = request(var_s, "++(1)", [1], string3682);
            var sum3685 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3686 = selfRequest(this, "superclass", [0]);
            var call3684 = request(call3686, "toGrace(1)", [1], sum3685);
            var opresult3687 = request(opresult3683, "++(1)", [1], call3684);
            var_s = opresult3687;
            if3679 = GraceDone;
          }
          setLineNumber(1779);    // compilenode block
          var block3689 = new GraceBlock(this, 1779, 1);
          block3689.guard = jsTrue;
          block3689.real = function block3689(var_t) {
            setLineNumber(1779);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3690 = new GraceString("\n");
            var opresult3691 = request(var_s, "++(1)", [1], string3690);
            var sum3693 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call3692 = request(var_t, "toGrace(1)", [1], sum3693);
            var opresult3694 = request(opresult3691, "++(1)", [1], call3692);
            var_s = opresult3694;
            return GraceDone;
          };
          let applyMeth3689 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3689.methodName = "apply(1)";
          applyMeth3689.paramCounts = [1];
          applyMeth3689.paramNames = ["t"];
          applyMeth3689.definitionLine = 1779;
          applyMeth3689.definitionModule = "ast";
          block3689.methods["apply(1)"] = applyMeth3689;
          let matchesMeth3689 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3689.methodName = "matches(1)";
          matchesMeth3689.paramCounts = [1];
          matchesMeth3689.paramNames = ["t"];
          matchesMeth3689.definitionLine = 1779;
          matchesMeth3689.definitionModule = "ast";
          block3689.methods["matches(1)"] = matchesMeth3689;
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3695 = selfRequest(this, "usedTraits", [0]);
          var call3688 = request(call3695, "do(1)", [1], block3689);
          setLineNumber(1780);    // compilenode block
          var block3697 = new GraceBlock(this, 1780, 1);
          block3697.guard = jsTrue;
          block3697.real = function block3697(var_x) {
            setLineNumber(1781);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3698 = new GraceString("\n");
            var opresult3699 = request(var_s, "++(1)", [1], string3698);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3700 = request(opresult3699, "++(1)", [1], var_spc);
            var string3701 = new GraceString("    ");
            var opresult3702 = request(opresult3700, "++(1)", [1], string3701);
            var sum3704 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call3703 = request(var_x, "toGrace(1)", [1], sum3704);
            var opresult3705 = request(opresult3702, "++(1)", [1], call3703);
            var_s = opresult3705;
            return GraceDone;
          };
          let applyMeth3697 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3697.methodName = "apply(1)";
          applyMeth3697.paramCounts = [1];
          applyMeth3697.paramNames = ["x"];
          applyMeth3697.definitionLine = 1780;
          applyMeth3697.definitionModule = "ast";
          block3697.methods["apply(1)"] = applyMeth3697;
          let matchesMeth3697 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3697.methodName = "matches(1)";
          matchesMeth3697.paramCounts = [1];
          matchesMeth3697.paramNames = ["x"];
          matchesMeth3697.definitionLine = 1780;
          matchesMeth3697.definitionModule = "ast";
          block3697.methods["matches(1)"] = matchesMeth3697;
          // call case 6: other requests
          setLineNumber(1780);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3706 = selfRequest(this, "value", [0]);
          var call3696 = request(call3706, "do(1)", [1], block3697);
          setLineNumber(1783);    // compilenode string
          var string3707 = new GraceString("\n");
          var opresult3708 = request(var_s, "++(1)", [1], string3707);
          var opresult3709 = request(opresult3708, "++(1)", [1], var_spc);
          var string3710 = new GraceString("}");
          var opresult3711 = request(opresult3709, "++(1)", [1], string3710);
          var_s = opresult3711;
          return var_s;
        };    // end of method toGrace(_)
        func3667.paramTypes = [];
        func3667.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func3667;
        func3667.methodName = "toGrace(1)";
        func3667.paramCounts = [1];
        func3667.paramNames = ["depth"];
        func3667.definitionLine = 1771;
        func3667.definitionModule = "ast";
        var func3712 = function(argcv) {    // method shallowCopy, line 1786
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(1787);    // compilenode call
          // call case 6: other requests
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          // call case 6: other requests
          if (var_objectNode === undefined) raiseUninitializedVariable("objectNode");
          var call3714 = request(var_objectNode, "new(2)", [2], var_emptySeq, GraceFalse);
          var call3713 = request(call3714, "shallowCopyFieldsFrom(1)", [1], this);
          return call3713;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func3712;
        func3712.methodName = "shallowCopy";
        func3712.paramCounts = [0];
        func3712.paramNames = [];
        func3712.definitionLine = 1786;
        func3712.definitionModule = "ast";
        var func3715 = function(argcv, var_other) {    // method postCopy(_), line 1789
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(1790);    // compilenode member
          // call case 6: other requests
          var call3717 = request(var_other, "name", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3716 = selfRequest(this, "name:=(1)", [1], call3717);
          setLineNumber(1791);    // compilenode member
          // call case 6: other requests
          var call3719 = request(var_other, "value", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3718 = selfRequest(this, "value:=(1)", [1], call3719);
          setLineNumber(1792);    // compilenode member
          // call case 6: other requests
          var call3721 = request(var_other, "superclass", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3720 = selfRequest(this, "superclass:=(1)", [1], call3721);
          setLineNumber(1793);    // compilenode member
          // call case 6: other requests
          var call3723 = request(var_other, "usedTraits", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3722 = selfRequest(this, "usedTraits:=(1)", [1], call3723);
          setLineNumber(1794);    // compilenode member
          // call case 6: other requests
          var call3725 = request(var_other, "inClass", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3724 = selfRequest(this, "inClass:=(1)", [1], call3725);
          setLineNumber(1795);    // compilenode member
          // call case 6: other requests
          var call3727 = request(var_other, "inTrait", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3726 = selfRequest(this, "inTrait:=(1)", [1], call3727);
          setLineNumber(1796);    // compilenode member
          // call case 6: other requests
          var call3729 = request(var_other, "annotations", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3728 = selfRequest(this, "annotations:=(1)", [1], call3729);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func3715;
        func3715.methodName = "postCopy(1)";
        func3715.paramCounts = [1];
        func3715.paramNames = ["other"];
        func3715.definitionLine = 1789;
        func3715.definitionModule = "ast";
        var func3730 = function(argcv) {    // method asString, line 1799
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(1800);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3731 = selfRequest(this, "kind", [0]);
          var string3732 = new GraceString(" ");
          var opresult3733 = request(call3731, "++(1)", [1], string3732);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3734 = selfRequest(this, "nameString", [0]);
          var opresult3735 = request(opresult3733, "++(1)", [1], call3734);
          return opresult3735;
        };    // end of method asString
        this.methods["asString"] = func3730;
        func3730.methodName = "asString";
        func3730.paramCounts = [0];
        func3730.paramNames = [];
        func3730.definitionLine = 1799;
        func3730.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 1624;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3425_init = function() {    // init of object on line 1624
          initFun3426.call(this);
          setLineNumber(1626);    // compilenode string
          var string3736 = new GraceString("object");
          this.data.kind = string3736;
          this.data.value = var_b;
          this.data.superclass = var_superclass__39__;
          setLineNumber(1629);    // compilenode array
          var array3738 = new GraceSequence([]);
          // call case 2: outer request
          var call3737 = selfRequest(var_prelude, "list(1)", [1], array3738);
          this.data.usedTraits = call3737;
          setLineNumber(1630);    // compilenode string
          var string3739 = new GraceString("object");
          this.data.name = string3739;
          this.data.inClass = GraceFalse;
          this.data.inTrait = GraceFalse;
          this.data.myLocalNames = GraceFalse;
          setLineNumber(1634);    // compilenode array
          var array3741 = new GraceSequence([]);
          // call case 2: outer request
          var call3740 = selfRequest(var_prelude, "list(1)", [1], array3741);
          this.data.annotations = call3740;
        };
        return obj3425_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3425_init = obj3425_build.call(inheritingObject, null, var_b, var_superclass__39__, this, aliases, exclusions);
      return obj3425_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func3424;
    func3424.methodName = "new(2)$build(3)";
    func3424.paramCounts = [2];
    func3424.paramNames = ["b", "superclass'"];
    func3424.definitionLine = 1624;
    func3424.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 1614;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj3415_init = function() {    // init of object on line 1614
    };
    return obj3415_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj3415 = emptyGraceObject("objectNode", "ast", 1614);
  var obj3415_init = obj3415_build.call(obj3415, null, this, [], []);
  obj3415_init.call(obj3415);  // end of compileobject
  var var_objectNode = obj3415;
  var reader3742_objectNode = function() {  // reader method objectNode
      if (var_objectNode === undefined) raiseUninitializedVariable("objectNode");
      return var_objectNode;
  };
  reader3742_objectNode.isDef = true;
  this.methods["objectNode"] = reader3742_objectNode;
  setLineNumber(1804);    // compilenode object
  var obj3743_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_1804");
    this.outer_ast_1804 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func3744 = function(argcv, var_values) {    // method new(_), line 1805
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("arrayNode.new(_)", "ast", 1805);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_values, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func3744;
    func3744.methodName = "new(1)";
    func3744.paramCounts = [1];
    func3744.paramNames = ["values"];
    func3744.definitionLine = 1805;
    func3744.definitionModule = "ast";
    var func3745 = function(argcv, var_values, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 1805
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj3746_build = function(ignore, var_values, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_1805");
        this.outer_ast_1805 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(1806);    // reuse call
        var initFun3747 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader3748_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader3748_kind.isDef = true;
        this.methods["kind"] = reader3748_kind;
        this.data.value = undefined;
        var reader3749_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader3749_value.isVar = true;
        this.methods["value"] = reader3749_value;
        var writer3750_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer3750_value;
        var func3751 = function(argcv) {     // accessor method isSequenceConstructor
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isSequenceConstructor", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isSequenceConstructor
        this.methods["isSequenceConstructor"] = func3751;
        func3751.methodName = "isSequenceConstructor";
        func3751.paramCounts = [0];
        func3751.paramNames = [];
        func3751.definitionLine = 1809;
        func3751.definitionModule = "ast";
        var func3752 = function(argcv) {    // method end, line 1810
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if3753 = GraceDone;
          setLineNumber(1811);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3755 = selfRequest(this, "value", [0]);
          var call3754 = request(call3755, "isEmpty", [0]);
          if (Grace_isTrue(call3754)) {
            setLineNumber(1812);    // compilenode string
            var string3757 = new GraceString("]");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3758 = selfRequest(this, "start", [0]);
            // call case 2: outer request
            var call3756 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string3757, call3758);
            if3753 = call3756;
          } else {
            setLineNumber(1814);    // compilenode string
            var string3760 = new GraceString("]");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3763 = selfRequest(this, "value", [0]);
            var call3762 = request(call3763, "last", [0]);
            var call3761 = request(call3762, "end", [0]);
            // call case 2: outer request
            var call3759 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string3760, call3761);
            if3753 = call3759;
          }
          return if3753;
        };    // end of method end
        this.methods["end"] = func3752;
        func3752.methodName = "end";
        func3752.paramCounts = [0];
        func3752.paramNames = [];
        func3752.definitionLine = 1810;
        func3752.definitionModule = "ast";
        var func3764 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1817
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if3765 = GraceDone;
          setLineNumber(1818);    // compilenode call
          // call case 6: other requests
          var call3766 = request(var_visitor, "visitArray(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call3766)) {
            setLineNumber(1819);    // compilenode call
            // call case 6: other requests
            var call3767 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call3767;
            setLineNumber(1820);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3769 = selfRequest(this, "value", [0]);
            var block3770 = new GraceBlock(this, 1820, 1);
            block3770.guard = jsTrue;
            block3770.real = function block3770(var_ax) {
              setLineNumber(1821);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call3771 = request(var_ax, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call3771;
            };
            let applyMeth3770 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3770.methodName = "apply(1)";
            applyMeth3770.paramCounts = [1];
            applyMeth3770.paramNames = ["ax"];
            applyMeth3770.definitionLine = 1820;
            applyMeth3770.definitionModule = "ast";
            block3770.methods["apply(1)"] = applyMeth3770;
            let matchesMeth3770 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3770.methodName = "matches(1)";
            matchesMeth3770.paramCounts = [1];
            matchesMeth3770.paramNames = ["ax"];
            matchesMeth3770.definitionLine = 1820;
            matchesMeth3770.definitionModule = "ast";
            block3770.methods["matches(1)"] = matchesMeth3770;
            // call case 2: outer request
            var call3768 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3769, block3770);
            if3765 = call3768;
          }
          return if3765;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func3764;
        func3764.methodName = "accept(1)from(1)";
        func3764.paramCounts = [1, 1];
        func3764.paramNames = ["visitor", "ac"];
        func3764.definitionLine = 1817;
        func3764.definitionModule = "ast";
        var func3772 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1825
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1826);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3773 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call3773;
          setLineNumber(1827);    // compilenode call
          // call case 6: other requests
          var call3774 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call3774;
          setLineNumber(1828);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3777 = selfRequest(this, "value", [0]);
          // call case 2: outer request
          var call3776 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call3777, var_blk, var_newChain);
          // call case 6: other requests
          var call3775 = request(var_n, "value:=(1)", [1], call3776);
          setLineNumber(1829);    // compilenode call
          // call case 6: other requests
          var call3778 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call3778;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func3772;
        func3772.methodName = "map(1)ancestors(1)";
        func3772.paramCounts = [1, 1];
        func3772.paramNames = ["blk", "ac"];
        func3772.definitionLine = 1825;
        func3772.definitionModule = "ast";
        var func3779 = function(argcv, var_depth) {    // method pretty(_), line 1831
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1832);    // compilenode string
          var string3780 = new GraceString("  ");
          var sum3781 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod3782 = request(string3780, "*(1)", [1], sum3781);
          var var_spc = prod3782;
          setLineNumber(1833);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3783 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var var_s = call3783;
          setLineNumber(1834);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3785 = selfRequest(this, "value", [0]);
          var block3786 = new GraceBlock(this, 1834, 1);
          block3786.guard = jsTrue;
          block3786.real = function block3786(var_ax) {
            setLineNumber(1835);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3787 = new GraceString("\n");
            var opresult3788 = request(var_s, "++(1)", [1], string3787);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3789 = request(opresult3788, "++(1)", [1], var_spc);
            var sum3791 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call3790 = request(var_ax, "pretty(1)", [1], sum3791);
            var opresult3792 = request(opresult3789, "++(1)", [1], call3790);
            var_s = opresult3792;
            return GraceDone;
          };
          let applyMeth3786 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3786.methodName = "apply(1)";
          applyMeth3786.paramCounts = [1];
          applyMeth3786.paramNames = ["ax"];
          applyMeth3786.definitionLine = 1834;
          applyMeth3786.definitionModule = "ast";
          block3786.methods["apply(1)"] = applyMeth3786;
          let matchesMeth3786 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3786.methodName = "matches(1)";
          matchesMeth3786.paramCounts = [1];
          matchesMeth3786.paramNames = ["ax"];
          matchesMeth3786.definitionLine = 1834;
          matchesMeth3786.definitionModule = "ast";
          block3786.methods["matches(1)"] = matchesMeth3786;
          // call case 2: outer request
          var call3784 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3785, block3786);
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func3779;
        func3779.methodName = "pretty(1)";
        func3779.paramCounts = [1];
        func3779.paramNames = ["depth"];
        func3779.definitionLine = 1831;
        func3779.definitionModule = "ast";
        var func3793 = function(argcv, var_depth) {    // method toGrace(_), line 1839
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(1840);    // compilenode string
          var string3794 = new GraceString("[");
          var var_s = string3794;
          setLineNumber(1841);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3797 = selfRequest(this, "value", [0]);
          var call3796 = request(call3797, "indices", [0]);
          var block3798 = new GraceBlock(this, 1841, 1);
          block3798.guard = jsTrue;
          block3798.real = function block3798(var_i) {
            setLineNumber(1842);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3801 = selfRequest(this, "value", [0]);
            var call3800 = request(call3801, "at(1)", [1], var_i);
            var call3799 = request(call3800, "toGrace(1)", [1], new GraceNum(0));
            var opresult3802 = request(var_s, "++(1)", [1], call3799);
            var_s = opresult3802;
            var if3803 = GraceDone;
            setLineNumber(1843);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3805 = selfRequest(this, "value", [0]);
            var call3804 = request(call3805, "size", [0]);
            var opresult3806 = request(var_i, "<(1)", [1], call3804);
            if (Grace_isTrue(opresult3806)) {
              setLineNumber(1844);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string3807 = new GraceString(", ");
              var opresult3808 = request(var_s, "++(1)", [1], string3807);
              var_s = opresult3808;
              if3803 = GraceDone;
            }
            return if3803;
          };
          let applyMeth3798 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth3798.methodName = "apply(1)";
          applyMeth3798.paramCounts = [1];
          applyMeth3798.paramNames = ["i"];
          applyMeth3798.definitionLine = 1841;
          applyMeth3798.definitionModule = "ast";
          block3798.methods["apply(1)"] = applyMeth3798;
          let matchesMeth3798 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth3798.methodName = "matches(1)";
          matchesMeth3798.paramCounts = [1];
          matchesMeth3798.paramNames = ["i"];
          matchesMeth3798.definitionLine = 1841;
          matchesMeth3798.definitionModule = "ast";
          block3798.methods["matches(1)"] = matchesMeth3798;
          // call case 2: outer request
          var call3795 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3796, block3798);
          setLineNumber(1847);    // compilenode string
          var string3809 = new GraceString("]");
          var opresult3810 = request(var_s, "++(1)", [1], string3809);
          var_s = opresult3810;
          return var_s;
        };    // end of method toGrace(_)
        func3793.paramTypes = [];
        func3793.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func3793;
        func3793.methodName = "toGrace(1)";
        func3793.paramCounts = [1];
        func3793.paramNames = ["depth"];
        func3793.definitionLine = 1839;
        func3793.definitionModule = "ast";
        var func3811 = function(argcv) {    // method shallowCopy, line 1850
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(1851);    // compilenode call
          // call case 6: other requests
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          // call case 6: other requests
          if (var_arrayNode === undefined) raiseUninitializedVariable("arrayNode");
          var call3813 = request(var_arrayNode, "new(1)", [1], var_emptySeq);
          var call3812 = request(call3813, "shallowCopyFieldsFrom(1)", [1], this);
          return call3812;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func3811;
        func3811.methodName = "shallowCopy";
        func3811.paramCounts = [0];
        func3811.paramNames = [];
        func3811.definitionLine = 1850;
        func3811.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 1805;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3746_init = function() {    // init of object on line 1805
          initFun3747.call(this);
          setLineNumber(1807);    // compilenode string
          var string3814 = new GraceString("array");
          this.data.kind = string3814;
          this.data.value = var_values;
        };
        return obj3746_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3746_init = obj3746_build.call(inheritingObject, null, var_values, this, aliases, exclusions);
      return obj3746_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func3745;
    func3745.methodName = "new(1)$build(3)";
    func3745.paramCounts = [1];
    func3745.paramNames = ["values"];
    func3745.definitionLine = 1805;
    func3745.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 1804;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj3743_init = function() {    // init of object on line 1804
    };
    return obj3743_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj3743 = emptyGraceObject("arrayNode", "ast", 1804);
  var obj3743_init = obj3743_build.call(obj3743, null, this, [], []);
  obj3743_init.call(obj3743);  // end of compileobject
  var var_arrayNode = obj3743;
  var reader3815_arrayNode = function() {  // reader method arrayNode
      if (var_arrayNode === undefined) raiseUninitializedVariable("arrayNode");
      return var_arrayNode;
  };
  reader3815_arrayNode.isDef = true;
  this.methods["arrayNode"] = reader3815_arrayNode;
  setLineNumber(1885);    // compilenode object
  var obj3816_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_1885");
    this.outer_ast_1885 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func3817 = function(argcv, var_request, var_receiver, var_s) {    // method new(_,_)scope(_), line 1886
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(1888);    // compilenode call
      // call case 4: self request with 2 args and 0 typeArgs 
      var call3818 = selfRequest(this, "new(2)", [2], var_request, var_receiver);
      var var_result = call3818;
      setLineNumber(1889);    // compilenode call
      // call case 6: other requests
      var call3819 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_,_)scope(_)
    this.methods["new(2)scope(1)"] = func3817;
    func3817.methodName = "new(2)scope(1)";
    func3817.paramCounts = [2, 1];
    func3817.paramNames = ["request", "receiver", "s"];
    func3817.definitionLine = 1886;
    func3817.definitionModule = "ast";
    var func3820 = function(argcv, var_request, var_receiver__39__) {    // method new(_,_), line 1892
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("memberNode.new(_,_)", "ast", 1892);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_request, var_receiver__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func3820;
    func3820.methodName = "new(2)";
    func3820.paramCounts = [2];
    func3820.paramNames = ["request", "receiver'"];
    func3820.definitionLine = 1892;
    func3820.definitionModule = "ast";
    var func3821 = function(argcv, var_request, var_receiver__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 1892
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj3822_build = function(ignore, var_request, var_receiver__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_1892");
        this.outer_ast_1892 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(1894);    // reuse call
        var initFun3823 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader3824_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader3824_kind.isDef = true;
        this.methods["kind"] = reader3824_kind;
        this.data.value = undefined;
        var reader3825_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader3825_value.isVar = true;
        this.methods["value"] = reader3825_value;
        var writer3826_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer3826_value;
        this.data.receiver = undefined;
        var reader3827_receiver = function() {  // reader method receiver
            if (this.data.receiver === undefined) raiseUninitializedVariable("receiver");
            return this.data.receiver;
        };
        reader3827_receiver.isVar = true;
        this.methods["receiver"] = reader3827_receiver;
        var writer3828_receiver = function(argcv, n) {   // writer method receiver:=(_)
          this.data.receiver = n;
          return GraceDone;
        };
        this.methods["receiver:=(1)"] = writer3828_receiver;
        this.data.generics = undefined;
        var reader3829_generics = function() {  // reader method generics
            if (this.data.generics === undefined) raiseUninitializedVariable("generics");
            return this.data.generics;
        };
        reader3829_generics.isVar = true;
        this.methods["generics"] = reader3829_generics;
        var writer3830_generics = function(argcv, n) {   // writer method generics:=(_)
          this.data.generics = n;
          return GraceDone;
        };
        this.methods["generics:=(1)"] = writer3830_generics;
        this.data.isSelfRequest = undefined;
        var reader3831_isSelfRequest = function() {  // reader method isSelfRequest
            if (this.data.isSelfRequest === undefined) raiseUninitializedVariable("isSelfRequest");
            return this.data.isSelfRequest;
        };
        reader3831_isSelfRequest.isVar = true;
        this.methods["isSelfRequest"] = reader3831_isSelfRequest;
        var writer3832_isSelfRequest = function(argcv, n) {   // writer method isSelfRequest:=(_)
          this.data.isSelfRequest = n;
          return GraceDone;
        };
        this.methods["isSelfRequest:=(1)"] = writer3832_isSelfRequest;
        this.data.isTailCall = undefined;
        var reader3833_isTailCall = function() {  // reader method isTailCall
            if (this.data.isTailCall === undefined) raiseUninitializedVariable("isTailCall");
            return this.data.isTailCall;
        };
        reader3833_isTailCall.isVar = true;
        this.methods["isTailCall"] = reader3833_isTailCall;
        var writer3834_isTailCall = function(argcv, n) {   // writer method isTailCall:=(_)
          this.data.isTailCall = n;
          return GraceDone;
        };
        this.methods["isTailCall:=(1)"] = writer3834_isTailCall;
        this.data.isFresh = undefined;
        var reader3835_isFresh = function() {  // reader method isFresh
            if (this.data.isFresh === undefined) raiseUninitializedVariable("isFresh");
            return this.data.isFresh;
        };
        reader3835_isFresh.isVar = true;
        this.methods["isFresh"] = reader3835_isFresh;
        var writer3836_isFresh = function(argcv, n) {   // writer method isFresh:=(_)
          this.data.isFresh = n;
          return GraceDone;
        };
        this.methods["isFresh:=(1)"] = writer3836_isFresh;
        var func3837 = function(argcv) {    // method end, line 1902
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if3838 = GraceDone;
          setLineNumber(1903);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3840 = selfRequest(this, "receiver", [0]);
          var call3839 = request(call3840, "isImplicit", [0]);
          if (Grace_isTrue(call3839)) {
            setLineNumber(1904);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3842 = selfRequest(this, "start", [0]);
            // call case 2: outer request
            var call3841 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], var_request, call3842);
            if3838 = call3841;
          } else {
            setLineNumber(1906);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3845 = selfRequest(this, "receiver", [0]);
            var call3844 = request(call3845, "end", [0]);
            // call case 2: outer request
            var call3843 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], var_request, call3844);
            if3838 = call3843;
          }
          return if3838;
        };    // end of method end
        this.methods["end"] = func3837;
        func3837.methodName = "end";
        func3837.paramCounts = [0];
        func3837.paramNames = [];
        func3837.definitionLine = 1902;
        func3837.definitionModule = "ast";
        var func3846 = function(argcv) {    // method onSelf, line 1909
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("onSelf", 0, numArgs - 0);
          }
          setLineNumber(1910);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3847 = selfRequest(this, "isSelfRequest:=(1)", [1], GraceTrue);
          return this;
        };    // end of method onSelf
        this.methods["onSelf"] = func3846;
        func3846.methodName = "onSelf";
        func3846.paramCounts = [0];
        func3846.paramNames = [];
        func3846.definitionLine = 1909;
        func3846.definitionModule = "ast";
        var func3848 = function(argcv, var_gens) {    // method withGenericArgs(_), line 1913
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("withGenericArgs(_)", 0, numArgs - 1);
          }
          setLineNumber(1914);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3849 = selfRequest(this, "generics:=(1)", [1], var_gens);
          return this;
        };    // end of method withGenericArgs(_)
        this.methods["withGenericArgs(1)"] = func3848;
        func3848.methodName = "withGenericArgs(1)";
        func3848.paramCounts = [1];
        func3848.paramNames = ["gens"];
        func3848.definitionLine = 1913;
        func3848.definitionModule = "ast";
        var func3850 = function(argcv) {    // method reqStart, line 1917
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("reqStart", 0, numArgs - 0);
          }
          var if3851 = GraceDone;
          setLineNumber(1919);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3853 = selfRequest(this, "receiver", [0]);
          var call3852 = request(call3853, "isImplicit", [0]);
          if (Grace_isTrue(call3852)) {
            setLineNumber(1920);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3854 = selfRequest(this, "start", [0]);
            if3851 = call3854;
          } else {
            setLineNumber(1922);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3857 = selfRequest(this, "receiver", [0]);
            var call3856 = request(call3857, "end", [0]);
            // call case 2: outer request
            var call3855 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], var_request, call3856);
            var var_reqEnd = call3855;
            setLineNumber(1923);    // compilenode member
            // call case 6: other requests
            if (var_reqEnd === undefined) raiseUninitializedVariable("reqEnd");
            var call3859 = request(var_reqEnd, "line", [0]);
            // call case 6: other requests
            if (var_reqEnd === undefined) raiseUninitializedVariable("reqEnd");
            var call3860 = request(var_reqEnd, "column", [0]);
            // call case 6: other requests
            var call3861 = request(var_request, "size", [0]);
            var diff3862 = request(call3860, "-(1)", [1], call3861);
            var sum3863 = request(diff3862, "+(1)", [1], new GraceNum(1));
            // call case 2: outer request
            var call3858 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call3859, sum3863);
            if3851 = call3858;
          }
          return if3851;
        };    // end of method reqStart
        func3850.confidential = true;
        this.methods["reqStart"] = func3850;
        func3850.methodName = "reqStart";
        func3850.paramCounts = [0];
        func3850.paramNames = [];
        func3850.definitionLine = 1917;
        func3850.definitionModule = "ast";
        var func3864 = function(argcv) {    // method nameString, line 1926
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(1926);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3865 = selfRequest(this, "value", [0]);
          return call3865;
        };    // end of method nameString
        this.methods["nameString"] = func3864;
        func3864.methodName = "nameString";
        func3864.paramCounts = [0];
        func3864.paramNames = [];
        func3864.definitionLine = 1926;
        func3864.definitionModule = "ast";
        var func3866 = function(argcv) {    // method canonicalName, line 1927
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          setLineNumber(1927);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3867 = selfRequest(this, "value", [0]);
          return call3867;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func3866;
        func3866.methodName = "canonicalName";
        func3866.paramCounts = [0];
        func3866.paramNames = [];
        func3866.definitionLine = 1927;
        func3866.definitionModule = "ast";
        var func3868 = function(argcv) {     // accessor method isMember
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isMember", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isMember
        this.methods["isMember"] = func3868;
        func3868.methodName = "isMember";
        func3868.paramCounts = [0];
        func3868.paramNames = [];
        func3868.definitionLine = 1928;
        func3868.definitionModule = "ast";
        var func3869 = function(argcv) {     // accessor method isCall
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isCall", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isCall
        this.methods["isCall"] = func3869;
        func3869.methodName = "isCall";
        func3869.paramCounts = [0];
        func3869.paramNames = [];
        func3869.definitionLine = 1929;
        func3869.definitionModule = "ast";
        var func3870 = function(argcv) {    // method parts, line 1931
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("parts", 0, numArgs - 0);
          }
          setLineNumber(1931);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3873 = selfRequest(this, "reqStart", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3875 = selfRequest(this, "nameString", [0]);
          // call case 6: other requests
          if (var_requestPart === undefined) raiseUninitializedVariable("requestPart");
          var call3874 = request(var_requestPart, "request(1)", [1], call3875);
          var call3872 = request(call3874, "setStart(1)", [1], call3873);
          // call case 6: other requests
          // call case 2: outer request
          var call3876 = selfRequest(var_prelude, "list", [0]);
          var call3871 = request(call3876, "with(1)", [1], call3872);
          return call3871;
        };    // end of method parts
        this.methods["parts"] = func3870;
        func3870.methodName = "parts";
        func3870.paramCounts = [0];
        func3870.paramNames = [];
        func3870.definitionLine = 1931;
        func3870.definitionModule = "ast";
        var func3877 = function(argcv) {     // accessor method arguments
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("arguments", 0, numArgs - 0);
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          return var_emptySeq;
        };    // end of method arguments
        this.methods["arguments"] = func3877;
        func3877.methodName = "arguments";
        func3877.paramCounts = [0];
        func3877.paramNames = [];
        func3877.definitionLine = 1932;
        func3877.definitionModule = "ast";
        var func3878 = function(argcv, var_action) {    // method argumentsDo(_), line 1933
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("argumentsDo(_)", 0, numArgs - 1);
          }
          return GraceDone;
        };    // end of method argumentsDo(_)
        this.methods["argumentsDo(1)"] = func3878;
        func3878.methodName = "argumentsDo(1)";
        func3878.paramCounts = [1];
        func3878.paramNames = ["action"];
        func3878.definitionLine = 1933;
        func3878.definitionModule = "ast";
        var func3879 = function(argcv) {    // method numArgs, line 1934
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numArgs", 0, numArgs - 0);
          }
          setLineNumber(1934);    // compilenode num
          return new GraceNum(0);
        };    // end of method numArgs
        this.methods["numArgs"] = func3879;
        func3879.methodName = "numArgs";
        func3879.paramCounts = [0];
        func3879.paramNames = [];
        func3879.definitionLine = 1934;
        func3879.definitionModule = "ast";
        var func3880 = function(argcv) {    // method numTypeArgs, line 1935
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeArgs", 0, numArgs - 0);
          }
          var if3881 = GraceDone;
          setLineNumber(1936);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3882 = selfRequest(this, "generics", [0]);
          var opresult3883 = request(GraceFalse, "==(1)", [1], call3882);
          if (Grace_isTrue(opresult3883)) {
            if3881 = new GraceNum(0);
          } else {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3885 = selfRequest(this, "generics", [0]);
            var call3884 = request(call3885, "size", [0]);
            if3881 = call3884;
          }
          return if3881;
        };    // end of method numTypeArgs
        this.methods["numTypeArgs"] = func3880;
        func3880.methodName = "numTypeArgs";
        func3880.paramCounts = [0];
        func3880.paramNames = [];
        func3880.definitionLine = 1935;
        func3880.definitionModule = "ast";
        var func3886 = function(argcv) {    // method hasTypeArgs, line 1938
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("hasTypeArgs", 0, numArgs - 0);
          }
          setLineNumber(1938);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3887 = selfRequest(this, "generics", [0]);
          var opresult3888 = request(GraceFalse, "\u2260(1)", [1], call3887);
          return opresult3888;
        };    // end of method hasTypeArgs
        this.methods["hasTypeArgs"] = func3886;
        func3886.methodName = "hasTypeArgs";
        func3886.paramCounts = [0];
        func3886.paramNames = [];
        func3886.definitionLine = 1938;
        func3886.definitionModule = "ast";
        var func3889 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 1940
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if3890 = GraceDone;
          setLineNumber(1941);    // compilenode call
          // call case 6: other requests
          var call3891 = request(var_visitor, "visitMember(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call3891)) {
            setLineNumber(1942);    // compilenode call
            // call case 6: other requests
            var call3892 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call3892;
            var if3893 = GraceDone;
            setLineNumber(1943);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3894 = selfRequest(this, "generics", [0]);
            var opresult3895 = request(GraceFalse, "\u2260(1)", [1], call3894);
            if (Grace_isTrue(opresult3895)) {
              setLineNumber(1944);    // compilenode block
              var block3897 = new GraceBlock(this, 1944, 1);
              block3897.guard = jsTrue;
              block3897.real = function block3897(var_each) {
                setLineNumber(1944);    // compilenode call
                if (var_newChain === undefined) raiseUninitializedVariable("newChain");
                // call case 6: other requests
                var call3898 = request(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                return call3898;
              };
              let applyMeth3897 = function apply_1 (argcv, ...args) {
                  if (this.guard.apply(this.receiver, args))
                      return this.real.apply(this.receiver, args);
                  badBlockArgs.apply(this, args);
              };
              applyMeth3897.methodName = "apply(1)";
              applyMeth3897.paramCounts = [1];
              applyMeth3897.paramNames = ["each"];
              applyMeth3897.definitionLine = 1944;
              applyMeth3897.definitionModule = "ast";
              block3897.methods["apply(1)"] = applyMeth3897;
              let matchesMeth3897 = function matches_1 (argcv, ...args) {
                  return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
              };
              matchesMeth3897.methodName = "matches(1)";
              matchesMeth3897.paramCounts = [1];
              matchesMeth3897.paramNames = ["each"];
              matchesMeth3897.definitionLine = 1944;
              matchesMeth3897.definitionModule = "ast";
              block3897.methods["matches(1)"] = matchesMeth3897;
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3899 = selfRequest(this, "generics", [0]);
              var call3896 = request(call3899, "do(1)", [1], block3897);
              if3893 = call3896;
            }
            setLineNumber(1946);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3901 = selfRequest(this, "receiver", [0]);
            var call3900 = request(call3901, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if3890 = call3900;
          }
          return if3890;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func3889;
        func3889.methodName = "accept(1)from(1)";
        func3889.paramCounts = [1, 1];
        func3889.paramNames = ["visitor", "ac"];
        func3889.definitionLine = 1940;
        func3889.definitionModule = "ast";
        var func3902 = function(argcv) {    // method isSelfOrOuter, line 1949
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isSelfOrOuter", 0, numArgs - 0);
          }
          setLineNumber(1950);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3904 = selfRequest(this, "receiver", [0]);
          var call3903 = request(call3904, "isSelfOrOuter", [0]);
          return call3903;
        };    // end of method isSelfOrOuter
        this.methods["isSelfOrOuter"] = func3902;
        func3902.methodName = "isSelfOrOuter";
        func3902.paramCounts = [0];
        func3902.paramNames = [];
        func3902.definitionLine = 1949;
        func3902.definitionModule = "ast";
        var func3905 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 1952
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(1953);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3906 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call3906;
          setLineNumber(1954);    // compilenode call
          // call case 6: other requests
          var call3907 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call3907;
          setLineNumber(1955);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3910 = selfRequest(this, "receiver", [0]);
          var call3909 = request(call3910, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call3908 = request(var_n, "receiver:=(1)", [1], call3909);
          setLineNumber(1956);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3913 = selfRequest(this, "generics", [0]);
          // call case 2: outer request
          var call3912 = selfRequest(importedModules["ast"], "maybeListMap(2)ancestors(1)", [2, 1], call3913, var_blk, var_newChain);
          // call case 6: other requests
          var call3911 = request(var_n, "generics:=(1)", [1], call3912);
          setLineNumber(1957);    // compilenode call
          // call case 6: other requests
          var call3914 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call3914;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func3905;
        func3905.methodName = "map(1)ancestors(1)";
        func3905.paramCounts = [1, 1];
        func3905.paramNames = ["blk", "ac"];
        func3905.definitionLine = 1952;
        func3905.definitionModule = "ast";
        var func3915 = function(argcv, var_depth) {    // method pretty(_), line 1959
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(1960);    // compilenode string
          var string3916 = new GraceString("  ");
          var sum3917 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod3918 = request(string3916, "*(1)", [1], sum3917);
          var var_spc = prod3918;
          setLineNumber(1961);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call3919 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var var_s = call3919;
          var if3920 = GraceDone;
          setLineNumber(1962);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3921 = selfRequest(this, "isSelfRequest", [0]);
          if (Grace_isTrue(call3921)) {
            var string3922 = new GraceString(" on self\n");
            if3920 = string3922;
          } else {
            var string3923 = new GraceString("\n");
            if3920 = string3923;
          }
          var opresult3924 = request(var_s, "++(1)", [1], if3920);
          var_s = opresult3924;
          setLineNumber(1963);    // compilenode op
          var opresult3925 = request(var_s, "++(1)", [1], var_spc);
          var string3926 = new GraceString("Receiver: ");
          var opresult3927 = request(opresult3925, "++(1)", [1], string3926);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3929 = selfRequest(this, "receiver", [0]);
          var call3928 = request(call3929, "pretty(1)", [1], var_depth);
          var opresult3930 = request(opresult3927, "++(1)", [1], call3928);
          var string3931 = new GraceString("\n");
          var opresult3932 = request(opresult3930, "++(1)", [1], string3931);
          var_s = opresult3932;
          setLineNumber(1964);    // compilenode op
          var opresult3933 = request(var_s, "++(1)", [1], var_spc);
          var string3934 = new GraceString("Method Name: ");
          var opresult3935 = request(opresult3933, "++(1)", [1], string3934);
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3938 = selfRequest(this, "parts", [0]);
          var call3937 = request(call3938, "first", [0]);
          var call3936 = request(call3937, "pretty(1)", [1], var_depth);
          var opresult3939 = request(opresult3935, "++(1)", [1], call3936);
          var_s = opresult3939;
          var if3940 = GraceDone;
          setLineNumber(1965);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3941 = selfRequest(this, "generics", [0]);
          var opresult3942 = request(GraceFalse, "\u2260(1)", [1], call3941);
          if (Grace_isTrue(opresult3942)) {
            setLineNumber(1966);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3943 = new GraceString("\n");
            var opresult3944 = request(var_s, "++(1)", [1], string3943);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult3945 = request(opresult3944, "++(1)", [1], var_spc);
            var string3946 = new GraceString("Generics:");
            var opresult3947 = request(opresult3945, "++(1)", [1], string3946);
            var_s = opresult3947;
            setLineNumber(1967);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3949 = selfRequest(this, "generics", [0]);
            var block3950 = new GraceBlock(this, 1967, 1);
            block3950.guard = jsTrue;
            block3950.real = function block3950(var_g) {
              setLineNumber(1968);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string3951 = new GraceString("\n");
              var opresult3952 = request(var_s, "++(1)", [1], string3951);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult3953 = request(opresult3952, "++(1)", [1], var_spc);
              var string3954 = new GraceString("  ");
              var opresult3955 = request(opresult3953, "++(1)", [1], string3954);
              var sum3957 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              var call3956 = request(var_g, "pretty(1)", [1], sum3957);
              var opresult3958 = request(opresult3955, "++(1)", [1], call3956);
              var_s = opresult3958;
              return GraceDone;
            };
            let applyMeth3950 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3950.methodName = "apply(1)";
            applyMeth3950.paramCounts = [1];
            applyMeth3950.paramNames = ["g"];
            applyMeth3950.definitionLine = 1967;
            applyMeth3950.definitionModule = "ast";
            block3950.methods["apply(1)"] = applyMeth3950;
            let matchesMeth3950 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3950.methodName = "matches(1)";
            matchesMeth3950.paramCounts = [1];
            matchesMeth3950.paramNames = ["g"];
            matchesMeth3950.definitionLine = 1967;
            matchesMeth3950.definitionModule = "ast";
            block3950.methods["matches(1)"] = matchesMeth3950;
            // call case 2: outer request
            var call3948 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call3949, block3950);
            if3940 = call3948;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func3915;
        func3915.methodName = "pretty(1)";
        func3915.paramCounts = [1];
        func3915.paramNames = ["depth"];
        func3915.definitionLine = 1959;
        func3915.definitionModule = "ast";
        var func3959 = function(argcv, var_depth) {    // method toGrace(_), line 1973
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(1974);    // compilenode string
          var string3960 = new GraceString("");
          var var_s = string3960;
          var if3961 = GraceDone;
          setLineNumber(1975);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3964 = selfRequest(this, "receiver", [0]);
          var call3963 = request(call3964, "isImplicit", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3966 = selfRequest(this, "receiver", [0]);
          var call3965 = request(call3966, "isSelfOrOuter", [0]);
          var opresult3967 = request(call3963, "||(1)", [1], call3965);
          var call3962 = request(opresult3967, "not", [0]);
          if (Grace_isTrue(call3962)) {
            setLineNumber(1976);    // compilenode call
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3969 = selfRequest(this, "receiver", [0]);
            var call3968 = request(call3969, "toGrace(1)", [1], var_depth);
            var string3970 = new GraceString(".");
            var opresult3971 = request(call3968, "++(1)", [1], string3970);
            var_s = opresult3971;
            if3961 = GraceDone;
          }
          setLineNumber(1978);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3972 = selfRequest(this, "value", [0]);
          var opresult3973 = request(var_s, "++(1)", [1], call3972);
          var_s = opresult3973;
          var if3974 = GraceDone;
          setLineNumber(1979);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call3975 = selfRequest(this, "generics", [0]);
          var opresult3976 = request(GraceFalse, "\u2260(1)", [1], call3975);
          if (Grace_isTrue(opresult3976)) {
            setLineNumber(1980);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string3977 = new GraceString("\u27e6");
            var opresult3978 = request(var_s, "++(1)", [1], string3977);
            var_s = opresult3978;
            setLineNumber(1981);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3981 = selfRequest(this, "generics", [0]);
            var call3980 = request(call3981, "size", [0]);
            var diff3982 = request(call3980, "-(1)", [1], new GraceNum(1));
            var opresult3983 = request(new GraceNum(1), "..(1)", [1], diff3982);
            var block3984 = new GraceBlock(this, 1981, 1);
            block3984.guard = jsTrue;
            block3984.real = function block3984(var_ix) {
              setLineNumber(1982);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var sum3986 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call3988 = selfRequest(this, "generics", [0]);
              var call3987 = request(call3988, "at(1)", [1], var_ix);
              var call3985 = request(call3987, "toGrace(1)", [1], sum3986);
              var opresult3989 = request(var_s, "++(1)", [1], call3985);
              var string3990 = new GraceString(", ");
              var opresult3991 = request(opresult3989, "++(1)", [1], string3990);
              var_s = opresult3991;
              return GraceDone;
            };
            let applyMeth3984 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth3984.methodName = "apply(1)";
            applyMeth3984.paramCounts = [1];
            applyMeth3984.paramNames = ["ix"];
            applyMeth3984.definitionLine = 1981;
            applyMeth3984.definitionModule = "ast";
            block3984.methods["apply(1)"] = applyMeth3984;
            let matchesMeth3984 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth3984.methodName = "matches(1)";
            matchesMeth3984.paramCounts = [1];
            matchesMeth3984.paramNames = ["ix"];
            matchesMeth3984.definitionLine = 1981;
            matchesMeth3984.definitionModule = "ast";
            block3984.methods["matches(1)"] = matchesMeth3984;
            // call case 2: outer request
            var call3979 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], opresult3983, block3984);
            setLineNumber(1984);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum3993 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call3995 = selfRequest(this, "generics", [0]);
            var call3994 = request(call3995, "last", [0]);
            var call3992 = request(call3994, "toGrace(1)", [1], sum3993);
            var opresult3996 = request(var_s, "++(1)", [1], call3992);
            var string3997 = new GraceString("\u27e7");
            var opresult3998 = request(opresult3996, "++(1)", [1], string3997);
            var_s = opresult3998;
            if3974 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func3959.paramTypes = [];
        func3959.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func3959;
        func3959.methodName = "toGrace(1)";
        func3959.paramCounts = [1];
        func3959.paramNames = ["depth"];
        func3959.definitionLine = 1973;
        func3959.definitionModule = "ast";
        var func3999 = function(argcv) {    // method asString, line 1988
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(1988);    // compilenode num
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4000 = selfRequest(this, "toGrace(1)", [1], new GraceNum(0));
          return call4000;
        };    // end of method asString
        this.methods["asString"] = func3999;
        func3999.methodName = "asString";
        func3999.paramCounts = [0];
        func3999.paramNames = [];
        func3999.definitionLine = 1988;
        func3999.definitionModule = "ast";
        var func4001 = function(argcv) {    // method asIdentifier, line 1989
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asIdentifier", 0, numArgs - 0);
          }
          var if4002 = GraceDone;
          setLineNumber(1991);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4004 = selfRequest(this, "scope", [0]);
          var call4003 = request(call4004, "variety", [0]);
          var string4005 = new GraceString("fake");
          var opresult4006 = request(call4003, "==(1)", [1], string4005);
          if (Grace_isTrue(opresult4006)) {
            setLineNumber(1992);    // compilenode string
            var string4008 = new GraceString("asIdentifier requested on ");
            // call case 4: self request with 1 args and 0 typeArgs 
            var call4009 = selfRequest(this, "pretty(1)", [1], new GraceNum(0));
            var opresult4010 = request(string4008, "++(1)", [1], call4009);
            var string4011 = new GraceString(" when scope was fake");
            var opresult4012 = request(opresult4010, "++(1)", [1], string4011);
            // call case 6: other requests
            // call case 2: outer request
            var call4013 = selfRequest(var_prelude, "ProgrammingError", [0]);
            var call4007 = request(call4013, "raise(1)", [1], opresult4012);
            if4002 = call4007;
          }
          setLineNumber(1994);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4015 = selfRequest(this, "nameString", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4016 = selfRequest(this, "scope", [0]);
          // call case 6: other requests
          if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
          var call4014 = request(var_identifierNode, "new(2)scope(1)", [2, 1], call4015, GraceFalse, call4016);
          var var_resultNode = call4014;
          setLineNumber(1995);    // compilenode call
          // call case 6: other requests
          var call4017 = request(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
          setLineNumber(1996);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4019 = selfRequest(this, "line", [0]);
          // call case 6: other requests
          var call4018 = request(var_resultNode, "line:=(1)", [1], call4019);
          setLineNumber(1997);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4021 = selfRequest(this, "linePos", [0]);
          // call case 6: other requests
          var call4020 = request(var_resultNode, "linePos:=(1)", [1], call4021);
          setLineNumber(1998);    // compilenode return
          return var_resultNode;
        };    // end of method asIdentifier
        this.methods["asIdentifier"] = func4001;
        func4001.methodName = "asIdentifier";
        func4001.paramCounts = [0];
        func4001.paramNames = [];
        func4001.definitionLine = 1989;
        func4001.definitionModule = "ast";
        var func4022 = function(argcv) {    // method shallowCopy, line 2000
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2001);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4025 = selfRequest(this, "nameString", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4026 = selfRequest(this, "receiver", [0]);
          // call case 6: other requests
          if (var_memberNode === undefined) raiseUninitializedVariable("memberNode");
          var call4024 = request(var_memberNode, "new(2)", [2], call4025, call4026);
          var call4023 = request(call4024, "shallowCopyFieldsFrom(1)", [1], this);
          return call4023;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4022;
        func4022.methodName = "shallowCopy";
        func4022.paramCounts = [0];
        func4022.paramNames = [];
        func4022.definitionLine = 2000;
        func4022.definitionModule = "ast";
        var func4027 = function(argcv) {    // method statementName, line 2003
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2003);    // compilenode string
          var string4028 = new GraceString("expression");
          return string4028;
        };    // end of method statementName
        this.methods["statementName"] = func4027;
        func4027.methodName = "statementName";
        func4027.paramCounts = [0];
        func4027.paramNames = [];
        func4027.definitionLine = 2003;
        func4027.definitionModule = "ast";
        var func4029 = function(argcv, var_other) {    // method postCopy(_), line 2004
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2005);    // compilenode member
          // call case 6: other requests
          var call4031 = request(var_other, "generics", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4030 = selfRequest(this, "generics:=(1)", [1], call4031);
          setLineNumber(2006);    // compilenode member
          // call case 6: other requests
          var call4033 = request(var_other, "isSelfRequest", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4032 = selfRequest(this, "isSelfRequest:=(1)", [1], call4033);
          setLineNumber(2007);    // compilenode member
          // call case 6: other requests
          var call4035 = request(var_other, "isTailCall", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4034 = selfRequest(this, "isTailCall:=(1)", [1], call4035);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func4029;
        func4029.methodName = "postCopy(1)";
        func4029.paramCounts = [1];
        func4029.paramNames = ["other"];
        func4029.definitionLine = 2004;
        func4029.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 1892;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj3822_init = function() {    // init of object on line 1892
          initFun3823.call(this);
          setLineNumber(1895);    // compilenode string
          var string4036 = new GraceString("member");
          this.data.kind = string4036;
          this.data.value = var_request;
          this.data.receiver = var_receiver__39__;
          this.data.generics = GraceFalse;
          this.data.isSelfRequest = GraceFalse;
          this.data.isTailCall = GraceFalse;
          this.data.isFresh = GraceFalse;
        };
        return obj3822_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj3822_init = obj3822_build.call(inheritingObject, null, var_request, var_receiver__39__, this, aliases, exclusions);
      return obj3822_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func3821;
    func3821.methodName = "new(2)$build(3)";
    func3821.paramCounts = [2];
    func3821.paramNames = ["request", "receiver'"];
    func3821.definitionLine = 1892;
    func3821.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 1885;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj3816_init = function() {    // init of object on line 1885
    };
    return obj3816_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj3816 = emptyGraceObject("memberNode", "ast", 1885);
  var obj3816_init = obj3816_build.call(obj3816, null, this, [], []);
  obj3816_init.call(obj3816);  // end of compileobject
  var var_memberNode = obj3816;
  var reader4037_memberNode = function() {  // reader method memberNode
      if (var_memberNode === undefined) raiseUninitializedVariable("memberNode");
      return var_memberNode;
  };
  reader4037_memberNode.isDef = true;
  this.methods["memberNode"] = reader4037_memberNode;
  setLineNumber(2012);    // compilenode object
  var obj4038_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2012");
    this.outer_ast_2012 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4039 = function(argcv, var_base, var_arguments) {    // method new(_,_), line 2013
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("genericNode.new(_,_)", "ast", 2013);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_base, var_arguments, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func4039;
    func4039.methodName = "new(2)";
    func4039.paramCounts = [2];
    func4039.paramNames = ["base", "arguments"];
    func4039.definitionLine = 2013;
    func4039.definitionModule = "ast";
    var func4040 = function(argcv, var_base, var_arguments, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 2013
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj4041_build = function(ignore, var_base, var_arguments, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2013");
        this.outer_ast_2013 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2015);    // reuse call
        var initFun4042 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4043_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4043_kind.isDef = true;
        this.methods["kind"] = reader4043_kind;
        this.data.value = undefined;
        var reader4044_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4044_value.isVar = true;
        this.methods["value"] = reader4044_value;
        var writer4045_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer4045_value;
        this.data.args = undefined;
        var reader4046_args = function() {  // reader method args
            if (this.data.args === undefined) raiseUninitializedVariable("args");
            return this.data.args;
        };
        reader4046_args.isVar = true;
        this.methods["args"] = reader4046_args;
        var writer4047_args = function(argcv, n) {   // writer method args:=(_)
          this.data.args = n;
          return GraceDone;
        };
        this.methods["args:=(1)"] = writer4047_args;
        var func4048 = function(argcv) {    // method end, line 2021
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(2021);    // compilenode string
          var string4050 = new GraceString("\u27e7");
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4053 = selfRequest(this, "args", [0]);
          var call4052 = request(call4053, "last", [0]);
          var call4051 = request(call4052, "end", [0]);
          // call case 2: outer request
          var call4049 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string4050, call4051);
          return call4049;
        };    // end of method end
        this.methods["end"] = func4048;
        func4048.methodName = "end";
        func4048.paramCounts = [0];
        func4048.paramNames = [];
        func4048.definitionLine = 2021;
        func4048.definitionModule = "ast";
        var func4054 = function(argcv) {    // method nameString, line 2022
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(2022);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4056 = selfRequest(this, "value", [0]);
          var call4055 = request(call4056, "nameString", [0]);
          return call4055;
        };    // end of method nameString
        this.methods["nameString"] = func4054;
        func4054.methodName = "nameString";
        func4054.paramCounts = [0];
        func4054.paramNames = [];
        func4054.definitionLine = 2022;
        func4054.definitionModule = "ast";
        var func4057 = function(argcv) {    // method asString, line 2023
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(2023);    // compilenode num
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4058 = selfRequest(this, "toGrace(1)", [1], new GraceNum(0));
          return call4058;
        };    // end of method asString
        this.methods["asString"] = func4057;
        func4057.methodName = "asString";
        func4057.paramCounts = [0];
        func4057.paramNames = [];
        func4057.definitionLine = 2023;
        func4057.definitionModule = "ast";
        var func4059 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2024
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if4060 = GraceDone;
          setLineNumber(2025);    // compilenode call
          // call case 6: other requests
          var call4061 = request(var_visitor, "visitGeneric(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call4061)) {
            setLineNumber(2026);    // compilenode call
            // call case 6: other requests
            var call4062 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call4062;
            setLineNumber(2027);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4064 = selfRequest(this, "value", [0]);
            var call4063 = request(call4064, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(2028);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4066 = selfRequest(this, "args", [0]);
            var block4067 = new GraceBlock(this, 2028, 1);
            block4067.guard = jsTrue;
            block4067.real = function block4067(var_p) {
              setLineNumber(2029);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call4068 = request(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call4068;
            };
            let applyMeth4067 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth4067.methodName = "apply(1)";
            applyMeth4067.paramCounts = [1];
            applyMeth4067.paramNames = ["p"];
            applyMeth4067.definitionLine = 2028;
            applyMeth4067.definitionModule = "ast";
            block4067.methods["apply(1)"] = applyMeth4067;
            let matchesMeth4067 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth4067.methodName = "matches(1)";
            matchesMeth4067.paramCounts = [1];
            matchesMeth4067.paramNames = ["p"];
            matchesMeth4067.definitionLine = 2028;
            matchesMeth4067.definitionModule = "ast";
            block4067.methods["matches(1)"] = matchesMeth4067;
            // call case 2: outer request
            var call4065 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call4066, block4067);
            if4060 = call4065;
          }
          return if4060;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4059;
        func4059.methodName = "accept(1)from(1)";
        func4059.paramCounts = [1, 1];
        func4059.paramNames = ["visitor", "ac"];
        func4059.definitionLine = 2024;
        func4059.definitionModule = "ast";
        var func4069 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2033
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2034);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4070 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4070;
          setLineNumber(2035);    // compilenode call
          // call case 6: other requests
          var call4071 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4071;
          setLineNumber(2036);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4074 = selfRequest(this, "value", [0]);
          var call4073 = request(call4074, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4072 = request(var_n, "value:=(1)", [1], call4073);
          setLineNumber(2037);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4077 = selfRequest(this, "args", [0]);
          // call case 2: outer request
          var call4076 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call4077, var_blk, var_newChain);
          // call case 6: other requests
          var call4075 = request(var_n, "args:=(1)", [1], call4076);
          setLineNumber(2038);    // compilenode call
          // call case 6: other requests
          var call4078 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4078;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4069;
        func4069.methodName = "map(1)ancestors(1)";
        func4069.paramCounts = [1, 1];
        func4069.paramNames = ["blk", "ac"];
        func4069.definitionLine = 2033;
        func4069.definitionModule = "ast";
        var func4079 = function(argcv, var_depth) {    // method pretty(_), line 2040
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2041);    // compilenode string
          var string4080 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4081 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult4082 = request(string4080, "++(1)", [1], call4081);
          var string4083 = new GraceString("(");
          var opresult4084 = request(opresult4082, "++(1)", [1], string4083);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4086 = selfRequest(this, "value", [0]);
          var call4085 = request(call4086, "pretty(1)", [1], var_depth);
          var opresult4087 = request(opresult4084, "++(1)", [1], call4085);
          var string4088 = new GraceString(")\u27e6");
          var opresult4089 = request(opresult4087, "++(1)", [1], string4088);
          var var_s = opresult4089;
          setLineNumber(2042);    // compilenode block
          var block4091 = new GraceBlock(this, 2042, 1);
          block4091.guard = jsTrue;
          block4091.real = function block4091(var_each) {
            setLineNumber(2042);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum4093 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call4092 = request(var_each, "pretty(1)", [1], sum4093);
            var opresult4094 = request(var_s, "++(1)", [1], call4092);
            var_s = opresult4094;
            return GraceDone;
          };
          let applyMeth4091 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth4091.methodName = "apply(1)";
          applyMeth4091.paramCounts = [1];
          applyMeth4091.paramNames = ["each"];
          applyMeth4091.definitionLine = 2042;
          applyMeth4091.definitionModule = "ast";
          block4091.methods["apply(1)"] = applyMeth4091;
          let matchesMeth4091 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth4091.methodName = "matches(1)";
          matchesMeth4091.paramCounts = [1];
          matchesMeth4091.paramNames = ["each"];
          matchesMeth4091.definitionLine = 2042;
          matchesMeth4091.definitionModule = "ast";
          block4091.methods["matches(1)"] = matchesMeth4091;
          setLineNumber(2043);    // compilenode block
          var block4095 = new GraceBlock(this, 2043, 0);
          block4095.guard = jsTrue;
          block4095.real = function block4095() {
            setLineNumber(2043);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4096 = new GraceString(", ");
            var opresult4097 = request(var_s, "++(1)", [1], string4096);
            var_s = opresult4097;
            return GraceDone;
          };
          let applyMeth4095 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4095.methodName = "apply";
          applyMeth4095.paramCounts = [0];
          applyMeth4095.paramNames = [];
          applyMeth4095.definitionLine = 2043;
          applyMeth4095.definitionModule = "ast";
          block4095.methods["apply"] = applyMeth4095;
          // call case 6: other requests
          setLineNumber(2042);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4098 = selfRequest(this, "args", [0]);
          var call4090 = request(call4098, "do(1)separatedBy(1)", [1, 1], block4091, block4095);
          setLineNumber(2044);    // compilenode string
          var string4099 = new GraceString("\u27e7");
          var opresult4100 = request(var_s, "++(1)", [1], string4099);
          return opresult4100;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4079;
        func4079.methodName = "pretty(1)";
        func4079.paramCounts = [1];
        func4079.paramNames = ["depth"];
        func4079.definitionLine = 2040;
        func4079.definitionModule = "ast";
        var func4101 = function(argcv, var_depth) {    // method toGrace(_), line 2046
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2047);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4102 = selfRequest(this, "nameString", [0]);
          var string4103 = new GraceString("\u27e6");
          var opresult4104 = request(call4102, "++(1)", [1], string4103);
          var var_s = opresult4104;
          setLineNumber(2048);    // compilenode block
          var block4106 = new GraceBlock(this, 2048, 1);
          block4106.guard = jsTrue;
          block4106.real = function block4106(var_each) {
            setLineNumber(2048);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            // call case 6: other requests
            var call4107 = request(var_each, "toGrace(1)", [1], new GraceNum(0));
            var opresult4108 = request(var_s, "++(1)", [1], call4107);
            var_s = opresult4108;
            return GraceDone;
          };
          let applyMeth4106 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth4106.methodName = "apply(1)";
          applyMeth4106.paramCounts = [1];
          applyMeth4106.paramNames = ["each"];
          applyMeth4106.definitionLine = 2048;
          applyMeth4106.definitionModule = "ast";
          block4106.methods["apply(1)"] = applyMeth4106;
          let matchesMeth4106 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth4106.methodName = "matches(1)";
          matchesMeth4106.paramCounts = [1];
          matchesMeth4106.paramNames = ["each"];
          matchesMeth4106.definitionLine = 2048;
          matchesMeth4106.definitionModule = "ast";
          block4106.methods["matches(1)"] = matchesMeth4106;
          setLineNumber(2049);    // compilenode block
          var block4109 = new GraceBlock(this, 2049, 0);
          block4109.guard = jsTrue;
          block4109.real = function block4109() {
            setLineNumber(2049);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4110 = new GraceString(", ");
            var opresult4111 = request(var_s, "++(1)", [1], string4110);
            var_s = opresult4111;
            return GraceDone;
          };
          let applyMeth4109 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4109.methodName = "apply";
          applyMeth4109.paramCounts = [0];
          applyMeth4109.paramNames = [];
          applyMeth4109.definitionLine = 2049;
          applyMeth4109.definitionModule = "ast";
          block4109.methods["apply"] = applyMeth4109;
          // call case 6: other requests
          setLineNumber(2048);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4112 = selfRequest(this, "args", [0]);
          var call4105 = request(call4112, "do(1)separatedBy(1)", [1, 1], block4106, block4109);
          setLineNumber(2050);    // compilenode string
          var string4113 = new GraceString("\u27e7");
          var opresult4114 = request(var_s, "++(1)", [1], string4113);
          return opresult4114;
        };    // end of method toGrace(_)
        func4101.paramTypes = [];
        func4101.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4101;
        func4101.methodName = "toGrace(1)";
        func4101.paramCounts = [1];
        func4101.paramNames = ["depth"];
        func4101.definitionLine = 2046;
        func4101.definitionModule = "ast";
        var func4115 = function(argcv) {    // method shallowCopy, line 2052
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2053);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4118 = selfRequest(this, "value", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4119 = selfRequest(this, "args", [0]);
          // call case 6: other requests
          if (var_genericNode === undefined) raiseUninitializedVariable("genericNode");
          var call4117 = request(var_genericNode, "new(2)", [2], call4118, call4119);
          var call4116 = request(call4117, "shallowCopyFieldsFrom(1)", [1], this);
          return call4116;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4115;
        func4115.methodName = "shallowCopy";
        func4115.paramCounts = [0];
        func4115.paramNames = [];
        func4115.definitionLine = 2052;
        func4115.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2013;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4041_init = function() {    // init of object on line 2013
          initFun4042.call(this);
          setLineNumber(2016);    // compilenode string
          var string4120 = new GraceString("generic");
          this.data.kind = string4120;
          this.data.value = var_base;
          this.data.args = var_arguments;
        };
        return obj4041_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4041_init = obj4041_build.call(inheritingObject, null, var_base, var_arguments, this, aliases, exclusions);
      return obj4041_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func4040;
    func4040.methodName = "new(2)$build(3)";
    func4040.paramCounts = [2];
    func4040.paramNames = ["base", "arguments"];
    func4040.definitionLine = 2013;
    func4040.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2012;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4038_init = function() {    // init of object on line 2012
    };
    return obj4038_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4038 = emptyGraceObject("genericNode", "ast", 2012);
  var obj4038_init = obj4038_build.call(obj4038, null, this, [], []);
  obj4038_init.call(obj4038);  // end of compileobject
  var var_genericNode = obj4038;
  var reader4121_genericNode = function() {  // reader method genericNode
      if (var_genericNode === undefined) raiseUninitializedVariable("genericNode");
      return var_genericNode;
  };
  reader4121_genericNode.isDef = true;
  this.methods["genericNode"] = reader4121_genericNode;
  setLineNumber(2120);    // compilenode object
  var obj4122_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2120");
    this.outer_ast_2120 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4123 = function(argcv, var_name, var_dtype, var_s) {    // method new(_,_)scope(_), line 2122
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(2123);    // compilenode call
      // call case 4: self request with 2 args and 0 typeArgs 
      var call4124 = selfRequest(this, "new(2)", [2], var_name, var_dtype);
      var var_result = call4124;
      setLineNumber(2124);    // compilenode call
      // call case 6: other requests
      var call4125 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_,_)scope(_)
    this.methods["new(2)scope(1)"] = func4123;
    func4123.methodName = "new(2)scope(1)";
    func4123.paramCounts = [2, 1];
    func4123.paramNames = ["name", "dtype", "s"];
    func4123.definitionLine = 2122;
    func4123.definitionModule = "ast";
    this.data.wildcardCount = undefined;
    var reader4126_wildcardCount = function() {  // reader method wildcardCount
        if (this.data.wildcardCount === undefined) raiseUninitializedVariable("wildcardCount");
        return this.data.wildcardCount;
    };
    reader4126_wildcardCount.isVar = true;
    reader4126_wildcardCount.confidential = true;
    this.methods["wildcardCount"] = reader4126_wildcardCount;
    var writer4127_wildcardCount = function(argcv, n) {   // writer method wildcardCount:=(_)
      this.data.wildcardCount = n;
      return GraceDone;
    };
    writer4127_wildcardCount.confidential = true;
    this.methods["wildcardCount:=(1)"] = writer4127_wildcardCount;
    var func4128 = function(argcv, var_dtype) {    // method wildcard(_), line 2129
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("wildcard(_)", 0, numArgs - 1);
      }
      setLineNumber(2130);    // compilenode member
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4130 = selfRequest(this, "wildcardCount", [0]);
      var sum4131 = request(call4130, "+(1)", [1], new GraceNum(1));
      // call case 4: self request with 1 args and 0 typeArgs 
      var call4129 = selfRequest(this, "wildcardCount:=(1)", [1], sum4131);
      setLineNumber(2131);    // compilenode string
      var string4133 = new GraceString("__");
      // call case 4: self request with 0 args and 0 typeArgs 
      var call4134 = selfRequest(this, "wildcardCount", [0]);
      var opresult4135 = request(string4133, "++(1)", [1], call4134);
      var string4136 = new GraceString("");
      var opresult4137 = request(opresult4135, "++(1)", [1], string4136);
      // call case 4: self request with 2 args and 0 typeArgs 
      var call4132 = selfRequest(this, "new(2)", [2], opresult4137, var_dtype);
      var var_idNode = call4132;
      setLineNumber(2132);    // compilenode call
      // call case 6: other requests
      var call4138 = request(var_idNode, "wildcard:=(1)", [1], GraceTrue);
      setLineNumber(2133);    // compilenode member
      // call case 6: other requests
      var call4141 = request(var_idNode, "line", [0]);
      // call case 6: other requests
      var call4142 = request(var_idNode, "linePos", [0]);
      // call case 2: outer request
      var call4140 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call4141, call4142);
      // call case 6: other requests
      var call4139 = request(var_idNode, "end:=(1)", [1], call4140);
      return var_idNode;
    };    // end of method wildcard(_)
    this.methods["wildcard(1)"] = func4128;
    func4128.methodName = "wildcard(1)";
    func4128.paramCounts = [1];
    func4128.paramNames = ["dtype"];
    func4128.definitionLine = 2129;
    func4128.definitionModule = "ast";
    var func4143 = function(argcv, var_name__39__, var_dtype__39__) {    // method new(_,_), line 2137
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("identifierNode.new(_,_)", "ast", 2137);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_name__39__, var_dtype__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func4143;
    func4143.methodName = "new(2)";
    func4143.paramCounts = [2];
    func4143.paramNames = ["name'", "dtype'"];
    func4143.definitionLine = 2137;
    func4143.definitionModule = "ast";
    var func4144 = function(argcv, var_name__39__, var_dtype__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 2137
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj4145_build = function(ignore, var_name__39__, var_dtype__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2137");
        this.outer_ast_2137 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2138);    // reuse call
        var initFun4146 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4147_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4147_kind.isDef = true;
        this.methods["kind"] = reader4147_kind;
        this.data.value = undefined;
        var reader4148_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4148_value.isVar = true;
        this.methods["value"] = reader4148_value;
        var writer4149_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer4149_value;
        this.data.wildcard = undefined;
        var reader4150_wildcard = function() {  // reader method wildcard
            if (this.data.wildcard === undefined) raiseUninitializedVariable("wildcard");
            return this.data.wildcard;
        };
        reader4150_wildcard.isVar = true;
        this.methods["wildcard"] = reader4150_wildcard;
        var writer4151_wildcard = function(argcv, n) {   // writer method wildcard:=(_)
          this.data.wildcard = n;
          return GraceDone;
        };
        this.methods["wildcard:=(1)"] = writer4151_wildcard;
        this.data.dtype = undefined;
        var reader4152_dtype = function() {  // reader method dtype
            if (this.data.dtype === undefined) raiseUninitializedVariable("dtype");
            return this.data.dtype;
        };
        reader4152_dtype.isVar = true;
        this.methods["dtype"] = reader4152_dtype;
        var writer4153_dtype = function(argcv, n) {   // writer method dtype:=(_)
          this.data.dtype = n;
          return GraceDone;
        };
        this.methods["dtype:=(1)"] = writer4153_dtype;
        this.data.isBindingOccurrence = undefined;
        var reader4154_isBindingOccurrence = function() {  // reader method isBindingOccurrence
            if (this.data.isBindingOccurrence === undefined) raiseUninitializedVariable("isBindingOccurrence");
            return this.data.isBindingOccurrence;
        };
        reader4154_isBindingOccurrence.isVar = true;
        this.methods["isBindingOccurrence"] = reader4154_isBindingOccurrence;
        var writer4155_isBindingOccurrence = function(argcv, n) {   // writer method isBindingOccurrence:=(_)
          this.data.isBindingOccurrence = n;
          return GraceDone;
        };
        this.methods["isBindingOccurrence:=(1)"] = writer4155_isBindingOccurrence;
        this.data.isAssigned = undefined;
        var reader4156_isAssigned = function() {  // reader method isAssigned
            if (this.data.isAssigned === undefined) raiseUninitializedVariable("isAssigned");
            return this.data.isAssigned;
        };
        reader4156_isAssigned.isVar = true;
        this.methods["isAssigned"] = reader4156_isAssigned;
        var writer4157_isAssigned = function(argcv, n) {   // writer method isAssigned:=(_)
          this.data.isAssigned = n;
          return GraceDone;
        };
        this.methods["isAssigned:=(1)"] = writer4157_isAssigned;
        this.data.inRequest = undefined;
        var reader4158_inRequest = function() {  // reader method inRequest
            if (this.data.inRequest === undefined) raiseUninitializedVariable("inRequest");
            return this.data.inRequest;
        };
        reader4158_inRequest.isVar = true;
        this.methods["inRequest"] = reader4158_inRequest;
        var writer4159_inRequest = function(argcv, n) {   // writer method inRequest:=(_)
          this.data.inRequest = n;
          return GraceDone;
        };
        this.methods["inRequest:=(1)"] = writer4159_inRequest;
        this.data.generics = undefined;
        var reader4160_generics = function() {  // reader method generics
            if (this.data.generics === undefined) raiseUninitializedVariable("generics");
            return this.data.generics;
        };
        reader4160_generics.isVar = true;
        this.methods["generics"] = reader4160_generics;
        var writer4161_generics = function(argcv, n) {   // writer method generics:=(_)
          this.data.generics = n;
          return GraceDone;
        };
        this.methods["generics:=(1)"] = writer4161_generics;
        this.data.isDeclaredByParent = undefined;
        var reader4162_isDeclaredByParent = function() {  // reader method isDeclaredByParent
            if (this.data.isDeclaredByParent === undefined) raiseUninitializedVariable("isDeclaredByParent");
            return this.data.isDeclaredByParent;
        };
        reader4162_isDeclaredByParent.isVar = true;
        this.methods["isDeclaredByParent"] = reader4162_isDeclaredByParent;
        var writer4163_isDeclaredByParent = function(argcv, n) {   // writer method isDeclaredByParent:=(_)
          this.data.isDeclaredByParent = n;
          return GraceDone;
        };
        this.methods["isDeclaredByParent:=(1)"] = writer4163_isDeclaredByParent;
        this.data.end = undefined;
        var reader4164_end = function() {  // reader method end
            if (this.data.end === undefined) raiseUninitializedVariable("end");
            return this.data.end;
        };
        reader4164_end.isVar = true;
        this.methods["end"] = reader4164_end;
        var writer4165_end = function(argcv, n) {   // writer method end:=(_)
          this.data.end = n;
          return GraceDone;
        };
        this.methods["end:=(1)"] = writer4165_end;
        var func4166 = function(argcv) {    // method bindingOccurrence, line 2154
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("bindingOccurrence", 0, numArgs - 0);
          }
          setLineNumber(2154);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4167 = selfRequest(this, "isBindingOccurrence:=(1)", [1], GraceTrue);
          return call4167;
        };    // end of method bindingOccurrence
        this.methods["bindingOccurrence"] = func4166;
        func4166.methodName = "bindingOccurrence";
        func4166.paramCounts = [0];
        func4166.paramNames = [];
        func4166.definitionLine = 2154;
        func4166.definitionModule = "ast";
        var func4168 = function(argcv) {    // method appliedOccurrence, line 2155
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("appliedOccurrence", 0, numArgs - 0);
          }
          setLineNumber(2155);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4169 = selfRequest(this, "isBindingOccurrence:=(1)", [1], GraceFalse);
          return call4169;
        };    // end of method appliedOccurrence
        this.methods["appliedOccurrence"] = func4168;
        func4168.methodName = "appliedOccurrence";
        func4168.paramCounts = [0];
        func4168.paramNames = [];
        func4168.definitionLine = 2155;
        func4168.definitionModule = "ast";
        var func4170 = function(argcv) {    // method name, line 2157
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("name", 0, numArgs - 0);
          }
          setLineNumber(2157);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4171 = selfRequest(this, "value", [0]);
          return call4171;
        };    // end of method name
        this.methods["name"] = func4170;
        func4170.methodName = "name";
        func4170.paramCounts = [0];
        func4170.paramNames = [];
        func4170.definitionLine = 2157;
        func4170.definitionModule = "ast";
        var func4172 = function(argcv, var_nu) {    // method name:=(_), line 2158
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("name:=(_)", 0, numArgs - 1);
          }
          setLineNumber(2159);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4173 = selfRequest(this, "value:=(1)", [1], var_nu);
          setLineNumber(2160);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4176 = selfRequest(this, "line", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4177 = selfRequest(this, "linePos", [0]);
          // call case 6: other requests
          var call4178 = request(var_nu, "size", [0]);
          var sum4179 = request(call4177, "+(1)", [1], call4178);
          var diff4180 = request(sum4179, "-(1)", [1], new GraceNum(1));
          // call case 2: outer request
          var call4175 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call4176, diff4180);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4174 = selfRequest(this, "end:=(1)", [1], call4175);
          return call4174;
        };    // end of method name:=(_)
        this.methods["name:=(1)"] = func4172;
        func4172.methodName = "name:=(1)";
        func4172.paramCounts = [1];
        func4172.paramNames = ["nu"];
        func4172.definitionLine = 2158;
        func4172.definitionModule = "ast";
        var func4181 = function(argcv) {    // method nameString, line 2162
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(2162);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4182 = selfRequest(this, "value", [0]);
          return call4182;
        };    // end of method nameString
        this.methods["nameString"] = func4181;
        func4181.methodName = "nameString";
        func4181.paramCounts = [0];
        func4181.paramNames = [];
        func4181.definitionLine = 2162;
        func4181.definitionModule = "ast";
        this.data.canonicalName = undefined;
        var reader4183_canonicalName = function() {  // reader method canonicalName
            if (this.data.canonicalName === undefined) raiseUninitializedVariable("canonicalName");
            return this.data.canonicalName;
        };
        reader4183_canonicalName.isVar = true;
        this.methods["canonicalName"] = reader4183_canonicalName;
        var writer4184_canonicalName = function(argcv, n) {   // writer method canonicalName:=(_)
          this.data.canonicalName = n;
          return GraceDone;
        };
        this.methods["canonicalName:=(1)"] = writer4184_canonicalName;
        var func4185 = function(argcv) {    // method quoted, line 2164
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("quoted", 0, numArgs - 0);
          }
          setLineNumber(2164);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4187 = selfRequest(this, "value", [0]);
          var call4186 = request(call4187, "quoted", [0]);
          return call4186;
        };    // end of method quoted
        this.methods["quoted"] = func4185;
        func4185.methodName = "quoted";
        func4185.paramCounts = [0];
        func4185.paramNames = [];
        func4185.definitionLine = 2164;
        func4185.definitionModule = "ast";
        var func4188 = function(argcv) {     // accessor method isIdentifier
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isIdentifier", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isIdentifier
        this.methods["isIdentifier"] = func4188;
        func4188.methodName = "isIdentifier";
        func4188.paramCounts = [0];
        func4188.paramNames = [];
        func4188.definitionLine = 2165;
        func4188.definitionModule = "ast";
        var func4189 = function(argcv) {    // method isSelf, line 2167
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isSelf", 0, numArgs - 0);
          }
          setLineNumber(2167);    // compilenode string
          var string4190 = new GraceString("self");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4191 = selfRequest(this, "value", [0]);
          var opresult4192 = request(string4190, "==(1)", [1], call4191);
          return opresult4192;
        };    // end of method isSelf
        this.methods["isSelf"] = func4189;
        func4189.methodName = "isSelf";
        func4189.paramCounts = [0];
        func4189.paramNames = [];
        func4189.definitionLine = 2167;
        func4189.definitionModule = "ast";
        var func4193 = function(argcv) {    // method isSuper, line 2168
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isSuper", 0, numArgs - 0);
          }
          setLineNumber(2168);    // compilenode string
          var string4194 = new GraceString("super");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4195 = selfRequest(this, "value", [0]);
          var opresult4196 = request(string4194, "==(1)", [1], call4195);
          return opresult4196;
        };    // end of method isSuper
        this.methods["isSuper"] = func4193;
        func4193.methodName = "isSuper";
        func4193.paramCounts = [0];
        func4193.paramNames = [];
        func4193.definitionLine = 2168;
        func4193.definitionModule = "ast";
        var func4197 = function(argcv) {    // method isPrelude, line 2169
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isPrelude", 0, numArgs - 0);
          }
          setLineNumber(2169);    // compilenode string
          var string4198 = new GraceString("prelude");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4199 = selfRequest(this, "value", [0]);
          var opresult4200 = request(string4198, "==(1)", [1], call4199);
          return opresult4200;
        };    // end of method isPrelude
        this.methods["isPrelude"] = func4197;
        func4197.methodName = "isPrelude";
        func4197.paramCounts = [0];
        func4197.paramNames = [];
        func4197.definitionLine = 2169;
        func4197.definitionModule = "ast";
        var func4201 = function(argcv) {    // method isOuter, line 2170
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isOuter", 0, numArgs - 0);
          }
          var if4202 = GraceDone;
          setLineNumber(2171);    // compilenode string
          var string4203 = new GraceString("outer");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4204 = selfRequest(this, "value", [0]);
          var opresult4205 = request(string4203, "==(1)", [1], call4204);
          if (Grace_isTrue(opresult4205)) {
            return GraceTrue;
          }
          var if4206 = GraceDone;
          setLineNumber(2172);    // compilenode string
          var string4207 = new GraceString("prelude");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4208 = selfRequest(this, "value", [0]);
          var opresult4209 = request(string4207, "==(1)", [1], call4208);
          if (Grace_isTrue(opresult4209)) {
            return GraceTrue;
          }
          var if4210 = GraceDone;
          setLineNumber(2173);    // compilenode string
          var string4211 = new GraceString("module()object");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4212 = selfRequest(this, "value", [0]);
          var opresult4213 = request(string4211, "==(1)", [1], call4212);
          if (Grace_isTrue(opresult4213)) {
            return GraceTrue;
          }
          setLineNumber(2174);    // compilenode return
          return GraceFalse;
        };    // end of method isOuter
        this.methods["isOuter"] = func4201;
        func4201.methodName = "isOuter";
        func4201.paramCounts = [0];
        func4201.paramNames = [];
        func4201.definitionLine = 2170;
        func4201.definitionModule = "ast";
        var func4214 = function(argcv) {    // method isSelfOrOuter, line 2176
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isSelfOrOuter", 0, numArgs - 0);
          }
          var if4215 = GraceDone;
          setLineNumber(2177);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4216 = selfRequest(this, "isSelf", [0]);
          if (Grace_isTrue(call4216)) {
            return GraceTrue;
          }
          var if4217 = GraceDone;
          setLineNumber(2178);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4218 = selfRequest(this, "isOuter", [0]);
          if (Grace_isTrue(call4218)) {
            return GraceTrue;
          }
          setLineNumber(2179);    // compilenode return
          return GraceFalse;
        };    // end of method isSelfOrOuter
        this.methods["isSelfOrOuter"] = func4214;
        func4214.methodName = "isSelfOrOuter";
        func4214.paramCounts = [0];
        func4214.paramNames = [];
        func4214.definitionLine = 2176;
        func4214.definitionModule = "ast";
        var func4219 = function(argcv) {    // method isAppliedOccurrence, line 2181
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isAppliedOccurrence", 0, numArgs - 0);
          }
          var if4220 = GraceDone;
          setLineNumber(2182);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4221 = selfRequest(this, "wildcard", [0]);
          if (Grace_isTrue(call4221)) {
            if4220 = GraceFalse;
          } else {
            setLineNumber(2185);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4223 = selfRequest(this, "isBindingOccurrence", [0]);
            var call4222 = request(call4223, "not", [0]);
            if4220 = call4222;
          }
          return if4220;
        };    // end of method isAppliedOccurrence
        this.methods["isAppliedOccurrence"] = func4219;
        func4219.methodName = "isAppliedOccurrence";
        func4219.paramCounts = [0];
        func4219.paramNames = [];
        func4219.definitionLine = 2181;
        func4219.definitionModule = "ast";
        var func4224 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 2188
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(2189);    // compilenode call
          // call case 6: other requests
          // call case 6: other requests
          var call4226 = request(var_ac, "parent", [0]);
          var call4225 = request(call4226, "declarationKindWithAncestors(1)", [1], var_ac);
          return call4225;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func4224;
        func4224.methodName = "declarationKindWithAncestors(1)";
        func4224.paramCounts = [1];
        func4224.paramNames = ["ac"];
        func4224.definitionLine = 2188;
        func4224.definitionModule = "ast";
        var func4227 = function(argcv, var_ac) {    // method inTypePositionWithAncestors(_), line 2191
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("inTypePositionWithAncestors(_)", 0, numArgs - 1);
          }
          var if4228 = GraceDone;
          setLineNumber(2195);    // compilenode member
          // call case 6: other requests
          var call4229 = request(var_ac, "isEmpty", [0]);
          if (Grace_isTrue(call4229)) {
            return GraceFalse;
          }
          setLineNumber(2196);    // compilenode call
          // call case 6: other requests
          // call case 6: other requests
          var call4231 = request(var_ac, "parent", [0]);
          var call4230 = request(call4231, "usesAsType(1)", [1], this);
          return call4230;
        };    // end of method inTypePositionWithAncestors(_)
        this.methods["inTypePositionWithAncestors(1)"] = func4227;
        func4227.methodName = "inTypePositionWithAncestors(1)";
        func4227.paramCounts = [1];
        func4227.paramNames = ["ac"];
        func4227.definitionLine = 2191;
        func4227.definitionModule = "ast";
        var func4232 = function(argcv, var_aNode) {    // method usesAsType(_), line 2198
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("usesAsType(_)", 0, numArgs - 1);
          }
          setLineNumber(2199);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4233 = selfRequest(this, "dtype", [0]);
          var opresult4234 = request(var_aNode, "==(1)", [1], call4233);
          return opresult4234;
        };    // end of method usesAsType(_)
        this.methods["usesAsType(1)"] = func4232;
        func4232.methodName = "usesAsType(1)";
        func4232.paramCounts = [1];
        func4232.paramNames = ["aNode"];
        func4232.definitionLine = 2198;
        func4232.definitionModule = "ast";
        var func4235 = function(argcv) {    // method numTypeArgs, line 2201
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeArgs", 0, numArgs - 0);
          }
          var if4236 = GraceDone;
          setLineNumber(2202);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4237 = selfRequest(this, "generics", [0]);
          var opresult4238 = request(GraceFalse, "==(1)", [1], call4237);
          if (Grace_isTrue(opresult4238)) {
            if4236 = new GraceNum(0);
          } else {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4240 = selfRequest(this, "generics", [0]);
            var call4239 = request(call4240, "size", [0]);
            if4236 = call4239;
          }
          return if4236;
        };    // end of method numTypeArgs
        this.methods["numTypeArgs"] = func4235;
        func4235.methodName = "numTypeArgs";
        func4235.paramCounts = [0];
        func4235.paramNames = [];
        func4235.definitionLine = 2201;
        func4235.definitionModule = "ast";
        var func4241 = function(argcv) {    // method hasTypeArgs, line 2204
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("hasTypeArgs", 0, numArgs - 0);
          }
          setLineNumber(2204);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4242 = selfRequest(this, "generics", [0]);
          var opresult4243 = request(GraceFalse, "\u2260(1)", [1], call4242);
          return opresult4243;
        };    // end of method hasTypeArgs
        this.methods["hasTypeArgs"] = func4241;
        func4241.methodName = "hasTypeArgs";
        func4241.paramCounts = [0];
        func4241.paramNames = [];
        func4241.definitionLine = 2204;
        func4241.definitionModule = "ast";
        var func4244 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2205
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if4245 = GraceDone;
          setLineNumber(2206);    // compilenode call
          // call case 6: other requests
          var call4246 = request(var_visitor, "visitIdentifier(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call4246)) {
            setLineNumber(2207);    // compilenode call
            // call case 6: other requests
            var call4247 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call4247;
            var if4248 = GraceDone;
            setLineNumber(2208);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4249 = selfRequest(this, "dtype", [0]);
            var opresult4250 = request(GraceFalse, "\u2260(1)", [1], call4249);
            if (Grace_isTrue(opresult4250)) {
              setLineNumber(2209);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4252 = selfRequest(this, "dtype", [0]);
              var call4251 = request(call4252, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if4248 = call4251;
            }
            var if4253 = GraceDone;
            setLineNumber(2211);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4254 = selfRequest(this, "generics", [0]);
            var opresult4255 = request(GraceFalse, "\u2260(1)", [1], call4254);
            if (Grace_isTrue(opresult4255)) {
              setLineNumber(2212);    // compilenode block
              var block4257 = new GraceBlock(this, 2212, 1);
              block4257.guard = jsTrue;
              block4257.real = function block4257(var_each) {
                setLineNumber(2212);    // compilenode call
                if (var_newChain === undefined) raiseUninitializedVariable("newChain");
                // call case 6: other requests
                var call4258 = request(var_each, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
                return call4258;
              };
              let applyMeth4257 = function apply_1 (argcv, ...args) {
                  if (this.guard.apply(this.receiver, args))
                      return this.real.apply(this.receiver, args);
                  badBlockArgs.apply(this, args);
              };
              applyMeth4257.methodName = "apply(1)";
              applyMeth4257.paramCounts = [1];
              applyMeth4257.paramNames = ["each"];
              applyMeth4257.definitionLine = 2212;
              applyMeth4257.definitionModule = "ast";
              block4257.methods["apply(1)"] = applyMeth4257;
              let matchesMeth4257 = function matches_1 (argcv, ...args) {
                  return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
              };
              matchesMeth4257.methodName = "matches(1)";
              matchesMeth4257.paramCounts = [1];
              matchesMeth4257.paramNames = ["each"];
              matchesMeth4257.definitionLine = 2212;
              matchesMeth4257.definitionModule = "ast";
              block4257.methods["matches(1)"] = matchesMeth4257;
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4259 = selfRequest(this, "generics", [0]);
              var call4256 = request(call4259, "do(1)", [1], block4257);
              if4253 = call4256;
            }
            if4245 = if4253;
          }
          return if4245;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4244;
        func4244.methodName = "accept(1)from(1)";
        func4244.paramCounts = [1, 1];
        func4244.paramNames = ["visitor", "ac"];
        func4244.definitionLine = 2205;
        func4244.definitionModule = "ast";
        var func4260 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2216
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2217);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4261 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4261;
          setLineNumber(2218);    // compilenode call
          // call case 6: other requests
          var call4262 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4262;
          setLineNumber(2219);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4265 = selfRequest(this, "dtype", [0]);
          // call case 2: outer request
          var call4264 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call4265, var_blk, var_newChain);
          // call case 6: other requests
          var call4263 = request(var_n, "dtype:=(1)", [1], call4264);
          setLineNumber(2220);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4268 = selfRequest(this, "generics", [0]);
          // call case 2: outer request
          var call4267 = selfRequest(importedModules["ast"], "maybeListMap(2)ancestors(1)", [2, 1], call4268, var_blk, var_newChain);
          // call case 6: other requests
          var call4266 = request(var_n, "generics:=(1)", [1], call4267);
          setLineNumber(2221);    // compilenode call
          // call case 6: other requests
          var call4269 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4269;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4260;
        func4260.methodName = "map(1)ancestors(1)";
        func4260.paramCounts = [1, 1];
        func4260.paramNames = ["blk", "ac"];
        func4260.definitionLine = 2216;
        func4260.definitionModule = "ast";
        var func4270 = function(argcv, var_depth) {    // method pretty(_), line 2223
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2224);    // compilenode string
          var string4271 = new GraceString("  ");
          var sum4272 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod4273 = request(string4271, "*(1)", [1], sum4272);
          var var_spc = prod4273;
          setLineNumber(2225);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4274 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var var_s = call4274;
          var if4275 = GraceDone;
          setLineNumber(2226);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4276 = selfRequest(this, "wildcard", [0]);
          if (Grace_isTrue(call4276)) {
            setLineNumber(2227);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4277 = new GraceString(" Wildcard");
            var opresult4278 = request(var_s, "++(1)", [1], string4277);
            var_s = opresult4278;
            if4275 = GraceDone;
          } else {
            var if4279 = GraceDone;
            setLineNumber(2228);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4280 = selfRequest(this, "isBindingOccurrence", [0]);
            if (Grace_isTrue(call4280)) {
              setLineNumber(2229);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string4281 = new GraceString("Binding\u2039");
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4282 = selfRequest(this, "value", [0]);
              var opresult4283 = request(string4281, "++(1)", [1], call4282);
              var string4284 = new GraceString("\u203a");
              var opresult4285 = request(opresult4283, "++(1)", [1], string4284);
              var opresult4286 = request(var_s, "++(1)", [1], opresult4285);
              var_s = opresult4286;
              if4279 = GraceDone;
            } else {
              setLineNumber(2231);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string4287 = new GraceString("\u2039");
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4288 = selfRequest(this, "value", [0]);
              var opresult4289 = request(string4287, "++(1)", [1], call4288);
              var string4290 = new GraceString("\u203a");
              var opresult4291 = request(opresult4289, "++(1)", [1], string4290);
              var opresult4292 = request(var_s, "++(1)", [1], opresult4291);
              var_s = opresult4292;
              if4279 = GraceDone;
            }
            if4275 = if4279;
          }
          var if4293 = GraceDone;
          setLineNumber(2233);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4294 = selfRequest(this, "dtype", [0]);
          var opresult4295 = request(GraceFalse, "\u2260(1)", [1], call4294);
          if (Grace_isTrue(opresult4295)) {
            setLineNumber(2234);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4296 = new GraceString("\n");
            var opresult4297 = request(var_s, "++(1)", [1], string4296);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult4298 = request(opresult4297, "++(1)", [1], var_spc);
            var string4299 = new GraceString("  Type: ");
            var opresult4300 = request(opresult4298, "++(1)", [1], string4299);
            var_s = opresult4300;
            setLineNumber(2235);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum4302 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4303 = selfRequest(this, "dtype", [0]);
            var call4301 = request(call4303, "pretty(1)", [1], sum4302);
            var opresult4304 = request(var_s, "++(1)", [1], call4301);
            var_s = opresult4304;
            if4293 = GraceDone;
          }
          var if4305 = GraceDone;
          setLineNumber(2237);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4306 = selfRequest(this, "generics", [0]);
          var opresult4307 = request(GraceFalse, "\u2260(1)", [1], call4306);
          if (Grace_isTrue(opresult4307)) {
            setLineNumber(2238);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4308 = new GraceString("\n");
            var opresult4309 = request(var_s, "++(1)", [1], string4308);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult4310 = request(opresult4309, "++(1)", [1], var_spc);
            var string4311 = new GraceString("Generics:");
            var opresult4312 = request(opresult4310, "++(1)", [1], string4311);
            var_s = opresult4312;
            setLineNumber(2239);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4314 = selfRequest(this, "generics", [0]);
            var block4315 = new GraceBlock(this, 2239, 1);
            block4315.guard = jsTrue;
            block4315.real = function block4315(var_g) {
              setLineNumber(2240);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string4316 = new GraceString("\n");
              var opresult4317 = request(var_s, "++(1)", [1], string4316);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult4318 = request(opresult4317, "++(1)", [1], var_spc);
              var string4319 = new GraceString("  ");
              var opresult4320 = request(opresult4318, "++(1)", [1], string4319);
              var sum4322 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call4321 = request(var_g, "pretty(1)", [1], sum4322);
              var opresult4323 = request(opresult4320, "++(1)", [1], call4321);
              var_s = opresult4323;
              return GraceDone;
            };
            let applyMeth4315 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth4315.methodName = "apply(1)";
            applyMeth4315.paramCounts = [1];
            applyMeth4315.paramNames = ["g"];
            applyMeth4315.definitionLine = 2239;
            applyMeth4315.definitionModule = "ast";
            block4315.methods["apply(1)"] = applyMeth4315;
            let matchesMeth4315 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth4315.methodName = "matches(1)";
            matchesMeth4315.paramCounts = [1];
            matchesMeth4315.paramNames = ["g"];
            matchesMeth4315.definitionLine = 2239;
            matchesMeth4315.definitionModule = "ast";
            block4315.methods["matches(1)"] = matchesMeth4315;
            // call case 2: outer request
            var call4313 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call4314, block4315);
            if4305 = call4313;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4270;
        func4270.methodName = "pretty(1)";
        func4270.paramCounts = [1];
        func4270.paramNames = ["depth"];
        func4270.definitionLine = 2223;
        func4270.definitionModule = "ast";
        var func4324 = function(argcv, var_depth) {    // method toGrace(_), line 2245
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2246);    // compilenode vardec
          var var_s;
          var if4325 = GraceDone;
          setLineNumber(2247);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4326 = selfRequest(this, "wildcard", [0]);
          if (Grace_isTrue(call4326)) {
            setLineNumber(2248);    // compilenode string
            var string4327 = new GraceString("_");
            var_s = string4327;
            if4325 = GraceDone;
          } else {
            setLineNumber(2250);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4328 = selfRequest(this, "value", [0]);
            var_s = call4328;
            if4325 = GraceDone;
          }
          var if4329 = GraceDone;
          setLineNumber(2252);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4330 = selfRequest(this, "dtype", [0]);
          var opresult4331 = request(GraceFalse, "\u2260(1)", [1], call4330);
          if (Grace_isTrue(opresult4331)) {
            setLineNumber(2253);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4332 = new GraceString(":");
            var opresult4333 = request(var_s, "++(1)", [1], string4332);
            var sum4335 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4336 = selfRequest(this, "dtype", [0]);
            var call4334 = request(call4336, "toGrace(1)", [1], sum4335);
            var opresult4337 = request(opresult4333, "++(1)", [1], call4334);
            var_s = opresult4337;
            if4329 = GraceDone;
          }
          var if4338 = GraceDone;
          setLineNumber(2255);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4339 = selfRequest(this, "generics", [0]);
          var opresult4340 = request(GraceFalse, "\u2260(1)", [1], call4339);
          if (Grace_isTrue(opresult4340)) {
            setLineNumber(2256);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4341 = new GraceString("\u27e6");
            var opresult4342 = request(var_s, "++(1)", [1], string4341);
            var_s = opresult4342;
            setLineNumber(2257);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4345 = selfRequest(this, "generics", [0]);
            var call4344 = request(call4345, "size", [0]);
            var diff4346 = request(call4344, "-(1)", [1], new GraceNum(1));
            var opresult4347 = request(new GraceNum(1), "..(1)", [1], diff4346);
            var block4348 = new GraceBlock(this, 2257, 1);
            block4348.guard = jsTrue;
            block4348.real = function block4348(var_ix) {
              setLineNumber(2258);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var sum4350 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4352 = selfRequest(this, "generics", [0]);
              var call4351 = request(call4352, "at(1)", [1], var_ix);
              var call4349 = request(call4351, "toGrace(1)", [1], sum4350);
              var opresult4353 = request(var_s, "++(1)", [1], call4349);
              var string4354 = new GraceString(", ");
              var opresult4355 = request(opresult4353, "++(1)", [1], string4354);
              var_s = opresult4355;
              return GraceDone;
            };
            let applyMeth4348 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth4348.methodName = "apply(1)";
            applyMeth4348.paramCounts = [1];
            applyMeth4348.paramNames = ["ix"];
            applyMeth4348.definitionLine = 2257;
            applyMeth4348.definitionModule = "ast";
            block4348.methods["apply(1)"] = applyMeth4348;
            let matchesMeth4348 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth4348.methodName = "matches(1)";
            matchesMeth4348.paramCounts = [1];
            matchesMeth4348.paramNames = ["ix"];
            matchesMeth4348.definitionLine = 2257;
            matchesMeth4348.definitionModule = "ast";
            block4348.methods["matches(1)"] = matchesMeth4348;
            // call case 2: outer request
            var call4343 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], opresult4347, block4348);
            setLineNumber(2260);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum4357 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4359 = selfRequest(this, "generics", [0]);
            var call4358 = request(call4359, "last", [0]);
            var call4356 = request(call4358, "toGrace(1)", [1], sum4357);
            var opresult4360 = request(var_s, "++(1)", [1], call4356);
            var string4361 = new GraceString("\u27e7");
            var opresult4362 = request(opresult4360, "++(1)", [1], string4361);
            var_s = opresult4362;
            if4338 = GraceDone;
          }
          if (var_s === undefined) raiseUninitializedVariable("s");
          return var_s;
        };    // end of method toGrace(_)
        func4324.paramTypes = [];
        func4324.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4324;
        func4324.methodName = "toGrace(1)";
        func4324.paramCounts = [1];
        func4324.paramNames = ["depth"];
        func4324.definitionLine = 2245;
        func4324.definitionModule = "ast";
        var func4363 = function(argcv) {    // method asString, line 2265
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          var if4364 = GraceDone;
          setLineNumber(2266);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4365 = selfRequest(this, "isBindingOccurrence", [0]);
          if (Grace_isTrue(call4365)) {
            setLineNumber(2267);    // compilenode string
            var string4366 = new GraceString("identifierBinding\u2039");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4367 = selfRequest(this, "value", [0]);
            var opresult4368 = request(string4366, "++(1)", [1], call4367);
            var string4369 = new GraceString("\u203a");
            var opresult4370 = request(opresult4368, "++(1)", [1], string4369);
            if4364 = opresult4370;
          } else {
            setLineNumber(2269);    // compilenode string
            var string4371 = new GraceString("identifier\u2039");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4372 = selfRequest(this, "value", [0]);
            var opresult4373 = request(string4371, "++(1)", [1], call4372);
            var string4374 = new GraceString("\u203a");
            var opresult4375 = request(opresult4373, "++(1)", [1], string4374);
            if4364 = opresult4375;
          }
          return if4364;
        };    // end of method asString
        this.methods["asString"] = func4363;
        func4363.methodName = "asString";
        func4363.paramCounts = [0];
        func4363.paramNames = [];
        func4363.definitionLine = 2265;
        func4363.definitionModule = "ast";
        var func4376 = function(argcv) {    // method shallowCopy, line 2272
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2273);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4379 = selfRequest(this, "value", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4380 = selfRequest(this, "dtype", [0]);
          // call case 6: other requests
          if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
          var call4378 = request(var_identifierNode, "new(2)", [2], call4379, call4380);
          var call4377 = request(call4378, "shallowCopyFieldsFrom(1)", [1], this);
          return call4377;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4376;
        func4376.methodName = "shallowCopy";
        func4376.paramCounts = [0];
        func4376.paramNames = [];
        func4376.definitionLine = 2272;
        func4376.definitionModule = "ast";
        var func4381 = function(argcv, var_other) {    // method postCopy(_), line 2275
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2276);    // compilenode member
          // call case 6: other requests
          var call4383 = request(var_other, "wildcard", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4382 = selfRequest(this, "wildcard:=(1)", [1], call4383);
          setLineNumber(2277);    // compilenode member
          // call case 6: other requests
          var call4385 = request(var_other, "isBindingOccurrence", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4384 = selfRequest(this, "isBindingOccurrence:=(1)", [1], call4385);
          setLineNumber(2278);    // compilenode member
          // call case 6: other requests
          var call4387 = request(var_other, "isDeclaredByParent", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4386 = selfRequest(this, "isDeclaredByParent:=(1)", [1], call4387);
          setLineNumber(2279);    // compilenode member
          // call case 6: other requests
          var call4389 = request(var_other, "isAssigned", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4388 = selfRequest(this, "isAssigned:=(1)", [1], call4389);
          setLineNumber(2280);    // compilenode member
          // call case 6: other requests
          var call4391 = request(var_other, "inRequest", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4390 = selfRequest(this, "inRequest:=(1)", [1], call4391);
          setLineNumber(2281);    // compilenode member
          // call case 6: other requests
          var call4393 = request(var_other, "isDeclaredByParent", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4392 = selfRequest(this, "isDeclaredByParent:=(1)", [1], call4393);
          setLineNumber(2282);    // compilenode member
          // call case 6: other requests
          var call4395 = request(var_other, "generics", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4394 = selfRequest(this, "generics:=(1)", [1], call4395);
          setLineNumber(2283);    // compilenode member
          // call case 6: other requests
          var call4397 = request(var_other, "end", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4396 = selfRequest(this, "end:=(1)", [1], call4397);
          setLineNumber(2284);    // compilenode member
          // call case 6: other requests
          var call4399 = request(var_other, "canonicalName", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4398 = selfRequest(this, "canonicalName:=(1)", [1], call4399);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func4381;
        func4381.methodName = "postCopy(1)";
        func4381.paramCounts = [1];
        func4381.paramNames = ["other"];
        func4381.definitionLine = 2275;
        func4381.definitionModule = "ast";
        var func4400 = function(argcv) {    // method statementName, line 2287
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2287);    // compilenode string
          var string4401 = new GraceString("expression");
          return string4401;
        };    // end of method statementName
        this.methods["statementName"] = func4400;
        func4400.methodName = "statementName";
        func4400.paramCounts = [0];
        func4400.paramNames = [];
        func4400.definitionLine = 2287;
        func4400.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2137;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4145_init = function() {    // init of object on line 2137
          initFun4146.call(this);
          setLineNumber(2139);    // compilenode string
          var string4402 = new GraceString("identifier");
          this.data.kind = string4402;
          this.data.value = var_name__39__;
          this.data.wildcard = GraceFalse;
          this.data.dtype = var_dtype__39__;
          this.data.isBindingOccurrence = GraceFalse;
          this.data.isAssigned = GraceFalse;
          this.data.inRequest = GraceFalse;
          this.data.generics = GraceFalse;
          this.data.isDeclaredByParent = GraceFalse;
          var if4403 = GraceDone;
          setLineNumber(2148);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4404 = selfRequest(this, "line", [0]);
          var opresult4405 = request(call4404, "\u2260(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult4405)) {
            setLineNumber(2149);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4407 = selfRequest(this, "line", [0]);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4408 = selfRequest(this, "linePos", [0]);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4410 = selfRequest(this, "value", [0]);
            var call4409 = request(call4410, "size", [0]);
            var sum4411 = request(call4408, "+(1)", [1], call4409);
            var diff4412 = request(sum4411, "-(1)", [1], new GraceNum(1));
            // call case 2: outer request
            var call4406 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call4407, diff4412);
            if4403 = call4406;
          } else {
            setLineNumber(2151);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4414 = selfRequest(this, "line", [0]);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4415 = selfRequest(this, "linePos", [0]);
            var diff4416 = request(call4415, "-(1)", [1], new GraceNum(1));
            // call case 2: outer request
            var call4413 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call4414, diff4416);
            if4403 = call4413;
          }
          this.data.end = if4403;
          setLineNumber(2163);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4417 = selfRequest(this, "value", [0]);
          this.data.canonicalName = call4417;
        };
        return obj4145_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4145_init = obj4145_build.call(inheritingObject, null, var_name__39__, var_dtype__39__, this, aliases, exclusions);
      return obj4145_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func4144;
    func4144.methodName = "new(2)$build(3)";
    func4144.paramCounts = [2];
    func4144.paramNames = ["name'", "dtype'"];
    func4144.definitionLine = 2137;
    func4144.definitionModule = "ast";
    this.mutable = true;
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2120;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4122_init = function() {    // init of object on line 2120
      setLineNumber(2128);    // compilenode num
      this.data.wildcardCount = new GraceNum(0);
    };
    return obj4122_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4122 = emptyGraceObject("identifierNode", "ast", 2120);
  var obj4122_init = obj4122_build.call(obj4122, null, this, [], []);
  obj4122_init.call(obj4122);  // end of compileobject
  var var_identifierNode = obj4122;
  var reader4418_identifierNode = function() {  // reader method identifierNode
      if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
      return var_identifierNode;
  };
  reader4418_identifierNode.isDef = true;
  this.methods["identifierNode"] = reader4418_identifierNode;
  setLineNumber(2291);    // compilenode string
  var string4420 = new GraceString("Type");
  // call case 6: other requests
  if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
  var call4419 = request(var_identifierNode, "new(2)", [2], string4420, GraceFalse);
  var var_typeType = call4419;
  var reader4421_typeType = function() {  // reader method typeType
      if (var_typeType === undefined) raiseUninitializedVariable("typeType");
      return var_typeType;
  };
  reader4421_typeType.isDef = true;
  this.methods["typeType"] = reader4421_typeType;
  setLineNumber(2292);    // compilenode string
  var string4423 = new GraceString("Unknown");
  if (var_typeType === undefined) raiseUninitializedVariable("typeType");
  // call case 6: other requests
  if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
  var call4422 = request(var_identifierNode, "new(2)", [2], string4423, var_typeType);
  var var_unknownType = call4422;
  var reader4424_unknownType = function() {  // reader method unknownType
      if (var_unknownType === undefined) raiseUninitializedVariable("unknownType");
      return var_unknownType;
  };
  reader4424_unknownType.isDef = true;
  this.methods["unknownType"] = reader4424_unknownType;
  setLineNumber(2294);    // compilenode object
  var obj4425_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2294");
    this.outer_ast_2294 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4426 = function(argcv, var_v, var_s) {    // method new(_)scope(_), line 2295
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_)scope(_)", 0, numArgs - 2);
      }
      setLineNumber(2296);    // compilenode call
      // call case 4: self request with 1 args and 0 typeArgs 
      var call4427 = selfRequest(this, "new(1)", [1], var_v);
      var var_result = call4427;
      setLineNumber(2297);    // compilenode call
      // call case 6: other requests
      var call4428 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_)scope(_)
    this.methods["new(1)scope(1)"] = func4426;
    func4426.methodName = "new(1)scope(1)";
    func4426.paramCounts = [1, 1];
    func4426.paramNames = ["v", "s"];
    func4426.definitionLine = 2295;
    func4426.definitionModule = "ast";
    var func4429 = function(argcv, var_v) {    // method new(_), line 2301
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("stringNode.new(_)", "ast", 2301);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_v, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func4429;
    func4429.methodName = "new(1)";
    func4429.paramCounts = [1];
    func4429.paramNames = ["v"];
    func4429.definitionLine = 2301;
    func4429.definitionModule = "ast";
    var func4430 = function(argcv, var_v, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 2301
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj4431_build = function(ignore, var_v, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2301");
        this.outer_ast_2301 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2302);    // reuse call
        var initFun4432 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4433_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4433_kind.isDef = true;
        this.methods["kind"] = reader4433_kind;
        this.data.value = undefined;
        var reader4434_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4434_value.isVar = true;
        this.methods["value"] = reader4434_value;
        var writer4435_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer4435_value;
        this.data.end = undefined;
        var reader4436_end = function() {  // reader method end
            if (this.data.end === undefined) raiseUninitializedVariable("end");
            return this.data.end;
        };
        reader4436_end.isVar = true;
        this.methods["end"] = reader4436_end;
        var writer4437_end = function(argcv, n) {   // writer method end:=(_)
          this.data.end = n;
          return GraceDone;
        };
        this.methods["end:=(1)"] = writer4437_end;
        var func4438 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2308
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          setLineNumber(2309);    // compilenode call
          // call case 6: other requests
          var call4439 = request(var_visitor, "visitString(1)up(1)", [1, 1], this, var_ac);
          return call4439;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4438;
        func4438.methodName = "accept(1)from(1)";
        func4438.paramCounts = [1, 1];
        func4438.paramNames = ["visitor", "ac"];
        func4438.definitionLine = 2308;
        func4438.definitionModule = "ast";
        var func4440 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2311
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2312);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4441 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4441;
          setLineNumber(2313);    // compilenode call
          // call case 6: other requests
          var call4442 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4442;
          setLineNumber(2314);    // compilenode call
          // call case 6: other requests
          var call4443 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4443;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4440;
        func4440.methodName = "map(1)ancestors(1)";
        func4440.paramCounts = [1, 1];
        func4440.paramNames = ["blk", "ac"];
        func4440.definitionLine = 2311;
        func4440.definitionModule = "ast";
        var func4444 = function(argcv, var_depth) {    // method pretty(_), line 2316
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2317);    // compilenode string
          var string4445 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4446 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult4447 = request(string4445, "++(1)", [1], call4446);
          var string4448 = new GraceString("(");
          var opresult4449 = request(opresult4447, "++(1)", [1], string4448);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4450 = selfRequest(this, "value", [0]);
          var opresult4451 = request(opresult4449, "++(1)", [1], call4450);
          var string4452 = new GraceString(")");
          var opresult4453 = request(opresult4451, "++(1)", [1], string4452);
          return opresult4453;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4444;
        func4444.methodName = "pretty(1)";
        func4444.paramCounts = [1];
        func4444.paramNames = ["depth"];
        func4444.definitionLine = 2316;
        func4444.definitionModule = "ast";
        var func4454 = function(argcv, var_depth) {    // method toGrace(_), line 2319
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2320);    // compilenode string
          var string4455 = new GraceString("\"");
          var var_q = string4455;
          setLineNumber(2321);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4457 = selfRequest(this, "value", [0]);
          var call4456 = request(call4457, "quoted", [0]);
          var opresult4458 = request(var_q, "++(1)", [1], call4456);
          var opresult4459 = request(opresult4458, "++(1)", [1], var_q);
          return opresult4459;
        };    // end of method toGrace(_)
        func4454.paramTypes = [];
        func4454.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4454;
        func4454.methodName = "toGrace(1)";
        func4454.paramCounts = [1];
        func4454.paramNames = ["depth"];
        func4454.definitionLine = 2319;
        func4454.definitionModule = "ast";
        var func4460 = function(argcv) {    // method asString, line 2323
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(2323);    // compilenode string
          var string4461 = new GraceString("string ");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4462 = selfRequest(this, "toGrace(1)", [1], new GraceNum(0));
          var opresult4463 = request(string4461, "++(1)", [1], call4462);
          var string4464 = new GraceString("");
          var opresult4465 = request(opresult4463, "++(1)", [1], string4464);
          return opresult4465;
        };    // end of method asString
        this.methods["asString"] = func4460;
        func4460.methodName = "asString";
        func4460.paramCounts = [0];
        func4460.paramNames = [];
        func4460.definitionLine = 2323;
        func4460.definitionModule = "ast";
        var func4466 = function(argcv) {    // method shallowCopy, line 2324
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2325);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4469 = selfRequest(this, "value", [0]);
          // call case 6: other requests
          if (var_stringNode === undefined) raiseUninitializedVariable("stringNode");
          var call4468 = request(var_stringNode, "new(1)", [1], call4469);
          var call4467 = request(call4468, "shallowCopyFieldsFrom(1)", [1], this);
          return call4467;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4466;
        func4466.methodName = "shallowCopy";
        func4466.paramCounts = [0];
        func4466.paramNames = [];
        func4466.definitionLine = 2324;
        func4466.definitionModule = "ast";
        var func4470 = function(argcv, var_other) {    // method postCopy(_), line 2327
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2328);    // compilenode member
          // call case 6: other requests
          var call4472 = request(var_other, "end", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4471 = selfRequest(this, "end:=(1)", [1], call4472);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func4470;
        func4470.methodName = "postCopy(1)";
        func4470.paramCounts = [1];
        func4470.paramNames = ["other"];
        func4470.definitionLine = 2327;
        func4470.definitionModule = "ast";
        var func4473 = function(argcv) {    // method statementName, line 2331
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2331);    // compilenode string
          var string4474 = new GraceString("expression");
          return string4474;
        };    // end of method statementName
        this.methods["statementName"] = func4473;
        func4473.methodName = "statementName";
        func4473.paramCounts = [0];
        func4473.paramNames = [];
        func4473.definitionLine = 2331;
        func4473.definitionModule = "ast";
        var func4475 = function(argcv) {     // accessor method isDelimited
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isDelimited", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isDelimited
        this.methods["isDelimited"] = func4475;
        func4475.methodName = "isDelimited";
        func4475.paramCounts = [0];
        func4475.paramNames = [];
        func4475.definitionLine = 2332;
        func4475.definitionModule = "ast";
        var func4476 = function(argcv) {     // accessor method isConstant
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isConstant", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isConstant
        this.methods["isConstant"] = func4476;
        func4476.methodName = "isConstant";
        func4476.paramCounts = [0];
        func4476.paramNames = [];
        func4476.definitionLine = 2333;
        func4476.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2301;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4431_init = function() {    // init of object on line 2301
          initFun4432.call(this);
          setLineNumber(2303);    // compilenode string
          var string4477 = new GraceString("string");
          this.data.kind = string4477;
          this.data.value = var_v;
          setLineNumber(2305);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4479 = selfRequest(this, "line", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4480 = selfRequest(this, "linePos", [0]);
          // call case 6: other requests
          var call4481 = request(var_v, "size", [0]);
          var sum4482 = request(call4480, "+(1)", [1], call4481);
          var sum4483 = request(sum4482, "+(1)", [1], new GraceNum(1));
          // call case 2: outer request
          var call4478 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call4479, sum4483);
          this.data.end = call4478;
        };
        return obj4431_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4431_init = obj4431_build.call(inheritingObject, null, var_v, this, aliases, exclusions);
      return obj4431_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func4430;
    func4430.methodName = "new(1)$build(3)";
    func4430.paramCounts = [1];
    func4430.paramNames = ["v"];
    func4430.definitionLine = 2301;
    func4430.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2294;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4425_init = function() {    // init of object on line 2294
    };
    return obj4425_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4425 = emptyGraceObject("stringNode", "ast", 2294);
  var obj4425_init = obj4425_build.call(obj4425, null, this, [], []);
  obj4425_init.call(obj4425);  // end of compileobject
  var var_stringNode = obj4425;
  var reader4484_stringNode = function() {  // reader method stringNode
      if (var_stringNode === undefined) raiseUninitializedVariable("stringNode");
      return var_stringNode;
  };
  reader4484_stringNode.isDef = true;
  this.methods["stringNode"] = reader4484_stringNode;
  setLineNumber(2336);    // compilenode object
  var obj4485_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2336");
    this.outer_ast_2336 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4486 = function(argcv, var_val) {    // method new(_), line 2337
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("numNode.new(_)", "ast", 2337);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_val, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func4486;
    func4486.methodName = "new(1)";
    func4486.paramCounts = [1];
    func4486.paramNames = ["val"];
    func4486.definitionLine = 2337;
    func4486.definitionModule = "ast";
    var func4487 = function(argcv, var_val, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 2337
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj4488_build = function(ignore, var_val, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2337");
        this.outer_ast_2337 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2338);    // reuse call
        var initFun4489 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4490_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4490_kind.isDef = true;
        this.methods["kind"] = reader4490_kind;
        this.data.value = undefined;
        var reader4491_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4491_value.isVar = true;
        this.methods["value"] = reader4491_value;
        var writer4492_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer4492_value;
        var func4493 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2341
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          setLineNumber(2342);    // compilenode call
          // call case 6: other requests
          var call4494 = request(var_visitor, "visitNum(1)up(1)", [1, 1], this, var_ac);
          return call4494;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4493;
        func4493.methodName = "accept(1)from(1)";
        func4493.paramCounts = [1, 1];
        func4493.paramNames = ["visitor", "ac"];
        func4493.definitionLine = 2341;
        func4493.definitionModule = "ast";
        var func4495 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2344
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2345);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4496 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4496;
          setLineNumber(2346);    // compilenode call
          // call case 6: other requests
          var call4497 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4497;
          setLineNumber(2347);    // compilenode call
          // call case 6: other requests
          var call4498 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4498;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4495;
        func4495.methodName = "map(1)ancestors(1)";
        func4495.paramCounts = [1, 1];
        func4495.paramNames = ["blk", "ac"];
        func4495.definitionLine = 2344;
        func4495.definitionModule = "ast";
        var func4499 = function(argcv, var_depth) {    // method pretty(_), line 2349
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2350);    // compilenode string
          var string4500 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4501 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult4502 = request(string4500, "++(1)", [1], call4501);
          var string4503 = new GraceString("(");
          var opresult4504 = request(opresult4502, "++(1)", [1], string4503);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4505 = selfRequest(this, "value", [0]);
          var opresult4506 = request(opresult4504, "++(1)", [1], call4505);
          var string4507 = new GraceString(")");
          var opresult4508 = request(opresult4506, "++(1)", [1], string4507);
          return opresult4508;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4499;
        func4499.methodName = "pretty(1)";
        func4499.paramCounts = [1];
        func4499.paramNames = ["depth"];
        func4499.definitionLine = 2349;
        func4499.definitionModule = "ast";
        var func4509 = function(argcv, var_depth) {    // method toGrace(_), line 2352
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2353);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4511 = selfRequest(this, "value", [0]);
          var call4510 = request(call4511, "asString", [0]);
          return call4510;
        };    // end of method toGrace(_)
        func4509.paramTypes = [];
        func4509.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4509;
        func4509.methodName = "toGrace(1)";
        func4509.paramCounts = [1];
        func4509.paramNames = ["depth"];
        func4509.definitionLine = 2352;
        func4509.definitionModule = "ast";
        var func4512 = function(argcv) {    // method asString, line 2355
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(2355);    // compilenode string
          var string4513 = new GraceString("num ");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4514 = selfRequest(this, "value", [0]);
          var opresult4515 = request(string4513, "++(1)", [1], call4514);
          var string4516 = new GraceString("");
          var opresult4517 = request(opresult4515, "++(1)", [1], string4516);
          return opresult4517;
        };    // end of method asString
        this.methods["asString"] = func4512;
        func4512.methodName = "asString";
        func4512.paramCounts = [0];
        func4512.paramNames = [];
        func4512.definitionLine = 2355;
        func4512.definitionModule = "ast";
        var func4518 = function(argcv) {    // method shallowCopy, line 2356
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2357);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4521 = selfRequest(this, "value", [0]);
          // call case 6: other requests
          if (var_numNode === undefined) raiseUninitializedVariable("numNode");
          var call4520 = request(var_numNode, "new(1)", [1], call4521);
          var call4519 = request(call4520, "shallowCopyFieldsFrom(1)", [1], this);
          return call4519;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4518;
        func4518.methodName = "shallowCopy";
        func4518.paramCounts = [0];
        func4518.paramNames = [];
        func4518.definitionLine = 2356;
        func4518.definitionModule = "ast";
        var func4522 = function(argcv) {    // method statementName, line 2359
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2359);    // compilenode string
          var string4523 = new GraceString("expression");
          return string4523;
        };    // end of method statementName
        this.methods["statementName"] = func4522;
        func4522.methodName = "statementName";
        func4522.paramCounts = [0];
        func4522.paramNames = [];
        func4522.definitionLine = 2359;
        func4522.definitionModule = "ast";
        var func4524 = function(argcv) {     // accessor method isDelimited
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isDelimited", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isDelimited
        this.methods["isDelimited"] = func4524;
        func4524.methodName = "isDelimited";
        func4524.paramCounts = [0];
        func4524.paramNames = [];
        func4524.definitionLine = 2360;
        func4524.definitionModule = "ast";
        var func4525 = function(argcv) {     // accessor method isConstant
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isConstant", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isConstant
        this.methods["isConstant"] = func4525;
        func4525.methodName = "isConstant";
        func4525.paramCounts = [0];
        func4525.paramNames = [];
        func4525.definitionLine = 2361;
        func4525.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2337;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4488_init = function() {    // init of object on line 2337
          initFun4489.call(this);
          setLineNumber(2339);    // compilenode string
          var string4526 = new GraceString("num");
          this.data.kind = string4526;
          this.data.value = var_val;
        };
        return obj4488_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4488_init = obj4488_build.call(inheritingObject, null, var_val, this, aliases, exclusions);
      return obj4488_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func4487;
    func4487.methodName = "new(1)$build(3)";
    func4487.paramCounts = [1];
    func4487.paramNames = ["val"];
    func4487.definitionLine = 2337;
    func4487.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2336;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4485_init = function() {    // init of object on line 2336
    };
    return obj4485_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4485 = emptyGraceObject("numNode", "ast", 2336);
  var obj4485_init = obj4485_build.call(obj4485, null, this, [], []);
  obj4485_init.call(obj4485);  // end of compileobject
  var var_numNode = obj4485;
  var reader4527_numNode = function() {  // reader method numNode
      if (var_numNode === undefined) raiseUninitializedVariable("numNode");
      return var_numNode;
  };
  reader4527_numNode.isDef = true;
  this.methods["numNode"] = reader4527_numNode;
  setLineNumber(2364);    // compilenode object
  var obj4528_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2364");
    this.outer_ast_2364 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4529 = function(argcv, var_op, var_l, var_r) {    // method new(_,_,_), line 2365
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("opNode.new(_,_,_)", "ast", 2365);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_op, var_l, var_r, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func4529;
    func4529.methodName = "new(3)";
    func4529.paramCounts = [3];
    func4529.paramNames = ["op", "l", "r"];
    func4529.definitionLine = 2365;
    func4529.definitionModule = "ast";
    var func4530 = function(argcv, var_op, var_l, var_r, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 2365
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj4531_build = function(ignore, var_op, var_l, var_r, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2365");
        this.outer_ast_2365 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2366);    // reuse call
        var initFun4532 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4533_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4533_kind.isDef = true;
        this.methods["kind"] = reader4533_kind;
        this.data.value = undefined;
        var reader4534_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4534_value.isDef = true;
        this.methods["value"] = reader4534_value;
        this.data.left = undefined;
        var reader4535_left = function() {  // reader method left
            if (this.data.left === undefined) raiseUninitializedVariable("left");
            return this.data.left;
        };
        reader4535_left.isVar = true;
        this.methods["left"] = reader4535_left;
        var writer4536_left = function(argcv, n) {   // writer method left:=(_)
          this.data.left = n;
          return GraceDone;
        };
        this.methods["left:=(1)"] = writer4536_left;
        this.data.right = undefined;
        var reader4537_right = function() {  // reader method right
            if (this.data.right === undefined) raiseUninitializedVariable("right");
            return this.data.right;
        };
        reader4537_right.isVar = true;
        this.methods["right"] = reader4537_right;
        var writer4538_right = function(argcv, n) {   // writer method right:=(_)
          this.data.right = n;
          return GraceDone;
        };
        this.methods["right:=(1)"] = writer4538_right;
        this.data.generics = undefined;
        var reader4539_generics = function() {  // reader method generics
            if (this.data.generics === undefined) raiseUninitializedVariable("generics");
            return this.data.generics;
        };
        reader4539_generics.isVar = true;
        this.methods["generics"] = reader4539_generics;
        var writer4540_generics = function(argcv, n) {   // writer method generics:=(_)
          this.data.generics = n;
          return GraceDone;
        };
        this.methods["generics:=(1)"] = writer4540_generics;
        this.data.isTailCall = undefined;
        var reader4541_isTailCall = function() {  // reader method isTailCall
            if (this.data.isTailCall === undefined) raiseUninitializedVariable("isTailCall");
            return this.data.isTailCall;
        };
        reader4541_isTailCall.isVar = true;
        this.methods["isTailCall"] = reader4541_isTailCall;
        var writer4542_isTailCall = function(argcv, n) {   // writer method isTailCall:=(_)
          this.data.isTailCall = n;
          return GraceDone;
        };
        this.methods["isTailCall:=(1)"] = writer4542_isTailCall;
        this.data.isSelfRequest = undefined;
        var reader4543_isSelfRequest = function() {  // reader method isSelfRequest
            if (this.data.isSelfRequest === undefined) raiseUninitializedVariable("isSelfRequest");
            return this.data.isSelfRequest;
        };
        reader4543_isSelfRequest.isVar = true;
        this.methods["isSelfRequest"] = reader4543_isSelfRequest;
        var writer4544_isSelfRequest = function(argcv, n) {   // writer method isSelfRequest:=(_)
          this.data.isSelfRequest = n;
          return GraceDone;
        };
        this.methods["isSelfRequest:=(1)"] = writer4544_isSelfRequest;
        var func4545 = function(argcv) {    // method start, line 2375
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("start", 0, numArgs - 0);
          }
          setLineNumber(2375);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4547 = selfRequest(this, "left", [0]);
          var call4546 = request(call4547, "start", [0]);
          return call4546;
        };    // end of method start
        this.methods["start"] = func4545;
        func4545.methodName = "start";
        func4545.paramCounts = [0];
        func4545.paramNames = [];
        func4545.definitionLine = 2375;
        func4545.definitionModule = "ast";
        var func4548 = function(argcv) {    // method end, line 2376
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(2376);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4550 = selfRequest(this, "right", [0]);
          var call4549 = request(call4550, "end", [0]);
          return call4549;
        };    // end of method end
        this.methods["end"] = func4548;
        func4548.methodName = "end";
        func4548.paramCounts = [0];
        func4548.paramNames = [];
        func4548.definitionLine = 2376;
        func4548.definitionModule = "ast";
        var func4551 = function(argcv) {    // method onSelf, line 2377
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("onSelf", 0, numArgs - 0);
          }
          setLineNumber(2378);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4552 = selfRequest(this, "isSelfRequest:=(1)", [1], GraceTrue);
          return this;
        };    // end of method onSelf
        this.methods["onSelf"] = func4551;
        func4551.methodName = "onSelf";
        func4551.paramCounts = [0];
        func4551.paramNames = [];
        func4551.definitionLine = 2377;
        func4551.definitionModule = "ast";
        var func4553 = function(argcv) {    // method opPos, line 2381
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("opPos", 0, numArgs - 0);
          }
          setLineNumber(2383);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4555 = selfRequest(this, "value", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4557 = selfRequest(this, "left", [0]);
          var call4556 = request(call4557, "end", [0]);
          // call case 2: outer request
          var call4554 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], call4555, call4556);
          return call4554;
        };    // end of method opPos
        func4553.confidential = true;
        this.methods["opPos"] = func4553;
        func4553.methodName = "opPos";
        func4553.paramCounts = [0];
        func4553.paramNames = [];
        func4553.definitionLine = 2381;
        func4553.definitionModule = "ast";
        var func4558 = function(argcv) {     // accessor method isSimple
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isSimple", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isSimple
        this.methods["isSimple"] = func4558;
        func4558.methodName = "isSimple";
        func4558.paramCounts = [0];
        func4558.paramNames = [];
        func4558.definitionLine = 2385;
        func4558.definitionModule = "ast";
        var func4559 = function(argcv) {    // method nameString, line 2386
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(2386);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4560 = selfRequest(this, "value", [0]);
          var string4561 = new GraceString("(1)");
          var opresult4562 = request(call4560, "++(1)", [1], string4561);
          return opresult4562;
        };    // end of method nameString
        this.methods["nameString"] = func4559;
        func4559.methodName = "nameString";
        func4559.paramCounts = [0];
        func4559.paramNames = [];
        func4559.definitionLine = 2386;
        func4559.definitionModule = "ast";
        var func4563 = function(argcv) {    // method canonicalName, line 2387
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          setLineNumber(2387);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4564 = selfRequest(this, "value", [0]);
          var string4565 = new GraceString("(_)");
          var opresult4566 = request(call4564, "++(1)", [1], string4565);
          return opresult4566;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func4563;
        func4563.methodName = "canonicalName";
        func4563.paramCounts = [0];
        func4563.paramNames = [];
        func4563.definitionLine = 2387;
        func4563.definitionModule = "ast";
        var func4567 = function(argcv) {    // method receiver, line 2388
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("receiver", 0, numArgs - 0);
          }
          setLineNumber(2388);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4568 = selfRequest(this, "left", [0]);
          return call4568;
        };    // end of method receiver
        this.methods["receiver"] = func4567;
        func4567.methodName = "receiver";
        func4567.paramCounts = [0];
        func4567.paramNames = [];
        func4567.definitionLine = 2388;
        func4567.definitionModule = "ast";
        var func4569 = function(argcv) {     // accessor method isCall
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isCall", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isCall
        this.methods["isCall"] = func4569;
        func4569.methodName = "isCall";
        func4569.paramCounts = [0];
        func4569.paramNames = [];
        func4569.definitionLine = 2389;
        func4569.definitionModule = "ast";
        var func4570 = function(argcv) {    // method parts, line 2391
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("parts", 0, numArgs - 0);
          }
          setLineNumber(2392);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4573 = selfRequest(this, "opPos", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4575 = selfRequest(this, "value", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4577 = selfRequest(this, "right", [0]);
          var array4576 = new GraceSequence([call4577]);
          // call case 6: other requests
          if (var_requestPart === undefined) raiseUninitializedVariable("requestPart");
          var call4574 = request(var_requestPart, "request(1)withArgs(1)", [1, 1], call4575, array4576);
          var call4572 = request(call4574, "setStart(1)", [1], call4573);
          // call case 6: other requests
          // call case 2: outer request
          var call4578 = selfRequest(var_prelude, "list", [0]);
          var call4571 = request(call4578, "with(1)", [1], call4572);
          return call4571;
        };    // end of method parts
        this.methods["parts"] = func4570;
        func4570.methodName = "parts";
        func4570.paramCounts = [0];
        func4570.paramNames = [];
        func4570.definitionLine = 2391;
        func4570.definitionModule = "ast";
        var func4579 = function(argcv) {    // method arguments, line 2394
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("arguments", 0, numArgs - 0);
          }
          setLineNumber(2394);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4581 = selfRequest(this, "right", [0]);
          var array4580 = new GraceSequence([call4581]);
          return array4580;
        };    // end of method arguments
        this.methods["arguments"] = func4579;
        func4579.methodName = "arguments";
        func4579.paramCounts = [0];
        func4579.paramNames = [];
        func4579.definitionLine = 2394;
        func4579.definitionModule = "ast";
        var func4582 = function(argcv, var_action) {    // method argumentsDo(_), line 2395
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("argumentsDo(_)", 0, numArgs - 1);
          }
          setLineNumber(2395);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4584 = selfRequest(this, "right", [0]);
          // call case 6: other requests
          var call4583 = request(var_action, "apply(1)", [1], call4584);
          return call4583;
        };    // end of method argumentsDo(_)
        this.methods["argumentsDo(1)"] = func4582;
        func4582.methodName = "argumentsDo(1)";
        func4582.paramCounts = [1];
        func4582.paramNames = ["action"];
        func4582.definitionLine = 2395;
        func4582.definitionModule = "ast";
        var func4585 = function(argcv) {    // method numArgs, line 2396
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numArgs", 0, numArgs - 0);
          }
          setLineNumber(2396);    // compilenode num
          return new GraceNum(1);
        };    // end of method numArgs
        this.methods["numArgs"] = func4585;
        func4585.methodName = "numArgs";
        func4585.paramCounts = [0];
        func4585.paramNames = [];
        func4585.definitionLine = 2396;
        func4585.definitionModule = "ast";
        var func4586 = function(argcv) {    // method numTypeArgs, line 2397
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeArgs", 0, numArgs - 0);
          }
          setLineNumber(2397);    // compilenode num
          return new GraceNum(0);
        };    // end of method numTypeArgs
        this.methods["numTypeArgs"] = func4586;
        func4586.methodName = "numTypeArgs";
        func4586.paramCounts = [0];
        func4586.paramNames = [];
        func4586.definitionLine = 2397;
        func4586.definitionModule = "ast";
        var func4587 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2399
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if4588 = GraceDone;
          setLineNumber(2400);    // compilenode call
          // call case 6: other requests
          var call4589 = request(var_visitor, "visitOp(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call4589)) {
            setLineNumber(2401);    // compilenode call
            // call case 6: other requests
            var call4590 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call4590;
            setLineNumber(2402);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4592 = selfRequest(this, "left", [0]);
            var call4591 = request(call4592, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(2403);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4594 = selfRequest(this, "right", [0]);
            var call4593 = request(call4594, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if4588 = call4593;
          }
          return if4588;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4587;
        func4587.methodName = "accept(1)from(1)";
        func4587.paramCounts = [1, 1];
        func4587.paramNames = ["visitor", "ac"];
        func4587.definitionLine = 2399;
        func4587.definitionModule = "ast";
        var func4595 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2406
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2407);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4596 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4596;
          setLineNumber(2408);    // compilenode call
          // call case 6: other requests
          var call4597 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4597;
          setLineNumber(2409);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4600 = selfRequest(this, "left", [0]);
          var call4599 = request(call4600, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4598 = request(var_n, "left:=(1)", [1], call4599);
          setLineNumber(2410);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4603 = selfRequest(this, "right", [0]);
          var call4602 = request(call4603, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4601 = request(var_n, "right:=(1)", [1], call4602);
          setLineNumber(2411);    // compilenode call
          // call case 6: other requests
          var call4604 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4604;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4595;
        func4595.methodName = "map(1)ancestors(1)";
        func4595.paramCounts = [1, 1];
        func4595.paramNames = ["blk", "ac"];
        func4595.definitionLine = 2406;
        func4595.definitionModule = "ast";
        var func4605 = function(argcv, var_depth) {    // method pretty(_), line 2413
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2414);    // compilenode string
          var string4606 = new GraceString("  ");
          var sum4607 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod4608 = request(string4606, "*(1)", [1], sum4607);
          var var_spc = prod4608;
          setLineNumber(2415);    // compilenode string
          var string4609 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4610 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult4611 = request(string4609, "++(1)", [1], call4610);
          var string4612 = new GraceString("\u2039");
          var opresult4613 = request(opresult4611, "++(1)", [1], string4612);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4614 = selfRequest(this, "nameString", [0]);
          var opresult4615 = request(opresult4613, "++(1)", [1], call4614);
          var string4616 = new GraceString("\u203a");
          var opresult4617 = request(opresult4615, "++(1)", [1], string4616);
          var var_s = opresult4617;
          setLineNumber(2416);    // compilenode string
          var string4618 = new GraceString("\n");
          var opresult4619 = request(var_s, "++(1)", [1], string4618);
          var_s = opresult4619;
          setLineNumber(2417);    // compilenode op
          var opresult4620 = request(var_s, "++(1)", [1], var_spc);
          var sum4622 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4623 = selfRequest(this, "left", [0]);
          var call4621 = request(call4623, "pretty(1)", [1], sum4622);
          var opresult4624 = request(opresult4620, "++(1)", [1], call4621);
          var_s = opresult4624;
          setLineNumber(2418);    // compilenode string
          var string4625 = new GraceString("\n");
          var opresult4626 = request(var_s, "++(1)", [1], string4625);
          var_s = opresult4626;
          setLineNumber(2419);    // compilenode op
          var opresult4627 = request(var_s, "++(1)", [1], var_spc);
          var sum4629 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4630 = selfRequest(this, "right", [0]);
          var call4628 = request(call4630, "pretty(1)", [1], sum4629);
          var opresult4631 = request(opresult4627, "++(1)", [1], call4628);
          var_s = opresult4631;
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4605;
        func4605.methodName = "pretty(1)";
        func4605.paramCounts = [1];
        func4605.paramNames = ["depth"];
        func4605.definitionLine = 2413;
        func4605.definitionModule = "ast";
        var func4632 = function(argcv, var_depth) {    // method toGrace(_), line 2422
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2423);    // compilenode string
          var string4633 = new GraceString("");
          var var_s = string4633;
          var if4634 = GraceDone;
          setLineNumber(2424);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4636 = selfRequest(this, "left", [0]);
          var call4635 = request(call4636, "kind", [0]);
          var string4637 = new GraceString("op");
          var opresult4638 = request(call4635, "==(1)", [1], string4637);
          var block4639 = new GraceBlock(this, 2424, 0);
          block4639.guard = jsTrue;
          block4639.real = function block4639() {
            setLineNumber(2424);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4641 = selfRequest(this, "left", [0]);
            var call4640 = request(call4641, "value", [0]);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4642 = selfRequest(this, "value", [0]);
            var opresult4643 = request(call4640, "\u2260(1)", [1], call4642);
            return opresult4643;
          };
          let applyMeth4639 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4639.methodName = "apply";
          applyMeth4639.paramCounts = [0];
          applyMeth4639.paramNames = [];
          applyMeth4639.definitionLine = 2424;
          applyMeth4639.definitionModule = "ast";
          block4639.methods["apply"] = applyMeth4639;
          var opresult4644 = request(opresult4638, "&&(1)", [1], block4639);
          if (Grace_isTrue(opresult4644)) {
            setLineNumber(2425);    // compilenode string
            var string4645 = new GraceString("(");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4647 = selfRequest(this, "left", [0]);
            var call4646 = request(call4647, "toGrace(1)", [1], new GraceNum(0));
            var opresult4648 = request(string4645, "++(1)", [1], call4646);
            var string4649 = new GraceString(")");
            var opresult4650 = request(opresult4648, "++(1)", [1], string4649);
            var_s = opresult4650;
            if4634 = GraceDone;
          } else {
            setLineNumber(2427);    // compilenode num
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4652 = selfRequest(this, "left", [0]);
            var call4651 = request(call4652, "toGrace(1)", [1], new GraceNum(0));
            var_s = call4651;
            if4634 = GraceDone;
          }
          var if4653 = GraceDone;
          setLineNumber(2429);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4654 = selfRequest(this, "value", [0]);
          var string4655 = new GraceString("..");
          var opresult4656 = request(call4654, "==(1)", [1], string4655);
          if (Grace_isTrue(opresult4656)) {
            setLineNumber(2430);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4657 = selfRequest(this, "value", [0]);
            var opresult4658 = request(var_s, "++(1)", [1], call4657);
            var_s = opresult4658;
            if4653 = GraceDone;
          } else {
            setLineNumber(2432);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4659 = new GraceString(" ");
            var opresult4660 = request(var_s, "++(1)", [1], string4659);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4661 = selfRequest(this, "value", [0]);
            var opresult4662 = request(opresult4660, "++(1)", [1], call4661);
            var string4663 = new GraceString(" ");
            var opresult4664 = request(opresult4662, "++(1)", [1], string4663);
            var_s = opresult4664;
            if4653 = GraceDone;
          }
          var if4665 = GraceDone;
          setLineNumber(2434);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4667 = selfRequest(this, "right", [0]);
          var call4666 = request(call4667, "kind", [0]);
          var string4668 = new GraceString("op");
          var opresult4669 = request(call4666, "==(1)", [1], string4668);
          var block4670 = new GraceBlock(this, 2434, 0);
          block4670.guard = jsTrue;
          block4670.real = function block4670() {
            setLineNumber(2434);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4672 = selfRequest(this, "right", [0]);
            var call4671 = request(call4672, "value", [0]);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4673 = selfRequest(this, "value", [0]);
            var opresult4674 = request(call4671, "\u2260(1)", [1], call4673);
            return opresult4674;
          };
          let applyMeth4670 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4670.methodName = "apply";
          applyMeth4670.paramCounts = [0];
          applyMeth4670.paramNames = [];
          applyMeth4670.definitionLine = 2434;
          applyMeth4670.definitionModule = "ast";
          block4670.methods["apply"] = applyMeth4670;
          var opresult4675 = request(opresult4669, "&&(1)", [1], block4670);
          if (Grace_isTrue(opresult4675)) {
            setLineNumber(2435);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4676 = new GraceString("(");
            var opresult4677 = request(var_s, "++(1)", [1], string4676);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4679 = selfRequest(this, "right", [0]);
            var call4678 = request(call4679, "toGrace(1)", [1], new GraceNum(0));
            var opresult4680 = request(opresult4677, "++(1)", [1], call4678);
            var string4681 = new GraceString(")");
            var opresult4682 = request(opresult4680, "++(1)", [1], string4681);
            var_s = opresult4682;
            if4665 = GraceDone;
          } else {
            setLineNumber(2437);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4684 = selfRequest(this, "right", [0]);
            var call4683 = request(call4684, "toGrace(1)", [1], new GraceNum(0));
            var opresult4685 = request(var_s, "++(1)", [1], call4683);
            var_s = opresult4685;
            if4665 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func4632.paramTypes = [];
        func4632.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4632;
        func4632.methodName = "toGrace(1)";
        func4632.paramCounts = [1];
        func4632.paramNames = ["depth"];
        func4632.definitionLine = 2422;
        func4632.definitionModule = "ast";
        var func4686 = function(argcv) {    // method asIdentifier, line 2441
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asIdentifier", 0, numArgs - 0);
          }
          setLineNumber(2443);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4688 = selfRequest(this, "nameString", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4689 = selfRequest(this, "scope", [0]);
          // call case 6: other requests
          if (var_identifierNode === undefined) raiseUninitializedVariable("identifierNode");
          var call4687 = request(var_identifierNode, "new(2)scope(1)", [2, 1], call4688, GraceFalse, call4689);
          var var_resultNode = call4687;
          setLineNumber(2444);    // compilenode call
          // call case 6: other requests
          var call4690 = request(var_resultNode, "inRequest:=(1)", [1], GraceTrue);
          setLineNumber(2445);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4692 = selfRequest(this, "line", [0]);
          // call case 6: other requests
          var call4691 = request(var_resultNode, "line:=(1)", [1], call4692);
          setLineNumber(2446);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4694 = selfRequest(this, "linePos", [0]);
          // call case 6: other requests
          var call4693 = request(var_resultNode, "linePos:=(1)", [1], call4694);
          setLineNumber(2447);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4696 = selfRequest(this, "canonicalName", [0]);
          // call case 6: other requests
          var call4695 = request(var_resultNode, "canonicalName:=(1)", [1], call4696);
          setLineNumber(2448);    // compilenode return
          return var_resultNode;
        };    // end of method asIdentifier
        this.methods["asIdentifier"] = func4686;
        func4686.methodName = "asIdentifier";
        func4686.paramCounts = [0];
        func4686.paramNames = [];
        func4686.definitionLine = 2441;
        func4686.definitionModule = "ast";
        var func4697 = function(argcv) {    // method shallowCopy, line 2450
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2451);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4700 = selfRequest(this, "value", [0]);
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          // call case 6: other requests
          if (var_opNode === undefined) raiseUninitializedVariable("opNode");
          var call4699 = request(var_opNode, "new(3)", [3], call4700, var_nullNode, var_nullNode);
          var call4698 = request(call4699, "shallowCopyFieldsFrom(1)", [1], this);
          return call4698;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4697;
        func4697.methodName = "shallowCopy";
        func4697.paramCounts = [0];
        func4697.paramNames = [];
        func4697.definitionLine = 2450;
        func4697.definitionModule = "ast";
        var func4701 = function(argcv, var_other) {    // method postCopy(_), line 2453
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2454);    // compilenode member
          // call case 6: other requests
          var call4703 = request(var_other, "isTailCall", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4702 = selfRequest(this, "isTailCall:=(1)", [1], call4703);
          setLineNumber(2455);    // compilenode member
          // call case 6: other requests
          var call4705 = request(var_other, "isSelfRequest", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4704 = selfRequest(this, "isSelfRequest:=(1)", [1], call4705);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func4701;
        func4701.methodName = "postCopy(1)";
        func4701.paramCounts = [1];
        func4701.paramNames = ["other"];
        func4701.definitionLine = 2453;
        func4701.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2365;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4531_init = function() {    // init of object on line 2365
          initFun4532.call(this);
          setLineNumber(2367);    // compilenode string
          var string4706 = new GraceString("op");
          this.data.kind = string4706;
          this.data.value = var_op;
          this.data.left = var_l;
          this.data.right = var_r;
          this.data.generics = GraceFalse;
          this.data.isTailCall = GraceFalse;
          this.data.isSelfRequest = GraceFalse;
        };
        return obj4531_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4531_init = obj4531_build.call(inheritingObject, null, var_op, var_l, var_r, this, aliases, exclusions);
      return obj4531_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func4530;
    func4530.methodName = "new(3)$build(3)";
    func4530.paramCounts = [3];
    func4530.paramNames = ["op", "l", "r"];
    func4530.definitionLine = 2365;
    func4530.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2364;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4528_init = function() {    // init of object on line 2364
    };
    return obj4528_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4528 = emptyGraceObject("opNode", "ast", 2364);
  var obj4528_init = obj4528_build.call(obj4528, null, this, [], []);
  obj4528_init.call(obj4528);  // end of compileobject
  var var_opNode = obj4528;
  var reader4707_opNode = function() {  // reader method opNode
      if (var_opNode === undefined) raiseUninitializedVariable("opNode");
      return var_opNode;
  };
  reader4707_opNode.isDef = true;
  this.methods["opNode"] = reader4707_opNode;
  setLineNumber(2460);    // compilenode object
  var obj4708_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2460");
    this.outer_ast_2460 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4709 = function(argcv, var_dest__39__, var_val__39__) {    // method new(_,_), line 2461
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("bindNode.new(_,_)", "ast", 2461);
      var ouc_init = this.methods["new(2)$build(3)"].call(this, null, var_dest__39__, var_val__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_)
    this.methods["new(2)"] = func4709;
    func4709.methodName = "new(2)";
    func4709.paramCounts = [2];
    func4709.paramNames = ["dest'", "val'"];
    func4709.definitionLine = 2461;
    func4709.definitionModule = "ast";
    var func4710 = function(argcv, var_dest__39__, var_val__39__, inheritingObject, aliases, exclusions) {    // method new(_,_)$build(_,_,_), line 2461
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_,_)", 0, numArgs - 2);
      }
      var obj4711_build = function(ignore, var_dest__39__, var_val__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2461");
        this.outer_ast_2461 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2463);    // reuse call
        var initFun4712 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4713_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4713_kind.isDef = true;
        this.methods["kind"] = reader4713_kind;
        this.data.dest = undefined;
        var reader4714_dest = function() {  // reader method dest
            if (this.data.dest === undefined) raiseUninitializedVariable("dest");
            return this.data.dest;
        };
        reader4714_dest.isVar = true;
        this.methods["dest"] = reader4714_dest;
        var writer4715_dest = function(argcv, n) {   // writer method dest:=(_)
          this.data.dest = n;
          return GraceDone;
        };
        this.methods["dest:=(1)"] = writer4715_dest;
        this.data.value = undefined;
        var reader4716_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4716_value.isVar = true;
        this.methods["value"] = reader4716_value;
        var writer4717_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer4717_value;
        var func4718 = function(argcv) {    // method end, line 2468
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(2468);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4720 = selfRequest(this, "value", [0]);
          var call4719 = request(call4720, "end", [0]);
          return call4719;
        };    // end of method end
        this.methods["end"] = func4718;
        func4718.methodName = "end";
        func4718.paramCounts = [0];
        func4718.paramNames = [];
        func4718.definitionLine = 2468;
        func4718.definitionModule = "ast";
        var func4721 = function(argcv) {    // method nameString, line 2469
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(2469);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4723 = selfRequest(this, "dest", [0]);
          var call4722 = request(call4723, "nameString", [0]);
          var string4724 = new GraceString(":=(1)");
          var opresult4725 = request(call4722, "++(1)", [1], string4724);
          return opresult4725;
        };    // end of method nameString
        this.methods["nameString"] = func4721;
        func4721.methodName = "nameString";
        func4721.paramCounts = [0];
        func4721.paramNames = [];
        func4721.definitionLine = 2469;
        func4721.definitionModule = "ast";
        var func4726 = function(argcv) {    // method canonicalName, line 2470
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          setLineNumber(2470);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4728 = selfRequest(this, "dest", [0]);
          var call4727 = request(call4728, "nameString", [0]);
          var string4729 = new GraceString(":=(_)");
          var opresult4730 = request(call4727, "++(1)", [1], string4729);
          return opresult4730;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func4726;
        func4726.methodName = "canonicalName";
        func4726.paramCounts = [0];
        func4726.paramNames = [];
        func4726.definitionLine = 2470;
        func4726.definitionModule = "ast";
        var func4731 = function(argcv) {     // accessor method isBind
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isBind", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isBind
        this.methods["isBind"] = func4731;
        func4731.methodName = "isBind";
        func4731.paramCounts = [0];
        func4731.paramNames = [];
        func4731.definitionLine = 2471;
        func4731.definitionModule = "ast";
        var func4732 = function(argcv) {    // method asString, line 2472
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(2472);    // compilenode string
          var string4733 = new GraceString("bind ");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4734 = selfRequest(this, "value", [0]);
          var opresult4735 = request(string4733, "++(1)", [1], call4734);
          var string4736 = new GraceString("");
          var opresult4737 = request(opresult4735, "++(1)", [1], string4736);
          return opresult4737;
        };    // end of method asString
        this.methods["asString"] = func4732;
        func4732.methodName = "asString";
        func4732.paramCounts = [0];
        func4732.paramNames = [];
        func4732.definitionLine = 2472;
        func4732.definitionModule = "ast";
        var func4738 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2473
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if4739 = GraceDone;
          setLineNumber(2474);    // compilenode call
          // call case 6: other requests
          var call4740 = request(var_visitor, "visitBind(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call4740)) {
            setLineNumber(2475);    // compilenode call
            // call case 6: other requests
            var call4741 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call4741;
            setLineNumber(2476);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4743 = selfRequest(this, "dest", [0]);
            var call4742 = request(call4743, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(2477);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4745 = selfRequest(this, "value", [0]);
            var call4744 = request(call4745, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if4739 = call4744;
          }
          return if4739;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4738;
        func4738.methodName = "accept(1)from(1)";
        func4738.paramCounts = [1, 1];
        func4738.paramNames = ["visitor", "ac"];
        func4738.definitionLine = 2473;
        func4738.definitionModule = "ast";
        var func4746 = function(argcv) {     // accessor method generics
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("generics", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method generics
        this.methods["generics"] = func4746;
        func4746.methodName = "generics";
        func4746.paramCounts = [0];
        func4746.paramNames = [];
        func4746.definitionLine = 2480;
        func4746.definitionModule = "ast";
        var func4747 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2482
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2483);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4748 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4748;
          setLineNumber(2484);    // compilenode call
          // call case 6: other requests
          var call4749 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4749;
          setLineNumber(2485);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4752 = selfRequest(this, "dest", [0]);
          var call4751 = request(call4752, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4750 = request(var_n, "dest:=(1)", [1], call4751);
          setLineNumber(2486);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4755 = selfRequest(this, "value", [0]);
          var call4754 = request(call4755, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4753 = request(var_n, "value:=(1)", [1], call4754);
          setLineNumber(2487);    // compilenode call
          // call case 6: other requests
          var call4756 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4756;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4747;
        func4747.methodName = "map(1)ancestors(1)";
        func4747.paramCounts = [1, 1];
        func4747.paramNames = ["blk", "ac"];
        func4747.definitionLine = 2482;
        func4747.definitionModule = "ast";
        var func4757 = function(argcv, var_depth) {    // method pretty(_), line 2489
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2490);    // compilenode string
          var string4758 = new GraceString("  ");
          var sum4759 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod4760 = request(string4758, "*(1)", [1], sum4759);
          var var_spc = prod4760;
          setLineNumber(2491);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4761 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string4762 = new GraceString("\n");
          var opresult4763 = request(call4761, "++(1)", [1], string4762);
          var var_s = opresult4763;
          setLineNumber(2492);    // compilenode op
          var opresult4764 = request(var_s, "++(1)", [1], var_spc);
          var sum4766 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4767 = selfRequest(this, "dest", [0]);
          var call4765 = request(call4767, "pretty(1)", [1], sum4766);
          var opresult4768 = request(opresult4764, "++(1)", [1], call4765);
          var_s = opresult4768;
          setLineNumber(2493);    // compilenode string
          var string4769 = new GraceString("\n");
          var opresult4770 = request(var_s, "++(1)", [1], string4769);
          var_s = opresult4770;
          setLineNumber(2494);    // compilenode op
          var opresult4771 = request(var_s, "++(1)", [1], var_spc);
          var sum4773 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4774 = selfRequest(this, "value", [0]);
          var call4772 = request(call4774, "pretty(1)", [1], sum4773);
          var opresult4775 = request(opresult4771, "++(1)", [1], call4772);
          var_s = opresult4775;
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4757;
        func4757.methodName = "pretty(1)";
        func4757.paramCounts = [1];
        func4757.paramNames = ["depth"];
        func4757.definitionLine = 2489;
        func4757.definitionModule = "ast";
        var func4776 = function(argcv, var_depth) {    // method toGrace(_), line 2497
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2498);    // compilenode string
          var string4777 = new GraceString("    ");
          var prod4778 = request(string4777, "*(1)", [1], var_depth);
          var var_spc = prod4778;
          setLineNumber(2499);    // compilenode num
          var sum4780 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4781 = selfRequest(this, "dest", [0]);
          var call4779 = request(call4781, "toGrace(1)", [1], sum4780);
          var var_s = call4779;
          setLineNumber(2500);    // compilenode string
          var string4782 = new GraceString(" := ");
          var opresult4783 = request(var_s, "++(1)", [1], string4782);
          var sum4785 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4786 = selfRequest(this, "value", [0]);
          var call4784 = request(call4786, "toGrace(1)", [1], sum4785);
          var opresult4787 = request(opresult4783, "++(1)", [1], call4784);
          var_s = opresult4787;
          return var_s;
        };    // end of method toGrace(_)
        func4776.paramTypes = [];
        func4776.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4776;
        func4776.methodName = "toGrace(1)";
        func4776.paramCounts = [1];
        func4776.paramNames = ["depth"];
        func4776.definitionLine = 2497;
        func4776.definitionModule = "ast";
        var func4788 = function(argcv) {    // method shallowCopy, line 2503
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2504);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4791 = selfRequest(this, "dest", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4792 = selfRequest(this, "value", [0]);
          // call case 6: other requests
          if (var_bindNode === undefined) raiseUninitializedVariable("bindNode");
          var call4790 = request(var_bindNode, "new(2)", [2], call4791, call4792);
          var call4789 = request(call4790, "shallowCopyFieldsFrom(1)", [1], this);
          return call4789;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4788;
        func4788.methodName = "shallowCopy";
        func4788.paramCounts = [0];
        func4788.paramNames = [];
        func4788.definitionLine = 2503;
        func4788.definitionModule = "ast";
        var func4793 = function(argcv) {    // method statementName, line 2506
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2506);    // compilenode string
          var string4794 = new GraceString("assignment or assigment request");
          return string4794;
        };    // end of method statementName
        this.methods["statementName"] = func4793;
        func4793.methodName = "statementName";
        func4793.paramCounts = [0];
        func4793.paramNames = [];
        func4793.definitionLine = 2506;
        func4793.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2461;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4711_init = function() {    // init of object on line 2461
          initFun4712.call(this);
          setLineNumber(2464);    // compilenode string
          var string4795 = new GraceString("bind");
          this.data.kind = string4795;
          this.data.dest = var_dest__39__;
          this.data.value = var_val__39__;
        };
        return obj4711_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4711_init = obj4711_build.call(inheritingObject, null, var_dest__39__, var_val__39__, this, aliases, exclusions);
      return obj4711_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_)$build(_,_,_)
    this.methods["new(2)$build(3)"] = func4710;
    func4710.methodName = "new(2)$build(3)";
    func4710.paramCounts = [2];
    func4710.paramNames = ["dest'", "val'"];
    func4710.definitionLine = 2461;
    func4710.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2460;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4708_init = function() {    // init of object on line 2460
    };
    return obj4708_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4708 = emptyGraceObject("bindNode", "ast", 2460);
  var obj4708_init = obj4708_build.call(obj4708, null, this, [], []);
  obj4708_init.call(obj4708);  // end of compileobject
  var var_bindNode = obj4708;
  var reader4796_bindNode = function() {  // reader method bindNode
      if (var_bindNode === undefined) raiseUninitializedVariable("bindNode");
      return var_bindNode;
  };
  reader4796_bindNode.isDef = true;
  this.methods["bindNode"] = reader4796_bindNode;
  setLineNumber(2509);    // compilenode object
  var obj4797_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2509");
    this.outer_ast_2509 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func4798 = function(argcv, var_name__39__, var_val, var_dtype__39__, var_s) {    // method new(_,_,_)scope(_), line 2510
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 4) && (numArgs !== 4)) {
          raiseTypeArgError("new(_,_,_)scope(_)", 0, numArgs - 4);
      }
      setLineNumber(2511);    // compilenode call
      // call case 4: self request with 3 args and 0 typeArgs 
      var call4799 = selfRequest(this, "new(3)", [3], var_name__39__, var_val, var_dtype__39__);
      var var_result = call4799;
      setLineNumber(2512);    // compilenode call
      // call case 6: other requests
      var call4800 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_,_,_)scope(_)
    this.methods["new(3)scope(1)"] = func4798;
    func4798.methodName = "new(3)scope(1)";
    func4798.paramCounts = [3, 1];
    func4798.paramNames = ["name'", "val", "dtype'", "s"];
    func4798.definitionLine = 2510;
    func4798.definitionModule = "ast";
    var func4801 = function(argcv, var_name__39__, var_val, var_dtype__39__) {    // method new(_,_,_), line 2516
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("defDecNode.new(_,_,_)", "ast", 2516);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_name__39__, var_val, var_dtype__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func4801;
    func4801.methodName = "new(3)";
    func4801.paramCounts = [3];
    func4801.paramNames = ["name'", "val", "dtype'"];
    func4801.definitionLine = 2516;
    func4801.definitionModule = "ast";
    var func4802 = function(argcv, var_name__39__, var_val, var_dtype__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 2516
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj4803_build = function(ignore, var_name__39__, var_val, var_dtype__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2516");
        this.outer_ast_2516 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2517);    // reuse call
        var initFun4804 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader4805_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader4805_kind.isDef = true;
        this.methods["kind"] = reader4805_kind;
        this.data.name = undefined;
        var reader4806_name = function() {  // reader method name
            if (this.data.name === undefined) raiseUninitializedVariable("name");
            return this.data.name;
        };
        reader4806_name.isVar = true;
        this.methods["name"] = reader4806_name;
        var writer4807_name = function(argcv, n) {   // writer method name:=(_)
          this.data.name = n;
          return GraceDone;
        };
        this.methods["name:=(1)"] = writer4807_name;
        this.data.value = undefined;
        var reader4808_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader4808_value.isVar = true;
        this.methods["value"] = reader4808_value;
        var writer4809_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer4809_value;
        this.data.dtype = undefined;
        var reader4810_dtype = function() {  // reader method dtype
            if (this.data.dtype === undefined) raiseUninitializedVariable("dtype");
            return this.data.dtype;
        };
        reader4810_dtype.isVar = true;
        this.methods["dtype"] = reader4810_dtype;
        var writer4811_dtype = function(argcv, n) {   // writer method dtype:=(_)
          this.data.dtype = n;
          return GraceDone;
        };
        this.methods["dtype:=(1)"] = writer4811_dtype;
        this.data.parentKind = undefined;
        var reader4812_parentKind = function() {  // reader method parentKind
            if (this.data.parentKind === undefined) raiseUninitializedVariable("parentKind");
            return this.data.parentKind;
        };
        reader4812_parentKind.isVar = true;
        this.methods["parentKind"] = reader4812_parentKind;
        var writer4813_parentKind = function(argcv, n) {   // writer method parentKind:=(_)
          this.data.parentKind = n;
          return GraceDone;
        };
        this.methods["parentKind:=(1)"] = writer4813_parentKind;
        this.data.nameString = undefined;
        var reader4814_nameString = function() {  // reader method nameString
            if (this.data.nameString === undefined) raiseUninitializedVariable("nameString");
            return this.data.nameString;
        };
        reader4814_nameString.isDef = true;
        this.methods["nameString"] = reader4814_nameString;
        this.data.annotations = undefined;
        var reader4815_annotations = function() {  // reader method annotations
            if (this.data.annotations === undefined) raiseUninitializedVariable("annotations");
            return this.data.annotations;
        };
        reader4815_annotations.isVar = true;
        this.methods["annotations"] = reader4815_annotations;
        var writer4816_annotations = function(argcv, n) {   // writer method annotations:=(_)
          this.data.annotations = n;
          return GraceDone;
        };
        this.methods["annotations:=(1)"] = writer4816_annotations;
        this.data.startToken = undefined;
        var reader4817_startToken = function() {  // reader method startToken
            if (this.data.startToken === undefined) raiseUninitializedVariable("startToken");
            return this.data.startToken;
        };
        reader4817_startToken.isVar = true;
        this.methods["startToken"] = reader4817_startToken;
        var writer4818_startToken = function(argcv, n) {   // writer method startToken:=(_)
          this.data.startToken = n;
          return GraceDone;
        };
        this.methods["startToken:=(1)"] = writer4818_startToken;
        var func4819 = function(argcv) {    // method end, line 2527
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(2527);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4821 = selfRequest(this, "value", [0]);
          var call4820 = request(call4821, "end", [0]);
          return call4820;
        };    // end of method end
        this.methods["end"] = func4819;
        func4819.methodName = "end";
        func4819.paramCounts = [0];
        func4819.paramNames = [];
        func4819.definitionLine = 2527;
        func4819.definitionModule = "ast";
        var func4822 = function(argcv) {    // method isPublic, line 2528
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isPublic", 0, numArgs - 0);
          }
          var if4823 = GraceDone;
          setLineNumber(2530);    // compilenode string
          var string4825 = new GraceString("public");
          // call case 2: outer request
          var call4824 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string4825);
          if (Grace_isTrue(call4824)) {
            return GraceTrue;
          }
          setLineNumber(2531);    // compilenode string
          var string4827 = new GraceString("readable");
          // call case 2: outer request
          var call4826 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string4827);
          return call4826;
        };    // end of method isPublic
        this.methods["isPublic"] = func4822;
        func4822.methodName = "isPublic";
        func4822.paramCounts = [0];
        func4822.paramNames = [];
        func4822.definitionLine = 2528;
        func4822.definitionModule = "ast";
        var func4828 = function(argcv) {     // accessor method isFieldDec
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isFieldDec", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isFieldDec
        this.methods["isFieldDec"] = func4828;
        func4828.methodName = "isFieldDec";
        func4828.paramCounts = [0];
        func4828.paramNames = [];
        func4828.definitionLine = 2533;
        func4828.definitionModule = "ast";
        var func4829 = function(argcv) {     // accessor method isWritable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isWritable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isWritable
        this.methods["isWritable"] = func4829;
        func4829.methodName = "isWritable";
        func4829.paramCounts = [0];
        func4829.paramNames = [];
        func4829.definitionLine = 2534;
        func4829.definitionModule = "ast";
        var func4830 = function(argcv) {    // method isReadable, line 2535
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isReadable", 0, numArgs - 0);
          }
          setLineNumber(2535);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4831 = selfRequest(this, "isPublic", [0]);
          return call4831;
        };    // end of method isReadable
        this.methods["isReadable"] = func4830;
        func4830.methodName = "isReadable";
        func4830.paramCounts = [0];
        func4830.paramNames = [];
        func4830.definitionLine = 2535;
        func4830.definitionModule = "ast";
        var func4832 = function(argcv) {    // method isAnnotationDecl, line 2536
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isAnnotationDecl", 0, numArgs - 0);
          }
          setLineNumber(2536);    // compilenode string
          var string4834 = new GraceString("annotation");
          // call case 2: outer request
          var call4833 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string4834);
          return call4833;
        };    // end of method isAnnotationDecl
        this.methods["isAnnotationDecl"] = func4832;
        func4832.methodName = "isAnnotationDecl";
        func4832.paramCounts = [0];
        func4832.paramNames = [];
        func4832.definitionLine = 2536;
        func4832.definitionModule = "ast";
        var func4835 = function(argcv, var_aNode) {    // method usesAsType(_), line 2537
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("usesAsType(_)", 0, numArgs - 1);
          }
          setLineNumber(2538);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4836 = selfRequest(this, "dtype", [0]);
          var opresult4837 = request(var_aNode, "==(1)", [1], call4836);
          return opresult4837;
        };    // end of method usesAsType(_)
        this.methods["usesAsType(1)"] = func4835;
        func4835.methodName = "usesAsType(1)";
        func4835.paramCounts = [1];
        func4835.paramNames = ["aNode"];
        func4835.definitionLine = 2537;
        func4835.definitionModule = "ast";
        var func4838 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 2540
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(2540);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call4839 = request(var_k, "defdec", [0]);
          return call4839;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func4838;
        func4838.methodName = "declarationKindWithAncestors(1)";
        func4838.paramCounts = [1];
        func4838.paramNames = ["ac"];
        func4838.definitionLine = 2540;
        func4838.definitionModule = "ast";
        var func4840 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2542
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if4841 = GraceDone;
          setLineNumber(2543);    // compilenode call
          // call case 6: other requests
          var call4842 = request(var_visitor, "visitDefDec(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call4842)) {
            setLineNumber(2544);    // compilenode call
            // call case 6: other requests
            var call4843 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call4843;
            setLineNumber(2545);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4845 = selfRequest(this, "name", [0]);
            var call4844 = request(call4845, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            var if4846 = GraceDone;
            setLineNumber(2546);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4847 = selfRequest(this, "dtype", [0]);
            var opresult4848 = request(GraceFalse, "\u2260(1)", [1], call4847);
            if (Grace_isTrue(opresult4848)) {
              setLineNumber(2547);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call4850 = selfRequest(this, "dtype", [0]);
              var call4849 = request(call4850, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if4846 = call4849;
            }
            setLineNumber(2549);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4852 = selfRequest(this, "annotations", [0]);
            var block4853 = new GraceBlock(this, 2549, 1);
            block4853.guard = jsTrue;
            block4853.real = function block4853(var_ann) {
              setLineNumber(2550);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call4854 = request(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call4854;
            };
            let applyMeth4853 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth4853.methodName = "apply(1)";
            applyMeth4853.paramCounts = [1];
            applyMeth4853.paramNames = ["ann"];
            applyMeth4853.definitionLine = 2549;
            applyMeth4853.definitionModule = "ast";
            block4853.methods["apply(1)"] = applyMeth4853;
            let matchesMeth4853 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth4853.methodName = "matches(1)";
            matchesMeth4853.paramCounts = [1];
            matchesMeth4853.paramNames = ["ann"];
            matchesMeth4853.definitionLine = 2549;
            matchesMeth4853.definitionModule = "ast";
            block4853.methods["matches(1)"] = matchesMeth4853;
            // call case 2: outer request
            var call4851 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call4852, block4853);
            setLineNumber(2552);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4856 = selfRequest(this, "value", [0]);
            var call4855 = request(call4856, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if4841 = call4855;
          }
          return if4841;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func4840;
        func4840.methodName = "accept(1)from(1)";
        func4840.paramCounts = [1, 1];
        func4840.paramNames = ["visitor", "ac"];
        func4840.definitionLine = 2542;
        func4840.definitionModule = "ast";
        var func4857 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2555
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2556);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4858 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call4858;
          setLineNumber(2557);    // compilenode call
          // call case 6: other requests
          var call4859 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call4859;
          setLineNumber(2558);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4862 = selfRequest(this, "name", [0]);
          var call4861 = request(call4862, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4860 = request(var_n, "name:=(1)", [1], call4861);
          setLineNumber(2559);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4865 = selfRequest(this, "value", [0]);
          var call4864 = request(call4865, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call4863 = request(var_n, "value:=(1)", [1], call4864);
          setLineNumber(2560);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4868 = selfRequest(this, "dtype", [0]);
          // call case 2: outer request
          var call4867 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call4868, var_blk, var_newChain);
          // call case 6: other requests
          var call4866 = request(var_n, "dtype:=(1)", [1], call4867);
          setLineNumber(2561);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4871 = selfRequest(this, "annotations", [0]);
          // call case 2: outer request
          var call4870 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call4871, var_blk, var_newChain);
          // call case 6: other requests
          var call4869 = request(var_n, "annotations:=(1)", [1], call4870);
          setLineNumber(2562);    // compilenode call
          // call case 6: other requests
          var call4872 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call4872;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func4857;
        func4857.methodName = "map(1)ancestors(1)";
        func4857.paramCounts = [1, 1];
        func4857.paramNames = ["blk", "ac"];
        func4857.definitionLine = 2555;
        func4857.definitionModule = "ast";
        var func4873 = function(argcv, var_depth) {    // method pretty(_), line 2564
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2565);    // compilenode string
          var string4874 = new GraceString("  ");
          var sum4875 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod4876 = request(string4874, "*(1)", [1], sum4875);
          var var_spc = prod4876;
          setLineNumber(2566);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4877 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string4878 = new GraceString("\n");
          var opresult4879 = request(call4877, "++(1)", [1], string4878);
          var var_s = opresult4879;
          setLineNumber(2567);    // compilenode op
          var opresult4880 = request(var_s, "++(1)", [1], var_spc);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4882 = selfRequest(this, "name", [0]);
          var call4881 = request(call4882, "pretty(1)", [1], var_depth);
          var opresult4883 = request(opresult4880, "++(1)", [1], call4881);
          var_s = opresult4883;
          var if4884 = GraceDone;
          setLineNumber(2568);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4885 = selfRequest(this, "dtype", [0]);
          var opresult4886 = request(GraceFalse, "\u2260(1)", [1], call4885);
          if (Grace_isTrue(opresult4886)) {
            setLineNumber(2569);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4887 = new GraceString("\n");
            var opresult4888 = request(var_s, "++(1)", [1], string4887);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult4889 = request(opresult4888, "++(1)", [1], var_spc);
            var string4890 = new GraceString("Type: ");
            var opresult4891 = request(opresult4889, "++(1)", [1], string4890);
            var sum4893 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4894 = selfRequest(this, "dtype", [0]);
            var call4892 = request(call4894, "pretty(1)", [1], sum4893);
            var opresult4895 = request(opresult4891, "++(1)", [1], call4892);
            var_s = opresult4895;
            if4884 = GraceDone;
          }
          var if4896 = GraceDone;
          setLineNumber(2571);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4897 = selfRequest(this, "value", [0]);
          var opresult4898 = request(GraceFalse, "\u2260(1)", [1], call4897);
          if (Grace_isTrue(opresult4898)) {
            setLineNumber(2572);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4899 = new GraceString("\n");
            var opresult4900 = request(var_s, "++(1)", [1], string4899);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult4901 = request(opresult4900, "++(1)", [1], var_spc);
            var string4902 = new GraceString("Value: ");
            var opresult4903 = request(opresult4901, "++(1)", [1], string4902);
            var sum4905 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4906 = selfRequest(this, "value", [0]);
            var call4904 = request(call4906, "pretty(1)", [1], sum4905);
            var opresult4907 = request(opresult4903, "++(1)", [1], call4904);
            var_s = opresult4907;
            if4896 = GraceDone;
          }
          var if4908 = GraceDone;
          setLineNumber(2574);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4911 = selfRequest(this, "annotations", [0]);
          var call4910 = request(call4911, "isEmpty", [0]);
          var call4909 = request(call4910, "not", [0]);
          if (Grace_isTrue(call4909)) {
            setLineNumber(2575);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4912 = new GraceString("\n");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult4913 = request(string4912, "++(1)", [1], var_spc);
            var string4914 = new GraceString("Annotations:");
            var opresult4915 = request(opresult4913, "++(1)", [1], string4914);
            var opresult4916 = request(var_s, "++(1)", [1], opresult4915);
            var_s = opresult4916;
            setLineNumber(2576);    // compilenode block
            var block4918 = new GraceBlock(this, 2576, 1);
            block4918.guard = jsTrue;
            block4918.real = function block4918(var_ann) {
              setLineNumber(2577);    // compilenode string
              var string4919 = new GraceString("");
              if (var_s === undefined) raiseUninitializedVariable("s");
              var opresult4920 = request(string4919, "++(1)", [1], var_s);
              var string4921 = new GraceString(" ");
              var opresult4922 = request(opresult4920, "++(1)", [1], string4921);
              var sum4924 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call4923 = request(var_ann, "pretty(1)", [1], sum4924);
              var opresult4925 = request(opresult4922, "++(1)", [1], call4923);
              var string4926 = new GraceString("");
              var opresult4927 = request(opresult4925, "++(1)", [1], string4926);
              var_s = opresult4927;
              return GraceDone;
            };
            let applyMeth4918 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth4918.methodName = "apply(1)";
            applyMeth4918.paramCounts = [1];
            applyMeth4918.paramNames = ["ann"];
            applyMeth4918.definitionLine = 2576;
            applyMeth4918.definitionModule = "ast";
            block4918.methods["apply(1)"] = applyMeth4918;
            let matchesMeth4918 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth4918.methodName = "matches(1)";
            matchesMeth4918.paramCounts = [1];
            matchesMeth4918.paramNames = ["ann"];
            matchesMeth4918.definitionLine = 2576;
            matchesMeth4918.definitionModule = "ast";
            block4918.methods["matches(1)"] = matchesMeth4918;
            // call case 6: other requests
            setLineNumber(2576);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4928 = selfRequest(this, "annotations", [0]);
            var call4917 = request(call4928, "do(1)", [1], block4918);
            if4908 = call4917;
          }
          var if4929 = GraceDone;
          setLineNumber(2580);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4930 = selfRequest(this, "comments", [0]);
          var opresult4931 = request(GraceFalse, "\u2260(1)", [1], call4930);
          if (Grace_isTrue(opresult4931)) {
            setLineNumber(2581);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum4933 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4934 = selfRequest(this, "comments", [0]);
            var call4932 = request(call4934, "pretty(1)", [1], sum4933);
            var opresult4935 = request(var_s, "++(1)", [1], call4932);
            var_s = opresult4935;
            if4929 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func4873;
        func4873.methodName = "pretty(1)";
        func4873.paramCounts = [1];
        func4873.paramNames = ["depth"];
        func4873.definitionLine = 2564;
        func4873.definitionModule = "ast";
        var func4936 = function(argcv, var_depth) {    // method toGrace(_), line 2585
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2586);    // compilenode string
          var string4937 = new GraceString("    ");
          var prod4938 = request(string4937, "*(1)", [1], var_depth);
          var var_spc = prod4938;
          setLineNumber(2587);    // compilenode string
          var string4939 = new GraceString("def ");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4941 = selfRequest(this, "name", [0]);
          var call4940 = request(call4941, "toGrace(1)", [1], new GraceNum(0));
          var opresult4942 = request(string4939, "++(1)", [1], call4940);
          var string4943 = new GraceString("");
          var opresult4944 = request(opresult4942, "++(1)", [1], string4943);
          var var_s = opresult4944;
          var if4945 = GraceDone;
          setLineNumber(2588);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4946 = selfRequest(this, "dtype", [0]);
          var opresult4947 = request(GraceFalse, "\u2260(1)", [1], call4946);
          var block4948 = new GraceBlock(this, 2588, 0);
          block4948.guard = jsTrue;
          block4948.real = function block4948() {
            setLineNumber(2588);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4950 = selfRequest(this, "dtype", [0]);
            var call4949 = request(call4950, "value", [0]);
            var string4951 = new GraceString("Unknown");
            var opresult4952 = request(call4949, "\u2260(1)", [1], string4951);
            return opresult4952;
          };
          let applyMeth4948 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth4948.methodName = "apply";
          applyMeth4948.paramCounts = [0];
          applyMeth4948.paramNames = [];
          applyMeth4948.definitionLine = 2588;
          applyMeth4948.definitionModule = "ast";
          block4948.methods["apply"] = applyMeth4948;
          var opresult4953 = request(opresult4947, "&&(1)", [1], block4948);
          if (Grace_isTrue(opresult4953)) {
            setLineNumber(2589);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4954 = new GraceString(" : ");
            var opresult4955 = request(var_s, "++(1)", [1], string4954);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4957 = selfRequest(this, "dtype", [0]);
            var call4956 = request(call4957, "toGrace(1)", [1], new GraceNum(0));
            var opresult4958 = request(opresult4955, "++(1)", [1], call4956);
            var_s = opresult4958;
            if4945 = GraceDone;
          }
          var if4959 = GraceDone;
          setLineNumber(2591);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4961 = selfRequest(this, "annotations", [0]);
          var call4960 = request(call4961, "size", [0]);
          var opresult4962 = request(call4960, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult4962)) {
            setLineNumber(2592);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4963 = new GraceString(" is ");
            var opresult4964 = request(var_s, "++(1)", [1], string4963);
            var_s = opresult4964;
            setLineNumber(2593);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var block4966 = new GraceBlock(this, 2593, 2);
            block4966.guard = jsTrue;
            block4966.real = function block4966(var_a, var_b) {
              var if4967 = GraceDone;
              setLineNumber(2594);    // compilenode string
              var string4968 = new GraceString("");
              var opresult4969 = request(var_a, "\u2260(1)", [1], string4968);
              if (Grace_isTrue(opresult4969)) {
                var string4970 = new GraceString(", ");
                var opresult4971 = request(var_a, "++(1)", [1], string4970);
                if4967 = opresult4971;
              } else {
                var string4972 = new GraceString("");
                if4967 = string4972;
              }
              // call case 6: other requests
              var call4973 = request(var_b, "toGrace(1)", [1], new GraceNum(0));
              var opresult4974 = request(if4967, "++(1)", [1], call4973);
              return opresult4974;
            };
            let applyMeth4966 = function apply_2 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth4966.methodName = "apply(2)";
            applyMeth4966.paramCounts = [2];
            applyMeth4966.paramNames = ["a", "b"];
            applyMeth4966.definitionLine = 2593;
            applyMeth4966.definitionModule = "ast";
            block4966.methods["apply(2)"] = applyMeth4966;
            let matchesMeth4966 = function matches_2 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth4966.methodName = "matches(2)";
            matchesMeth4966.paramCounts = [2];
            matchesMeth4966.paramNames = ["a", "b"];
            matchesMeth4966.definitionLine = 2593;
            matchesMeth4966.definitionModule = "ast";
            block4966.methods["matches(2)"] = matchesMeth4966;
            setLineNumber(2595);    // compilenode string
            var string4975 = new GraceString("");
            // call case 6: other requests
            setLineNumber(2593);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4976 = selfRequest(this, "annotations", [0]);
            var call4965 = request(call4976, "fold(1)startingWith(1)", [1, 1], block4966, string4975);
            var opresult4977 = request(var_s, "++(1)", [1], call4965);
            var_s = opresult4977;
            if4959 = GraceDone;
          }
          var if4978 = GraceDone;
          setLineNumber(2597);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4979 = selfRequest(this, "value", [0]);
          var opresult4980 = request(GraceFalse, "\u2260(1)", [1], call4979);
          if (Grace_isTrue(opresult4980)) {
            setLineNumber(2598);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string4981 = new GraceString(" = ");
            var opresult4982 = request(var_s, "++(1)", [1], string4981);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call4984 = selfRequest(this, "value", [0]);
            var call4983 = request(call4984, "toGrace(1)", [1], var_depth);
            var opresult4985 = request(opresult4982, "++(1)", [1], call4983);
            var_s = opresult4985;
            if4978 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func4936.paramTypes = [];
        func4936.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func4936;
        func4936.methodName = "toGrace(1)";
        func4936.paramCounts = [1];
        func4936.paramNames = ["depth"];
        func4936.definitionLine = 2585;
        func4936.definitionModule = "ast";
        var func4986 = function(argcv) {    // method shallowCopy, line 2602
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2603);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4989 = selfRequest(this, "name", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4990 = selfRequest(this, "value", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call4991 = selfRequest(this, "dtype", [0]);
          // call case 6: other requests
          if (var_defDecNode === undefined) raiseUninitializedVariable("defDecNode");
          var call4988 = request(var_defDecNode, "new(3)", [3], call4989, call4990, call4991);
          var call4987 = request(call4988, "shallowCopyFieldsFrom(1)", [1], this);
          return call4987;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func4986;
        func4986.methodName = "shallowCopy";
        func4986.paramCounts = [0];
        func4986.paramNames = [];
        func4986.definitionLine = 2602;
        func4986.definitionModule = "ast";
        var func4992 = function(argcv, var_other) {    // method postCopy(_), line 2605
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2606);    // compilenode member
          // call case 6: other requests
          var call4994 = request(var_other, "startToken", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4993 = selfRequest(this, "startToken:=(1)", [1], call4994);
          setLineNumber(2607);    // compilenode member
          // call case 6: other requests
          var call4996 = request(var_other, "parentKind", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call4995 = selfRequest(this, "parentKind:=(1)", [1], call4996);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func4992;
        func4992.methodName = "postCopy(1)";
        func4992.paramCounts = [1];
        func4992.paramNames = ["other"];
        func4992.definitionLine = 2605;
        func4992.definitionModule = "ast";
        var func4997 = function(argcv) {    // method statementName, line 2610
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2610);    // compilenode string
          var string4998 = new GraceString("definition");
          return string4998;
        };    // end of method statementName
        this.methods["statementName"] = func4997;
        func4997.methodName = "statementName";
        func4997.paramCounts = [0];
        func4997.paramNames = [];
        func4997.definitionLine = 2610;
        func4997.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2516;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj4803_init = function() {    // init of object on line 2516
          initFun4804.call(this);
          setLineNumber(2518);    // compilenode string
          var string4999 = new GraceString("defdec");
          this.data.kind = string4999;
          this.data.name = var_name__39__;
          this.data.value = var_val;
          this.data.dtype = var_dtype__39__;
          setLineNumber(2522);    // compilenode string
          var string5000 = new GraceString("unset");
          this.data.parentKind = string5000;
          setLineNumber(2523);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5002 = selfRequest(this, "name", [0]);
          var call5001 = request(call5002, "nameString", [0]);
          this.data.nameString = call5001;
          setLineNumber(2524);    // compilenode array
          var array5004 = new GraceSequence([]);
          // call case 2: outer request
          var call5003 = selfRequest(var_prelude, "list(1)", [1], array5004);
          this.data.annotations = call5003;
          this.data.startToken = GraceFalse;
        };
        return obj4803_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj4803_init = obj4803_build.call(inheritingObject, null, var_name__39__, var_val, var_dtype__39__, this, aliases, exclusions);
      return obj4803_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func4802;
    func4802.methodName = "new(3)$build(3)";
    func4802.paramCounts = [3];
    func4802.paramNames = ["name'", "val", "dtype'"];
    func4802.definitionLine = 2516;
    func4802.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2509;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj4797_init = function() {    // init of object on line 2509
    };
    return obj4797_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj4797 = emptyGraceObject("defDecNode", "ast", 2509);
  var obj4797_init = obj4797_build.call(obj4797, null, this, [], []);
  obj4797_init.call(obj4797);  // end of compileobject
  var var_defDecNode = obj4797;
  var reader5005_defDecNode = function() {  // reader method defDecNode
      if (var_defDecNode === undefined) raiseUninitializedVariable("defDecNode");
      return var_defDecNode;
  };
  reader5005_defDecNode.isDef = true;
  this.methods["defDecNode"] = reader5005_defDecNode;
  setLineNumber(2613);    // compilenode object
  var obj5006_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2613");
    this.outer_ast_2613 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5007 = function(argcv, var_name__39__, var_val__39__, var_dtype__39__) {    // method new(_,_,_), line 2614
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("varDecNode.new(_,_,_)", "ast", 2614);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_name__39__, var_val__39__, var_dtype__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func5007;
    func5007.methodName = "new(3)";
    func5007.paramCounts = [3];
    func5007.paramNames = ["name'", "val'", "dtype'"];
    func5007.definitionLine = 2614;
    func5007.definitionModule = "ast";
    var func5008 = function(argcv, var_name__39__, var_val__39__, var_dtype__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 2614
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj5009_build = function(ignore, var_name__39__, var_val__39__, var_dtype__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2614");
        this.outer_ast_2614 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2615);    // reuse call
        var initFun5010 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5011_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5011_kind.isDef = true;
        this.methods["kind"] = reader5011_kind;
        this.data.name = undefined;
        var reader5012_name = function() {  // reader method name
            if (this.data.name === undefined) raiseUninitializedVariable("name");
            return this.data.name;
        };
        reader5012_name.isVar = true;
        this.methods["name"] = reader5012_name;
        var writer5013_name = function(argcv, n) {   // writer method name:=(_)
          this.data.name = n;
          return GraceDone;
        };
        this.methods["name:=(1)"] = writer5013_name;
        this.data.value = undefined;
        var reader5014_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader5014_value.isVar = true;
        this.methods["value"] = reader5014_value;
        var writer5015_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer5015_value;
        this.data.dtype = undefined;
        var reader5016_dtype = function() {  // reader method dtype
            if (this.data.dtype === undefined) raiseUninitializedVariable("dtype");
            return this.data.dtype;
        };
        reader5016_dtype.isVar = true;
        this.methods["dtype"] = reader5016_dtype;
        var writer5017_dtype = function(argcv, n) {   // writer method dtype:=(_)
          this.data.dtype = n;
          return GraceDone;
        };
        this.methods["dtype:=(1)"] = writer5017_dtype;
        this.data.parentKind = undefined;
        var reader5018_parentKind = function() {  // reader method parentKind
            if (this.data.parentKind === undefined) raiseUninitializedVariable("parentKind");
            return this.data.parentKind;
        };
        reader5018_parentKind.isVar = true;
        this.methods["parentKind"] = reader5018_parentKind;
        var writer5019_parentKind = function(argcv, n) {   // writer method parentKind:=(_)
          this.data.parentKind = n;
          return GraceDone;
        };
        this.methods["parentKind:=(1)"] = writer5019_parentKind;
        this.data.nameString = undefined;
        var reader5020_nameString = function() {  // reader method nameString
            if (this.data.nameString === undefined) raiseUninitializedVariable("nameString");
            return this.data.nameString;
        };
        reader5020_nameString.isDef = true;
        this.methods["nameString"] = reader5020_nameString;
        this.data.annotations = undefined;
        var reader5021_annotations = function() {  // reader method annotations
            if (this.data.annotations === undefined) raiseUninitializedVariable("annotations");
            return this.data.annotations;
        };
        reader5021_annotations.isVar = true;
        this.methods["annotations"] = reader5021_annotations;
        var writer5022_annotations = function(argcv, n) {   // writer method annotations:=(_)
          this.data.annotations = n;
          return GraceDone;
        };
        this.methods["annotations:=(1)"] = writer5022_annotations;
        var func5023 = function(argcv) {    // method end, line 2624
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if5024 = GraceDone;
          setLineNumber(2625);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5025 = selfRequest(this, "value", [0]);
          var opresult5026 = request(GraceFalse, "\u2260(1)", [1], call5025);
          if (Grace_isTrue(opresult5026)) {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5028 = selfRequest(this, "value", [0]);
            var call5027 = request(call5028, "end", [0]);
            return call5027;
          }
          var if5029 = GraceDone;
          setLineNumber(2626);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5032 = selfRequest(this, "annotations", [0]);
          var call5031 = request(call5032, "isEmpty", [0]);
          var call5030 = request(call5031, "not", [0]);
          if (Grace_isTrue(call5030)) {
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5035 = selfRequest(this, "annotations", [0]);
            var call5034 = request(call5035, "last", [0]);
            var call5033 = request(call5034, "end", [0]);
            return call5033;
          }
          var if5036 = GraceDone;
          setLineNumber(2627);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5037 = selfRequest(this, "dtype", [0]);
          var opresult5038 = request(GraceFalse, "\u2260(1)", [1], call5037);
          if (Grace_isTrue(opresult5038)) {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5040 = selfRequest(this, "dtype", [0]);
            var call5039 = request(call5040, "end", [0]);
            return call5039;
          }
          setLineNumber(2628);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5042 = selfRequest(this, "name", [0]);
          var call5041 = request(call5042, "end", [0]);
          return call5041;
        };    // end of method end
        this.methods["end"] = func5023;
        func5023.methodName = "end";
        func5023.paramCounts = [0];
        func5023.paramNames = [];
        func5023.definitionLine = 2624;
        func5023.definitionModule = "ast";
        var func5043 = function(argcv) {    // method isPublic, line 2630
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isPublic", 0, numArgs - 0);
          }
          setLineNumber(2632);    // compilenode string
          var string5045 = new GraceString("public");
          // call case 2: outer request
          var call5044 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5045);
          return call5044;
        };    // end of method isPublic
        this.methods["isPublic"] = func5043;
        func5043.methodName = "isPublic";
        func5043.paramCounts = [0];
        func5043.paramNames = [];
        func5043.definitionLine = 2630;
        func5043.definitionModule = "ast";
        var func5046 = function(argcv) {    // method isWritable, line 2634
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isWritable", 0, numArgs - 0);
          }
          var if5047 = GraceDone;
          setLineNumber(2635);    // compilenode string
          var string5049 = new GraceString("public");
          // call case 2: outer request
          var call5048 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5049);
          if (Grace_isTrue(call5048)) {
            return GraceTrue;
          }
          var if5050 = GraceDone;
          setLineNumber(2636);    // compilenode string
          var string5052 = new GraceString("writable");
          // call case 2: outer request
          var call5051 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5052);
          if (Grace_isTrue(call5051)) {
            return GraceTrue;
          }
          return GraceFalse;
        };    // end of method isWritable
        this.methods["isWritable"] = func5046;
        func5046.methodName = "isWritable";
        func5046.paramCounts = [0];
        func5046.paramNames = [];
        func5046.definitionLine = 2634;
        func5046.definitionModule = "ast";
        var func5053 = function(argcv) {    // method isReadable, line 2639
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isReadable", 0, numArgs - 0);
          }
          var if5054 = GraceDone;
          setLineNumber(2640);    // compilenode string
          var string5056 = new GraceString("public");
          // call case 2: outer request
          var call5055 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5056);
          if (Grace_isTrue(call5055)) {
            return GraceTrue;
          }
          var if5057 = GraceDone;
          setLineNumber(2641);    // compilenode string
          var string5059 = new GraceString("readable");
          // call case 2: outer request
          var call5058 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5059);
          if (Grace_isTrue(call5058)) {
            return GraceTrue;
          }
          return GraceFalse;
        };    // end of method isReadable
        this.methods["isReadable"] = func5053;
        func5053.methodName = "isReadable";
        func5053.paramCounts = [0];
        func5053.paramNames = [];
        func5053.definitionLine = 2639;
        func5053.definitionModule = "ast";
        var func5060 = function(argcv) {     // accessor method isFieldDec
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isFieldDec", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isFieldDec
        this.methods["isFieldDec"] = func5060;
        func5060.methodName = "isFieldDec";
        func5060.paramCounts = [0];
        func5060.paramNames = [];
        func5060.definitionLine = 2644;
        func5060.definitionModule = "ast";
        var func5061 = function(argcv, var_aNode) {    // method usesAsType(_), line 2646
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("usesAsType(_)", 0, numArgs - 1);
          }
          setLineNumber(2647);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5062 = selfRequest(this, "dtype", [0]);
          var opresult5063 = request(var_aNode, "==(1)", [1], call5062);
          return opresult5063;
        };    // end of method usesAsType(_)
        this.methods["usesAsType(1)"] = func5061;
        func5061.methodName = "usesAsType(1)";
        func5061.paramCounts = [1];
        func5061.paramNames = ["aNode"];
        func5061.definitionLine = 2646;
        func5061.definitionModule = "ast";
        var func5064 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 2650
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(2650);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call5065 = request(var_k, "vardec", [0]);
          return call5065;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func5064;
        func5064.methodName = "declarationKindWithAncestors(1)";
        func5064.paramCounts = [1];
        func5064.paramNames = ["ac"];
        func5064.definitionLine = 2650;
        func5064.definitionModule = "ast";
        var func5066 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2652
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if5067 = GraceDone;
          setLineNumber(2653);    // compilenode call
          // call case 6: other requests
          var call5068 = request(var_visitor, "visitVarDec(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call5068)) {
            setLineNumber(2654);    // compilenode call
            // call case 6: other requests
            var call5069 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call5069;
            setLineNumber(2655);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5071 = selfRequest(this, "name", [0]);
            var call5070 = request(call5071, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            var if5072 = GraceDone;
            setLineNumber(2656);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5073 = selfRequest(this, "dtype", [0]);
            var opresult5074 = request(GraceFalse, "\u2260(1)", [1], call5073);
            if (Grace_isTrue(opresult5074)) {
              setLineNumber(2657);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call5076 = selfRequest(this, "dtype", [0]);
              var call5075 = request(call5076, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if5072 = call5075;
            }
            setLineNumber(2659);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5078 = selfRequest(this, "annotations", [0]);
            var block5079 = new GraceBlock(this, 2659, 1);
            block5079.guard = jsTrue;
            block5079.real = function block5079(var_ann) {
              setLineNumber(2660);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call5080 = request(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call5080;
            };
            let applyMeth5079 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5079.methodName = "apply(1)";
            applyMeth5079.paramCounts = [1];
            applyMeth5079.paramNames = ["ann"];
            applyMeth5079.definitionLine = 2659;
            applyMeth5079.definitionModule = "ast";
            block5079.methods["apply(1)"] = applyMeth5079;
            let matchesMeth5079 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5079.methodName = "matches(1)";
            matchesMeth5079.paramCounts = [1];
            matchesMeth5079.paramNames = ["ann"];
            matchesMeth5079.definitionLine = 2659;
            matchesMeth5079.definitionModule = "ast";
            block5079.methods["matches(1)"] = matchesMeth5079;
            // call case 2: outer request
            var call5077 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call5078, block5079);
            var if5081 = GraceDone;
            setLineNumber(2662);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5082 = selfRequest(this, "value", [0]);
            var opresult5083 = request(GraceFalse, "\u2260(1)", [1], call5082);
            if (Grace_isTrue(opresult5083)) {
              setLineNumber(2663);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call5085 = selfRequest(this, "value", [0]);
              var call5084 = request(call5085, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if5081 = call5084;
            }
            if5067 = if5081;
          }
          return if5067;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func5066;
        func5066.methodName = "accept(1)from(1)";
        func5066.paramCounts = [1, 1];
        func5066.paramNames = ["visitor", "ac"];
        func5066.definitionLine = 2652;
        func5066.definitionModule = "ast";
        var func5086 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2667
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2668);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5087 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call5087;
          setLineNumber(2669);    // compilenode call
          // call case 6: other requests
          var call5088 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call5088;
          setLineNumber(2670);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5091 = selfRequest(this, "name", [0]);
          var call5090 = request(call5091, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call5089 = request(var_n, "name:=(1)", [1], call5090);
          setLineNumber(2671);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5094 = selfRequest(this, "value", [0]);
          // call case 2: outer request
          var call5093 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call5094, var_blk, var_newChain);
          // call case 6: other requests
          var call5092 = request(var_n, "value:=(1)", [1], call5093);
          setLineNumber(2672);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5097 = selfRequest(this, "dtype", [0]);
          // call case 2: outer request
          var call5096 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call5097, var_blk, var_newChain);
          // call case 6: other requests
          var call5095 = request(var_n, "dtype:=(1)", [1], call5096);
          setLineNumber(2673);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5100 = selfRequest(this, "annotations", [0]);
          // call case 2: outer request
          var call5099 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call5100, var_blk, var_newChain);
          // call case 6: other requests
          var call5098 = request(var_n, "annotations:=(1)", [1], call5099);
          setLineNumber(2674);    // compilenode call
          // call case 6: other requests
          var call5101 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call5101;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func5086;
        func5086.methodName = "map(1)ancestors(1)";
        func5086.paramCounts = [1, 1];
        func5086.paramNames = ["blk", "ac"];
        func5086.definitionLine = 2667;
        func5086.definitionModule = "ast";
        var func5102 = function(argcv, var_depth) {    // method pretty(_), line 2676
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2677);    // compilenode string
          var string5103 = new GraceString("  ");
          var sum5104 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod5105 = request(string5103, "*(1)", [1], sum5104);
          var var_spc = prod5105;
          setLineNumber(2678);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5106 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string5107 = new GraceString("\n");
          var opresult5108 = request(call5106, "++(1)", [1], string5107);
          var var_s = opresult5108;
          setLineNumber(2679);    // compilenode op
          var opresult5109 = request(var_s, "++(1)", [1], var_spc);
          var sum5111 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5112 = selfRequest(this, "name", [0]);
          var call5110 = request(call5112, "pretty(1)", [1], sum5111);
          var opresult5113 = request(opresult5109, "++(1)", [1], call5110);
          var_s = opresult5113;
          var if5114 = GraceDone;
          setLineNumber(2680);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5115 = selfRequest(this, "dtype", [0]);
          var opresult5116 = request(GraceFalse, "\u2260(1)", [1], call5115);
          if (Grace_isTrue(opresult5116)) {
            setLineNumber(2681);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5117 = new GraceString("\n");
            var opresult5118 = request(var_s, "++(1)", [1], string5117);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5119 = request(opresult5118, "++(1)", [1], var_spc);
            var string5120 = new GraceString("Type: ");
            var opresult5121 = request(opresult5119, "++(1)", [1], string5120);
            var_s = opresult5121;
            setLineNumber(2682);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum5123 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5124 = selfRequest(this, "dtype", [0]);
            var call5122 = request(call5124, "pretty(1)", [1], sum5123);
            var opresult5125 = request(var_s, "++(1)", [1], call5122);
            var_s = opresult5125;
            if5114 = GraceDone;
          }
          var if5126 = GraceDone;
          setLineNumber(2684);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5127 = selfRequest(this, "value", [0]);
          var opresult5128 = request(GraceFalse, "\u2260(1)", [1], call5127);
          if (Grace_isTrue(opresult5128)) {
            setLineNumber(2685);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5129 = new GraceString("\n");
            var opresult5130 = request(var_s, "++(1)", [1], string5129);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5131 = request(opresult5130, "++(1)", [1], var_spc);
            var string5132 = new GraceString("Value: ");
            var opresult5133 = request(opresult5131, "++(1)", [1], string5132);
            var_s = opresult5133;
            setLineNumber(2686);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum5135 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5136 = selfRequest(this, "value", [0]);
            var call5134 = request(call5136, "pretty(1)", [1], sum5135);
            var opresult5137 = request(var_s, "++(1)", [1], call5134);
            var_s = opresult5137;
            if5126 = GraceDone;
          }
          var if5138 = GraceDone;
          setLineNumber(2688);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5139 = selfRequest(this, "comments", [0]);
          var opresult5140 = request(GraceFalse, "\u2260(1)", [1], call5139);
          if (Grace_isTrue(opresult5140)) {
            setLineNumber(2689);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum5142 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5143 = selfRequest(this, "comments", [0]);
            var call5141 = request(call5143, "pretty(1)", [1], sum5142);
            var opresult5144 = request(var_s, "++(1)", [1], call5141);
            var_s = opresult5144;
            if5138 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func5102;
        func5102.methodName = "pretty(1)";
        func5102.paramCounts = [1];
        func5102.paramNames = ["depth"];
        func5102.definitionLine = 2676;
        func5102.definitionModule = "ast";
        var func5145 = function(argcv, var_depth) {    // method toGrace(_), line 2693
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2694);    // compilenode string
          var string5146 = new GraceString("    ");
          var prod5147 = request(string5146, "*(1)", [1], var_depth);
          var var_spc = prod5147;
          setLineNumber(2695);    // compilenode string
          var string5148 = new GraceString("var ");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5150 = selfRequest(this, "name", [0]);
          var call5149 = request(call5150, "toGrace(1)", [1], new GraceNum(0));
          var opresult5151 = request(string5148, "++(1)", [1], call5149);
          var string5152 = new GraceString("");
          var opresult5153 = request(opresult5151, "++(1)", [1], string5152);
          var var_s = opresult5153;
          var if5154 = GraceDone;
          setLineNumber(2696);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5155 = selfRequest(this, "dtype", [0]);
          var opresult5156 = request(GraceFalse, "\u2260(1)", [1], call5155);
          var block5157 = new GraceBlock(this, 2696, 0);
          block5157.guard = jsTrue;
          block5157.real = function block5157() {
            setLineNumber(2697);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5159 = selfRequest(this, "dtype", [0]);
            var call5158 = request(call5159, "value", [0]);
            var string5160 = new GraceString("Unknown");
            var opresult5161 = request(call5158, "\u2260(1)", [1], string5160);
            return opresult5161;
          };
          let applyMeth5157 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth5157.methodName = "apply";
          applyMeth5157.paramCounts = [0];
          applyMeth5157.paramNames = [];
          applyMeth5157.definitionLine = 2696;
          applyMeth5157.definitionModule = "ast";
          block5157.methods["apply"] = applyMeth5157;
          var opresult5162 = request(opresult5156, "&&(1)", [1], block5157);
          if (Grace_isTrue(opresult5162)) {
            setLineNumber(2699);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5163 = new GraceString(" : ");
            var opresult5164 = request(var_s, "++(1)", [1], string5163);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5166 = selfRequest(this, "dtype", [0]);
            var call5165 = request(call5166, "toGrace(1)", [1], new GraceNum(0));
            var opresult5167 = request(opresult5164, "++(1)", [1], call5165);
            var_s = opresult5167;
            if5154 = GraceDone;
          }
          var if5168 = GraceDone;
          setLineNumber(2701);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5170 = selfRequest(this, "annotations", [0]);
          var call5169 = request(call5170, "size", [0]);
          var opresult5171 = request(call5169, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult5171)) {
            setLineNumber(2702);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5172 = new GraceString(" is ");
            var opresult5173 = request(var_s, "++(1)", [1], string5172);
            var_s = opresult5173;
            setLineNumber(2703);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var block5175 = new GraceBlock(this, 2703, 2);
            block5175.guard = jsTrue;
            block5175.real = function block5175(var_a, var_b) {
              var if5176 = GraceDone;
              setLineNumber(2704);    // compilenode string
              var string5177 = new GraceString("");
              var opresult5178 = request(var_a, "\u2260(1)", [1], string5177);
              if (Grace_isTrue(opresult5178)) {
                var string5179 = new GraceString(", ");
                var opresult5180 = request(var_a, "++(1)", [1], string5179);
                if5176 = opresult5180;
              } else {
                var string5181 = new GraceString("");
                if5176 = string5181;
              }
              // call case 6: other requests
              var call5182 = request(var_b, "toGrace(1)", [1], new GraceNum(0));
              var opresult5183 = request(if5176, "++(1)", [1], call5182);
              return opresult5183;
            };
            let applyMeth5175 = function apply_2 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5175.methodName = "apply(2)";
            applyMeth5175.paramCounts = [2];
            applyMeth5175.paramNames = ["a", "b"];
            applyMeth5175.definitionLine = 2703;
            applyMeth5175.definitionModule = "ast";
            block5175.methods["apply(2)"] = applyMeth5175;
            let matchesMeth5175 = function matches_2 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5175.methodName = "matches(2)";
            matchesMeth5175.paramCounts = [2];
            matchesMeth5175.paramNames = ["a", "b"];
            matchesMeth5175.definitionLine = 2703;
            matchesMeth5175.definitionModule = "ast";
            block5175.methods["matches(2)"] = matchesMeth5175;
            setLineNumber(2705);    // compilenode string
            var string5184 = new GraceString("");
            // call case 6: other requests
            setLineNumber(2703);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5185 = selfRequest(this, "annotations", [0]);
            var call5174 = request(call5185, "fold(1)startingWith(1)", [1, 1], block5175, string5184);
            var opresult5186 = request(var_s, "++(1)", [1], call5174);
            var_s = opresult5186;
            if5168 = GraceDone;
          }
          var if5187 = GraceDone;
          setLineNumber(2707);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5188 = selfRequest(this, "value", [0]);
          var opresult5189 = request(GraceFalse, "\u2260(1)", [1], call5188);
          if (Grace_isTrue(opresult5189)) {
            setLineNumber(2708);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5190 = new GraceString(" := ");
            var opresult5191 = request(var_s, "++(1)", [1], string5190);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5193 = selfRequest(this, "value", [0]);
            var call5192 = request(call5193, "toGrace(1)", [1], var_depth);
            var opresult5194 = request(opresult5191, "++(1)", [1], call5192);
            var_s = opresult5194;
            if5187 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        func5145.paramTypes = [];
        func5145.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func5145;
        func5145.methodName = "toGrace(1)";
        func5145.paramCounts = [1];
        func5145.paramNames = ["depth"];
        func5145.definitionLine = 2693;
        func5145.definitionModule = "ast";
        var func5195 = function(argcv) {    // method shallowCopy, line 2712
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2713);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5198 = selfRequest(this, "name", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5199 = selfRequest(this, "value", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5200 = selfRequest(this, "dtype", [0]);
          // call case 6: other requests
          if (var_varDecNode === undefined) raiseUninitializedVariable("varDecNode");
          var call5197 = request(var_varDecNode, "new(3)", [3], call5198, call5199, call5200);
          var call5196 = request(call5197, "shallowCopyFieldsFrom(1)", [1], this);
          return call5196;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func5195;
        func5195.methodName = "shallowCopy";
        func5195.paramCounts = [0];
        func5195.paramNames = [];
        func5195.definitionLine = 2712;
        func5195.definitionModule = "ast";
        var func5201 = function(argcv, var_other) {    // method postCopy(_), line 2715
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2716);    // compilenode member
          // call case 6: other requests
          var call5203 = request(var_other, "parentKind", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5202 = selfRequest(this, "parentKind:=(1)", [1], call5203);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func5201;
        func5201.methodName = "postCopy(1)";
        func5201.paramCounts = [1];
        func5201.paramNames = ["other"];
        func5201.definitionLine = 2715;
        func5201.definitionModule = "ast";
        var func5204 = function(argcv) {    // method statementName, line 2719
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(2719);    // compilenode string
          var string5205 = new GraceString("variable declaration");
          return string5205;
        };    // end of method statementName
        this.methods["statementName"] = func5204;
        func5204.methodName = "statementName";
        func5204.paramCounts = [0];
        func5204.paramNames = [];
        func5204.definitionLine = 2719;
        func5204.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2614;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5009_init = function() {    // init of object on line 2614
          initFun5010.call(this);
          setLineNumber(2616);    // compilenode string
          var string5206 = new GraceString("vardec");
          this.data.kind = string5206;
          this.data.name = var_name__39__;
          this.data.value = var_val__39__;
          this.data.dtype = var_dtype__39__;
          setLineNumber(2620);    // compilenode string
          var string5207 = new GraceString("unset");
          this.data.parentKind = string5207;
          setLineNumber(2621);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5209 = selfRequest(this, "name", [0]);
          var call5208 = request(call5209, "value", [0]);
          this.data.nameString = call5208;
          setLineNumber(2622);    // compilenode array
          var array5211 = new GraceSequence([]);
          // call case 2: outer request
          var call5210 = selfRequest(var_prelude, "list(1)", [1], array5211);
          this.data.annotations = call5210;
        };
        return obj5009_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5009_init = obj5009_build.call(inheritingObject, null, var_name__39__, var_val__39__, var_dtype__39__, this, aliases, exclusions);
      return obj5009_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func5008;
    func5008.methodName = "new(3)$build(3)";
    func5008.paramCounts = [3];
    func5008.paramNames = ["name'", "val'", "dtype'"];
    func5008.definitionLine = 2614;
    func5008.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2613;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5006_init = function() {    // init of object on line 2613
    };
    return obj5006_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5006 = emptyGraceObject("varDecNode", "ast", 2613);
  var obj5006_init = obj5006_build.call(obj5006, null, this, [], []);
  obj5006_init.call(obj5006);  // end of compileobject
  var var_varDecNode = obj5006;
  var reader5212_varDecNode = function() {  // reader method varDecNode
      if (var_varDecNode === undefined) raiseUninitializedVariable("varDecNode");
      return var_varDecNode;
  };
  reader5212_varDecNode.isDef = true;
  this.methods["varDecNode"] = reader5212_varDecNode;
  setLineNumber(2723);    // compilenode object
  var obj5213_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2723");
    this.outer_ast_2723 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5214 = function(argcv, var_path__39__, var_name__39__, var_dtype__39__) {    // method new(_,_,_), line 2724
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var ouc = emptyGraceObject("importNode.new(_,_,_)", "ast", 2724);
      var ouc_init = this.methods["new(3)$build(3)"].call(this, null, var_path__39__, var_name__39__, var_dtype__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_,_,_)
    this.methods["new(3)"] = func5214;
    func5214.methodName = "new(3)";
    func5214.paramCounts = [3];
    func5214.paramNames = ["path'", "name'", "dtype'"];
    func5214.definitionLine = 2724;
    func5214.definitionModule = "ast";
    var func5215 = function(argcv, var_path__39__, var_name__39__, var_dtype__39__, inheritingObject, aliases, exclusions) {    // method new(_,_,_)$build(_,_,_), line 2724
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("new(_,_,_)", 0, numArgs - 3);
      }
      var obj5216_build = function(ignore, var_path__39__, var_name__39__, var_dtype__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2724");
        this.outer_ast_2724 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2725);    // reuse call
        var initFun5217 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5218_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5218_kind.isDef = true;
        this.methods["kind"] = reader5218_kind;
        this.data.value = undefined;
        var reader5219_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader5219_value.isVar = true;
        this.methods["value"] = reader5219_value;
        var writer5220_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer5220_value;
        this.data.path = undefined;
        var reader5221_path = function() {  // reader method path
            if (this.data.path === undefined) raiseUninitializedVariable("path");
            return this.data.path;
        };
        reader5221_path.isVar = true;
        this.methods["path"] = reader5221_path;
        var writer5222_path = function(argcv, n) {   // writer method path:=(_)
          this.data.path = n;
          return GraceDone;
        };
        this.methods["path:=(1)"] = writer5222_path;
        this.data.annotations = undefined;
        var reader5223_annotations = function() {  // reader method annotations
            if (this.data.annotations === undefined) raiseUninitializedVariable("annotations");
            return this.data.annotations;
        };
        reader5223_annotations.isVar = true;
        this.methods["annotations"] = reader5223_annotations;
        var writer5224_annotations = function(argcv, n) {   // writer method annotations:=(_)
          this.data.annotations = n;
          return GraceDone;
        };
        this.methods["annotations:=(1)"] = writer5224_annotations;
        this.data.dtype = undefined;
        var reader5225_dtype = function() {  // reader method dtype
            if (this.data.dtype === undefined) raiseUninitializedVariable("dtype");
            return this.data.dtype;
        };
        reader5225_dtype.isVar = true;
        this.methods["dtype"] = reader5225_dtype;
        var writer5226_dtype = function(argcv, n) {   // writer method dtype:=(_)
          this.data.dtype = n;
          return GraceDone;
        };
        this.methods["dtype:=(1)"] = writer5226_dtype;
        var func5227 = function(argcv) {    // method end, line 2731
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(2731);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5229 = selfRequest(this, "value", [0]);
          var call5228 = request(call5229, "end", [0]);
          return call5228;
        };    // end of method end
        this.methods["end"] = func5227;
        func5227.methodName = "end";
        func5227.paramCounts = [0];
        func5227.paramNames = [];
        func5227.definitionLine = 2731;
        func5227.definitionModule = "ast";
        var func5230 = function(argcv) {     // accessor method isImport
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isImport", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isImport
        this.methods["isImport"] = func5230;
        func5230.methodName = "isImport";
        func5230.paramCounts = [0];
        func5230.paramNames = [];
        func5230.definitionLine = 2732;
        func5230.definitionModule = "ast";
        var func5231 = function(argcv) {     // accessor method isExternal
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExternal", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isExternal
        this.methods["isExternal"] = func5231;
        func5231.methodName = "isExternal";
        func5231.paramCounts = [0];
        func5231.paramNames = [];
        func5231.definitionLine = 2733;
        func5231.definitionModule = "ast";
        var func5232 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func5232;
        func5232.methodName = "isExecutable";
        func5232.paramCounts = [0];
        func5232.paramNames = [];
        func5232.definitionLine = 2734;
        func5232.definitionModule = "ast";
        var func5233 = function(argcv) {    // method name, line 2735
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("name", 0, numArgs - 0);
          }
          setLineNumber(2735);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5234 = selfRequest(this, "value", [0]);
          return call5234;
        };    // end of method name
        this.methods["name"] = func5233;
        func5233.methodName = "name";
        func5233.paramCounts = [0];
        func5233.paramNames = [];
        func5233.definitionLine = 2735;
        func5233.definitionModule = "ast";
        var func5235 = function(argcv) {    // method nameString, line 2736
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(2736);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5237 = selfRequest(this, "value", [0]);
          var call5236 = request(call5237, "nameString", [0]);
          return call5236;
        };    // end of method nameString
        this.methods["nameString"] = func5235;
        func5235.methodName = "nameString";
        func5235.paramCounts = [0];
        func5235.paramNames = [];
        func5235.definitionLine = 2736;
        func5235.definitionModule = "ast";
        var func5238 = function(argcv) {    // method isPublic, line 2737
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isPublic", 0, numArgs - 0);
          }
          var if5239 = GraceDone;
          setLineNumber(2739);    // compilenode string
          var string5241 = new GraceString("public");
          // call case 2: outer request
          var call5240 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5241);
          if (Grace_isTrue(call5240)) {
            return GraceTrue;
          }
          setLineNumber(2740);    // compilenode string
          var string5243 = new GraceString("readable");
          // call case 2: outer request
          var call5242 = selfRequest(importedModules["ast"], "findAnnotation(2)", [2], this, string5243);
          return call5242;
        };    // end of method isPublic
        this.methods["isPublic"] = func5238;
        func5238.methodName = "isPublic";
        func5238.paramCounts = [0];
        func5238.paramNames = [];
        func5238.definitionLine = 2737;
        func5238.definitionModule = "ast";
        var func5244 = function(argcv) {    // method moduleName, line 2742
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("moduleName", 0, numArgs - 0);
          }
          setLineNumber(2743);    // compilenode string
          var string5245 = new GraceString("");
          var var_bnm = string5245;
          setLineNumber(2744);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5247 = selfRequest(this, "path", [0]);
          var block5248 = new GraceBlock(this, 2744, 1);
          block5248.guard = jsTrue;
          block5248.real = function block5248(var_c) {
            var if5249 = GraceDone;
            setLineNumber(2745);    // compilenode string
            var string5250 = new GraceString("/");
            var opresult5251 = request(var_c, "==(1)", [1], string5250);
            if (Grace_isTrue(opresult5251)) {
              setLineNumber(2746);    // compilenode string
              var string5252 = new GraceString("");
              var_bnm = string5252;
              if5249 = GraceDone;
            } else {
              setLineNumber(2748);    // compilenode op
              if (var_bnm === undefined) raiseUninitializedVariable("bnm");
              var opresult5253 = request(var_bnm, "++(1)", [1], var_c);
              var_bnm = opresult5253;
              if5249 = GraceDone;
            }
            return if5249;
          };
          let applyMeth5248 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5248.methodName = "apply(1)";
          applyMeth5248.paramCounts = [1];
          applyMeth5248.paramNames = ["c"];
          applyMeth5248.definitionLine = 2744;
          applyMeth5248.definitionModule = "ast";
          block5248.methods["apply(1)"] = applyMeth5248;
          let matchesMeth5248 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5248.methodName = "matches(1)";
          matchesMeth5248.paramCounts = [1];
          matchesMeth5248.paramNames = ["c"];
          matchesMeth5248.definitionLine = 2744;
          matchesMeth5248.definitionModule = "ast";
          block5248.methods["matches(1)"] = matchesMeth5248;
          // call case 2: outer request
          var call5246 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call5247, block5248);
          return var_bnm;
        };    // end of method moduleName
        this.methods["moduleName"] = func5244;
        func5244.methodName = "moduleName";
        func5244.paramCounts = [0];
        func5244.paramNames = [];
        func5244.definitionLine = 2742;
        func5244.definitionModule = "ast";
        var func5254 = function(argcv) {     // accessor method isWritable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isWritable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isWritable
        this.methods["isWritable"] = func5254;
        func5254.methodName = "isWritable";
        func5254.paramCounts = [0];
        func5254.paramNames = [];
        func5254.definitionLine = 2753;
        func5254.definitionModule = "ast";
        var func5255 = function(argcv) {    // method isReadable, line 2754
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isReadable", 0, numArgs - 0);
          }
          setLineNumber(2754);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5256 = selfRequest(this, "isPublic", [0]);
          return call5256;
        };    // end of method isReadable
        this.methods["isReadable"] = func5255;
        func5255.methodName = "isReadable";
        func5255.paramCounts = [0];
        func5255.paramNames = [];
        func5255.definitionLine = 2754;
        func5255.definitionModule = "ast";
        var func5257 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 2755
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(2755);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call5258 = request(var_k, "defdec", [0]);
          return call5258;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func5257;
        func5257.methodName = "declarationKindWithAncestors(1)";
        func5257.paramCounts = [1];
        func5257.paramNames = ["ac"];
        func5257.definitionLine = 2755;
        func5257.definitionModule = "ast";
        var func5259 = function(argcv, var_aNode) {    // method usesAsType(_), line 2756
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("usesAsType(_)", 0, numArgs - 1);
          }
          setLineNumber(2757);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5260 = selfRequest(this, "dtype", [0]);
          var opresult5261 = request(var_aNode, "==(1)", [1], call5260);
          return opresult5261;
        };    // end of method usesAsType(_)
        this.methods["usesAsType(1)"] = func5259;
        func5259.methodName = "usesAsType(1)";
        func5259.paramCounts = [1];
        func5259.paramNames = ["aNode"];
        func5259.definitionLine = 2756;
        func5259.definitionModule = "ast";
        var func5262 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2759
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if5263 = GraceDone;
          setLineNumber(2760);    // compilenode call
          // call case 6: other requests
          var call5264 = request(var_visitor, "visitImport(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call5264)) {
            setLineNumber(2761);    // compilenode call
            // call case 6: other requests
            var call5265 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call5265;
            setLineNumber(2762);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5267 = selfRequest(this, "annotations", [0]);
            var block5268 = new GraceBlock(this, 2762, 1);
            block5268.guard = jsTrue;
            block5268.real = function block5268(var_ann) {
              setLineNumber(2763);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call5269 = request(var_ann, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call5269;
            };
            let applyMeth5268 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5268.methodName = "apply(1)";
            applyMeth5268.paramCounts = [1];
            applyMeth5268.paramNames = ["ann"];
            applyMeth5268.definitionLine = 2762;
            applyMeth5268.definitionModule = "ast";
            block5268.methods["apply(1)"] = applyMeth5268;
            let matchesMeth5268 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5268.methodName = "matches(1)";
            matchesMeth5268.paramCounts = [1];
            matchesMeth5268.paramNames = ["ann"];
            matchesMeth5268.definitionLine = 2762;
            matchesMeth5268.definitionModule = "ast";
            block5268.methods["matches(1)"] = matchesMeth5268;
            // call case 2: outer request
            var call5266 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call5267, block5268);
            setLineNumber(2765);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5271 = selfRequest(this, "value", [0]);
            var call5270 = request(call5271, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            var if5272 = GraceDone;
            setLineNumber(2766);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5273 = selfRequest(this, "dtype", [0]);
            var opresult5274 = request(GraceFalse, "\u2260(1)", [1], call5273);
            if (Grace_isTrue(opresult5274)) {
              setLineNumber(2767);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call5276 = selfRequest(this, "dtype", [0]);
              var call5275 = request(call5276, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if5272 = call5275;
            }
            if5263 = if5272;
          }
          return if5263;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func5262;
        func5262.methodName = "accept(1)from(1)";
        func5262.paramCounts = [1, 1];
        func5262.paramNames = ["visitor", "ac"];
        func5262.definitionLine = 2759;
        func5262.definitionModule = "ast";
        var func5277 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2771
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2772);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5278 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call5278;
          setLineNumber(2773);    // compilenode call
          // call case 6: other requests
          var call5279 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call5279;
          setLineNumber(2774);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5282 = selfRequest(this, "value", [0]);
          var call5281 = request(call5282, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call5280 = request(var_n, "value:=(1)", [1], call5281);
          setLineNumber(2775);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5285 = selfRequest(this, "dtype", [0]);
          // call case 2: outer request
          var call5284 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call5285, var_blk, var_newChain);
          // call case 6: other requests
          var call5283 = request(var_n, "dtype:=(1)", [1], call5284);
          setLineNumber(2776);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5288 = selfRequest(this, "annotations", [0]);
          // call case 2: outer request
          var call5287 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call5288, var_blk, var_newChain);
          // call case 6: other requests
          var call5286 = request(var_n, "annotations:=(1)", [1], call5287);
          setLineNumber(2777);    // compilenode call
          // call case 6: other requests
          var call5289 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call5289;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func5277;
        func5277.methodName = "map(1)ancestors(1)";
        func5277.paramCounts = [1, 1];
        func5277.paramNames = ["blk", "ac"];
        func5277.definitionLine = 2771;
        func5277.definitionModule = "ast";
        var func5290 = function(argcv, var_depth) {    // method pretty(_), line 2779
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2780);    // compilenode string
          var string5291 = new GraceString("  ");
          var sum5292 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod5293 = request(string5291, "*(1)", [1], sum5292);
          var var_spc = prod5293;
          setLineNumber(2781);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5294 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string5295 = new GraceString("\n");
          var opresult5296 = request(call5294, "++(1)", [1], string5295);
          var var_s = opresult5296;
          setLineNumber(2782);    // compilenode string
          var string5297 = new GraceString("");
          var opresult5298 = request(string5297, "++(1)", [1], var_spc);
          var string5299 = new GraceString("Path: ");
          var opresult5300 = request(opresult5298, "++(1)", [1], string5299);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5301 = selfRequest(this, "path", [0]);
          var opresult5302 = request(opresult5300, "++(1)", [1], call5301);
          var string5303 = new GraceString("\n");
          var opresult5304 = request(opresult5302, "++(1)", [1], string5303);
          var opresult5305 = request(var_s, "++(1)", [1], opresult5304);
          var_s = opresult5305;
          setLineNumber(2783);    // compilenode string
          var string5306 = new GraceString("");
          var opresult5307 = request(string5306, "++(1)", [1], var_spc);
          var string5308 = new GraceString("Identifier: ");
          var opresult5309 = request(opresult5307, "++(1)", [1], string5308);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5310 = selfRequest(this, "value", [0]);
          var opresult5311 = request(opresult5309, "++(1)", [1], call5310);
          var string5312 = new GraceString("\n");
          var opresult5313 = request(opresult5311, "++(1)", [1], string5312);
          var opresult5314 = request(var_s, "++(1)", [1], opresult5313);
          var_s = opresult5314;
          var if5315 = GraceDone;
          setLineNumber(2784);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5317 = selfRequest(this, "annotations", [0]);
          var call5316 = request(call5317, "size", [0]);
          var opresult5318 = request(call5316, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult5318)) {
            setLineNumber(2785);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5319 = new GraceString("");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5320 = request(string5319, "++(1)", [1], var_spc);
            var string5321 = new GraceString("Anotations: ");
            var opresult5322 = request(opresult5320, "++(1)", [1], string5321);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5323 = selfRequest(this, "annotations", [0]);
            var opresult5324 = request(opresult5322, "++(1)", [1], call5323);
            var string5325 = new GraceString("\n");
            var opresult5326 = request(opresult5324, "++(1)", [1], string5325);
            var opresult5327 = request(var_s, "++(1)", [1], opresult5326);
            var_s = opresult5327;
            if5315 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func5290;
        func5290.methodName = "pretty(1)";
        func5290.paramCounts = [1];
        func5290.paramNames = ["depth"];
        func5290.definitionLine = 2779;
        func5290.definitionModule = "ast";
        var func5328 = function(argcv, var_depth) {    // method toGrace(_), line 2789
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2790);    // compilenode string
          var string5329 = new GraceString("import \"");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5330 = selfRequest(this, "path", [0]);
          var opresult5331 = request(string5329, "++(1)", [1], call5330);
          var string5332 = new GraceString("\" ac ");
          var opresult5333 = request(opresult5331, "++(1)", [1], string5332);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5334 = selfRequest(this, "nameString", [0]);
          var opresult5335 = request(opresult5333, "++(1)", [1], call5334);
          var string5336 = new GraceString("");
          var opresult5337 = request(opresult5335, "++(1)", [1], string5336);
          return opresult5337;
        };    // end of method toGrace(_)
        func5328.paramTypes = [];
        func5328.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func5328;
        func5328.methodName = "toGrace(1)";
        func5328.paramCounts = [1];
        func5328.paramNames = ["depth"];
        func5328.definitionLine = 2789;
        func5328.definitionModule = "ast";
        var func5338 = function(argcv) {    // method shallowCopy, line 2792
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2793);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5341 = selfRequest(this, "path", [0]);
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          // call case 6: other requests
          if (var_importNode === undefined) raiseUninitializedVariable("importNode");
          var call5340 = request(var_importNode, "new(3)", [3], call5341, var_nullNode, GraceFalse);
          var call5339 = request(call5340, "shallowCopyFieldsFrom(1)", [1], this);
          return call5339;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func5338;
        func5338.methodName = "shallowCopy";
        func5338.paramCounts = [0];
        func5338.paramNames = [];
        func5338.definitionLine = 2792;
        func5338.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2724;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5216_init = function() {    // init of object on line 2724
          initFun5217.call(this);
          setLineNumber(2726);    // compilenode string
          var string5342 = new GraceString("import");
          this.data.kind = string5342;
          this.data.value = var_name__39__;
          this.data.path = var_path__39__;
          setLineNumber(2729);    // compilenode array
          var array5344 = new GraceSequence([]);
          // call case 2: outer request
          var call5343 = selfRequest(var_prelude, "list(1)", [1], array5344);
          this.data.annotations = call5343;
          this.data.dtype = var_dtype__39__;
        };
        return obj5216_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5216_init = obj5216_build.call(inheritingObject, null, var_path__39__, var_name__39__, var_dtype__39__, this, aliases, exclusions);
      return obj5216_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_,_,_)$build(_,_,_)
    this.methods["new(3)$build(3)"] = func5215;
    func5215.methodName = "new(3)$build(3)";
    func5215.paramCounts = [3];
    func5215.paramNames = ["path'", "name'", "dtype'"];
    func5215.definitionLine = 2724;
    func5215.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2723;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5213_init = function() {    // init of object on line 2723
    };
    return obj5213_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5213 = emptyGraceObject("importNode", "ast", 2723);
  var obj5213_init = obj5213_build.call(obj5213, null, this, [], []);
  obj5213_init.call(obj5213);  // end of compileobject
  var var_importNode = obj5213;
  var reader5345_importNode = function() {  // reader method importNode
      if (var_importNode === undefined) raiseUninitializedVariable("importNode");
      return var_importNode;
  };
  reader5345_importNode.isDef = true;
  this.methods["importNode"] = reader5345_importNode;
  setLineNumber(2797);    // compilenode object
  var obj5346_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2797");
    this.outer_ast_2797 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5347 = function(argcv, var_stringTok) {    // method fromToken(_), line 2798
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("fromToken(_)", 0, numArgs - 1);
      }
      setLineNumber(2799);    // compilenode member
      // call case 6: other requests
      var call5349 = request(var_stringTok, "value", [0]);
      // call case 4: self request with 1 args and 0 typeArgs 
      var call5348 = selfRequest(this, "new(1)", [1], call5349);
      var var_result = call5348;
      setLineNumber(2800);    // compilenode member
      // call case 6: other requests
      var call5352 = request(var_stringTok, "line", [0]);
      // call case 6: other requests
      var call5353 = request(var_stringTok, "linePos", [0]);
      // call case 6: other requests
      var call5354 = request(var_stringTok, "size", [0]);
      var sum5355 = request(call5353, "+(1)", [1], call5354);
      var diff5356 = request(sum5355, "-(1)", [1], new GraceNum(1));
      // call case 2: outer request
      var call5351 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call5352, diff5356);
      // call case 6: other requests
      var call5350 = request(var_result, "end:=(1)", [1], call5351);
      return var_result;
    };    // end of method fromToken(_)
    this.methods["fromToken(1)"] = func5347;
    func5347.methodName = "fromToken(1)";
    func5347.paramCounts = [1];
    func5347.paramNames = ["stringTok"];
    func5347.definitionLine = 2798;
    func5347.definitionModule = "ast";
    var func5357 = function(argcv, var_pathString) {    // method new(_), line 2803
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("dialectNode.new(_)", "ast", 2803);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_pathString, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func5357;
    func5357.methodName = "new(1)";
    func5357.paramCounts = [1];
    func5357.paramNames = ["pathString"];
    func5357.definitionLine = 2803;
    func5357.definitionModule = "ast";
    var func5358 = function(argcv, var_pathString, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 2803
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj5359_build = function(ignore, var_pathString, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2803");
        this.outer_ast_2803 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2804);    // reuse call
        var initFun5360 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5361_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5361_kind.isDef = true;
        this.methods["kind"] = reader5361_kind;
        this.data.value = undefined;
        var reader5362_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader5362_value.isVar = true;
        this.methods["value"] = reader5362_value;
        var writer5363_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer5363_value;
        this.data.end = undefined;
        var reader5364_end = function() {  // reader method end
            if (this.data.end === undefined) raiseUninitializedVariable("end");
            return this.data.end;
        };
        reader5364_end.isVar = true;
        this.methods["end"] = reader5364_end;
        var writer5365_end = function(argcv, n) {   // writer method end:=(_)
          this.data.end = n;
          return GraceDone;
        };
        this.methods["end:=(1)"] = writer5365_end;
        var func5366 = function(argcv) {     // accessor method isDialect
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isDialect", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isDialect
        this.methods["isDialect"] = func5366;
        func5366.methodName = "isDialect";
        func5366.paramCounts = [0];
        func5366.paramNames = [];
        func5366.definitionLine = 2809;
        func5366.definitionModule = "ast";
        var func5367 = function(argcv) {     // accessor method isExternal
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExternal", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isExternal
        this.methods["isExternal"] = func5367;
        func5367.methodName = "isExternal";
        func5367.paramCounts = [0];
        func5367.paramNames = [];
        func5367.definitionLine = 2810;
        func5367.definitionModule = "ast";
        var func5368 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func5368;
        func5368.methodName = "isExecutable";
        func5368.paramCounts = [0];
        func5368.paramNames = [];
        func5368.definitionLine = 2811;
        func5368.definitionModule = "ast";
        var func5369 = function(argcv) {    // method moduleName, line 2812
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("moduleName", 0, numArgs - 0);
          }
          setLineNumber(2813);    // compilenode string
          var string5370 = new GraceString("");
          var var_bnm = string5370;
          setLineNumber(2814);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5372 = selfRequest(this, "value", [0]);
          var block5373 = new GraceBlock(this, 2814, 1);
          block5373.guard = jsTrue;
          block5373.real = function block5373(var_c) {
            var if5374 = GraceDone;
            setLineNumber(2815);    // compilenode string
            var string5375 = new GraceString("/");
            var opresult5376 = request(var_c, "==(1)", [1], string5375);
            if (Grace_isTrue(opresult5376)) {
              setLineNumber(2816);    // compilenode string
              var string5377 = new GraceString("");
              var_bnm = string5377;
              if5374 = GraceDone;
            } else {
              setLineNumber(2818);    // compilenode op
              if (var_bnm === undefined) raiseUninitializedVariable("bnm");
              var opresult5378 = request(var_bnm, "++(1)", [1], var_c);
              var_bnm = opresult5378;
              if5374 = GraceDone;
            }
            return if5374;
          };
          let applyMeth5373 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5373.methodName = "apply(1)";
          applyMeth5373.paramCounts = [1];
          applyMeth5373.paramNames = ["c"];
          applyMeth5373.definitionLine = 2814;
          applyMeth5373.definitionModule = "ast";
          block5373.methods["apply(1)"] = applyMeth5373;
          let matchesMeth5373 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5373.methodName = "matches(1)";
          matchesMeth5373.paramCounts = [1];
          matchesMeth5373.paramNames = ["c"];
          matchesMeth5373.definitionLine = 2814;
          matchesMeth5373.definitionModule = "ast";
          block5373.methods["matches(1)"] = matchesMeth5373;
          // call case 2: outer request
          var call5371 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call5372, block5373);
          return var_bnm;
        };    // end of method moduleName
        this.methods["moduleName"] = func5369;
        func5369.methodName = "moduleName";
        func5369.paramCounts = [0];
        func5369.paramNames = [];
        func5369.definitionLine = 2812;
        func5369.definitionModule = "ast";
        var func5379 = function(argcv) {    // method path, line 2823
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("path", 0, numArgs - 0);
          }
          setLineNumber(2824);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5380 = selfRequest(this, "value", [0]);
          return call5380;
        };    // end of method path
        this.methods["path"] = func5379;
        func5379.methodName = "path";
        func5379.paramCounts = [0];
        func5379.paramNames = [];
        func5379.definitionLine = 2823;
        func5379.definitionModule = "ast";
        var func5381 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2826
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          setLineNumber(2827);    // compilenode call
          // call case 6: other requests
          var call5382 = request(var_visitor, "visitDialect(1)up(1)", [1, 1], this, var_ac);
          return call5382;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func5381;
        func5381.methodName = "accept(1)from(1)";
        func5381.paramCounts = [1, 1];
        func5381.paramNames = ["visitor", "ac"];
        func5381.definitionLine = 2826;
        func5381.definitionModule = "ast";
        var func5383 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2829
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2830);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5384 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call5384;
          setLineNumber(2831);    // compilenode call
          // call case 6: other requests
          var call5385 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call5385;
          setLineNumber(2832);    // compilenode call
          // call case 6: other requests
          var call5386 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call5386;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func5383;
        func5383.methodName = "map(1)ancestors(1)";
        func5383.paramCounts = [1, 1];
        func5383.paramNames = ["blk", "ac"];
        func5383.definitionLine = 2829;
        func5383.definitionModule = "ast";
        var func5387 = function(argcv, var_depth) {    // method pretty(_), line 2834
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2835);    // compilenode string
          var string5388 = new GraceString("  ");
          var sum5389 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod5390 = request(string5388, "*(1)", [1], sum5389);
          var var_spc = prod5390;
          setLineNumber(2836);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5391 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string5392 = new GraceString("\n");
          var opresult5393 = request(call5391, "++(1)", [1], string5392);
          var var_s = opresult5393;
          setLineNumber(2837);    // compilenode string
          var string5394 = new GraceString("");
          var opresult5395 = request(string5394, "++(1)", [1], var_spc);
          var string5396 = new GraceString("    Path: ");
          var opresult5397 = request(opresult5395, "++(1)", [1], string5396);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5398 = selfRequest(this, "value", [0]);
          var opresult5399 = request(opresult5397, "++(1)", [1], call5398);
          var string5400 = new GraceString("");
          var opresult5401 = request(opresult5399, "++(1)", [1], string5400);
          var opresult5402 = request(var_s, "++(1)", [1], opresult5401);
          var_s = opresult5402;
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func5387;
        func5387.methodName = "pretty(1)";
        func5387.paramCounts = [1];
        func5387.paramNames = ["depth"];
        func5387.definitionLine = 2834;
        func5387.definitionModule = "ast";
        var func5403 = function(argcv, var_depth) {    // method toGrace(_), line 2840
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2841);    // compilenode string
          var string5404 = new GraceString("dialect \"");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5405 = selfRequest(this, "value", [0]);
          var opresult5406 = request(string5404, "++(1)", [1], call5405);
          var string5407 = new GraceString("\"");
          var opresult5408 = request(opresult5406, "++(1)", [1], string5407);
          return opresult5408;
        };    // end of method toGrace(_)
        func5403.paramTypes = [];
        func5403.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func5403;
        func5403.methodName = "toGrace(1)";
        func5403.paramCounts = [1];
        func5403.paramNames = ["depth"];
        func5403.definitionLine = 2840;
        func5403.definitionModule = "ast";
        var func5409 = function(argcv) {    // method shallowCopy, line 2843
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2844);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5412 = selfRequest(this, "value", [0]);
          // call case 6: other requests
          if (var_dialectNode === undefined) raiseUninitializedVariable("dialectNode");
          var call5411 = request(var_dialectNode, "new(1)", [1], call5412);
          var call5410 = request(call5411, "shallowCopyFieldsFrom(1)", [1], this);
          return call5410;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func5409;
        func5409.methodName = "shallowCopy";
        func5409.paramCounts = [0];
        func5409.paramNames = [];
        func5409.definitionLine = 2843;
        func5409.definitionModule = "ast";
        var func5413 = function(argcv, var_other) {    // method postCopy(_), line 2846
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2847);    // compilenode member
          // call case 6: other requests
          var call5415 = request(var_other, "end", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5414 = selfRequest(this, "end:=(1)", [1], call5415);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func5413;
        func5413.methodName = "postCopy(1)";
        func5413.paramCounts = [1];
        func5413.paramNames = ["other"];
        func5413.definitionLine = 2846;
        func5413.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2803;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5359_init = function() {    // init of object on line 2803
          initFun5360.call(this);
          setLineNumber(2805);    // compilenode string
          var string5416 = new GraceString("dialect");
          this.data.kind = string5416;
          this.data.value = var_pathString;
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          this.data.end = var_noPosition;
        };
        return obj5359_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5359_init = obj5359_build.call(inheritingObject, null, var_pathString, this, aliases, exclusions);
      return obj5359_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func5358;
    func5358.methodName = "new(1)$build(3)";
    func5358.paramCounts = [1];
    func5358.paramNames = ["pathString"];
    func5358.definitionLine = 2803;
    func5358.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2797;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5346_init = function() {    // init of object on line 2797
    };
    return obj5346_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5346 = emptyGraceObject("dialectNode", "ast", 2797);
  var obj5346_init = obj5346_build.call(obj5346, null, this, [], []);
  obj5346_init.call(obj5346);  // end of compileobject
  var var_dialectNode = obj5346;
  var reader5417_dialectNode = function() {  // reader method dialectNode
      if (var_dialectNode === undefined) raiseUninitializedVariable("dialectNode");
      return var_dialectNode;
  };
  reader5417_dialectNode.isDef = true;
  this.methods["dialectNode"] = reader5417_dialectNode;
  setLineNumber(2852);    // compilenode object
  var obj5418_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2852");
    this.outer_ast_2852 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5419 = function(argcv, var_expr) {    // method new(_), line 2853
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("returnNode.new(_)", "ast", 2853);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_expr, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func5419;
    func5419.methodName = "new(1)";
    func5419.paramCounts = [1];
    func5419.paramNames = ["expr"];
    func5419.definitionLine = 2853;
    func5419.definitionModule = "ast";
    var func5420 = function(argcv, var_expr, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 2853
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj5421_build = function(ignore, var_expr, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2853");
        this.outer_ast_2853 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2854);    // reuse call
        var initFun5422 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5423_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5423_kind.isDef = true;
        this.methods["kind"] = reader5423_kind;
        this.data.value = undefined;
        var reader5424_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader5424_value.isVar = true;
        this.methods["value"] = reader5424_value;
        var writer5425_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer5425_value;
        this.data.dtype = undefined;
        var reader5426_dtype = function() {  // reader method dtype
            if (this.data.dtype === undefined) raiseUninitializedVariable("dtype");
            return this.data.dtype;
        };
        reader5426_dtype.isVar = true;
        this.methods["dtype"] = reader5426_dtype;
        var writer5427_dtype = function(argcv, n) {   // writer method dtype:=(_)
          this.data.dtype = n;
          return GraceDone;
        };
        this.methods["dtype:=(1)"] = writer5427_dtype;
        var func5428 = function(argcv) {    // method end, line 2859
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if5429 = GraceDone;
          setLineNumber(2860);    // compilenode op
          if (var_noPosition === undefined) raiseUninitializedVariable("noPosition");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5431 = selfRequest(this, "value", [0]);
          var call5430 = request(call5431, "end", [0]);
          var opresult5432 = request(var_noPosition, "\u2260(1)", [1], call5430);
          if (Grace_isTrue(opresult5432)) {
            setLineNumber(2861);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5434 = selfRequest(this, "value", [0]);
            var call5433 = request(call5434, "end", [0]);
            if5429 = call5433;
          } else {
            setLineNumber(2863);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5436 = selfRequest(this, "line", [0]);
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5437 = selfRequest(this, "linePos", [0]);
            var sum5438 = request(call5437, "+(1)", [1], new GraceNum(5));
            // call case 2: outer request
            var call5435 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call5436, sum5438);
            if5429 = call5435;
          }
          return if5429;
        };    // end of method end
        this.methods["end"] = func5428;
        func5428.methodName = "end";
        func5428.paramCounts = [0];
        func5428.paramNames = [];
        func5428.definitionLine = 2859;
        func5428.definitionModule = "ast";
        var func5439 = function(argcv) {     // accessor method isReturn
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isReturn", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isReturn
        this.methods["isReturn"] = func5439;
        func5439.methodName = "isReturn";
        func5439.paramCounts = [0];
        func5439.paramNames = [];
        func5439.definitionLine = 2866;
        func5439.definitionModule = "ast";
        var func5440 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2867
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if5441 = GraceDone;
          setLineNumber(2868);    // compilenode call
          // call case 6: other requests
          var call5442 = request(var_visitor, "visitReturn(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call5442)) {
            setLineNumber(2869);    // compilenode call
            // call case 6: other requests
            var call5443 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call5443;
            setLineNumber(2870);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5445 = selfRequest(this, "value", [0]);
            var call5444 = request(call5445, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            if5441 = call5444;
          }
          return if5441;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func5440;
        func5440.methodName = "accept(1)from(1)";
        func5440.paramCounts = [1, 1];
        func5440.paramNames = ["visitor", "ac"];
        func5440.definitionLine = 2867;
        func5440.definitionModule = "ast";
        var func5446 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2873
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2874);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5447 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call5447;
          setLineNumber(2875);    // compilenode call
          // call case 6: other requests
          var call5448 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call5448;
          setLineNumber(2876);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5451 = selfRequest(this, "value", [0]);
          var call5450 = request(call5451, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call5449 = request(var_n, "value:=(1)", [1], call5450);
          setLineNumber(2877);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5454 = selfRequest(this, "dtype", [0]);
          // call case 2: outer request
          var call5453 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call5454, var_blk, var_newChain);
          // call case 6: other requests
          var call5452 = request(var_n, "dtype:=(1)", [1], call5453);
          setLineNumber(2878);    // compilenode call
          // call case 6: other requests
          var call5455 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call5455;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func5446;
        func5446.methodName = "map(1)ancestors(1)";
        func5446.paramCounts = [1, 1];
        func5446.paramNames = ["blk", "ac"];
        func5446.definitionLine = 2873;
        func5446.definitionModule = "ast";
        var func5456 = function(argcv, var_depth) {    // method pretty(_), line 2880
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2881);    // compilenode string
          var string5457 = new GraceString("  ");
          var sum5458 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod5459 = request(string5457, "*(1)", [1], sum5458);
          var var_spc = prod5459;
          setLineNumber(2882);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5460 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var string5461 = new GraceString("\n");
          var opresult5462 = request(call5460, "++(1)", [1], string5461);
          var var_s = opresult5462;
          setLineNumber(2883);    // compilenode op
          var opresult5463 = request(var_s, "++(1)", [1], var_spc);
          var sum5465 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5466 = selfRequest(this, "value", [0]);
          var call5464 = request(call5466, "pretty(1)", [1], sum5465);
          var opresult5467 = request(opresult5463, "++(1)", [1], call5464);
          var_s = opresult5467;
          var if5468 = GraceDone;
          setLineNumber(2884);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5469 = selfRequest(this, "dtype", [0]);
          var opresult5470 = request(GraceFalse, "\u2260(1)", [1], call5469);
          if (Grace_isTrue(opresult5470)) {
            var string5471 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5472 = request(string5471, "++(1)", [1], var_s);
            var string5473 = new GraceString(" (type ");
            var opresult5474 = request(opresult5472, "++(1)", [1], string5473);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5476 = selfRequest(this, "dtype", [0]);
            var call5475 = request(call5476, "toGrace(1)", [1], new GraceNum(0));
            var opresult5477 = request(opresult5474, "++(1)", [1], call5475);
            var string5478 = new GraceString(")");
            var opresult5479 = request(opresult5477, "++(1)", [1], string5478);
            var_s = opresult5479;
            if5468 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func5456;
        func5456.methodName = "pretty(1)";
        func5456.paramCounts = [1];
        func5456.paramNames = ["depth"];
        func5456.definitionLine = 2880;
        func5456.definitionModule = "ast";
        var func5480 = function(argcv, var_depth) {    // method toGrace(_), line 2887
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2888);    // compilenode string
          var string5481 = new GraceString("return ");
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5483 = selfRequest(this, "value", [0]);
          var call5482 = request(call5483, "toGrace(1)", [1], var_depth);
          var opresult5484 = request(string5481, "++(1)", [1], call5482);
          return opresult5484;
        };    // end of method toGrace(_)
        func5480.paramTypes = [];
        func5480.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func5480;
        func5480.methodName = "toGrace(1)";
        func5480.paramCounts = [1];
        func5480.paramNames = ["depth"];
        func5480.definitionLine = 2887;
        func5480.definitionModule = "ast";
        var func5485 = function(argcv) {    // method shallowCopy, line 2890
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2891);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5488 = selfRequest(this, "value", [0]);
          // call case 6: other requests
          if (var_returnNode === undefined) raiseUninitializedVariable("returnNode");
          var call5487 = request(var_returnNode, "new(1)", [1], call5488);
          var call5486 = request(call5487, "shallowCopyFieldsFrom(1)", [1], this);
          return call5486;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func5485;
        func5485.methodName = "shallowCopy";
        func5485.paramCounts = [0];
        func5485.paramNames = [];
        func5485.definitionLine = 2890;
        func5485.definitionModule = "ast";
        var func5489 = function(argcv, var_other) {    // method postCopy(_), line 2893
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2894);    // compilenode member
          // call case 6: other requests
          var call5491 = request(var_other, "dtype", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5490 = selfRequest(this, "dtype:=(1)", [1], call5491);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func5489;
        func5489.methodName = "postCopy(1)";
        func5489.paramCounts = [1];
        func5489.paramNames = ["other"];
        func5489.definitionLine = 2893;
        func5489.definitionModule = "ast";
        var func5492 = function(argcv) {    // method returnsObject, line 2897
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnsObject", 0, numArgs - 0);
          }
          setLineNumber(2897);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5494 = selfRequest(this, "value", [0]);
          var call5493 = request(call5494, "returnsObject", [0]);
          return call5493;
        };    // end of method returnsObject
        this.methods["returnsObject"] = func5492;
        func5492.methodName = "returnsObject";
        func5492.paramCounts = [0];
        func5492.paramNames = [];
        func5492.definitionLine = 2897;
        func5492.definitionModule = "ast";
        var func5495 = function(argcv) {    // method returnedObjectScope, line 2898
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("returnedObjectScope", 0, numArgs - 0);
          }
          setLineNumber(2900);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5497 = selfRequest(this, "value", [0]);
          var call5496 = request(call5497, "returnedObjectScope", [0]);
          return call5496;
        };    // end of method returnedObjectScope
        this.methods["returnedObjectScope"] = func5495;
        func5495.methodName = "returnedObjectScope";
        func5495.paramCounts = [0];
        func5495.paramNames = [];
        func5495.definitionLine = 2898;
        func5495.definitionModule = "ast";
        var func5498 = function(argcv) {    // method resultExpression, line 2902
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("resultExpression", 0, numArgs - 0);
          }
          setLineNumber(2902);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5499 = selfRequest(this, "value", [0]);
          return call5499;
        };    // end of method resultExpression
        this.methods["resultExpression"] = func5498;
        func5498.methodName = "resultExpression";
        func5498.paramCounts = [0];
        func5498.paramNames = [];
        func5498.definitionLine = 2902;
        func5498.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2853;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5421_init = function() {    // init of object on line 2853
          initFun5422.call(this);
          setLineNumber(2855);    // compilenode string
          var string5500 = new GraceString("return");
          this.data.kind = string5500;
          this.data.value = var_expr;
          this.data.dtype = GraceFalse;
        };
        return obj5421_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5421_init = obj5421_build.call(inheritingObject, null, var_expr, this, aliases, exclusions);
      return obj5421_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func5420;
    func5420.methodName = "new(1)$build(3)";
    func5420.paramCounts = [1];
    func5420.paramNames = ["expr"];
    func5420.definitionLine = 2853;
    func5420.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2852;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5418_init = function() {    // init of object on line 2852
    };
    return obj5418_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5418 = emptyGraceObject("returnNode", "ast", 2852);
  var obj5418_init = obj5418_build.call(obj5418, null, this, [], []);
  obj5418_init.call(obj5418);  // end of compileobject
  var var_returnNode = obj5418;
  var reader5501_returnNode = function() {  // reader method returnNode
      if (var_returnNode === undefined) raiseUninitializedVariable("returnNode");
      return var_returnNode;
  };
  reader5501_returnNode.isDef = true;
  this.methods["returnNode"] = reader5501_returnNode;
  setLineNumber(2905);    // compilenode object
  var obj5502_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_2905");
    this.outer_ast_2905 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5503 = function(argcv, var_expr, var_s) {    // method new(_)scope(_), line 2906
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("new(_)scope(_)", 0, numArgs - 2);
      }
      setLineNumber(2907);    // compilenode call
      // call case 4: self request with 1 args and 0 typeArgs 
      var call5504 = selfRequest(this, "new(1)", [1], var_expr);
      var var_result = call5504;
      setLineNumber(2908);    // compilenode call
      // call case 6: other requests
      var call5505 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method new(_)scope(_)
    this.methods["new(1)scope(1)"] = func5503;
    func5503.methodName = "new(1)scope(1)";
    func5503.paramCounts = [1, 1];
    func5503.paramNames = ["expr", "s"];
    func5503.definitionLine = 2906;
    func5503.definitionModule = "ast";
    var func5506 = function(argcv, var_expr) {    // method new(_), line 2911
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("inheritNode.new(_)", "ast", 2911);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_expr, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func5506;
    func5506.methodName = "new(1)";
    func5506.paramCounts = [1];
    func5506.paramNames = ["expr"];
    func5506.definitionLine = 2911;
    func5506.definitionModule = "ast";
    var func5507 = function(argcv, var_expr, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 2911
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj5508_build = function(ignore, var_expr, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_2911");
        this.outer_ast_2911 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(2912);    // reuse call
        var initFun5509 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5510_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5510_kind.isDef = true;
        this.methods["kind"] = reader5510_kind;
        this.data.value = undefined;
        var reader5511_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader5511_value.isVar = true;
        this.methods["value"] = reader5511_value;
        var writer5512_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer5512_value;
        this.data.providedNames = undefined;
        var reader5513_providedNames = function() {  // reader method providedNames
            if (this.data.providedNames === undefined) raiseUninitializedVariable("providedNames");
            return this.data.providedNames;
        };
        reader5513_providedNames.isVar = true;
        this.methods["providedNames"] = reader5513_providedNames;
        var writer5514_providedNames = function(argcv, n) {   // writer method providedNames:=(_)
          this.data.providedNames = n;
          return GraceDone;
        };
        this.methods["providedNames:=(1)"] = writer5514_providedNames;
        this.data.aliases = undefined;
        var reader5515_aliases = function() {  // reader method aliases
            if (this.data.aliases === undefined) raiseUninitializedVariable("aliases");
            return this.data.aliases;
        };
        reader5515_aliases.isVar = true;
        this.methods["aliases"] = reader5515_aliases;
        var writer5516_aliases = function(argcv, n) {   // writer method aliases:=(_)
          this.data.aliases = n;
          return GraceDone;
        };
        this.methods["aliases:=(1)"] = writer5516_aliases;
        this.data.exclusions = undefined;
        var reader5517_exclusions = function() {  // reader method exclusions
            if (this.data.exclusions === undefined) raiseUninitializedVariable("exclusions");
            return this.data.exclusions;
        };
        reader5517_exclusions.isVar = true;
        this.methods["exclusions"] = reader5517_exclusions;
        var writer5518_exclusions = function(argcv, n) {   // writer method exclusions:=(_)
          this.data.exclusions = n;
          return GraceDone;
        };
        this.methods["exclusions:=(1)"] = writer5518_exclusions;
        this.data.isUse = undefined;
        var reader5519_isUse = function() {  // reader method isUse
            if (this.data.isUse === undefined) raiseUninitializedVariable("isUse");
            return this.data.isUse;
        };
        reader5519_isUse.isVar = true;
        this.methods["isUse"] = reader5519_isUse;
        var writer5520_isUse = function(argcv, n) {   // writer method isUse:=(_)
          this.data.isUse = n;
          return GraceDone;
        };
        this.methods["isUse:=(1)"] = writer5520_isUse;
        var func5521 = function(argcv) {    // method end, line 2920
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(2920);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5523 = selfRequest(this, "value", [0]);
          var call5522 = request(call5523, "end", [0]);
          return call5522;
        };    // end of method end
        this.methods["end"] = func5521;
        func5521.methodName = "end";
        func5521.paramCounts = [0];
        func5521.paramNames = [];
        func5521.definitionLine = 2920;
        func5521.definitionModule = "ast";
        var func5524 = function(argcv) {    // method isLegalInTrait, line 2921
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("isLegalInTrait", 0, numArgs - 0);
          }
          setLineNumber(2921);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5525 = selfRequest(this, "isUse", [0]);
          return call5525;
        };    // end of method isLegalInTrait
        this.methods["isLegalInTrait"] = func5524;
        func5524.methodName = "isLegalInTrait";
        func5524.paramCounts = [0];
        func5524.paramNames = [];
        func5524.definitionLine = 2921;
        func5524.definitionModule = "ast";
        var func5526 = function(argcv) {     // accessor method isInherits
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isInherits", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isInherits
        this.methods["isInherits"] = func5526;
        func5526.methodName = "isInherits";
        func5526.paramCounts = [0];
        func5526.paramNames = [];
        func5526.definitionLine = 2922;
        func5526.definitionModule = "ast";
        var func5527 = function(argcv) {    // method inheritFromMember, line 2923
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("inheritFromMember", 0, numArgs - 0);
          }
          setLineNumber(2923);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5529 = selfRequest(this, "value", [0]);
          var call5528 = request(call5529, "isMember", [0]);
          return call5528;
        };    // end of method inheritFromMember
        this.methods["inheritFromMember"] = func5527;
        func5527.methodName = "inheritFromMember";
        func5527.paramCounts = [0];
        func5527.paramNames = [];
        func5527.definitionLine = 2923;
        func5527.definitionModule = "ast";
        var func5530 = function(argcv) {    // method inheritFromCall, line 2924
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("inheritFromCall", 0, numArgs - 0);
          }
          setLineNumber(2924);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5532 = selfRequest(this, "value", [0]);
          var call5531 = request(call5532, "isCall", [0]);
          return call5531;
        };    // end of method inheritFromCall
        this.methods["inheritFromCall"] = func5530;
        func5530.methodName = "inheritFromCall";
        func5530.paramCounts = [0];
        func5530.paramNames = [];
        func5530.definitionLine = 2924;
        func5530.definitionModule = "ast";
        var func5533 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func5533;
        func5533.methodName = "isExecutable";
        func5533.paramCounts = [0];
        func5533.paramNames = [];
        func5533.definitionLine = 2925;
        func5533.definitionModule = "ast";
        var func5534 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 2926
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if5535 = GraceDone;
          setLineNumber(2927);    // compilenode call
          // call case 6: other requests
          var call5536 = request(var_visitor, "visitInherits(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call5536)) {
            setLineNumber(2928);    // compilenode call
            // call case 6: other requests
            var call5537 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call5537;
            setLineNumber(2929);    // compilenode call
            if (var_newChain === undefined) raiseUninitializedVariable("newChain");
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5539 = selfRequest(this, "value", [0]);
            var call5538 = request(call5539, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
            setLineNumber(2930);    // compilenode block
            var block5541 = new GraceBlock(this, 2930, 1);
            block5541.guard = jsTrue;
            block5541.real = function block5541(var_a) {
              setLineNumber(2930);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call5542 = request(var_a, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call5542;
            };
            let applyMeth5541 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5541.methodName = "apply(1)";
            applyMeth5541.paramCounts = [1];
            applyMeth5541.paramNames = ["a"];
            applyMeth5541.definitionLine = 2930;
            applyMeth5541.definitionModule = "ast";
            block5541.methods["apply(1)"] = applyMeth5541;
            let matchesMeth5541 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5541.methodName = "matches(1)";
            matchesMeth5541.paramCounts = [1];
            matchesMeth5541.paramNames = ["a"];
            matchesMeth5541.definitionLine = 2930;
            matchesMeth5541.definitionModule = "ast";
            block5541.methods["matches(1)"] = matchesMeth5541;
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5543 = selfRequest(this, "aliases", [0]);
            var call5540 = request(call5543, "do(1)", [1], block5541);
            setLineNumber(2931);    // compilenode block
            var block5545 = new GraceBlock(this, 2931, 1);
            block5545.guard = jsTrue;
            block5545.real = function block5545(var_e) {
              setLineNumber(2931);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call5546 = request(var_e, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call5546;
            };
            let applyMeth5545 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5545.methodName = "apply(1)";
            applyMeth5545.paramCounts = [1];
            applyMeth5545.paramNames = ["e"];
            applyMeth5545.definitionLine = 2931;
            applyMeth5545.definitionModule = "ast";
            block5545.methods["apply(1)"] = applyMeth5545;
            let matchesMeth5545 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5545.methodName = "matches(1)";
            matchesMeth5545.paramCounts = [1];
            matchesMeth5545.paramNames = ["e"];
            matchesMeth5545.definitionLine = 2931;
            matchesMeth5545.definitionModule = "ast";
            block5545.methods["matches(1)"] = matchesMeth5545;
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5547 = selfRequest(this, "exclusions", [0]);
            var call5544 = request(call5547, "do(1)", [1], block5545);
            if5535 = call5544;
          }
          return if5535;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func5534;
        func5534.methodName = "accept(1)from(1)";
        func5534.paramCounts = [1, 1];
        func5534.paramNames = ["visitor", "ac"];
        func5534.definitionLine = 2926;
        func5534.definitionModule = "ast";
        var func5548 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 2934
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(2938);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call5549 = request(var_k, "methdec", [0]);
          return call5549;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func5548;
        func5548.methodName = "declarationKindWithAncestors(1)";
        func5548.paramCounts = [1];
        func5548.paramNames = ["ac"];
        func5548.definitionLine = 2934;
        func5548.definitionModule = "ast";
        var func5550 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 2940
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(2941);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5551 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call5551;
          setLineNumber(2942);    // compilenode call
          // call case 6: other requests
          var call5552 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call5552;
          setLineNumber(2943);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5555 = selfRequest(this, "value", [0]);
          var call5554 = request(call5555, "map(1)ancestors(1)", [1, 1], var_blk, var_newChain);
          // call case 6: other requests
          var call5553 = request(var_n, "value:=(1)", [1], call5554);
          setLineNumber(2944);    // compilenode call
          // call case 6: other requests
          var call5556 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call5556;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func5550;
        func5550.methodName = "map(1)ancestors(1)";
        func5550.paramCounts = [1, 1];
        func5550.paramNames = ["blk", "ac"];
        func5550.definitionLine = 2940;
        func5550.definitionModule = "ast";
        var func5557 = function(argcv, var_depth) {    // method pretty(_), line 2946
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(2947);    // compilenode string
          var string5558 = new GraceString("  ");
          var sum5559 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod5560 = request(string5558, "*(1)", [1], sum5559);
          var var_spc = prod5560;
          setLineNumber(2948);    // compilenode call
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5561 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var var_s = call5561;
          var if5562 = GraceDone;
          setLineNumber(2949);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5563 = selfRequest(this, "isUse", [0]);
          if (Grace_isTrue(call5563)) {
            var string5564 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5565 = request(string5564, "++(1)", [1], var_s);
            var string5566 = new GraceString(" (use)");
            var opresult5567 = request(opresult5565, "++(1)", [1], string5566);
            var_s = opresult5567;
            if5562 = GraceDone;
          }
          setLineNumber(2950);    // compilenode string
          var string5568 = new GraceString("\n");
          var opresult5569 = request(var_s, "++(1)", [1], string5568);
          var opresult5570 = request(opresult5569, "++(1)", [1], var_spc);
          var sum5572 = request(var_depth, "+(1)", [1], new GraceNum(1));
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5573 = selfRequest(this, "value", [0]);
          var call5571 = request(call5573, "pretty(1)", [1], sum5572);
          var opresult5574 = request(opresult5570, "++(1)", [1], call5571);
          var_s = opresult5574;
          setLineNumber(2951);    // compilenode block
          var block5576 = new GraceBlock(this, 2951, 1);
          block5576.guard = jsTrue;
          block5576.real = function block5576(var_a) {
            setLineNumber(2952);    // compilenode string
            var string5577 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5578 = request(string5577, "++(1)", [1], var_s);
            var string5579 = new GraceString("\n");
            var opresult5580 = request(opresult5578, "++(1)", [1], string5579);
            var sum5582 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            var call5581 = request(var_a, "pretty(1)", [1], sum5582);
            var opresult5583 = request(opresult5580, "++(1)", [1], call5581);
            var string5584 = new GraceString("");
            var opresult5585 = request(opresult5583, "++(1)", [1], string5584);
            var_s = opresult5585;
            return GraceDone;
          };
          let applyMeth5576 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5576.methodName = "apply(1)";
          applyMeth5576.paramCounts = [1];
          applyMeth5576.paramNames = ["a"];
          applyMeth5576.definitionLine = 2951;
          applyMeth5576.definitionModule = "ast";
          block5576.methods["apply(1)"] = applyMeth5576;
          let matchesMeth5576 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5576.methodName = "matches(1)";
          matchesMeth5576.paramCounts = [1];
          matchesMeth5576.paramNames = ["a"];
          matchesMeth5576.definitionLine = 2951;
          matchesMeth5576.definitionModule = "ast";
          block5576.methods["matches(1)"] = matchesMeth5576;
          // call case 6: other requests
          setLineNumber(2951);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5586 = selfRequest(this, "aliases", [0]);
          var call5575 = request(call5586, "do(1)", [1], block5576);
          var if5587 = GraceDone;
          setLineNumber(2954);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5590 = selfRequest(this, "exclusions", [0]);
          var call5589 = request(call5590, "isEmpty", [0]);
          var call5588 = request(call5589, "not", [0]);
          if (Grace_isTrue(call5588)) {
            var string5591 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5592 = request(string5591, "++(1)", [1], var_s);
            var string5593 = new GraceString("\n");
            var opresult5594 = request(opresult5592, "++(1)", [1], string5593);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5595 = request(opresult5594, "++(1)", [1], var_spc);
            var string5596 = new GraceString("");
            var opresult5597 = request(opresult5595, "++(1)", [1], string5596);
            var_s = opresult5597;
            if5587 = GraceDone;
          }
          setLineNumber(2955);    // compilenode block
          var block5599 = new GraceBlock(this, 2955, 1);
          block5599.guard = jsTrue;
          block5599.real = function block5599(var_e) {
            setLineNumber(2956);    // compilenode string
            var string5600 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5601 = request(string5600, "++(1)", [1], var_s);
            var string5602 = new GraceString("  exclude ");
            var opresult5603 = request(opresult5601, "++(1)", [1], string5602);
            var opresult5604 = request(opresult5603, "++(1)", [1], var_e);
            var string5605 = new GraceString("");
            var opresult5606 = request(opresult5604, "++(1)", [1], string5605);
            var_s = opresult5606;
            return GraceDone;
          };
          let applyMeth5599 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5599.methodName = "apply(1)";
          applyMeth5599.paramCounts = [1];
          applyMeth5599.paramNames = ["e"];
          applyMeth5599.definitionLine = 2955;
          applyMeth5599.definitionModule = "ast";
          block5599.methods["apply(1)"] = applyMeth5599;
          let matchesMeth5599 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5599.methodName = "matches(1)";
          matchesMeth5599.paramCounts = [1];
          matchesMeth5599.paramNames = ["e"];
          matchesMeth5599.definitionLine = 2955;
          matchesMeth5599.definitionModule = "ast";
          block5599.methods["matches(1)"] = matchesMeth5599;
          // call case 6: other requests
          setLineNumber(2955);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5607 = selfRequest(this, "exclusions", [0]);
          var call5598 = request(call5607, "do(1)", [1], block5599);
          var if5608 = GraceDone;
          setLineNumber(2958);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5611 = selfRequest(this, "providedNames", [0]);
          var call5610 = request(call5611, "isEmpty", [0]);
          var call5609 = request(call5610, "not", [0]);
          if (Grace_isTrue(call5609)) {
            setLineNumber(2959);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5612 = new GraceString("\n");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5613 = request(string5612, "++(1)", [1], var_spc);
            var string5614 = new GraceString("Provided names: ");
            var opresult5615 = request(opresult5613, "++(1)", [1], string5614);
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5618 = selfRequest(this, "providedNames", [0]);
            // call case 6: other requests
            // call case 2: outer request
            var call5619 = selfRequest(var_prelude, "list", [0]);
            var call5617 = request(call5619, "withAll(1)", [1], call5618);
            var call5616 = request(call5617, "sort", [0]);
            var opresult5620 = request(opresult5615, "++(1)", [1], call5616);
            var string5621 = new GraceString("");
            var opresult5622 = request(opresult5620, "++(1)", [1], string5621);
            var opresult5623 = request(var_s, "++(1)", [1], opresult5622);
            var_s = opresult5623;
            if5608 = GraceDone;
          }
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func5557;
        func5557.methodName = "pretty(1)";
        func5557.paramCounts = [1];
        func5557.paramNames = ["depth"];
        func5557.definitionLine = 2946;
        func5557.definitionModule = "ast";
        var func5624 = function(argcv, var_depth) {    // method toGrace(_), line 2963
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(2964);    // compilenode string
          var string5625 = new GraceString("");
          var var_s = string5625;
          setLineNumber(2965);    // compilenode block
          var block5627 = new GraceBlock(this, 2965, 0);
          block5627.guard = jsTrue;
          block5627.real = function block5627() {
            setLineNumber(2966);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5628 = new GraceString("    ");
            var opresult5629 = request(var_s, "++(1)", [1], string5628);
            var_s = opresult5629;
            return GraceDone;
          };
          let applyMeth5627 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth5627.methodName = "apply";
          applyMeth5627.paramCounts = [0];
          applyMeth5627.paramNames = [];
          applyMeth5627.definitionLine = 2965;
          applyMeth5627.definitionModule = "ast";
          block5627.methods["apply"] = applyMeth5627;
          // call case 2: outer request
          var call5626 = selfRequest(var_prelude, "repeat(1)times(1)", [1, 1], var_depth, block5627);
          var if5630 = GraceDone;
          setLineNumber(2968);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5631 = selfRequest(this, "isUse", [0]);
          if (Grace_isTrue(call5631)) {
            var string5632 = new GraceString("use ");
            if5630 = string5632;
          } else {
            var string5633 = new GraceString("inherit ");
            if5630 = string5633;
          }
          var opresult5634 = request(var_s, "++(1)", [1], if5630);
          var_s = opresult5634;
          setLineNumber(2969);    // compilenode num
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5636 = selfRequest(this, "value", [0]);
          var call5635 = request(call5636, "toGrace(1)", [1], new GraceNum(0));
          var opresult5637 = request(var_s, "++(1)", [1], call5635);
          var_s = opresult5637;
          setLineNumber(2970);    // compilenode block
          var block5639 = new GraceBlock(this, 2970, 1);
          block5639.guard = jsTrue;
          block5639.real = function block5639(var_a) {
            setLineNumber(2971);    // compilenode string
            var string5640 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5641 = request(string5640, "++(1)", [1], var_s);
            var string5642 = new GraceString(" ");
            var opresult5643 = request(opresult5641, "++(1)", [1], string5642);
            var opresult5644 = request(opresult5643, "++(1)", [1], var_a);
            var string5645 = new GraceString(" ");
            var opresult5646 = request(opresult5644, "++(1)", [1], string5645);
            var_s = opresult5646;
            return GraceDone;
          };
          let applyMeth5639 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5639.methodName = "apply(1)";
          applyMeth5639.paramCounts = [1];
          applyMeth5639.paramNames = ["a"];
          applyMeth5639.definitionLine = 2970;
          applyMeth5639.definitionModule = "ast";
          block5639.methods["apply(1)"] = applyMeth5639;
          let matchesMeth5639 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5639.methodName = "matches(1)";
          matchesMeth5639.paramCounts = [1];
          matchesMeth5639.paramNames = ["a"];
          matchesMeth5639.definitionLine = 2970;
          matchesMeth5639.definitionModule = "ast";
          block5639.methods["matches(1)"] = matchesMeth5639;
          // call case 6: other requests
          setLineNumber(2970);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5647 = selfRequest(this, "aliases", [0]);
          var call5638 = request(call5647, "do(1)", [1], block5639);
          setLineNumber(2973);    // compilenode block
          var block5649 = new GraceBlock(this, 2973, 1);
          block5649.guard = jsTrue;
          block5649.real = function block5649(var_e) {
            setLineNumber(2974);    // compilenode string
            var string5650 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5651 = request(string5650, "++(1)", [1], var_s);
            var string5652 = new GraceString(" exclude ");
            var opresult5653 = request(opresult5651, "++(1)", [1], string5652);
            // call case 6: other requests
            var call5654 = request(var_e, "nameString", [0]);
            var opresult5655 = request(opresult5653, "++(1)", [1], call5654);
            var string5656 = new GraceString(" ");
            var opresult5657 = request(opresult5655, "++(1)", [1], string5656);
            var_s = opresult5657;
            return GraceDone;
          };
          let applyMeth5649 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5649.methodName = "apply(1)";
          applyMeth5649.paramCounts = [1];
          applyMeth5649.paramNames = ["e"];
          applyMeth5649.definitionLine = 2973;
          applyMeth5649.definitionModule = "ast";
          block5649.methods["apply(1)"] = applyMeth5649;
          let matchesMeth5649 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5649.methodName = "matches(1)";
          matchesMeth5649.paramCounts = [1];
          matchesMeth5649.paramNames = ["e"];
          matchesMeth5649.definitionLine = 2973;
          matchesMeth5649.definitionModule = "ast";
          block5649.methods["matches(1)"] = matchesMeth5649;
          // call case 6: other requests
          setLineNumber(2973);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5658 = selfRequest(this, "exclusions", [0]);
          var call5648 = request(call5658, "do(1)", [1], block5649);
          return var_s;
        };    // end of method toGrace(_)
        func5624.paramTypes = [];
        func5624.paramTypes.push([type_Number, "depth"]);
        this.methods["toGrace(1)"] = func5624;
        func5624.methodName = "toGrace(1)";
        func5624.paramCounts = [1];
        func5624.paramNames = ["depth"];
        func5624.definitionLine = 2963;
        func5624.definitionModule = "ast";
        var func5659 = function(argcv) {    // method asString, line 2978
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          var if5660 = GraceDone;
          setLineNumber(2979);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5661 = selfRequest(this, "isUse", [0]);
          if (Grace_isTrue(call5661)) {
            var string5662 = new GraceString("use ");
            if5660 = string5662;
          } else {
            var string5663 = new GraceString("inherit ");
            if5660 = string5663;
          }
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5665 = selfRequest(this, "value", [0]);
          var call5664 = request(call5665, "toGrace(1)", [1], new GraceNum(0));
          var opresult5666 = request(if5660, "++(1)", [1], call5664);
          return opresult5666;
        };    // end of method asString
        this.methods["asString"] = func5659;
        func5659.methodName = "asString";
        func5659.paramCounts = [0];
        func5659.paramNames = [];
        func5659.definitionLine = 2978;
        func5659.definitionModule = "ast";
        var func5667 = function(argcv) {    // method nameString, line 2981
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          setLineNumber(2981);    // compilenode num
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5669 = selfRequest(this, "value", [0]);
          var call5668 = request(call5669, "toGrace(1)", [1], new GraceNum(0));
          return call5668;
        };    // end of method nameString
        this.methods["nameString"] = func5667;
        func5667.methodName = "nameString";
        func5667.paramCounts = [0];
        func5667.paramNames = [];
        func5667.definitionLine = 2981;
        func5667.definitionModule = "ast";
        var func5670 = function(argcv, var_newSig, var_oldSig) {    // method addAlias(_)for(_), line 2982
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("addAlias(_)for(_)", 0, numArgs - 2);
          }
          setLineNumber(2983);    // compilenode call
          // call case 2: outer request
          var call5672 = selfRequest(importedModules["ast"], "aliasNew(1)old(1)", [1, 1], var_newSig, var_oldSig);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5673 = selfRequest(this, "aliases", [0]);
          var call5671 = request(call5673, "push(1)", [1], call5672);
          return call5671;
        };    // end of method addAlias(_)for(_)
        this.methods["addAlias(1)for(1)"] = func5670;
        func5670.methodName = "addAlias(1)for(1)";
        func5670.paramCounts = [1, 1];
        func5670.paramNames = ["newSig", "oldSig"];
        func5670.definitionLine = 2982;
        func5670.definitionModule = "ast";
        var func5674 = function(argcv, var_meth) {    // method addExclusion(_), line 2985
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("addExclusion(_)", 0, numArgs - 1);
          }
          setLineNumber(2986);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5676 = selfRequest(this, "exclusions", [0]);
          var call5675 = request(call5676, "push(1)", [1], var_meth);
          return call5675;
        };    // end of method addExclusion(_)
        this.methods["addExclusion(1)"] = func5674;
        func5674.methodName = "addExclusion(1)";
        func5674.paramCounts = [1];
        func5674.paramNames = ["meth"];
        func5674.definitionLine = 2985;
        func5674.definitionModule = "ast";
        var func5677 = function(argcv) {    // method shallowCopy, line 2988
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(2989);    // compilenode call
          // call case 6: other requests
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          // call case 6: other requests
          if (var_inheritNode === undefined) raiseUninitializedVariable("inheritNode");
          var call5679 = request(var_inheritNode, "new(1)", [1], var_nullNode);
          var call5678 = request(call5679, "shallowCopyFieldsFrom(1)", [1], this);
          return call5678;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func5677;
        func5677.methodName = "shallowCopy";
        func5677.paramCounts = [0];
        func5677.paramNames = [];
        func5677.definitionLine = 2988;
        func5677.definitionModule = "ast";
        var func5680 = function(argcv, var_other) {    // method postCopy(_), line 2991
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(2992);    // compilenode member
          // call case 6: other requests
          var call5682 = request(var_other, "providedNames", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5681 = selfRequest(this, "providedNames:=(1)", [1], call5682);
          setLineNumber(2993);    // compilenode member
          // call case 6: other requests
          var call5684 = request(var_other, "aliases", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5683 = selfRequest(this, "aliases:=(1)", [1], call5684);
          setLineNumber(2994);    // compilenode member
          // call case 6: other requests
          var call5686 = request(var_other, "exclusions", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5685 = selfRequest(this, "exclusions:=(1)", [1], call5686);
          setLineNumber(2995);    // compilenode member
          // call case 6: other requests
          var call5688 = request(var_other, "isUse", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5687 = selfRequest(this, "isUse:=(1)", [1], call5688);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func5680;
        func5680.methodName = "postCopy(1)";
        func5680.paramCounts = [1];
        func5680.paramNames = ["other"];
        func5680.definitionLine = 2991;
        func5680.definitionModule = "ast";
        var func5689 = function(argcv) {    // method statementName, line 2998
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          var if5690 = GraceDone;
          setLineNumber(2999);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5691 = selfRequest(this, "isUse", [0]);
          if (Grace_isTrue(call5691)) {
            var string5692 = new GraceString("use");
            if5690 = string5692;
          } else {
            var string5693 = new GraceString("inherit");
            if5690 = string5693;
          }
          return if5690;
        };    // end of method statementName
        this.methods["statementName"] = func5689;
        func5689.methodName = "statementName";
        func5689.paramCounts = [0];
        func5689.paramNames = [];
        func5689.definitionLine = 2998;
        func5689.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 2911;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5508_init = function() {    // init of object on line 2911
          initFun5509.call(this);
          setLineNumber(2913);    // compilenode string
          var string5694 = new GraceString("inherit");
          this.data.kind = string5694;
          this.data.value = var_expr;
          setLineNumber(2915);    // compilenode member
          // call case 2: outer request
          var call5695 = selfRequest(var_prelude, "emptySet", [0]);
          this.data.providedNames = call5695;
          setLineNumber(2916);    // compilenode array
          var array5697 = new GraceSequence([]);
          // call case 2: outer request
          var call5696 = selfRequest(var_prelude, "list(1)", [1], array5697);
          this.data.aliases = call5696;
          setLineNumber(2917);    // compilenode array
          var array5699 = new GraceSequence([]);
          // call case 2: outer request
          var call5698 = selfRequest(var_prelude, "list(1)", [1], array5699);
          this.data.exclusions = call5698;
          this.data.isUse = GraceFalse;
        };
        return obj5508_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5508_init = obj5508_build.call(inheritingObject, null, var_expr, this, aliases, exclusions);
      return obj5508_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func5507;
    func5507.methodName = "new(1)$build(3)";
    func5507.paramCounts = [1];
    func5507.paramNames = ["expr"];
    func5507.definitionLine = 2911;
    func5507.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 2905;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5502_init = function() {    // init of object on line 2905
    };
    return obj5502_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5502 = emptyGraceObject("inheritNode", "ast", 2905);
  var obj5502_init = obj5502_build.call(obj5502, null, this, [], []);
  obj5502_init.call(obj5502);  // end of compileobject
  var var_inheritNode = obj5502;
  var reader5700_inheritNode = function() {  // reader method inheritNode
      if (var_inheritNode === undefined) raiseUninitializedVariable("inheritNode");
      return var_inheritNode;
  };
  reader5700_inheritNode.isDef = true;
  this.methods["inheritNode"] = reader5700_inheritNode;
  setLineNumber(3044);    // compilenode object
  var obj5701_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_3044");
    this.outer_ast_3044 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5702 = function(argcv) {    // method new, line 3045
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 0) && (numArgs !== 0)) {
          raiseTypeArgError("new", 0, numArgs - 0);
      }
      setLineNumber(3046);    // compilenode string
      var string5704 = new GraceString("");
      var array5706 = new GraceSequence([]);
      // call case 2: outer request
      var call5705 = selfRequest(var_prelude, "list(1)", [1], array5706);
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5703 = selfRequest(this, "partName(1)params(1)", [1, 1], string5704, call5705);
      return call5703;
    };    // end of method new
    this.methods["new"] = func5702;
    func5702.methodName = "new";
    func5702.paramCounts = [0];
    func5702.paramNames = [];
    func5702.definitionLine = 3045;
    func5702.definitionModule = "ast";
    var func5707 = function(argcv, var_n, var_s) {    // method partName(_)scope(_), line 3048
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("partName(_)scope(_)", 0, numArgs - 2);
      }
      setLineNumber(3049);    // compilenode array
      var array5710 = new GraceSequence([]);
      // call case 2: outer request
      var call5709 = selfRequest(var_prelude, "list(1)", [1], array5710);
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5708 = selfRequest(this, "partName(1)params(1)", [1, 1], var_n, call5709);
      var var_result = call5708;
      setLineNumber(3050);    // compilenode call
      // call case 6: other requests
      var call5711 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method partName(_)scope(_)
    this.methods["partName(1)scope(1)"] = func5707;
    func5707.methodName = "partName(1)scope(1)";
    func5707.paramCounts = [1, 1];
    func5707.paramNames = ["n", "s"];
    func5707.definitionLine = 3048;
    func5707.definitionModule = "ast";
    var func5712 = function(argcv, var_n, var_ps, var_s) {    // method partName(_)params(_)scope(_), line 3053
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("partName(_)params(_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(3054);    // compilenode call
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5713 = selfRequest(this, "partName(1)params(1)", [1, 1], var_n, var_ps);
      var var_result = call5713;
      setLineNumber(3055);    // compilenode call
      // call case 6: other requests
      var call5714 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method partName(_)params(_)scope(_)
    this.methods["partName(1)params(1)scope(1)"] = func5712;
    func5712.methodName = "partName(1)params(1)scope(1)";
    func5712.paramCounts = [1, 1, 1];
    func5712.paramNames = ["n", "ps", "s"];
    func5712.definitionLine = 3053;
    func5712.definitionModule = "ast";
    var func5715 = function(argcv, var_n) {    // method partName(_), line 3058
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("partName(_)", 0, numArgs - 1);
      }
      setLineNumber(3059);    // compilenode array
      var array5718 = new GraceSequence([]);
      // call case 2: outer request
      var call5717 = selfRequest(var_prelude, "list(1)", [1], array5718);
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5716 = selfRequest(this, "partName(1)params(1)", [1, 1], var_n, call5717);
      return call5716;
    };    // end of method partName(_)
    this.methods["partName(1)"] = func5715;
    func5715.methodName = "partName(1)";
    func5715.paramCounts = [1];
    func5715.paramNames = ["n"];
    func5715.definitionLine = 3058;
    func5715.definitionModule = "ast";
    var func5719 = function(argcv, var_n, var_ps) {    // method partName(_)params(_), line 3061
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("partName(_)params(_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("signaturePart.partName(_)params(_)", "ast", 3061);
      var ouc_init = this.methods["partName(1)params(1)$build(3)"].call(this, null, var_n, var_ps, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method partName(_)params(_)
    this.methods["partName(1)params(1)"] = func5719;
    func5719.methodName = "partName(1)params(1)";
    func5719.paramCounts = [1, 1];
    func5719.paramNames = ["n", "ps"];
    func5719.definitionLine = 3061;
    func5719.definitionModule = "ast";
    var func5720 = function(argcv, var_n, var_ps, inheritingObject, aliases, exclusions) {    // method partName(_)params(_)$build(_,_,_), line 3061
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("partName(_)params(_)", 0, numArgs - 2);
      }
      var obj5721_build = function(ignore, var_n, var_ps, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_3061");
        this.outer_ast_3061 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(3062);    // reuse call
        var initFun5722 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5723_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5723_kind.isDef = true;
        this.methods["kind"] = reader5723_kind;
        this.data.name = undefined;
        var reader5724_name = function() {  // reader method name
            if (this.data.name === undefined) raiseUninitializedVariable("name");
            return this.data.name;
        };
        reader5724_name.isVar = true;
        this.methods["name"] = reader5724_name;
        var writer5725_name = function(argcv, n) {   // writer method name:=(_)
          this.data.name = n;
          return GraceDone;
        };
        this.methods["name:=(1)"] = writer5725_name;
        this.data.params = undefined;
        var reader5726_params = function() {  // reader method params
            if (this.data.params === undefined) raiseUninitializedVariable("params");
            return this.data.params;
        };
        reader5726_params.isVar = true;
        this.methods["params"] = reader5726_params;
        var writer5727_params = function(argcv, n) {   // writer method params:=(_)
          this.data.params = n;
          return GraceDone;
        };
        this.methods["params:=(1)"] = writer5727_params;
        this.data.typeParams = undefined;
        var reader5728_typeParams = function() {  // reader method typeParams
            if (this.data.typeParams === undefined) raiseUninitializedVariable("typeParams");
            return this.data.typeParams;
        };
        reader5728_typeParams.isVar = true;
        this.methods["typeParams"] = reader5728_typeParams;
        var writer5729_typeParams = function(argcv, n) {   // writer method typeParams:=(_)
          this.data.typeParams = n;
          return GraceDone;
        };
        this.methods["typeParams:=(1)"] = writer5729_typeParams;
        this.data.lineLength = undefined;
        var reader5730_lineLength = function() {  // reader method lineLength
            if (this.data.lineLength === undefined) raiseUninitializedVariable("lineLength");
            return this.data.lineLength;
        };
        reader5730_lineLength.isVar = true;
        this.methods["lineLength"] = reader5730_lineLength;
        var writer5731_lineLength = function(argcv, n) {   // writer method lineLength:=(_)
          this.data.lineLength = n;
          return GraceDone;
        };
        this.methods["lineLength:=(1)"] = writer5731_lineLength;
        var func5732 = function(argcv) {    // method end, line 3069
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if5733 = GraceDone;
          setLineNumber(3070);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5736 = selfRequest(this, "params", [0]);
          var call5735 = request(call5736, "isEmpty", [0]);
          var call5734 = request(call5735, "not", [0]);
          if (Grace_isTrue(call5734)) {
            setLineNumber(3071);    // compilenode string
            var string5738 = new GraceString(")");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5741 = selfRequest(this, "params", [0]);
            var call5740 = request(call5741, "last", [0]);
            var call5739 = request(call5740, "end", [0]);
            // call case 2: outer request
            var call5737 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string5738, call5739);
            return call5737;
          }
          var if5742 = GraceDone;
          setLineNumber(3073);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5743 = selfRequest(this, "typeParams", [0]);
          var opresult5744 = request(GraceFalse, "\u2260(1)", [1], call5743);
          if (Grace_isTrue(opresult5744)) {
            setLineNumber(3074);    // compilenode string
            var string5746 = new GraceString("\u27e7");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5749 = selfRequest(this, "typeParams", [0]);
            var call5748 = request(call5749, "last", [0]);
            var call5747 = request(call5748, "end", [0]);
            // call case 2: outer request
            var call5745 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string5746, call5747);
            return call5745;
          }
          setLineNumber(3076);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5751 = selfRequest(this, "line", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5752 = selfRequest(this, "linePos", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5754 = selfRequest(this, "name", [0]);
          var call5753 = request(call5754, "size", [0]);
          var sum5755 = request(call5752, "+(1)", [1], call5753);
          var diff5756 = request(sum5755, "-(1)", [1], new GraceNum(1));
          // call case 2: outer request
          var call5750 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call5751, diff5756);
          return call5750;
        };    // end of method end
        this.methods["end"] = func5732;
        func5732.methodName = "end";
        func5732.paramCounts = [0];
        func5732.paramNames = [];
        func5732.definitionLine = 3069;
        func5732.definitionModule = "ast";
        var func5757 = function(argcv) {    // method hasTypeParams, line 3078
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("hasTypeParams", 0, numArgs - 0);
          }
          setLineNumber(3078);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5758 = selfRequest(this, "typeParams", [0]);
          var opresult5759 = request(GraceFalse, "\u2260(1)", [1], call5758);
          return opresult5759;
        };    // end of method hasTypeParams
        this.methods["hasTypeParams"] = func5757;
        func5757.methodName = "hasTypeParams";
        func5757.paramCounts = [0];
        func5757.paramNames = [];
        func5757.definitionLine = 3078;
        func5757.definitionModule = "ast";
        var func5760 = function(argcv) {    // method numTypeParams, line 3079
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numTypeParams", 0, numArgs - 0);
          }
          var if5761 = GraceDone;
          setLineNumber(3079);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5762 = selfRequest(this, "hasTypeParams", [0]);
          if (Grace_isTrue(call5762)) {
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5764 = selfRequest(this, "typeParams", [0]);
            var call5763 = request(call5764, "size", [0]);
            if5761 = call5763;
          } else {
            if5761 = new GraceNum(0);
          }
          return if5761;
        };    // end of method numTypeParams
        this.methods["numTypeParams"] = func5760;
        func5760.methodName = "numTypeParams";
        func5760.paramCounts = [0];
        func5760.paramNames = [];
        func5760.definitionLine = 3079;
        func5760.definitionModule = "ast";
        var func5765 = function(argcv) {    // method numParams, line 3080
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("numParams", 0, numArgs - 0);
          }
          setLineNumber(3080);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5767 = selfRequest(this, "params", [0]);
          var call5766 = request(call5767, "size", [0]);
          return call5766;
        };    // end of method numParams
        this.methods["numParams"] = func5765;
        func5765.methodName = "numParams";
        func5765.paramCounts = [0];
        func5765.paramNames = [];
        func5765.definitionLine = 3080;
        func5765.definitionModule = "ast";
        var func5768 = function(argcv) {    // method nameString, line 3081
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          var if5769 = GraceDone;
          setLineNumber(3082);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5771 = selfRequest(this, "params", [0]);
          var call5770 = request(call5771, "isEmpty", [0]);
          if (Grace_isTrue(call5770)) {
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5772 = selfRequest(this, "name", [0]);
            return call5772;
          }
          setLineNumber(3083);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5773 = selfRequest(this, "name", [0]);
          var string5774 = new GraceString("(");
          var opresult5775 = request(call5773, "++(1)", [1], string5774);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5777 = selfRequest(this, "params", [0]);
          var call5776 = request(call5777, "size", [0]);
          var opresult5778 = request(opresult5775, "++(1)", [1], call5776);
          var string5779 = new GraceString(")");
          var opresult5780 = request(opresult5778, "++(1)", [1], string5779);
          return opresult5780;
        };    // end of method nameString
        this.methods["nameString"] = func5768;
        func5768.methodName = "nameString";
        func5768.paramCounts = [0];
        func5768.paramNames = [];
        func5768.definitionLine = 3081;
        func5768.definitionModule = "ast";
        var func5781 = function(argcv) {    // method canonicalName, line 3085
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          var if5782 = GraceDone;
          setLineNumber(3086);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5784 = selfRequest(this, "params", [0]);
          var call5783 = request(call5784, "isEmpty", [0]);
          if (Grace_isTrue(call5783)) {
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5785 = selfRequest(this, "name", [0]);
            return call5785;
          }
          setLineNumber(3087);    // compilenode string
          var string5786 = new GraceString("");
          var var_underScores = string5786;
          setLineNumber(3088);    // compilenode block
          var block5788 = new GraceBlock(this, 3088, 1);
          block5788.guard = jsTrue;
          block5788.real = function block5788(var___95____95__3) {
            setLineNumber(3088);    // compilenode op
            if (var_underScores === undefined) raiseUninitializedVariable("underScores");
            var string5789 = new GraceString("_");
            var opresult5790 = request(var_underScores, "++(1)", [1], string5789);
            var_underScores = opresult5790;
            return GraceDone;
          };
          let applyMeth5788 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5788.methodName = "apply(1)";
          applyMeth5788.paramCounts = [1];
          applyMeth5788.paramNames = ["__3"];
          applyMeth5788.definitionLine = 3088;
          applyMeth5788.definitionModule = "ast";
          block5788.methods["apply(1)"] = applyMeth5788;
          let matchesMeth5788 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5788.methodName = "matches(1)";
          matchesMeth5788.paramCounts = [1];
          matchesMeth5788.paramNames = ["__3"];
          matchesMeth5788.definitionLine = 3088;
          matchesMeth5788.definitionModule = "ast";
          block5788.methods["matches(1)"] = matchesMeth5788;
          setLineNumber(3089);    // compilenode block
          var block5791 = new GraceBlock(this, 3089, 0);
          block5791.guard = jsTrue;
          block5791.real = function block5791() {
            setLineNumber(3089);    // compilenode op
            if (var_underScores === undefined) raiseUninitializedVariable("underScores");
            var string5792 = new GraceString(",");
            var opresult5793 = request(var_underScores, "++(1)", [1], string5792);
            var_underScores = opresult5793;
            return GraceDone;
          };
          let applyMeth5791 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth5791.methodName = "apply";
          applyMeth5791.paramCounts = [0];
          applyMeth5791.paramNames = [];
          applyMeth5791.definitionLine = 3089;
          applyMeth5791.definitionModule = "ast";
          block5791.methods["apply"] = applyMeth5791;
          // call case 6: other requests
          setLineNumber(3088);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5794 = selfRequest(this, "params", [0]);
          var call5787 = request(call5794, "do(1)separatedBy(1)", [1, 1], block5788, block5791);
          setLineNumber(3090);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5795 = selfRequest(this, "name", [0]);
          var string5796 = new GraceString("(");
          var opresult5797 = request(call5795, "++(1)", [1], string5796);
          var opresult5798 = request(opresult5797, "++(1)", [1], var_underScores);
          var string5799 = new GraceString(")");
          var opresult5800 = request(opresult5798, "++(1)", [1], string5799);
          return opresult5800;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func5781;
        func5781.methodName = "canonicalName";
        func5781.paramCounts = [0];
        func5781.paramNames = [];
        func5781.definitionLine = 3085;
        func5781.definitionModule = "ast";
        var func5801 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 3093
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          var if5802 = GraceDone;
          setLineNumber(3094);    // compilenode call
          // call case 6: other requests
          var call5803 = request(var_visitor, "visitSignaturePart(1)up(1)", [1, 1], this, var_ac);
          if (Grace_isTrue(call5803)) {
            setLineNumber(3095);    // compilenode call
            // call case 6: other requests
            var call5804 = request(var_ac, "extend(1)", [1], this);
            var var_newChain = call5804;
            var if5805 = GraceDone;
            setLineNumber(3096);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5806 = selfRequest(this, "typeParams", [0]);
            var opresult5807 = request(GraceFalse, "\u2260(1)", [1], call5806);
            if (Grace_isTrue(opresult5807)) {
              setLineNumber(3097);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              // call case 4: self request with 0 args and 0 typeArgs 
              var call5809 = selfRequest(this, "typeParams", [0]);
              var call5808 = request(call5809, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              if5805 = call5808;
            }
            setLineNumber(3099);    // compilenode block
            var block5811 = new GraceBlock(this, 3099, 1);
            block5811.guard = jsTrue;
            block5811.real = function block5811(var_p) {
              setLineNumber(3099);    // compilenode call
              if (var_newChain === undefined) raiseUninitializedVariable("newChain");
              // call case 6: other requests
              var call5812 = request(var_p, "accept(1)from(1)", [1, 1], var_visitor, var_newChain);
              return call5812;
            };
            let applyMeth5811 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5811.methodName = "apply(1)";
            applyMeth5811.paramCounts = [1];
            applyMeth5811.paramNames = ["p"];
            applyMeth5811.definitionLine = 3099;
            applyMeth5811.definitionModule = "ast";
            block5811.methods["apply(1)"] = applyMeth5811;
            let matchesMeth5811 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5811.methodName = "matches(1)";
            matchesMeth5811.paramCounts = [1];
            matchesMeth5811.paramNames = ["p"];
            matchesMeth5811.definitionLine = 3099;
            matchesMeth5811.definitionModule = "ast";
            block5811.methods["matches(1)"] = matchesMeth5811;
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5813 = selfRequest(this, "params", [0]);
            var call5810 = request(call5813, "do(1)", [1], block5811);
            if5802 = call5810;
          }
          return if5802;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func5801;
        func5801.methodName = "accept(1)from(1)";
        func5801.paramCounts = [1, 1];
        func5801.paramNames = ["visitor", "ac"];
        func5801.definitionLine = 3093;
        func5801.definitionModule = "ast";
        var func5814 = function(argcv, var_ac) {    // method declarationKindWithAncestors(_), line 3103
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("declarationKindWithAncestors(_)", 0, numArgs - 1);
          }
          setLineNumber(3103);    // compilenode member
          // call case 6: other requests
          if (var_k === undefined) raiseUninitializedVariable("k");
          var call5815 = request(var_k, "parameter", [0]);
          return call5815;
        };    // end of method declarationKindWithAncestors(_)
        this.methods["declarationKindWithAncestors(1)"] = func5814;
        func5814.methodName = "declarationKindWithAncestors(1)";
        func5814.paramCounts = [1];
        func5814.paramNames = ["ac"];
        func5814.definitionLine = 3103;
        func5814.definitionModule = "ast";
        var func5816 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 3104
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(3105);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5817 = selfRequest(this, "shallowCopy", [0]);
          var var_nd = call5817;
          setLineNumber(3106);    // compilenode call
          // call case 6: other requests
          var call5818 = request(var_ac, "extend(1)", [1], var_nd);
          var var_newChain = call5818;
          setLineNumber(3107);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5821 = selfRequest(this, "params", [0]);
          // call case 2: outer request
          var call5820 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call5821, var_blk, var_newChain);
          // call case 6: other requests
          var call5819 = request(var_nd, "params:=(1)", [1], call5820);
          setLineNumber(3108);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5824 = selfRequest(this, "typeParams", [0]);
          // call case 2: outer request
          var call5823 = selfRequest(importedModules["ast"], "maybeMap(2)ancestors(1)", [2, 1], call5824, var_blk, var_newChain);
          // call case 6: other requests
          var call5822 = request(var_nd, "typeParams:=(1)", [1], call5823);
          setLineNumber(3109);    // compilenode call
          // call case 6: other requests
          var call5825 = request(var_blk, "apply(2)", [2], var_nd, var_ac);
          return call5825;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func5816;
        func5816.methodName = "map(1)ancestors(1)";
        func5816.paramCounts = [1, 1];
        func5816.paramNames = ["blk", "ac"];
        func5816.definitionLine = 3104;
        func5816.definitionModule = "ast";
        var func5826 = function(argcv, var_depth) {    // method pretty(_), line 3111
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(3112);    // compilenode string
          var string5827 = new GraceString("  ");
          var sum5828 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod5829 = request(string5827, "*(1)", [1], sum5828);
          var var_spc = prod5829;
          setLineNumber(3113);    // compilenode string
          var string5830 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5831 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult5832 = request(string5830, "++(1)", [1], call5831);
          var string5833 = new GraceString(": ");
          var opresult5834 = request(opresult5832, "++(1)", [1], string5833);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5835 = selfRequest(this, "name", [0]);
          var opresult5836 = request(opresult5834, "++(1)", [1], call5835);
          var string5837 = new GraceString("");
          var opresult5838 = request(opresult5836, "++(1)", [1], string5837);
          var var_s = opresult5838;
          var if5839 = GraceDone;
          setLineNumber(3114);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5840 = selfRequest(this, "hasTypeParams", [0]);
          if (Grace_isTrue(call5840)) {
            setLineNumber(3115);    // compilenode string
            var string5841 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5842 = request(string5841, "++(1)", [1], var_s);
            var string5843 = new GraceString("\n");
            var opresult5844 = request(opresult5842, "++(1)", [1], string5843);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5845 = request(opresult5844, "++(1)", [1], var_spc);
            var string5846 = new GraceString("Type Parameters:");
            var opresult5847 = request(opresult5845, "++(1)", [1], string5846);
            var_s = opresult5847;
            setLineNumber(3116);    // compilenode block
            var block5849 = new GraceBlock(this, 3116, 1);
            block5849.guard = jsTrue;
            block5849.real = function block5849(var_tp) {
              setLineNumber(3117);    // compilenode string
              var string5850 = new GraceString("");
              if (var_s === undefined) raiseUninitializedVariable("s");
              var opresult5851 = request(string5850, "++(1)", [1], var_s);
              var string5852 = new GraceString("\n  ");
              var opresult5853 = request(opresult5851, "++(1)", [1], string5852);
              if (var_spc === undefined) raiseUninitializedVariable("spc");
              var opresult5854 = request(opresult5853, "++(1)", [1], var_spc);
              var string5855 = new GraceString("");
              var opresult5856 = request(opresult5854, "++(1)", [1], string5855);
              var sum5858 = request(var_depth, "+(1)", [1], new GraceNum(2));
              // call case 6: other requests
              var call5857 = request(var_tp, "pretty(1)", [1], sum5858);
              var opresult5859 = request(opresult5856, "++(1)", [1], call5857);
              var string5860 = new GraceString("");
              var opresult5861 = request(opresult5859, "++(1)", [1], string5860);
              var_s = opresult5861;
              return GraceDone;
            };
            let applyMeth5849 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5849.methodName = "apply(1)";
            applyMeth5849.paramCounts = [1];
            applyMeth5849.paramNames = ["tp"];
            applyMeth5849.definitionLine = 3116;
            applyMeth5849.definitionModule = "ast";
            block5849.methods["apply(1)"] = applyMeth5849;
            let matchesMeth5849 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5849.methodName = "matches(1)";
            matchesMeth5849.paramCounts = [1];
            matchesMeth5849.paramNames = ["tp"];
            matchesMeth5849.definitionLine = 3116;
            matchesMeth5849.definitionModule = "ast";
            block5849.methods["matches(1)"] = matchesMeth5849;
            // call case 6: other requests
            setLineNumber(3116);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5862 = selfRequest(this, "typeParams", [0]);
            var call5848 = request(call5862, "do(1)", [1], block5849);
            if5839 = call5848;
          }
          var if5863 = GraceDone;
          setLineNumber(3120);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5866 = selfRequest(this, "params", [0]);
          var call5865 = request(call5866, "isEmpty", [0]);
          var call5864 = request(call5865, "not", [0]);
          if (Grace_isTrue(call5864)) {
            var string5867 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5868 = request(string5867, "++(1)", [1], var_s);
            var string5869 = new GraceString("\n");
            var opresult5870 = request(opresult5868, "++(1)", [1], string5869);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5871 = request(opresult5870, "++(1)", [1], var_spc);
            var string5872 = new GraceString("Parameters:");
            var opresult5873 = request(opresult5871, "++(1)", [1], string5872);
            var_s = opresult5873;
            if5863 = GraceDone;
          }
          setLineNumber(3121);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5875 = selfRequest(this, "params", [0]);
          var block5876 = new GraceBlock(this, 3121, 1);
          block5876.guard = jsTrue;
          block5876.real = function block5876(var_p) {
            setLineNumber(3122);    // compilenode string
            var string5877 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult5878 = request(string5877, "++(1)", [1], var_s);
            var string5879 = new GraceString("\n  ");
            var opresult5880 = request(opresult5878, "++(1)", [1], string5879);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult5881 = request(opresult5880, "++(1)", [1], var_spc);
            var string5882 = new GraceString("");
            var opresult5883 = request(opresult5881, "++(1)", [1], string5882);
            var sum5885 = request(var_depth, "+(1)", [1], new GraceNum(2));
            // call case 6: other requests
            var call5884 = request(var_p, "pretty(1)", [1], sum5885);
            var opresult5886 = request(opresult5883, "++(1)", [1], call5884);
            var string5887 = new GraceString("");
            var opresult5888 = request(opresult5886, "++(1)", [1], string5887);
            var_s = opresult5888;
            return GraceDone;
          };
          let applyMeth5876 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth5876.methodName = "apply(1)";
          applyMeth5876.paramCounts = [1];
          applyMeth5876.paramNames = ["p"];
          applyMeth5876.definitionLine = 3121;
          applyMeth5876.definitionModule = "ast";
          block5876.methods["apply(1)"] = applyMeth5876;
          let matchesMeth5876 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth5876.methodName = "matches(1)";
          matchesMeth5876.paramCounts = [1];
          matchesMeth5876.paramNames = ["p"];
          matchesMeth5876.definitionLine = 3121;
          matchesMeth5876.definitionModule = "ast";
          block5876.methods["matches(1)"] = matchesMeth5876;
          // call case 2: outer request
          var call5874 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call5875, block5876);
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func5826;
        func5826.methodName = "pretty(1)";
        func5826.paramCounts = [1];
        func5826.paramNames = ["depth"];
        func5826.definitionLine = 3111;
        func5826.definitionModule = "ast";
        var func5889 = function(argcv, var_depth) {    // method toGrace(_), line 3126
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(3127);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5890 = selfRequest(this, "name", [0]);
          var var_s = call5890;
          var if5891 = GraceDone;
          setLineNumber(3128);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5892 = selfRequest(this, "typeParams", [0]);
          var opresult5893 = request(GraceFalse, "\u2260(1)", [1], call5892);
          if (Grace_isTrue(opresult5893)) {
            setLineNumber(3129);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var sum5895 = request(var_depth, "+(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5896 = selfRequest(this, "typeParams", [0]);
            var call5894 = request(call5896, "toGrace(1)", [1], sum5895);
            var opresult5897 = request(var_s, "++(1)", [1], call5894);
            var_s = opresult5897;
            if5891 = GraceDone;
          }
          var if5898 = GraceDone;
          setLineNumber(3131);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5901 = selfRequest(this, "params", [0]);
          var call5900 = request(call5901, "isEmpty", [0]);
          var call5899 = request(call5900, "not", [0]);
          if (Grace_isTrue(call5899)) {
            setLineNumber(3132);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5902 = new GraceString("(");
            var opresult5903 = request(var_s, "++(1)", [1], string5902);
            var_s = opresult5903;
            setLineNumber(3133);    // compilenode block
            var block5905 = new GraceBlock(this, 3133, 1);
            block5905.guard = jsTrue;
            block5905.real = function block5905(var_each) {
              setLineNumber(3133);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var sum5907 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              var call5906 = request(var_each, "toGrace(1)", [1], sum5907);
              var opresult5908 = request(var_s, "++(1)", [1], call5906);
              var_s = opresult5908;
              return GraceDone;
            };
            let applyMeth5905 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth5905.methodName = "apply(1)";
            applyMeth5905.paramCounts = [1];
            applyMeth5905.paramNames = ["each"];
            applyMeth5905.definitionLine = 3133;
            applyMeth5905.definitionModule = "ast";
            block5905.methods["apply(1)"] = applyMeth5905;
            let matchesMeth5905 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth5905.methodName = "matches(1)";
            matchesMeth5905.paramCounts = [1];
            matchesMeth5905.paramNames = ["each"];
            matchesMeth5905.definitionLine = 3133;
            matchesMeth5905.definitionModule = "ast";
            block5905.methods["matches(1)"] = matchesMeth5905;
            setLineNumber(3134);    // compilenode block
            var block5909 = new GraceBlock(this, 3134, 0);
            block5909.guard = jsTrue;
            block5909.real = function block5909() {
              setLineNumber(3134);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string5910 = new GraceString(", ");
              var opresult5911 = request(var_s, "++(1)", [1], string5910);
              var_s = opresult5911;
              return GraceDone;
            };
            let applyMeth5909 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth5909.methodName = "apply";
            applyMeth5909.paramCounts = [0];
            applyMeth5909.paramNames = [];
            applyMeth5909.definitionLine = 3134;
            applyMeth5909.definitionModule = "ast";
            block5909.methods["apply"] = applyMeth5909;
            // call case 6: other requests
            setLineNumber(3133);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5912 = selfRequest(this, "params", [0]);
            var call5904 = request(call5912, "do(1)separatedBy(1)", [1, 1], block5905, block5909);
            setLineNumber(3135);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string5913 = new GraceString(")");
            var opresult5914 = request(var_s, "++(1)", [1], string5913);
            var_s = opresult5914;
            if5898 = GraceDone;
          }
          return var_s;
        };    // end of method toGrace(_)
        this.methods["toGrace(1)"] = func5889;
        func5889.methodName = "toGrace(1)";
        func5889.paramCounts = [1];
        func5889.paramNames = ["depth"];
        func5889.definitionLine = 3126;
        func5889.definitionModule = "ast";
        var func5915 = function(argcv) {    // method shallowCopy, line 3139
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(3140);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5918 = selfRequest(this, "name", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5919 = selfRequest(this, "params", [0]);
          // call case 6: other requests
          if (var_signaturePart === undefined) raiseUninitializedVariable("signaturePart");
          var call5917 = request(var_signaturePart, "partName(1)params(1)", [1, 1], call5918, call5919);
          var call5916 = request(call5917, "shallowCopyFieldsFrom(1)", [1], this);
          return call5916;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func5915;
        func5915.methodName = "shallowCopy";
        func5915.paramCounts = [0];
        func5915.paramNames = [];
        func5915.definitionLine = 3139;
        func5915.definitionModule = "ast";
        var func5920 = function(argcv, var_other) {    // method postCopy(_), line 3143
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(3144);    // compilenode member
          // call case 6: other requests
          var call5922 = request(var_other, "typeParams", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5921 = selfRequest(this, "typeParams:=(1)", [1], call5922);
          setLineNumber(3145);    // compilenode member
          // call case 6: other requests
          var call5924 = request(var_other, "lineLength", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call5923 = selfRequest(this, "lineLength:=(1)", [1], call5924);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func5920;
        func5920.methodName = "postCopy(1)";
        func5920.paramCounts = [1];
        func5920.paramNames = ["other"];
        func5920.definitionLine = 3143;
        func5920.definitionModule = "ast";
        var func5925 = function(argcv) {    // method asString, line 3148
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(3149);    // compilenode string
          var string5926 = new GraceString("part: ");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5927 = selfRequest(this, "nameString", [0]);
          var opresult5928 = request(string5926, "++(1)", [1], call5927);
          var string5929 = new GraceString("");
          var opresult5930 = request(opresult5928, "++(1)", [1], string5929);
          return opresult5930;
        };    // end of method asString
        this.methods["asString"] = func5925;
        func5925.methodName = "asString";
        func5925.paramCounts = [0];
        func5925.paramNames = [];
        func5925.definitionLine = 3148;
        func5925.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 3061;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5721_init = function() {    // init of object on line 3061
          initFun5722.call(this);
          setLineNumber(3063);    // compilenode string
          var string5931 = new GraceString("signaturepart");
          this.data.kind = string5931;
          this.data.name = var_n;
          this.data.params = var_ps;
          this.data.typeParams = GraceFalse;
          setLineNumber(3067);    // compilenode num
          this.data.lineLength = new GraceNum(0);
        };
        return obj5721_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5721_init = obj5721_build.call(inheritingObject, null, var_n, var_ps, this, aliases, exclusions);
      return obj5721_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method partName(_)params(_)$build(_,_,_)
    this.methods["partName(1)params(1)$build(3)"] = func5720;
    func5720.methodName = "partName(1)params(1)$build(3)";
    func5720.paramCounts = [1, 1];
    func5720.paramNames = ["n", "ps"];
    func5720.definitionLine = 3061;
    func5720.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 3044;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5701_init = function() {    // init of object on line 3044
    };
    return obj5701_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5701 = emptyGraceObject("signaturePart", "ast", 3044);
  var obj5701_init = obj5701_build.call(obj5701, null, this, [], []);
  obj5701_init.call(obj5701);  // end of compileobject
  var var_signaturePart = obj5701;
  var reader5932_signaturePart = function() {  // reader method signaturePart
      if (var_signaturePart === undefined) raiseUninitializedVariable("signaturePart");
      return var_signaturePart;
  };
  reader5932_signaturePart.isDef = true;
  this.methods["signaturePart"] = reader5932_signaturePart;
  setLineNumber(3154);    // compilenode object
  var obj5933_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_3154");
    this.outer_ast_3154 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func5934 = function(argcv) {    // method new, line 3155
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 0) && (numArgs !== 0)) {
          raiseTypeArgError("new", 0, numArgs - 0);
      }
      setLineNumber(3155);    // compilenode string
      var string5936 = new GraceString("");
      var array5937 = new GraceSequence([]);
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5935 = selfRequest(this, "request(1)withArgs(1)", [1, 1], string5936, array5937);
      return call5935;
    };    // end of method new
    this.methods["new"] = func5934;
    func5934.methodName = "new";
    func5934.paramCounts = [0];
    func5934.paramNames = [];
    func5934.definitionLine = 3155;
    func5934.definitionModule = "ast";
    var func5938 = function(argcv, var_name) {    // method request(_), line 3156
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("request(_)", 0, numArgs - 1);
      }
      setLineNumber(3156);    // compilenode array
      var array5940 = new GraceSequence([]);
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5939 = selfRequest(this, "request(1)withArgs(1)", [1, 1], var_name, array5940);
      return call5939;
    };    // end of method request(_)
    this.methods["request(1)"] = func5938;
    func5938.methodName = "request(1)";
    func5938.paramCounts = [1];
    func5938.paramNames = ["name"];
    func5938.definitionLine = 3156;
    func5938.definitionModule = "ast";
    var func5941 = function(argcv, var_name, var_argList, var_s) {    // method request(_)withArgs(_)scope(_), line 3157
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 3) && (numArgs !== 3)) {
          raiseTypeArgError("request(_)withArgs(_)scope(_)", 0, numArgs - 3);
      }
      setLineNumber(3158);    // compilenode call
      // call case 4: self request with 2 args and 0 typeArgs 
      var call5942 = selfRequest(this, "request(1)withArgs(1)", [1, 1], var_name, var_argList);
      var var_result = call5942;
      setLineNumber(3159);    // compilenode call
      // call case 6: other requests
      var call5943 = request(var_result, "scope:=(1)", [1], var_s);
      return var_result;
    };    // end of method request(_)withArgs(_)scope(_)
    this.methods["request(1)withArgs(1)scope(1)"] = func5941;
    func5941.methodName = "request(1)withArgs(1)scope(1)";
    func5941.paramCounts = [1, 1, 1];
    func5941.paramNames = ["name", "argList", "s"];
    func5941.definitionLine = 3157;
    func5941.definitionModule = "ast";
    var func5944 = function(argcv, var_rPart, var_xs) {    // method request(_)withArgs(_), line 3162
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("request(_)withArgs(_)", 0, numArgs - 2);
      }
      var ouc = emptyGraceObject("requestPart.request(_)withArgs(_)", "ast", 3162);
      var ouc_init = this.methods["request(1)withArgs(1)$build(3)"].call(this, null, var_rPart, var_xs, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method request(_)withArgs(_)
    this.methods["request(1)withArgs(1)"] = func5944;
    func5944.methodName = "request(1)withArgs(1)";
    func5944.paramCounts = [1, 1];
    func5944.paramNames = ["rPart", "xs"];
    func5944.definitionLine = 3162;
    func5944.definitionModule = "ast";
    var func5945 = function(argcv, var_rPart, var_xs, inheritingObject, aliases, exclusions) {    // method request(_)withArgs(_)$build(_,_,_), line 3162
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("request(_)withArgs(_)", 0, numArgs - 2);
      }
      var obj5946_build = function(ignore, var_rPart, var_xs, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_3162");
        this.outer_ast_3162 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(3163);    // reuse call
        var initFun5947 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader5948_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader5948_kind.isDef = true;
        this.methods["kind"] = reader5948_kind;
        this.data.name = undefined;
        var reader5949_name = function() {  // reader method name
            if (this.data.name === undefined) raiseUninitializedVariable("name");
            return this.data.name;
        };
        reader5949_name.isVar = true;
        this.methods["name"] = reader5949_name;
        var writer5950_name = function(argcv, n) {   // writer method name:=(_)
          this.data.name = n;
          return GraceDone;
        };
        this.methods["name:=(1)"] = writer5950_name;
        this.data.args = undefined;
        var reader5951_args = function() {  // reader method args
            if (this.data.args === undefined) raiseUninitializedVariable("args");
            return this.data.args;
        };
        reader5951_args.isVar = true;
        this.methods["args"] = reader5951_args;
        var writer5952_args = function(argcv, n) {   // writer method args:=(_)
          this.data.args = n;
          return GraceDone;
        };
        this.methods["args:=(1)"] = writer5952_args;
        this.data.typeArgs = undefined;
        var reader5953_typeArgs = function() {  // reader method typeArgs
            if (this.data.typeArgs === undefined) raiseUninitializedVariable("typeArgs");
            return this.data.typeArgs;
        };
        reader5953_typeArgs.isVar = true;
        reader5953_typeArgs.confidential = true;
        this.methods["typeArgs"] = reader5953_typeArgs;
        var writer5954_typeArgs = function(argcv, n) {   // writer method typeArgs:=(_)
          this.data.typeArgs = n;
          return GraceDone;
        };
        writer5954_typeArgs.confidential = true;
        this.methods["typeArgs:=(1)"] = writer5954_typeArgs;
        this.data.lineLength = undefined;
        var reader5955_lineLength = function() {  // reader method lineLength
            if (this.data.lineLength === undefined) raiseUninitializedVariable("lineLength");
            return this.data.lineLength;
        };
        reader5955_lineLength.isVar = true;
        this.methods["lineLength"] = reader5955_lineLength;
        var writer5956_lineLength = function(argcv, n) {   // writer method lineLength:=(_)
          this.data.lineLength = n;
          return GraceDone;
        };
        this.methods["lineLength:=(1)"] = writer5956_lineLength;
        var func5957 = function(argcv) {    // method end, line 3170
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          var if5958 = GraceDone;
          setLineNumber(3171);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5961 = selfRequest(this, "args", [0]);
          var call5960 = request(call5961, "isEmpty", [0]);
          var call5959 = request(call5960, "not", [0]);
          if (Grace_isTrue(call5959)) {
            setLineNumber(3172);    // compilenode member
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5964 = selfRequest(this, "args", [0]);
            var call5963 = request(call5964, "last", [0]);
            var call5962 = request(call5963, "end", [0]);
            return call5962;
          }
          var if5965 = GraceDone;
          setLineNumber(3174);    // compilenode member
          // call case 6: other requests
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5968 = selfRequest(this, "typeArgs", [0]);
          var call5967 = request(call5968, "isEmpty", [0]);
          var call5966 = request(call5967, "not", [0]);
          if (Grace_isTrue(call5966)) {
            setLineNumber(3175);    // compilenode string
            var string5970 = new GraceString("\u27e7");
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5973 = selfRequest(this, "typeArgs", [0]);
            var call5972 = request(call5973, "last", [0]);
            var call5971 = request(call5972, "end", [0]);
            // call case 2: outer request
            var call5969 = selfRequest(importedModules["ast"], "positionOfNext(1)after(1)", [1, 1], string5970, call5971);
            return call5969;
          }
          setLineNumber(3177);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5975 = selfRequest(this, "line", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5976 = selfRequest(this, "linePos", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5978 = selfRequest(this, "name", [0]);
          var call5977 = request(call5978, "size", [0]);
          var sum5979 = request(call5976, "+(1)", [1], call5977);
          var diff5980 = request(sum5979, "-(1)", [1], new GraceNum(1));
          // call case 2: outer request
          var call5974 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call5975, diff5980);
          return call5974;
        };    // end of method end
        this.methods["end"] = func5957;
        func5957.methodName = "end";
        func5957.paramCounts = [0];
        func5957.paramNames = [];
        func5957.definitionLine = 3170;
        func5957.definitionModule = "ast";
        var func5981 = function(argcv) {    // method nameString, line 3179
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("nameString", 0, numArgs - 0);
          }
          var if5982 = GraceDone;
          setLineNumber(3180);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5984 = selfRequest(this, "args", [0]);
          var call5983 = request(call5984, "size", [0]);
          var opresult5985 = request(call5983, "==(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult5985)) {
            // call case 4: self request with 0 args and 0 typeArgs 
            var call5986 = selfRequest(this, "name", [0]);
            return call5986;
          }
          setLineNumber(3181);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5987 = selfRequest(this, "name", [0]);
          var string5988 = new GraceString("(");
          var opresult5989 = request(call5987, "++(1)", [1], string5988);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5991 = selfRequest(this, "args", [0]);
          var call5990 = request(call5991, "size", [0]);
          var opresult5992 = request(opresult5989, "++(1)", [1], call5990);
          var string5993 = new GraceString(")");
          var opresult5994 = request(opresult5992, "++(1)", [1], string5993);
          return opresult5994;
        };    // end of method nameString
        this.methods["nameString"] = func5981;
        func5981.methodName = "nameString";
        func5981.paramCounts = [0];
        func5981.paramNames = [];
        func5981.definitionLine = 3179;
        func5981.definitionModule = "ast";
        var func5995 = function(argcv) {    // method canonicalName, line 3184
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("canonicalName", 0, numArgs - 0);
          }
          var if5996 = GraceDone;
          setLineNumber(3185);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call5998 = selfRequest(this, "args", [0]);
          var call5997 = request(call5998, "size", [0]);
          var opresult5999 = request(call5997, "==(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult5999)) {
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6000 = selfRequest(this, "name", [0]);
            return call6000;
          }
          setLineNumber(3186);    // compilenode string
          var string6001 = new GraceString("");
          var var_underScores = string6001;
          setLineNumber(3187);    // compilenode block
          var block6003 = new GraceBlock(this, 3187, 1);
          block6003.guard = jsTrue;
          block6003.real = function block6003(var___95____95__4) {
            setLineNumber(3187);    // compilenode op
            if (var_underScores === undefined) raiseUninitializedVariable("underScores");
            var string6004 = new GraceString("_");
            var opresult6005 = request(var_underScores, "++(1)", [1], string6004);
            var_underScores = opresult6005;
            return GraceDone;
          };
          let applyMeth6003 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth6003.methodName = "apply(1)";
          applyMeth6003.paramCounts = [1];
          applyMeth6003.paramNames = ["__4"];
          applyMeth6003.definitionLine = 3187;
          applyMeth6003.definitionModule = "ast";
          block6003.methods["apply(1)"] = applyMeth6003;
          let matchesMeth6003 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth6003.methodName = "matches(1)";
          matchesMeth6003.paramCounts = [1];
          matchesMeth6003.paramNames = ["__4"];
          matchesMeth6003.definitionLine = 3187;
          matchesMeth6003.definitionModule = "ast";
          block6003.methods["matches(1)"] = matchesMeth6003;
          setLineNumber(3188);    // compilenode block
          var block6006 = new GraceBlock(this, 3188, 0);
          block6006.guard = jsTrue;
          block6006.real = function block6006() {
            setLineNumber(3188);    // compilenode op
            if (var_underScores === undefined) raiseUninitializedVariable("underScores");
            var string6007 = new GraceString(",");
            var opresult6008 = request(var_underScores, "++(1)", [1], string6007);
            var_underScores = opresult6008;
            return GraceDone;
          };
          let applyMeth6006 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth6006.methodName = "apply";
          applyMeth6006.paramCounts = [0];
          applyMeth6006.paramNames = [];
          applyMeth6006.definitionLine = 3188;
          applyMeth6006.definitionModule = "ast";
          block6006.methods["apply"] = applyMeth6006;
          // call case 6: other requests
          setLineNumber(3187);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6009 = selfRequest(this, "args", [0]);
          var call6002 = request(call6009, "do(1)separatedBy(1)", [1, 1], block6003, block6006);
          setLineNumber(3189);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6010 = selfRequest(this, "name", [0]);
          var string6011 = new GraceString("(");
          var opresult6012 = request(call6010, "++(1)", [1], string6011);
          var opresult6013 = request(opresult6012, "++(1)", [1], var_underScores);
          var string6014 = new GraceString(")");
          var opresult6015 = request(opresult6013, "++(1)", [1], string6014);
          return opresult6015;
        };    // end of method canonicalName
        this.methods["canonicalName"] = func5995;
        func5995.methodName = "canonicalName";
        func5995.paramCounts = [0];
        func5995.paramNames = [];
        func5995.definitionLine = 3184;
        func5995.definitionModule = "ast";
        var func6016 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 3192
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(3193);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6017 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call6017;
          setLineNumber(3194);    // compilenode call
          // call case 6: other requests
          var call6018 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call6018;
          setLineNumber(3195);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6021 = selfRequest(this, "args", [0]);
          // call case 2: outer request
          var call6020 = selfRequest(importedModules["ast"], "listMap(2)ancestors(1)", [2, 1], call6021, var_blk, var_newChain);
          // call case 6: other requests
          var call6019 = request(var_n, "args:=(1)", [1], call6020);
          setLineNumber(3196);    // compilenode call
          // call case 6: other requests
          var call6022 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call6022;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func6016;
        func6016.methodName = "map(1)ancestors(1)";
        func6016.paramCounts = [1, 1];
        func6016.paramNames = ["blk", "ac"];
        func6016.definitionLine = 3192;
        func6016.definitionModule = "ast";
        var func6023 = function(argcv, var_depth) {    // method pretty(_), line 3198
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(3199);    // compilenode string
          var string6024 = new GraceString("  ");
          var sum6025 = request(var_depth, "+(1)", [1], new GraceNum(1));
          var prod6026 = request(string6024, "*(1)", [1], sum6025);
          var var_spc = prod6026;
          setLineNumber(3200);    // compilenode string
          var string6027 = new GraceString("");
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6028 = selfRequest(this, "basePretty(1)", [1], var_depth);
          var opresult6029 = request(string6027, "++(1)", [1], call6028);
          var string6030 = new GraceString(": ");
          var opresult6031 = request(opresult6029, "++(1)", [1], string6030);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6032 = selfRequest(this, "name", [0]);
          var opresult6033 = request(opresult6031, "++(1)", [1], call6032);
          var string6034 = new GraceString("");
          var opresult6035 = request(opresult6033, "++(1)", [1], string6034);
          var var_s = opresult6035;
          setLineNumber(3201);    // compilenode string
          var string6036 = new GraceString("");
          var opresult6037 = request(string6036, "++(1)", [1], var_s);
          var string6038 = new GraceString("\n");
          var opresult6039 = request(opresult6037, "++(1)", [1], string6038);
          var opresult6040 = request(opresult6039, "++(1)", [1], var_spc);
          var string6041 = new GraceString("Args:");
          var opresult6042 = request(opresult6040, "++(1)", [1], string6041);
          var_s = opresult6042;
          setLineNumber(3202);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6044 = selfRequest(this, "args", [0]);
          var block6045 = new GraceBlock(this, 3202, 1);
          block6045.guard = jsTrue;
          block6045.real = function block6045(var_a) {
            setLineNumber(3203);    // compilenode string
            var string6046 = new GraceString("");
            if (var_s === undefined) raiseUninitializedVariable("s");
            var opresult6047 = request(string6046, "++(1)", [1], var_s);
            var string6048 = new GraceString("\n  ");
            var opresult6049 = request(opresult6047, "++(1)", [1], string6048);
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var opresult6050 = request(opresult6049, "++(1)", [1], var_spc);
            var string6051 = new GraceString("");
            var opresult6052 = request(opresult6050, "++(1)", [1], string6051);
            var sum6054 = request(var_depth, "+(1)", [1], new GraceNum(3));
            // call case 6: other requests
            var call6053 = request(var_a, "pretty(1)", [1], sum6054);
            var opresult6055 = request(opresult6052, "++(1)", [1], call6053);
            var string6056 = new GraceString("");
            var opresult6057 = request(opresult6055, "++(1)", [1], string6056);
            var_s = opresult6057;
            return GraceDone;
          };
          let applyMeth6045 = function apply_1 (argcv, ...args) {
              if (this.guard.apply(this.receiver, args))
                  return this.real.apply(this.receiver, args);
              badBlockArgs.apply(this, args);
          };
          applyMeth6045.methodName = "apply(1)";
          applyMeth6045.paramCounts = [1];
          applyMeth6045.paramNames = ["a"];
          applyMeth6045.definitionLine = 3202;
          applyMeth6045.definitionModule = "ast";
          block6045.methods["apply(1)"] = applyMeth6045;
          let matchesMeth6045 = function matches_1 (argcv, ...args) {
              return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
          };
          matchesMeth6045.methodName = "matches(1)";
          matchesMeth6045.paramCounts = [1];
          matchesMeth6045.paramNames = ["a"];
          matchesMeth6045.definitionLine = 3202;
          matchesMeth6045.definitionModule = "ast";
          block6045.methods["matches(1)"] = matchesMeth6045;
          // call case 2: outer request
          var call6043 = selfRequest(var_prelude, "for(1)do(1)", [1, 1], call6044, block6045);
          return var_s;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func6023;
        func6023.methodName = "pretty(1)";
        func6023.paramCounts = [1];
        func6023.paramNames = ["depth"];
        func6023.definitionLine = 3198;
        func6023.definitionModule = "ast";
        var func6058 = function(argcv, var_depth) {    // method toGrace(_), line 3207
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          setLineNumber(3208);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6059 = selfRequest(this, "name", [0]);
          var var_s = call6059;
          var if6060 = GraceDone;
          setLineNumber(3209);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6062 = selfRequest(this, "typeArgs", [0]);
          var call6061 = request(call6062, "size", [0]);
          var opresult6063 = request(call6061, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult6063)) {
            setLineNumber(3210);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string6064 = new GraceString("\u27e6");
            var opresult6065 = request(var_s, "++(1)", [1], string6064);
            var_s = opresult6065;
            setLineNumber(3211);    // compilenode block
            var block6067 = new GraceBlock(this, 3211, 1);
            block6067.guard = jsTrue;
            block6067.real = function block6067(var_tArg) {
              setLineNumber(3212);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var sum6069 = request(var_depth, "+(1)", [1], new GraceNum(1));
              // call case 6: other requests
              var call6068 = request(var_tArg, "toGrace(1)", [1], sum6069);
              var opresult6070 = request(var_s, "++(1)", [1], call6068);
              var_s = opresult6070;
              return GraceDone;
            };
            let applyMeth6067 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth6067.methodName = "apply(1)";
            applyMeth6067.paramCounts = [1];
            applyMeth6067.paramNames = ["tArg"];
            applyMeth6067.definitionLine = 3211;
            applyMeth6067.definitionModule = "ast";
            block6067.methods["apply(1)"] = applyMeth6067;
            let matchesMeth6067 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth6067.methodName = "matches(1)";
            matchesMeth6067.paramCounts = [1];
            matchesMeth6067.paramNames = ["tArg"];
            matchesMeth6067.definitionLine = 3211;
            matchesMeth6067.definitionModule = "ast";
            block6067.methods["matches(1)"] = matchesMeth6067;
            setLineNumber(3213);    // compilenode block
            var block6071 = new GraceBlock(this, 3213, 0);
            block6071.guard = jsTrue;
            block6071.real = function block6071() {
              setLineNumber(3213);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string6072 = new GraceString(", ");
              var opresult6073 = request(var_s, "++(1)", [1], string6072);
              var_s = opresult6073;
              return GraceDone;
            };
            let applyMeth6071 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth6071.methodName = "apply";
            applyMeth6071.paramCounts = [0];
            applyMeth6071.paramNames = [];
            applyMeth6071.definitionLine = 3213;
            applyMeth6071.definitionModule = "ast";
            block6071.methods["apply"] = applyMeth6071;
            // call case 6: other requests
            setLineNumber(3211);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6074 = selfRequest(this, "typeArgs", [0]);
            var call6066 = request(call6074, "do(1)separatedBy(1)", [1, 1], block6067, block6071);
            setLineNumber(3214);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string6075 = new GraceString("\u27e7");
            var opresult6076 = request(var_s, "++(1)", [1], string6075);
            var_s = opresult6076;
            if6060 = GraceDone;
          }
          var if6077 = GraceDone;
          setLineNumber(3216);    // compilenode member
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6079 = selfRequest(this, "args", [0]);
          var call6078 = request(call6079, "size", [0]);
          var opresult6080 = request(call6078, ">(1)", [1], new GraceNum(0));
          if (Grace_isTrue(opresult6080)) {
            setLineNumber(3217);    // compilenode member
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6082 = selfRequest(this, "args", [0]);
            var call6081 = request(call6082, "size", [0]);
            var opresult6083 = request(call6081, ">(1)", [1], new GraceNum(1));
            // call case 6: other requests
            // call case 6: other requests
            // call case 6: other requests
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6087 = selfRequest(this, "args", [0]);
            var call6086 = request(call6087, "first", [0]);
            var call6085 = request(call6086, "isDelimited", [0]);
            var call6084 = request(call6085, "not", [0]);
            var opresult6088 = request(opresult6083, "||(1)", [1], call6084);
            var var_needsParens = opresult6088;
            setLineNumber(3218);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var if6089 = GraceDone;
            if (var_needsParens === undefined) raiseUninitializedVariable("needsParens");
            if (Grace_isTrue(var_needsParens)) {
              var string6090 = new GraceString("(");
              if6089 = string6090;
            } else {
              var string6091 = new GraceString(" ");
              if6089 = string6091;
            }
            var opresult6092 = request(var_s, "++(1)", [1], if6089);
            var_s = opresult6092;
            setLineNumber(3219);    // compilenode block
            var block6094 = new GraceBlock(this, 3219, 1);
            block6094.guard = jsTrue;
            block6094.real = function block6094(var_arg) {
              setLineNumber(3220);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              // call case 6: other requests
              var call6095 = request(var_arg, "toGrace(1)", [1], var_depth);
              var opresult6096 = request(var_s, "++(1)", [1], call6095);
              var_s = opresult6096;
              return GraceDone;
            };
            let applyMeth6094 = function apply_1 (argcv, ...args) {
                if (this.guard.apply(this.receiver, args))
                    return this.real.apply(this.receiver, args);
                badBlockArgs.apply(this, args);
            };
            applyMeth6094.methodName = "apply(1)";
            applyMeth6094.paramCounts = [1];
            applyMeth6094.paramNames = ["arg"];
            applyMeth6094.definitionLine = 3219;
            applyMeth6094.definitionModule = "ast";
            block6094.methods["apply(1)"] = applyMeth6094;
            let matchesMeth6094 = function matches_1 (argcv, ...args) {
                return this.guard.apply(this.receiver, args) ? GraceTrue : GraceFalse;
            };
            matchesMeth6094.methodName = "matches(1)";
            matchesMeth6094.paramCounts = [1];
            matchesMeth6094.paramNames = ["arg"];
            matchesMeth6094.definitionLine = 3219;
            matchesMeth6094.definitionModule = "ast";
            block6094.methods["matches(1)"] = matchesMeth6094;
            setLineNumber(3221);    // compilenode block
            var block6097 = new GraceBlock(this, 3221, 0);
            block6097.guard = jsTrue;
            block6097.real = function block6097() {
              setLineNumber(3222);    // compilenode op
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string6098 = new GraceString(", ");
              var opresult6099 = request(var_s, "++(1)", [1], string6098);
              var_s = opresult6099;
              return GraceDone;
            };
            let applyMeth6097 = function apply (argcv) {
                return this.real.apply(this.receiver);
            };
            applyMeth6097.methodName = "apply";
            applyMeth6097.paramCounts = [0];
            applyMeth6097.paramNames = [];
            applyMeth6097.definitionLine = 3221;
            applyMeth6097.definitionModule = "ast";
            block6097.methods["apply"] = applyMeth6097;
            // call case 6: other requests
            setLineNumber(3219);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6100 = selfRequest(this, "args", [0]);
            var call6093 = request(call6100, "do(1)separatedBy(1)", [1, 1], block6094, block6097);
            var if6101 = GraceDone;
            setLineNumber(3224);    // compilenode if
            if (var_needsParens === undefined) raiseUninitializedVariable("needsParens");
            if (Grace_isTrue(var_needsParens)) {
              if (var_s === undefined) raiseUninitializedVariable("s");
              var string6102 = new GraceString(")");
              var opresult6103 = request(var_s, "++(1)", [1], string6102);
              var_s = opresult6103;
              if6101 = GraceDone;
            }
            if6077 = if6101;
          }
          return var_s;
        };    // end of method toGrace(_)
        this.methods["toGrace(1)"] = func6058;
        func6058.methodName = "toGrace(1)";
        func6058.paramCounts = [1];
        func6058.paramNames = ["depth"];
        func6058.definitionLine = 3207;
        func6058.definitionModule = "ast";
        var func6104 = function(argcv) {    // method shallowCopy, line 3229
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(3230);    // compilenode call
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6107 = selfRequest(this, "name", [0]);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6108 = selfRequest(this, "args", [0]);
          // call case 6: other requests
          if (var_requestPart === undefined) raiseUninitializedVariable("requestPart");
          var call6106 = request(var_requestPart, "request(1)withArgs(1)", [1, 1], call6107, call6108);
          var call6105 = request(call6106, "shallowCopyFieldsFrom(1)", [1], this);
          return call6105;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func6104;
        func6104.methodName = "shallowCopy";
        func6104.paramCounts = [0];
        func6104.paramNames = [];
        func6104.definitionLine = 3229;
        func6104.definitionModule = "ast";
        var func6109 = function(argcv, var_other) {    // method postCopy(_), line 3232
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(3233);    // compilenode member
          // call case 6: other requests
          var call6111 = request(var_other, "lineLength", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6110 = selfRequest(this, "lineLength:=(1)", [1], call6111);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func6109;
        func6109.methodName = "postCopy(1)";
        func6109.paramCounts = [1];
        func6109.paramNames = ["other"];
        func6109.definitionLine = 3232;
        func6109.definitionModule = "ast";
        var func6112 = function(argcv) {    // method statementName, line 3236
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("statementName", 0, numArgs - 0);
          }
          setLineNumber(3236);    // compilenode string
          var string6113 = new GraceString("request");
          return string6113;
        };    // end of method statementName
        this.methods["statementName"] = func6112;
        func6112.methodName = "statementName";
        func6112.paramCounts = [0];
        func6112.paramNames = [];
        func6112.definitionLine = 3236;
        func6112.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 3162;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj5946_init = function() {    // init of object on line 3162
          initFun5947.call(this);
          setLineNumber(3164);    // compilenode string
          var string6114 = new GraceString("callwithpart");
          this.data.kind = string6114;
          this.data.name = var_rPart;
          this.data.args = var_xs;
          if (var_emptySeq === undefined) raiseUninitializedVariable("emptySeq");
          this.data.typeArgs = var_emptySeq;
          setLineNumber(3168);    // compilenode num
          this.data.lineLength = new GraceNum(0);
        };
        return obj5946_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj5946_init = obj5946_build.call(inheritingObject, null, var_rPart, var_xs, this, aliases, exclusions);
      return obj5946_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method request(_)withArgs(_)$build(_,_,_)
    this.methods["request(1)withArgs(1)$build(3)"] = func5945;
    func5945.methodName = "request(1)withArgs(1)$build(3)";
    func5945.paramCounts = [1, 1];
    func5945.paramNames = ["rPart", "xs"];
    func5945.definitionLine = 3162;
    func5945.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 3154;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj5933_init = function() {    // init of object on line 3154
    };
    return obj5933_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj5933 = emptyGraceObject("requestPart", "ast", 3154);
  var obj5933_init = obj5933_build.call(obj5933, null, this, [], []);
  obj5933_init.call(obj5933);  // end of compileobject
  var var_requestPart = obj5933;
  var reader6115_requestPart = function() {  // reader method requestPart
      if (var_requestPart === undefined) raiseUninitializedVariable("requestPart");
      return var_requestPart;
  };
  reader6115_requestPart.isDef = true;
  this.methods["requestPart"] = reader6115_requestPart;
  setLineNumber(3240);    // compilenode object
  var obj6116_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_3240");
    this.outer_ast_3240 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    var func6117 = function(argcv, var_val__39__) {    // method new(_), line 3241
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var ouc = emptyGraceObject("commentNode.new(_)", "ast", 3241);
      var ouc_init = this.methods["new(1)$build(3)"].call(this, null, var_val__39__, ouc, [], []);
      ouc_init.call(ouc);
      return ouc;
    };    // end of method new(_)
    this.methods["new(1)"] = func6117;
    func6117.methodName = "new(1)";
    func6117.paramCounts = [1];
    func6117.paramNames = ["val'"];
    func6117.definitionLine = 3241;
    func6117.definitionModule = "ast";
    var func6118 = function(argcv, var_val__39__, inheritingObject, aliases, exclusions) {    // method new(_)$build(_,_,_), line 3241
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 4;
      if ((numArgs > 1) && (numArgs !== 1)) {
          raiseTypeArgError("new(_)", 0, numArgs - 1);
      }
      var obj6119_build = function(ignore, var_val__39__, outerObj, aliases, exclusions) {
        this.closureKeys = this.closureKeys || [];
        this.closureKeys.push("outer_ast_3241");
        this.outer_ast_3241 = outerObj;
        const inheritedExclusions = { };
        for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
            const exMeth = exclusions[eix];
            inheritedExclusions[exMeth] = this.methods[exMeth]; };
        setLineNumber(3242);    // reuse call
        var initFun6120 = selfRequest(importedModules["ast"], "baseNode$build(3)", [null], this, [], []);  // compileReuseCall
        this.data.kind = undefined;
        var reader6121_kind = function() {  // reader method kind
            if (this.data.kind === undefined) raiseUninitializedVariable("kind");
            return this.data.kind;
        };
        reader6121_kind.isDef = true;
        this.methods["kind"] = reader6121_kind;
        this.data.value = undefined;
        var reader6122_value = function() {  // reader method value
            if (this.data.value === undefined) raiseUninitializedVariable("value");
            return this.data.value;
        };
        reader6122_value.isVar = true;
        this.methods["value"] = reader6122_value;
        var writer6123_value = function(argcv, n) {   // writer method value:=(_)
          this.data.value = n;
          return GraceDone;
        };
        this.methods["value:=(1)"] = writer6123_value;
        this.data.isPartialLine = undefined;
        var reader6124_isPartialLine = function() {  // reader method isPartialLine
            if (this.data.isPartialLine === undefined) raiseUninitializedVariable("isPartialLine");
            return this.data.isPartialLine;
        };
        reader6124_isPartialLine.isVar = true;
        this.methods["isPartialLine"] = reader6124_isPartialLine;
        var writer6125_isPartialLine = function(argcv, n) {   // writer method isPartialLine:=(_)
          this.data.isPartialLine = n;
          return GraceDone;
        };
        this.methods["isPartialLine:=(1)"] = writer6125_isPartialLine;
        this.data.isPreceededByBlankLine = undefined;
        var reader6126_isPreceededByBlankLine = function() {  // reader method isPreceededByBlankLine
            if (this.data.isPreceededByBlankLine === undefined) raiseUninitializedVariable("isPreceededByBlankLine");
            return this.data.isPreceededByBlankLine;
        };
        reader6126_isPreceededByBlankLine.isVar = true;
        this.methods["isPreceededByBlankLine"] = reader6126_isPreceededByBlankLine;
        var writer6127_isPreceededByBlankLine = function(argcv, n) {   // writer method isPreceededByBlankLine:=(_)
          this.data.isPreceededByBlankLine = n;
          return GraceDone;
        };
        this.methods["isPreceededByBlankLine:=(1)"] = writer6127_isPreceededByBlankLine;
        this.data.endLine = undefined;
        var reader6128_endLine = function() {  // reader method endLine
            if (this.data.endLine === undefined) raiseUninitializedVariable("endLine");
            return this.data.endLine;
        };
        reader6128_endLine.isVar = true;
        this.methods["endLine"] = reader6128_endLine;
        var writer6129_endLine = function(argcv, n) {   // writer method endLine:=(_)
          this.data.endLine = n;
          return GraceDone;
        };
        this.methods["endLine:=(1)"] = writer6129_endLine;
        var func6130 = function(argcv) {    // method end, line 3249
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("end", 0, numArgs - 0);
          }
          setLineNumber(3249);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6132 = selfRequest(this, "endLine", [0]);
          // call case 6: other requests
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6135 = selfRequest(this, "endLine", [0]);
          // call case 6: other requests
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call6136 = request(var_util, "lines", [0]);
          var call6134 = request(call6136, "at(1)", [1], call6135);
          var call6133 = request(call6134, "size", [0]);
          // call case 2: outer request
          var call6131 = selfRequest(importedModules["ast"], "line(1)column(1)", [1, 1], call6132, call6133);
          return call6131;
        };    // end of method end
        this.methods["end"] = func6130;
        func6130.methodName = "end";
        func6130.paramCounts = [0];
        func6130.paramNames = [];
        func6130.definitionLine = 3249;
        func6130.definitionModule = "ast";
        var func6137 = function(argcv) {     // accessor method isComment
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isComment", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isComment
        this.methods["isComment"] = func6137;
        func6137.methodName = "isComment";
        func6137.paramCounts = [0];
        func6137.paramNames = [];
        func6137.definitionLine = 3250;
        func6137.definitionModule = "ast";
        var func6138 = function(argcv) {     // accessor method isLegalInTrait
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isLegalInTrait", 0, numArgs - 0);
          return GraceTrue;
        };    // end of method isLegalInTrait
        this.methods["isLegalInTrait"] = func6138;
        func6138.methodName = "isLegalInTrait";
        func6138.paramCounts = [0];
        func6138.paramNames = [];
        func6138.definitionLine = 3251;
        func6138.definitionModule = "ast";
        var func6139 = function(argcv) {     // accessor method isExecutable
          const numArgs = arguments.length - 1;
          if (numArgs > 0) raiseTypeArgError("isExecutable", 0, numArgs - 0);
          return GraceFalse;
        };    // end of method isExecutable
        this.methods["isExecutable"] = func6139;
        func6139.methodName = "isExecutable";
        func6139.paramCounts = [0];
        func6139.paramNames = [];
        func6139.definitionLine = 3252;
        func6139.definitionModule = "ast";
        var func6140 = function(argcv) {    // method asString, line 3253
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("asString", 0, numArgs - 0);
          }
          setLineNumber(3253);    // compilenode string
          var string6141 = new GraceString("comment (");
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6142 = selfRequest(this, "line", [0]);
          var opresult6143 = request(string6141, "++(1)", [1], call6142);
          var string6144 = new GraceString("\u2013");
          var opresult6145 = request(opresult6143, "++(1)", [1], string6144);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6146 = selfRequest(this, "endLine", [0]);
          var opresult6147 = request(opresult6145, "++(1)", [1], call6146);
          var string6148 = new GraceString("): ");
          var opresult6149 = request(opresult6147, "++(1)", [1], string6148);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6150 = selfRequest(this, "value", [0]);
          var opresult6151 = request(opresult6149, "++(1)", [1], call6150);
          var string6152 = new GraceString("");
          var opresult6153 = request(opresult6151, "++(1)", [1], string6152);
          return opresult6153;
        };    // end of method asString
        this.methods["asString"] = func6140;
        func6140.methodName = "asString";
        func6140.paramCounts = [0];
        func6140.paramNames = [];
        func6140.definitionLine = 3253;
        func6140.definitionModule = "ast";
        var func6154 = function(argcv, var_cmtNode) {    // method extendCommentUsing(_), line 3254
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("extendCommentUsing(_)", 0, numArgs - 1);
          }
          setLineNumber(3255);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6156 = selfRequest(this, "value", [0]);
          var string6157 = new GraceString(" ");
          var opresult6158 = request(call6156, "++(1)", [1], string6157);
          // call case 6: other requests
          var call6159 = request(var_cmtNode, "value", [0]);
          var opresult6160 = request(opresult6158, "++(1)", [1], call6159);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6155 = selfRequest(this, "value:=(1)", [1], opresult6160);
          setLineNumber(3256);    // compilenode member
          // call case 6: other requests
          var call6162 = request(var_cmtNode, "endLine", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6161 = selfRequest(this, "endLine:=(1)", [1], call6162);
          return call6161;
        };    // end of method extendCommentUsing(_)
        this.methods["extendCommentUsing(1)"] = func6154;
        func6154.methodName = "extendCommentUsing(1)";
        func6154.paramCounts = [1];
        func6154.paramNames = ["cmtNode"];
        func6154.definitionLine = 3254;
        func6154.definitionModule = "ast";
        var func6163 = function(argcv, var_blk, var_ac) {    // method map(_)ancestors(_), line 3258
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("map(_)ancestors(_)", 0, numArgs - 2);
          }
          setLineNumber(3259);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6164 = selfRequest(this, "shallowCopy", [0]);
          var var_n = call6164;
          setLineNumber(3260);    // compilenode call
          // call case 6: other requests
          var call6165 = request(var_ac, "extend(1)", [1], var_n);
          var var_newChain = call6165;
          setLineNumber(3261);    // compilenode call
          // call case 6: other requests
          var call6166 = request(var_blk, "apply(2)", [2], var_n, var_ac);
          return call6166;
        };    // end of method map(_)ancestors(_)
        this.methods["map(1)ancestors(1)"] = func6163;
        func6163.methodName = "map(1)ancestors(1)";
        func6163.paramCounts = [1, 1];
        func6163.paramNames = ["blk", "ac"];
        func6163.definitionLine = 3258;
        func6163.definitionModule = "ast";
        var func6167 = function(argcv, var_visitor, var_ac) {    // method accept(_)from(_), line 3263
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 2) && (numArgs !== 2)) {
              raiseTypeArgError("accept(_)from(_)", 0, numArgs - 2);
          }
          setLineNumber(3264);    // compilenode call
          // call case 6: other requests
          var call6168 = request(var_visitor, "visitComment(1)up(1)", [1, 1], this, var_ac);
          return call6168;
        };    // end of method accept(_)from(_)
        this.methods["accept(1)from(1)"] = func6167;
        func6167.methodName = "accept(1)from(1)";
        func6167.paramCounts = [1, 1];
        func6167.paramNames = ["visitor", "ac"];
        func6167.definitionLine = 3263;
        func6167.definitionModule = "ast";
        var func6169 = function(argcv, var_depth) {    // method pretty(_), line 3266
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("pretty(_)", 0, numArgs - 1);
          }
          setLineNumber(3267);    // compilenode string
          var string6170 = new GraceString("\n");
          var var_s = string6170;
          setLineNumber(3268);    // compilenode num
          var diff6172 = request(var_depth, "-(1)", [1], new GraceNum(1));
          var block6173 = new GraceBlock(this, 3268, 0);
          block6173.guard = jsTrue;
          block6173.real = function block6173() {
            setLineNumber(3269);    // compilenode op
            if (var_s === undefined) raiseUninitializedVariable("s");
            var string6174 = new GraceString("  ");
            var opresult6175 = request(var_s, "++(1)", [1], string6174);
            var_s = opresult6175;
            return GraceDone;
          };
          let applyMeth6173 = function apply (argcv) {
              return this.real.apply(this.receiver);
          };
          applyMeth6173.methodName = "apply";
          applyMeth6173.paramCounts = [0];
          applyMeth6173.paramNames = [];
          applyMeth6173.definitionLine = 3268;
          applyMeth6173.definitionModule = "ast";
          block6173.methods["apply"] = applyMeth6173;
          // call case 2: outer request
          var call6171 = selfRequest(var_prelude, "repeat(1)times(1)", [1, 1], diff6172, block6173);
          var if6176 = GraceDone;
          setLineNumber(3271);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6177 = selfRequest(this, "isPreceededByBlankLine", [0]);
          if (Grace_isTrue(call6177)) {
            var string6178 = new GraceString(" > blank");
            if6176 = string6178;
          } else {
            var string6179 = new GraceString("");
            if6176 = string6179;
          }
          var var_pb = if6176;
          setLineNumber(3272);    // compilenode string
          var string6180 = new GraceString("");
          var opresult6181 = request(string6180, "++(1)", [1], var_s);
          var string6182 = new GraceString("Comment");
          var opresult6183 = request(opresult6181, "++(1)", [1], string6182);
          var opresult6184 = request(opresult6183, "++(1)", [1], var_pb);
          var string6185 = new GraceString("(");
          var opresult6186 = request(opresult6184, "++(1)", [1], string6185);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6187 = selfRequest(this, "line", [0]);
          var opresult6188 = request(opresult6186, "++(1)", [1], call6187);
          var string6189 = new GraceString("\u2013");
          var opresult6190 = request(opresult6188, "++(1)", [1], string6189);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6191 = selfRequest(this, "endLine", [0]);
          var opresult6192 = request(opresult6190, "++(1)", [1], call6191);
          var string6193 = new GraceString("): \u2039");
          var opresult6194 = request(opresult6192, "++(1)", [1], string6193);
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6195 = selfRequest(this, "value", [0]);
          var opresult6196 = request(opresult6194, "++(1)", [1], call6195);
          var string6197 = new GraceString("\u203a");
          var opresult6198 = request(opresult6196, "++(1)", [1], string6197);
          return opresult6198;
        };    // end of method pretty(_)
        this.methods["pretty(1)"] = func6169;
        func6169.methodName = "pretty(1)";
        func6169.paramCounts = [1];
        func6169.paramNames = ["depth"];
        func6169.definitionLine = 3266;
        func6169.definitionModule = "ast";
        var func6199 = function(argcv, var_depth) {    // method toGrace(_), line 3274
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("toGrace(_)", 0, numArgs - 1);
          }
          var if6200 = GraceDone;
          setLineNumber(3277);    // compilenode member
          // call case 4: self request with 0 args and 0 typeArgs 
          var call6201 = selfRequest(this, "isPartialLine", [0]);
          if (Grace_isTrue(call6201)) {
            setLineNumber(3278);    // compilenode string
            var string6202 = new GraceString("// (partial) ");
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6203 = selfRequest(this, "value", [0]);
            var opresult6204 = request(string6202, "++(1)", [1], call6203);
            var string6205 = new GraceString("");
            var opresult6206 = request(opresult6204, "++(1)", [1], string6205);
            if6200 = opresult6206;
          } else {
            setLineNumber(3280);    // compilenode string
            var string6207 = new GraceString("    ");
            var prod6208 = request(string6207, "*(1)", [1], var_depth);
            var var_spc = prod6208;
            setLineNumber(3281);    // compilenode member
            // call case 4: self request with 0 args and 0 typeArgs 
            var call6210 = selfRequest(this, "value", [0]);
            if (var_lineLength === undefined) raiseUninitializedVariable("lineLength");
            if (var_spc === undefined) raiseUninitializedVariable("spc");
            var string6211 = new GraceString("// ");
            var opresult6212 = request(var_spc, "++(1)", [1], string6211);
            // call case 2: outer request
            var call6209 = selfRequest(importedModules["ast"], "wrap(1)to(1)prefixedBy(1)", [1, 1, 1], call6210, var_lineLength, opresult6212);
            if6200 = call6209;
          }
          return if6200;
        };    // end of method toGrace(_)
        this.methods["toGrace(1)"] = func6199;
        func6199.methodName = "toGrace(1)";
        func6199.paramCounts = [1];
        func6199.paramNames = ["depth"];
        func6199.definitionLine = 3274;
        func6199.definitionModule = "ast";
        var func6213 = function(argcv) {    // method shallowCopy, line 3284
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 0) && (numArgs !== 0)) {
              raiseTypeArgError("shallowCopy", 0, numArgs - 0);
          }
          setLineNumber(3285);    // compilenode call
          // call case 6: other requests
          if (var_nullNode === undefined) raiseUninitializedVariable("nullNode");
          // call case 6: other requests
          if (var_commentNode === undefined) raiseUninitializedVariable("commentNode");
          var call6215 = request(var_commentNode, "new(1)", [1], var_nullNode);
          var call6214 = request(call6215, "shallowCopyFieldsFrom(1)", [1], this);
          return call6214;
        };    // end of method shallowCopy
        this.methods["shallowCopy"] = func6213;
        func6213.methodName = "shallowCopy";
        func6213.paramCounts = [0];
        func6213.paramNames = [];
        func6213.definitionLine = 3284;
        func6213.definitionModule = "ast";
        var func6216 = function(argcv, var_other) {    // method postCopy(_), line 3287
          var returnTarget = invocationCount;
          invocationCount++;
          const numArgs = arguments.length - 1;
          if ((numArgs > 1) && (numArgs !== 1)) {
              raiseTypeArgError("postCopy(_)", 0, numArgs - 1);
          }
          setLineNumber(3288);    // compilenode member
          // call case 6: other requests
          var call6218 = request(var_other, "value", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6217 = selfRequest(this, "value:=(1)", [1], call6218);
          setLineNumber(3289);    // compilenode member
          // call case 6: other requests
          var call6220 = request(var_other, "isPartialLine", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6219 = selfRequest(this, "isPartialLine:=(1)", [1], call6220);
          setLineNumber(3290);    // compilenode member
          // call case 6: other requests
          var call6222 = request(var_other, "isPreceededByBlankLine", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6221 = selfRequest(this, "isPreceededByBlankLine:=(1)", [1], call6222);
          setLineNumber(3291);    // compilenode member
          // call case 6: other requests
          var call6224 = request(var_other, "endLine", [0]);
          // call case 4: self request with 1 args and 0 typeArgs 
          var call6223 = selfRequest(this, "endLine:=(1)", [1], call6224);
          return this;
        };    // end of method postCopy(_)
        this.methods["postCopy(1)"] = func6216;
        func6216.methodName = "postCopy(1)";
        func6216.paramCounts = [1];
        func6216.paramNames = ["other"];
        func6216.definitionLine = 3287;
        func6216.definitionModule = "ast";
        this.mutable = true;
        const overridenByAliases = { };
        for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
            const a = aliases[aix];
            const newNm = a.newName;
            const oldNm = a.oldName;
            overridenByAliases[newNm] = this.methods[newNm];
            const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
            m.definitionLine = 3241;
            m.definitionModule = "ast";
            this.methods[newNm] = m;
        }
        for (let exName in inheritedExclusions) {
            if (inheritedExclusions.hasOwnProperty(exName)) {
                if (inheritedExclusions[exName]) {
                    this.methods[exName] = inheritedExclusions[exName];
                } else {
                    delete this.methods[exName];
                }
            }
        }
        var obj6119_init = function() {    // init of object on line 3241
          initFun6120.call(this);
          setLineNumber(3243);    // compilenode string
          var string6225 = new GraceString("comment");
          this.data.kind = string6225;
          this.data.value = var_val__39__;
          this.data.isPartialLine = GraceFalse;
          this.data.isPreceededByBlankLine = GraceFalse;
          setLineNumber(3247);    // compilenode member
          // call case 6: other requests
          if (var_util === undefined) raiseUninitializedVariable("util");
          var call6226 = request(var_util, "linenum", [0]);
          this.data.endLine = call6226;
        };
        return obj6119_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
      };
      var obj6119_init = obj6119_build.call(inheritingObject, null, var_val__39__, this, aliases, exclusions);
      return obj6119_init;      // from compileBuildMethodFor(_)withObjCon(_)inside(_)
    };    // end of method new(_)$build(_,_,_)
    this.methods["new(1)$build(3)"] = func6118;
    func6118.methodName = "new(1)$build(3)";
    func6118.paramCounts = [1];
    func6118.paramNames = ["val'"];
    func6118.definitionLine = 3241;
    func6118.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 3240;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj6116_init = function() {    // init of object on line 3240
    };
    return obj6116_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj6116 = emptyGraceObject("commentNode", "ast", 3240);
  var obj6116_init = obj6116_build.call(obj6116, null, this, [], []);
  obj6116_init.call(obj6116);  // end of compileobject
  var var_commentNode = obj6116;
  var reader6227_commentNode = function() {  // reader method commentNode
      if (var_commentNode === undefined) raiseUninitializedVariable("commentNode");
      return var_commentNode;
  };
  reader6227_commentNode.isDef = true;
  this.methods["commentNode"] = reader6227_commentNode;
  setLineNumber(3474);    // compilenode object
  var obj6228_build = function(ignore, outerObj, aliases, exclusions) {
    this.closureKeys = this.closureKeys || [];
    this.closureKeys.push("outer_ast_3474");
    this.outer_ast_3474 = outerObj;
    const inheritedExclusions = { };
    for (var eix = 0, eLen = exclusions.length; eix < eLen; eix ++) {
        const exMeth = exclusions[eix];
        inheritedExclusions[exMeth] = this.methods[exMeth]; };
    setLineNumber(3475);    // reuse call
    var initFun6229 = selfRequest(importedModules["ast"], "baseVisitor$build(3)", [null], this, [], []);  // compileReuseCall
    var func6230 = function(argcv, var_c, var_ac) {    // method visitCall(_)up(_), line 3476
      var returnTarget = invocationCount;
      invocationCount++;
      const numArgs = arguments.length - 1;
      if ((numArgs > 2) && (numArgs !== 2)) {
          raiseTypeArgError("visitCall(_)up(_)", 0, numArgs - 2);
      }
      setLineNumber(3477);    // compilenode call
      // call case 6: other requests
      var call6231 = request(var_c, "isPattern:=(1)", [1], GraceTrue);
      return GraceTrue;
    };    // end of method visitCall(_)up(_)
    this.methods["visitCall(1)up(1)"] = func6230;
    func6230.methodName = "visitCall(1)up(1)";
    func6230.paramCounts = [1, 1];
    func6230.paramNames = ["c", "ac"];
    func6230.definitionLine = 3476;
    func6230.definitionModule = "ast";
    const overridenByAliases = { };
    for (let aix = 0, aLen = aliases.length; aix < aLen; aix ++) {
        const a = aliases[aix];
        const newNm = a.newName;
        const oldNm = a.oldName;
        overridenByAliases[newNm] = this.methods[newNm];
        const m = confidentialVersion(overridenByAliases[oldNm] || this.methods[oldNm], newNm);
        m.definitionLine = 3474;
        m.definitionModule = "ast";
        this.methods[newNm] = m;
    }
    for (let exName in inheritedExclusions) {
        if (inheritedExclusions.hasOwnProperty(exName)) {
            if (inheritedExclusions[exName]) {
                this.methods[exName] = inheritedExclusions[exName];
            } else {
                delete this.methods[exName];
            }
        }
    }
    var obj6228_init = function() {    // init of object on line 3474
      initFun6229.call(this);
    };
    return obj6228_init;   // from compileBuildAndInitFunctions(_)inMethod(_)
  };
  var obj6228 = emptyGraceObject("patternMarkVisitor", "ast", 3474);
  var obj6228_init = obj6228_build.call(obj6228, null, this, [], []);
  obj6228_init.call(obj6228);  // end of compileobject
  var var_patternMarkVisitor = obj6228;
  var reader6232_patternMarkVisitor = function() {  // reader method patternMarkVisitor
      if (var_patternMarkVisitor === undefined) raiseUninitializedVariable("patternMarkVisitor");
      return var_patternMarkVisitor;
  };
  reader6232_patternMarkVisitor.isDef = true;
  reader6232_patternMarkVisitor.confidential = true;
  this.methods["patternMarkVisitor"] = reader6232_patternMarkVisitor;
  return this;
}
if (typeof global !== "undefined")
  global.gracecode_ast = gracecode_ast;
if (typeof window !== "undefined")
  window.gracecode_ast = gracecode_ast;
gracecode_ast.imports = ["identifierKinds", "standardGrace", "util"];
gracecode_ast.definitionModule = "ast";
gracecode_ast.definitionLine = 1;
